{
    "github": {
        "github/version_sorter": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "bundle exec rake"
            }
        ],
        "github/markup": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "ruby/setup-ruby@ff740bc00a01b3a50fffc55a1071b1060eeae9dc"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 5,
                "name": "Install Perl dependencies",
                "run": "curl -1sLf \\\n  'https://dl.cloudsmith.io/public/nxadm-pkgs/rakudo-pkg/setup.deb.sh' \\\n  | sudo -E bash\nsudo apt-get update -qq\nsudo apt-get install perl rakudo-pkg\n\ncurl -L http://cpanmin.us | perl - --sudo App::cpanminus\nsudo cpanm --installdeps --notest Pod::Simple\n"
            },
            {
                "id": 6,
                "name": "Install Python dependencies",
                "run": "python -m pip install docutils"
            },
            {
                "id": 7,
                "name": "Run rake",
                "run": "export PATH=$PATH:/.perl6/bin:/opt/rakudo-pkg/bin\nbundle exec rake\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@f7176fd3007623b69d27091f9b9d4ab7995f0a06"
            }
        ],
        "github/email_reply_parser": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            }
        ],
        "github/gemoji": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "bundle exec rake"
            }
        ],
        "github/elastomer-client": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Cache Elasticsearch",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Download Elasticsearch",
                "run": "wget ${{ matrix.ES_DOWNLOAD_URL }}\ntar -xzf elasticsearch-*.tar.gz\n"
            },
            {
                "id": 5,
                "name": "Run Elasticsearch",
                "run": "./elasticsearch-${{ matrix.ES_VERSION }}/bin/elasticsearch -d"
            },
            {
                "id": 6,
                "name": "Run Elasticsearch",
                "run": "./elasticsearch-${{ matrix.ES_VERSION }}/bin/elasticsearch -d -Expack.security.enabled=false"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "gem install bundler"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "bundle install"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "script/poll-for-es"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "bundle exec rake test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "bundle exec rubocop"
            }
        ],
        "github/secure_headers": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Ruby ${{ matrix.ruby }}",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Build and test with Rake",
                "run": "gem install bundler\nbundle install --jobs 4 --retry 3 --without guard\nbundle exec rspec spec\nbundle exec rubocop\n"
            },
            {
                "id": 1,
                "name": "Calculate release name",
                "run": "GITHUB_REF=${{ github.ref }}\nRELEASE_NAME=${GITHUB_REF#\"refs/tags/\"}\necho \"RELEASE_NAME=${RELEASE_NAME}\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Publish release",
                "run": "actions/create-release@v1"
            }
        ],
        "github/platform-samples": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Create Combined PR",
                "run": "actions/github-script@v6"
            }
        ],
        "github/choosealicense.com": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "./script/cibuild"
            }
        ],
        "github/ruby": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "id"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "ruby/setup-ruby@ff740bc00a01b3a50fffc55a1071b1060eeae9dc"
            },
            {
                "id": 5,
                "name": "Run configure",
                "run": "../src/configure -C --enable-debug-env --disable-install-doc --with-ext=-test-/cxxanyargs,+ --without-valgrind --without-jemalloc --without-gmp --with-gcc=\"gcc-11 -fcf-protection -Wa,--generate-missing-build-notes=yes\" --enable-shared debugflags=-ggdb3 optflags=-O2 LDFLAGS=-Wl,-z,now\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "make showflags"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "make"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "make test-annocheck"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Request review based on files changes and/or groups the author belongs to",
                "run": "necojackarc/auto-request-review@e89da1a8cd7c8c16d9de9c6e763290b6b0e3d424"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "ruby/setup-ruby@ff740bc00a01b3a50fffc55a1071b1060eeae9dc"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup/ubuntu"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./configure --disable-install-doc"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "make all"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "make test"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 3,
                "name": "Set ENV",
                "run": "echo \"TODAY=$(date +%F)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Download previous gems list",
                "run": "data=bundled_gems.json\nmkdir -p .downloaded-cache\nln -s .downloaded-cache/$data .\ncurl -O -R -z ./$data https://stdgems.org/$data\n"
            },
            {
                "id": 5,
                "name": "Update bundled gems list",
                "run": "ruby -i~ tool/update-bundled_gems.rb gems/bundled_gems >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 6,
                "name": "Update spec/bundler/support/builders.rb",
                "run": "#!ruby\nrake_version = File.read(\"gems/bundled_gems\")[/^rake\\s+(\\S+)/, 1]\nprint ARGF.read.sub(/^ *def rake_version\\s*\\K\".*?\"/) {rake_version.dump}\n"
            },
            {
                "id": 7,
                "name": "Maintain updated gems list in NEWS",
                "run": "ruby tool/update-NEWS-gemlist.rb bundled\n"
            },
            {
                "id": 8,
                "name": "Check diffs",
                "run": "news= gems=\ngit diff --color --no-ext-diff --ignore-submodules --exit-code -- NEWS.md ||\nnews=true\ngit diff --color --no-ext-diff --ignore-submodules --exit-code -- gems/bundled_gems ||\ngems=true\ngit add -- NEWS.md gems/bundled_gems\ngit add -- spec/bundler/support/builders.rb\necho news=$news >> $GITHUB_OUTPUT\necho gems=$gems >> $GITHUB_OUTPUT\necho update=${news:-$gems} >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 9,
                "name": "Install libraries",
                "run": "./.github/actions/setup/ubuntu"
            },
            {
                "id": 10,
                "name": "Build",
                "run": "./autogen.sh\n./configure -C --disable-install-doc\nmake\n"
            },
            {
                "id": 11,
                "name": "Prepare bundled gems",
                "run": "make -s prepare-gems\n"
            },
            {
                "id": 12,
                "name": "Test bundled gems",
                "run": "make -s test-bundled-gems\n"
            },
            {
                "id": 13,
                "name": "Commit",
                "run": "git pull --ff-only origin ${GITHUB_REF#refs/heads/}\nmessage=\"Update bundled gems list\"\nif [ -z \"${gems}\" ]; then\n  git commit --message=\"${message} at ${GITHUB_SHA:0:30} [ci skip]\"\nelse\n  git commit --message=\"${message} as of ${TODAY}\"\nfi\ngit push origin ${GITHUB_REF#refs/heads/}\n"
            },
            {
                "id": 14,
                "name": "Step 14",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup/ubuntu"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup/macos"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "ruby/setup-ruby@ff740bc00a01b3a50fffc55a1071b1060eeae9dc"
            },
            {
                "id": 6,
                "name": "Run configure",
                "run": "./configure -C --disable-install-doc --disable-rubygems --with-gcc 'optflags=-O0' 'debugflags=-save-temps=obj -g'"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "make all golf"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "ruby tool/update-deps --fix"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "git diff --no-ext-diff --ignore-submodules --exit-code"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 3,
                "name": "Check if C-sources are US-ASCII",
                "run": "grep -r -n --include='*.[chyS]' --include='*.asm' $'[^\\t-~]' -- . && exit 1 || :\n"
            },
            {
                "id": 4,
                "name": "Check for trailing spaces",
                "run": "git grep -I -n $'[\\t ]$' -- '*.rb' '*.[chy]' '*.rs' '*.yml' && exit 1 || :\ngit grep -n $'^[\\t ][\\t ]*$' -- '*.md' && exit 1 || :\n"
            },
            {
                "id": 5,
                "name": "Check for bash specific substitution in configure.ac",
                "run": "git grep -n '\\${[A-Za-z_0-9]*/' -- configure.ac && exit 1 || :\n"
            },
            {
                "id": 6,
                "name": "Check for header macros",
                "run": "fail=\nfor header in ruby/*.h; do\n  git grep -l -F -e $header -e HAVE_`echo $header | tr a-z./ A-Z__` -- . > /dev/null && continue\n  fail=1\n  echo $header\ndone\nexit $fail\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": true
            },
            {
                "id": 8,
                "name": "Download previous gems list",
                "run": "data=default_gems.json\nmkdir -p .downloaded-cache\nln -s .downloaded-cache/$data .\ncurl -O -R -z ./$data https://stdgems.org/$data\n"
            },
            {
                "id": 9,
                "name": "Make default gems list",
                "run": "#!ruby\nrequire 'rubygems'\n$:.unshift \"lib\"\nrgver = File.foreach(\"lib/rubygems.rb\") do |line|\n  break $1 if /^\\s*VERSION\\s*=\\s*\"([^\"]+)\"/ =~ line\nend\ngems = Dir.glob(\"{ext,lib}/**/*.gemspec\").map do |f|\n  spec = Gem::Specification.load(f)\n  \"#{spec.name} #{spec.version}\"\nend.sort\nFile.open(\"gems/default_gems\", \"w\") do |f|\n  f.puts \"RubyGems #{rgver}\"\n  f.puts gems\nend\n"
            },
            {
                "id": 10,
                "name": "Maintain updated gems list in NEWS",
                "run": "ruby tool/update-NEWS-gemlist.rb default\n"
            },
            {
                "id": 11,
                "name": "Check diffs",
                "run": "git diff --color --no-ext-diff --ignore-submodules --exit-code NEWS.md ||\necho update=true >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 12,
                "name": "Commit",
                "run": "git pull --ff-only origin ${GITHUB_REF#refs/heads/}\ngit commit --message=\"Update default gems list at ${GITHUB_SHA:0:30} [ci skip]\" NEWS.md\ngit push origin ${GITHUB_REF#refs/heads/}\n"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Install libraries",
                "run": "./.github/actions/setup/macos"
            },
            {
                "id": 3,
                "name": "Install libraries",
                "run": "./.github/actions/setup/ubuntu"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 5,
                "name": "Remove an obsolete rubygems vendored file",
                "run": "sudo rm /usr/lib/ruby/vendor_ruby/rubygems/defaults/operating_system.rb"
            },
            {
                "id": 6,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 7,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 8,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 9,
                "name": "filter-sarif",
                "run": "advanced-security/filter-sarif@f3b8118a9349d88f7b1c0c488476411145b6270d"
            },
            {
                "id": 10,
                "name": "Upload SARIF",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "id"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 4,
                "name": "Run configure",
                "run": "../src/configure -C ${default_configure} ${append_configure} --${{\n  matrix.entry.crosshost && 'host' || 'with-gcc'\n}}=${{\n  matrix.entry.crosshost || '\"${default_cc}${append_cc:+ $append_cc}\"'\n}} --${{ matrix.entry.shared || 'enable' }}-shared\n"
            },
            {
                "id": 5,
                "name": "Add to ext/Setup",
                "run": "mkdir ext\ncd ext\nfor ext in {${{ matrix.entry.static-exts }}}; do\n  echo \"${ext}\"\ndone >> Setup\n"
            },
            {
                "id": 6,
                "name": "Clean up ext/Setup",
                "run": "gacts/run-and-post-run@7aec950f3b114c4fcf6012070c3709ecff0eb6f8"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "make showflags"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "make"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "make test"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "make install"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "make test-tool"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "make test-all TESTS='-- ruby -ext-'"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "make test-spec"
            },
            {
                "id": 14,
                "name": "Step 14",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Dependabot metadata",
                "run": "dependabot/fetch-metadata@5e5f99653a5b510e8555840e80cbf1514ad4af38"
            },
            {
                "id": 2,
                "name": "Wait for status checks",
                "run": "lewagon/wait-on-check-action@ccfb013c15c8afb7bf2b7c028fb74dc5a068cccc"
            },
            {
                "id": 3,
                "name": "Auto-merge for Dependabot PRs",
                "run": "gh pr merge --auto --rebase \"$PR_URL\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Install libraries",
                "run": "./.github/actions/setup/macos"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 4,
                "name": "make sure that kern.coredump=1",
                "run": "sysctl -n kern.coredump\nsudo sysctl -w kern.coredump=1\nsudo chmod -R +rwx /cores/\n"
            },
            {
                "id": 5,
                "name": "Run configure",
                "run": "../src/configure -C --disable-install-doc ${ruby_configure_args}"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "make prepare-gems"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "make"
            },
            {
                "id": 8,
                "name": "Set test options for skipped tests",
                "run": "set -x\nTESTS=\"$(echo \"${{ matrix.skipped_tests }}\" | sed 's| |$$/ -n!/|g;s|^|-n!/|;s|$|$$/|')\"\necho \"TESTS=${TESTS}\" >> $GITHUB_ENV\n"
            },
            {
                "id": 9,
                "name": "Set up Launchable",
                "run": "./.github/actions/launchable/setup"
            },
            {
                "id": 10,
                "name": "Set extra test options",
                "run": "echo \"TESTS=$TESTS ${{ matrix.test_opts }}\" >> $GITHUB_ENV"
            },
            {
                "id": 11,
                "name": "make ${{ matrix.test_task }}",
                "run": "ulimit -c unlimited\nmake -s ${{ matrix.test_task }} ${TESTS:+TESTS=\"$TESTS\"}\n"
            },
            {
                "id": 12,
                "name": "make skipped tests",
                "run": "make -s test-all TESTS=\"${TESTS//-n!\\//-n/}\"\n"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "./.github/actions/slack"
            },
            {
                "id": 14,
                "name": "Resolve job ID",
                "run": "actions/github-script@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Set up Ruby & MSYS2",
                "run": "ruby/setup-ruby@ff740bc00a01b3a50fffc55a1071b1060eeae9dc"
            },
            {
                "id": 2,
                "name": "where check",
                "run": "# show where\nmv /c/Windows/System32/libcrypto-1_1-x64.dll /c/Windows/System32/libcrypto-1_1-x64.dll_\nmv /c/Windows/System32/libssl-1_1-x64.dll    /c/Windows/System32/libssl-1_1-x64.dll_\nresult=true\nfor e in gcc.exe ragel.exe make.exe libcrypto-1_1-x64.dll libssl-1_1-x64.dll; do\n  echo ::group::$'\\033[93m'$e$'\\033[m'\n  where $e || result=false\n  echo ::endgroup::\ndone\n$result\n"
            },
            {
                "id": 3,
                "name": "version check",
                "run": "# show version\nresult=true\nfor e in gcc ragel make \"openssl version\"; do\n  case \"$e\" in *\" \"*) ;; *) e=\"$e --version\";; esac\n  echo ::group::$'\\033[93m'$e$'\\033[m'\n  $e || result=false\n  echo ::endgroup::\ndone\n$result\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 6,
                "name": "configure",
                "run": "../src/configure --disable-install-doc --prefix=/. --build=$CHOST --host=$CHOST --target=$CHOST\n"
            },
            {
                "id": 7,
                "name": "make all",
                "run": "make"
            },
            {
                "id": 8,
                "name": "make install",
                "run": "make DESTDIR=../install install-nodoc"
            },
            {
                "id": 9,
                "name": "test",
                "run": "make test"
            },
            {
                "id": 10,
                "name": "test-all",
                "run": "make ${{ StartsWith(matrix.test_task, 'test/') && matrix.test_task || 'test-all' }}\n"
            },
            {
                "id": 11,
                "name": "test-spec",
                "run": "make ${{ StartsWith(matrix.test_task, 'spec/') && matrix.test_task || 'test-spec' }}\n"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "./src/.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup/ubuntu"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 4,
                "name": "Run configure",
                "run": "../src/configure -C --disable-install-doc cppflags=-DRUBY_DEBUG"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "make"
            },
            {
                "id": 6,
                "name": "make ${{ matrix.test_task }}",
                "run": "make -s ${{ matrix.test_task }} RUN_OPTS=\"$RUN_OPTS\" SPECOPTS=\"$SPECOPTS\""
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@ff740bc00a01b3a50fffc55a1071b1060eeae9dc"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup/ubuntu"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 5,
                "name": "Run configure",
                "run": "../src/configure -C --disable-install-doc --prefix=$(pwd)/install --enable-yjit=dev_nodebug"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "make"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "make install"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "make ${{ matrix.task }}"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "git diff --exit-code"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup/ubuntu"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 4,
                "name": "Run configure",
                "run": "$SETARCH ../src/configure -C --disable-install-doc cppflags=-DRUBY_DEBUG ${arch:+--target=$arch-$OSTYPE --host=$arch-$OSTYPE}"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "$SETARCH make"
            },
            {
                "id": 6,
                "name": "make test",
                "run": "$SETARCH make -s test RUN_OPTS=\"$RUN_OPTS\"\n"
            },
            {
                "id": 7,
                "name": "make test-all",
                "run": "$SETARCH make -s test-all RUN_OPTS=\"$RUN_OPTS\"\n"
            },
            {
                "id": 8,
                "name": "make test-spec",
                "run": "$SETARCH make -s test-spec RUN_OPTS=\"$RUN_OPTS\"\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "ruby/setup-ruby@ff740bc00a01b3a50fffc55a1071b1060eeae9dc"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "gem install webrick"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "ruby ../mspec/bin/mspec"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup/ubuntu"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "ruby/setup-ruby@ff740bc00a01b3a50fffc55a1071b1060eeae9dc"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 5,
                "name": "Run configure",
                "run": "$SETARCH ../src/configure -C --disable-install-doc ${configure:-cppflags=-DRUBY_DEBUG} ${arch:+--target=$arch-$OSTYPE --host=$arch-$OSTYPE}"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "$SETARCH make prepare-gems"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "$SETARCH make"
            },
            {
                "id": 8,
                "name": "Set test options for skipped tests",
                "run": "set -x\nTESTS=\"$(echo \"${{ matrix.skipped_tests }}\" | sed 's| |$$/ -n!/|g;s|^|-n!/|;s|$|$$/|')\"\necho \"TESTS=${TESTS}\" >> $GITHUB_ENV\n"
            },
            {
                "id": 9,
                "name": "Set up Launchable",
                "run": "./.github/actions/launchable/setup"
            },
            {
                "id": 10,
                "name": "make ${{ matrix.test_task }}",
                "run": "$SETARCH make -s ${{ matrix.test_task }} ${TESTS:+TESTS=\"$TESTS\"} ${{ !contains(matrix.test_task, 'bundle') && 'RUBYOPT=-w' || '' }}"
            },
            {
                "id": 11,
                "name": "make skipped tests",
                "run": "$SETARCH make -s test-all TESTS=\"${TESTS//-n!\\//-n/}\"\n"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 3,
                "name": "Install libraries",
                "run": "set -ex\nsudo apt-get update -q || :\nsudo apt-get install --no-install-recommends -q -y ruby make autoconf git wget\n\nwasi_sdk_deb=\"wasi-sdk_${WASI_SDK_VERSION_MAJOR}.${WASI_SDK_VERSION_MINOR}_amd64.deb\"\nwget \"https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_SDK_VERSION_MAJOR}/${wasi_sdk_deb}\"\nsudo dpkg -i \"$wasi_sdk_deb\"\nrm -f \"$wasi_sdk_deb\"\n\nmkdir build-sdk\npushd build-sdk\n\nwasmtime_url=\"https://github.com/bytecodealliance/wasmtime/releases/download/${WASMTIME_VERSION}/wasmtime-${WASMTIME_VERSION}-x86_64-linux.tar.xz\"\nwget -O - \"$wasmtime_url\" | tar xJf -\nsudo ln -fs \"$PWD/wasmtime-${WASMTIME_VERSION}-x86_64-linux/wasmtime\" /usr/local/bin/wasmtime\n\nbinaryen_tarball=\"binaryen-version_${BINARYEN_VERSION}-x86_64-linux.tar.gz\"\nbinaryen_url=\"https://github.com/WebAssembly/binaryen/releases/download/version_${BINARYEN_VERSION}/${binaryen_tarball}\"\nwget -O - \"$binaryen_url\" | tar xfz -\nsudo ln -fs \"$PWD/binaryen-version_${BINARYEN_VERSION}/bin/wasm-opt\" /usr/local/bin/wasm-opt\n"
            },
            {
                "id": 4,
                "name": "Set ENV",
                "run": "echo \"WASI_SDK_PATH=/opt/wasi-sdk\" >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "ruby/setup-ruby@ff740bc00a01b3a50fffc55a1071b1060eeae9dc"
            },
            {
                "id": 6,
                "name": "Build baseruby",
                "run": "set -ex\nmkdir ../baseruby\npushd ../baseruby\n../src/configure --prefix=$PWD/install\nmake\nmake install\n"
            },
            {
                "id": 7,
                "name": "Run configure",
                "run": "../src/configure \\\n  --host wasm32-unknown-wasi \\\n  --with-baseruby=$PWD/../baseruby/install/bin/ruby \\\n  --with-static-linked-ext \\\n  --with-ext=cgi/escape,continuation,coverage,date,digest/bubblebabble,digest,digest/md5,digest/rmd160,digest/sha1,digest/sha2,etc,fcntl,json,json/generator,json/parser,objspace,pathname,rbconfig/sizeof,ripper,stringio,strscan,monitor \\\n  LDFLAGS=\" \\\n    -Xlinker --stack-first \\\n    -Xlinker -z -Xlinker stack-size=16777216 \\\n  \" \\\n  optflags=\"${{ matrix.entry.optflags }}\" \\\n  debugflags=\"${{ matrix.entry.debugflags }}\" \\\n  wasmoptflags=\"${{ matrix.entry.wasmoptflags }} ${{ matrix.entry.debugflags }}\"\n"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "make mini ruby"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "make install DESTDIR=$PWD/../install"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "tar cfz ../install.tar.gz -C ../install ."
            },
            {
                "id": 11,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 12,
                "name": "Show Playground URL to try the build",
                "run": "echo \"Try on Playground: https://ruby.github.io/play-ruby?run=$GITHUB_RUN_ID\" >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 13,
                "name": "Run basictest",
                "run": "wasmtime run ./../build/miniruby --mapdir /::./ -- basictest/test.rb"
            },
            {
                "id": 14,
                "name": "Run bootstraptest (no thread)",
                "run": "NO_THREAD_TESTS=\"$(grep -L Thread -R ./bootstraptest | awk -F/ '{ print $NF }' | uniq | sed -n 's/test_\\(.*\\).rb/\\1/p' | paste -s -d, -)\"\nruby ./bootstraptest/runner.rb --ruby=\"$(which wasmtime) run $PWD/../build/ruby --mapdir /::./ -- \" --verbose \"--sets=$NO_THREAD_TESTS\"\n"
            },
            {
                "id": 15,
                "name": "Step 15",
                "run": "./.github/actions/slack"
            },
            {
                "id": 16,
                "name": "Save Pull Request number",
                "run": "echo \"${{ github.event.pull_request.number }}\" >> ${{ github.workspace }}/github-pr-info.txt"
            },
            {
                "id": 17,
                "name": "Step 17",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "md build"
            },
            {
                "id": 2,
                "name": "find tools",
                "run": "::- find needed tools\nset NEEDS=\nfor %%I in (%NEEDED_TOOLS%) do if \"%%~$PATH:I\" == \"\" (\n  call set NEEDS=%%NEEDS%% %%~nI\n) else (\n  echo %%I: %%~$PATH:I\n)\necho.needs=%NEEDS%>>%GITHUB_OUTPUT%\nif \"%NEEDS%\" == \"\" (\n  echo [debug] All needed tools found\n) else (\n  echo [warning^]Needs%NEEDS%\n)\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "msys2/setup-msys2@d40200dc2db4c351366b048a9565ad82919e1c24"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "ruby/setup-ruby@ff740bc00a01b3a50fffc55a1071b1060eeae9dc"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 7,
                "name": "Install libraries with vcpkg",
                "run": "vcpkg --triplet x64-windows install gmp libffi libyaml openssl zlib\n"
            },
            {
                "id": 8,
                "name": "Install libraries with scoop",
                "run": "iex \"& {$(irm get.scoop.sh)} -RunAsAdmin\"\nJoin-Path (Resolve-Path ~).Path \"scoop\\shims\" >> $Env:GITHUB_PATH\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 11,
                "name": "setup env",
                "run": "set VS=${{ matrix.vs }}\nset VCVARS=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\%VS%\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat\"\nif not exist %VCVARS% set VCVARS=\"C:\\Program Files\\Microsoft Visual Studio\\%VS%\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat\"\nset | C:\\msys64\\usr\\bin\\sort > old.env\ncall %VCVARS% ${{ matrix.vcvars || '' }}\nnmake -f nul\nset TMP=%USERPROFILE%\\AppData\\Local\\Temp\nset TEMP=%USERPROFILE%\\AppData\\Local\\Temp\nset MAKEFLAGS=l\nset /a TEST_JOBS=(15 * %NUMBER_OF_PROCESSORS% / 10) > nul\nset | C:\\msys64\\usr\\bin\\sort > new.env\nC:\\msys64\\usr\\bin\\comm -13 old.env new.env >> %GITHUB_ENV%\ndel *.env\n"
            },
            {
                "id": 12,
                "name": "baseruby version",
                "run": "ruby -v"
            },
            {
                "id": 13,
                "name": "compiler version",
                "run": "cl"
            },
            {
                "id": 14,
                "name": "link libraries",
                "run": "for %%I in (C:\\vcpkg\\installed\\x64-windows\\bin\\*.dll) do (\n  if not %%~nI == readline mklink %%~nxI %%I\n)\n"
            },
            {
                "id": 15,
                "name": "disable system OpenSSL",
                "run": "for %%I in (libcrypto-1_1-x64 libssl-1_1-x64) do (\n  ren c:\\Windows\\System32\\%%I.dll %%I.dll_\n)\n"
            },
            {
                "id": 16,
                "name": "Configure",
                "run": "../src/win32/configure.bat --disable-install-doc --with-opt-dir=C:/vcpkg/installed/x64-windows"
            },
            {
                "id": 17,
                "name": "Step 17",
                "run": "nmake incs"
            },
            {
                "id": 18,
                "name": "Step 18",
                "run": "nmake extract-extlibs"
            },
            {
                "id": 19,
                "name": "Step 19",
                "run": "nmake extract-gems"
            },
            {
                "id": 20,
                "name": "Step 20",
                "run": "nmake"
            },
            {
                "id": 21,
                "name": "Step 21",
                "run": "nmake test"
            },
            {
                "id": 22,
                "name": "Step 22",
                "run": "nmake test-spec"
            },
            {
                "id": 23,
                "name": "Step 23",
                "run": "nmake test-all"
            },
            {
                "id": 24,
                "name": "Step 24",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "RUST_BACKTRACE=1 cargo test"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "RUST_BACKTRACE=1 cargo test --all-features"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo build --release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Install libraries",
                "run": "./.github/actions/setup/macos"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 4,
                "name": "Run configure",
                "run": "../src/configure -C --disable-install-doc ${{ matrix.configure }}"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "make prepare-gems"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "make"
            },
            {
                "id": 7,
                "name": "Enable YJIT through ENV",
                "run": "echo \"RUBY_YJIT_ENABLE=1\" >> $GITHUB_ENV"
            },
            {
                "id": 8,
                "name": "Set test options for skipped tests",
                "run": "set -x\nTESTS=\"$(echo \"${{ matrix.skipped_tests }}\" | sed 's| |$$/ -n!/|g;s|^|-n!/|;s|$|$$/|')\"\necho \"TESTS=${TESTS}\" >> $GITHUB_ENV\n"
            },
            {
                "id": 9,
                "name": "Set up Launchable",
                "run": "./.github/actions/launchable/setup"
            },
            {
                "id": 10,
                "name": "make ${{ matrix.test_task }}",
                "run": "make -s ${{ matrix.test_task }} ${TESTS:+TESTS=\"$TESTS\"} RUN_OPTS=\"$RUN_OPTS\" SPECOPTS=\"$SPECOPTS\""
            },
            {
                "id": 11,
                "name": "make skipped tests",
                "run": "make -s test-all TESTS=\"${TESTS//-n!\\//-n/}\"\n"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "RUST_BACKTRACE=1 cargo test"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "RUST_BACKTRACE=1 cargo test --all-features"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo build --release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "cargo clippy --all-targets --all-features"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup/ubuntu"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "ruby/setup-ruby@ff740bc00a01b3a50fffc55a1071b1060eeae9dc"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/setup/directories"
            },
            {
                "id": 5,
                "name": "Install Rust",
                "run": "rustup install ${{ matrix.rust_version }} --profile minimal"
            },
            {
                "id": 6,
                "name": "Run configure",
                "run": "../src/configure -C --disable-install-doc --prefix=$(pwd)/install ${{ matrix.configure }}"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "make incs"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "make prepare-gems"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "make"
            },
            {
                "id": 10,
                "name": "Enable YJIT through ENV",
                "run": "echo \"RUBY_YJIT_ENABLE=1\" >> $GITHUB_ENV"
            },
            {
                "id": 11,
                "name": "Check YJIT enabled",
                "run": "./miniruby --yjit -v | grep \"+YJIT\""
            },
            {
                "id": 12,
                "name": "Set up Launchable",
                "run": "./.github/actions/launchable/setup"
            },
            {
                "id": 13,
                "name": "make ${{ matrix.test_task }}",
                "run": "make -s ${{ matrix.test_task }} ${TESTS:+TESTS=\"$TESTS\"} RUN_OPTS=\"$RUN_OPTS\" MSPECOPT=--debug SPECOPTS=\"$SPECOPTS\" YJIT_BENCH_OPTS=\"$YJIT_BENCH_OPTS\" YJIT_BINDGEN_DIFF_OPTS=\"$YJIT_BINDGEN_DIFF_OPTS\""
            },
            {
                "id": 14,
                "name": "Show ${{ github.event.pull_request.base.ref }} GitHub URL for yjit-bench comparison",
                "run": "echo \"https://github.com/${BASE_REPO}/commit/${BASE_SHA}\""
            },
            {
                "id": 15,
                "name": "Step 15",
                "run": "./.github/actions/slack"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "exit 1"
            }
        ],
        "github/pages-gem": [
            {
                "id": 1,
                "name": "Checkout Repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 3,
                "name": "Log in to the Container registry",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Get Docker Metadata",
                "run": "docker/metadata-action@v5"
            },
            {
                "id": 5,
                "name": "Build Docker Image and Push to Container Registry",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Build gem",
                "run": "gem build github-pages.gemspec\n"
            },
            {
                "id": 4,
                "name": "Publish gem",
                "run": "gem push github-pages-*.gem\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "script/cibuild-docker",
                "run": "script/cibuild-docker"
            }
        ],
        "github/government.github.com": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Build and test site",
                "run": "bundle exec rake test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Ensure Orgs are sorted",
                "run": "bundle exec script/alphabetize\ngit diff --color --exit-code\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Ensure data entries are GitHub Orgs",
                "run": "bundle exec script/ensure-orgs"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Ensure Orgs are unique",
                "run": "bundle exec script/ensure-unique"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Rubocop",
                "run": "bundle exec rubocop -D -S"
            }
        ],
        "github/training-kit": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Checkout Repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Dependency Review",
                "run": "actions/dependency-review-action@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Node",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install node modules",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@ece82769428359c077b5a5eaff268902a303c101"
            },
            {
                "id": 5,
                "name": "Set up Pages",
                "run": "actions/configure-pages@v2"
            },
            {
                "id": 6,
                "name": "Build and test with Rake",
                "run": "bundle exec rake"
            },
            {
                "id": 7,
                "name": "Build with Jekyll",
                "run": "bundle exec jekyll build --baseurl \"${{ steps.pages.outputs.base_path }}\""
            },
            {
                "id": 8,
                "name": "Upload artifact",
                "run": "actions/upload-pages-artifact@v1"
            },
            {
                "id": 1,
                "name": "Deploy to GitHub Pages",
                "run": "actions/deploy-pages@v1"
            }
        ],
        "github/scientist": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "bundle exec rake"
            }
        ]
    },
    "TheAlgorithms": {
        "TheAlgorithms/Python": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip setuptools six wheel\npython -m pip install pytest-cov -r requirements.txt\n"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "pytest --ignore=quantum/q_fourier_transform.py --ignore=project_euler/ --ignore=scripts/validate_solutions.py --cov-report=term-missing:skip-covered --cov=. ."
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "scripts/build_directory_md.py 2>&1 | tee DIRECTORY.md"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Write DIRECTORY.md",
                "run": "scripts/build_directory_md.py 2>&1 | tee DIRECTORY.md\ngit config --global user.name \"$GITHUB_ACTOR\"\ngit config --global user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "git add DIRECTORY.md\ngit commit -am \"updating DIRECTORY.md\" ||  true\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install pytest and pytest-cov",
                "run": "python -m pip install --upgrade pip\npython -m pip install --upgrade numpy pytest pytest-cov\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pytest --doctest-modules --cov-report=term-missing:skip-covered --cov=project_euler/ project_euler/"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install pytest and requests",
                "run": "python -m pip install --upgrade pip\npython -m pip install --upgrade numpy pytest requests\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pytest scripts/validate_solutions.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pip install --user ruff"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "ruff check --output-format=github ."
            }
        ],
        "TheAlgorithms/C": [
            {
                "id": 1,
                "name": "Add \"approved\" label when approved",
                "run": "pullreminders/label-when-approved-action@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "requirements",
                "run": "sudo apt-get -qq update\nsudo apt-get -qq install clang-tidy clang-format\n"
            },
            {
                "id": 4,
                "name": "Setup Git Specs",
                "run": "git config --global user.name github-actions[bot]\ngit config --global user.email 'github-actions@users.noreply.github.com'\n"
            },
            {
                "id": 5,
                "name": "Filename Formatter",
                "run": "TheAlgorithms/scripts/formatter@main"
            },
            {
                "id": 6,
                "name": "Get file changes",
                "run": "git branch\ngit diff --diff-filter=dr --name-only origin/master > git_diff.txt\necho \"Files changed-- `cat git_diff.txt`\"\n"
            },
            {
                "id": 7,
                "name": "Configure for static lint checks",
                "run": "cmake -B build -S . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
            },
            {
                "id": 8,
                "name": "Lint modified files",
                "run": "python3 scripts/file_linter.py"
            },
            {
                "id": 9,
                "name": "Commit and push changes",
                "run": "git diff DIRECTORY.md\ngit commit -am \"clang-format and clang-tidy fixes for ${GITHUB_SHA::8}\" || true\ngit push origin HEAD:$GITHUB_REF || true\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "cmake -B ./build -S .\ncmake --build build --config Release\n"
            },
            {
                "id": 3,
                "name": "Label on PR fail",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Build directory",
                "run": "TheAlgorithms/scripts/directory_md@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install requirements",
                "run": "brew install graphviz ninja doxygen\n"
            },
            {
                "id": 3,
                "name": "configure",
                "run": "cmake -G Ninja -B ./build -S ."
            },
            {
                "id": 4,
                "name": "build",
                "run": "cmake --build build -t doc"
            },
            {
                "id": 5,
                "name": "gh-pages",
                "run": "actions/checkout@v3"
            },
            {
                "id": 6,
                "name": "Move & Commit files",
                "run": "git config --global user.name github-actions\ngit config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\nrm -rf d* && rm *.html && rm *.svg && rm *.map && rm *.md5 && rm *.png && rm *.js && rm *.css\ngit add .\ncp -rp ./build/html/* . && rm -rf ./build && ls -lah\ngit add .\ngit commit -m \"Documentation for $GITHUB_SHA\" ||  true\ngit push --force || true\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/labeler@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Add python dependencies",
                "run": "pip install requests\n"
            },
            {
                "id": 4,
                "name": "Write LeetCode DIRECTORY.md",
                "run": "python3 scripts/leetcode_directory_md.py 2>&1 | tee leetcode/DIRECTORY.md\n"
            },
            {
                "id": 5,
                "name": "Setup Git configurations",
                "run": "git config --global user.name github-actions[bot]\ngit config --global user.email 'github-actions@users.noreply.github.com'\n"
            },
            {
                "id": 6,
                "name": "Committing changes",
                "run": "git checkout -b leetcode-directory-${{ github.sha }}\ngit commit -m \"docs: updating `leetcode/DIRECTORY.md`\"\ngit push origin leetcode-directory-${{ github.sha }}:leetcode-directory-${{ github.sha }}\n"
            },
            {
                "id": 7,
                "name": "Creating the pull request",
                "run": "if [[ $(git log --branches --not --remotes) ]]; then\n  gh pr create --base ${GITHUB_REF##*/} --head leetcode-directory-${{ github.sha }} --title 'docs: updating `leetcode/DIRECTORY.md`' --body 'Updated LeetCode directory (see the diff. for changes).' || true\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v4"
            }
        ],
        "TheAlgorithms/C-Plus-Plus": [
            {
                "id": 1,
                "name": "Add \"approved\" label when approved",
                "run": "pullreminders/label-when-approved-action@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "requirements",
                "run": "sudo apt-get -qq update\nsudo apt-get -qq install clang-tidy clang-format\n"
            },
            {
                "id": 4,
                "name": "Setup Git Specs",
                "run": "git config --global user.name github-actions[bot]\ngit config --global user.email 'github-actions[bot]@users.noreply.github.com'\n"
            },
            {
                "id": 5,
                "name": "Filename Formatter",
                "run": "wget https://raw.githubusercontent.com/TheAlgorithms/scripts/main/filename_formatter.sh\nchmod +x filename_formatter.sh\n./filename_formatter.sh . .cpp,.hpp\n"
            },
            {
                "id": 6,
                "name": "Get file changes",
                "run": "git branch\ngit diff --diff-filter=dr --name-only origin/master > git_diff.txt\necho \"Files changed-- `cat git_diff.txt`\"\n"
            },
            {
                "id": 7,
                "name": "Configure for static lint checks",
                "run": "cmake -B build -S . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
            },
            {
                "id": 8,
                "name": "Lint modified files",
                "run": "python3 scripts/file_linter.py"
            },
            {
                "id": 9,
                "name": "Commit and push changes",
                "run": "git diff DIRECTORY.md\ngit commit -am \"clang-format and clang-tidy fixes for ${GITHUB_SHA::8}\" || true\ngit push origin HEAD:$GITHUB_REF || true\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "cmake -B ./build -S .\ncmake --build build\n"
            },
            {
                "id": 3,
                "name": "Label on PR fail",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build directory",
                "run": "TheAlgorithms/scripts/directory_md@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install requirements",
                "run": "brew install graphviz ninja doxygen\n"
            },
            {
                "id": 3,
                "name": "configure",
                "run": "cmake -G Ninja -B ./build -S ."
            },
            {
                "id": 4,
                "name": "build",
                "run": "cmake --build build -t doc"
            },
            {
                "id": 5,
                "name": "gh-pages",
                "run": "actions/checkout@v4"
            },
            {
                "id": 6,
                "name": "Move & Commit files",
                "run": "git config --global user.name github-actions\ngit config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\nrm -rf d* && rm *.html && rm *.svg && rm *.map && rm *.md5 && rm *.png && rm *.js && rm *.css\ngit add .\ncp -rp ./build/html/* . && rm -rf ./build && ls -lah\ngit add .\ngit commit -m \"Documentation for $GITHUB_SHA\" ||  true\ngit push --force || true\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v4"
            }
        ],
        "TheAlgorithms/Scala": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Setup Git Specs",
                "run": "git config --global user.name \"$GITHUB_ACTOR\"\ngit config --global user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "import os\nfrom typing import Iterator\nURL_BASE = \"https://github.com/TheAlgorithms/Scala/blob/master\"\ng_output = []\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    fs_exts = tuple(\".scala\".split())\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() in fs_exts:\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"# List of all files\\n\" + \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 5,
                "name": "Commit DIRECTORY.md",
                "run": "git commit -m \"updating DIRECTORY.md\" DIRECTORY.md ||  true\ngit diff DIRECTORY.md\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/Java": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn --batch-mode --update-snapshots verify"
            },
            {
                "id": 4,
                "name": "Upload coverage to codecov (tokenless)",
                "run": "codecov/codecov-action@v4"
            },
            {
                "id": 5,
                "name": "Upload coverage to codecov (with token)",
                "run": "codecov/codecov-action@v4"
            },
            {
                "id": 6,
                "name": "Checkstyle",
                "run": "mvn checkstyle:check"
            },
            {
                "id": 7,
                "name": "SpotBugs",
                "run": "mvn spotbugs:check"
            },
            {
                "id": 8,
                "name": "PMD",
                "run": "mvn pmd:check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "DoozyX/clang-format-lint-action@v0.17"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "mvn --batch-mode --update-snapshots verify"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v9"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Update Directory",
                "run": "import os\nfrom typing import Iterator\n\nURL_BASE = \"https://github.com/TheAlgorithms/Java/blob/master\"\ng_output = []\n\n\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() == \".java\":\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\n\n\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\n\n\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    mid_diff = False\n    new_parts = new_path.split(os.sep)\n    for i, new_part in enumerate(new_parts):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part or mid_diff:\n            if i + 1 < len(new_parts):\n                mid_diff = True\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ')}\")\n    return new_path\n\n\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(top_dir), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \"))[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"\\n\".join(g_output)\n\n\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "cat DIRECTORY.md\ngit config --global user.name \"$GITHUB_ACTOR\"\ngit config --global user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\ngit add DIRECTORY.md\ngit commit -am \"Update directory\" ||  true\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/Ruby": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "rake test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@master"
            },
            {
                "id": 3,
                "name": "update_directory_md",
                "run": "import os\nfrom typing import Iterator\nURL_BASE = \"https://github.com/TheAlgorithms/Ruby/blob/master\"\ng_output = []\n\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() == \".rb\":\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\n\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\n\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\n\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "cat DIRECTORY.md\ngit config --global user.name \"$GITHUB_ACTOR\"\ngit config --global user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\ngit add DIRECTORY.md\ngit commit -am \"updating DIRECTORY.md\" ||  true\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/C-Sharp": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup .NET SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 3,
                "name": "Restore",
                "run": "dotnet restore"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "dotnet build --no-restore"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "dotnet test --no-restore --collect \"XPlat Code Coverage\""
            },
            {
                "id": 6,
                "name": "Upload coverage to codecov (tokenless)",
                "run": "codecov/codecov-action@v4"
            },
            {
                "id": 7,
                "name": "Upload coverage to codecov (with token)",
                "run": "codecov/codecov-action@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v4"
            }
        ],
        "TheAlgorithms/Go": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Go",
                "run": "actions/setup-go@v5"
            },
            {
                "id": 3,
                "name": "Run Golang CI Lint",
                "run": "golangci/golangci-lint-action@v3"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "go test ./..."
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "codespell-project/actions-codespell@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Go",
                "run": "actions/setup-go@v3"
            },
            {
                "id": 3,
                "name": "Checkout branch",
                "run": "git fetch origin master:master\n"
            },
            {
                "id": 4,
                "name": "Install citk tool",
                "run": "go install github.com/tjgurwara99/citk@latest\n"
            },
            {
                "id": 5,
                "name": "Run citk tool",
                "run": "citk check -l go -b master\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-go@v5"
            },
            {
                "id": 3,
                "name": "Install GoDocMD",
                "run": "go install github.com/tjgurwara99/godocmd@v0.1.3\n"
            },
            {
                "id": 4,
                "name": "Configure Github Action",
                "run": "git config --global user.name \"$GITHUB_ACTOR\"\ngit config --global user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n"
            },
            {
                "id": 5,
                "name": "Update README.md file",
                "run": "godocmd -r -module ./ -w\n"
            },
            {
                "id": 6,
                "name": "Commit changes if README.md is different",
                "run": "if [[ `git status --porcelain` ]]; then\n  git commit -am \"Updated Documentation in README.md\"\n  git push\nelse\n  echo \"NO CHANGES DETECTED\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Go",
                "run": "actions/setup-go@v5"
            },
            {
                "id": 3,
                "name": "Generate code coverage",
                "run": "go test -coverprofile=\"${{ env.REPORT_NAME }}\" ./...\n"
            },
            {
                "id": 4,
                "name": "Upload coverage to codecov (tokenless)",
                "run": "codecov/codecov-action@v4"
            },
            {
                "id": 5,
                "name": "Upload coverage to codecov (with token)",
                "run": "codecov/codecov-action@v4"
            }
        ],
        "TheAlgorithms/JavaScript": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "\ud83d\udce6 Install dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "\ud83e\uddea Run all tests",
                "run": "npm run test"
            },
            {
                "id": 5,
                "name": "\ud83d\udc84 Code style",
                "run": "npm run check-style"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "codespell-project/actions-codespell@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "\ud83d\udce6 Install dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "\ud83d\uddc4\ufe0f Create Directory from JS files",
                "run": "node .github/workflows/UpdateDirectory.js"
            },
            {
                "id": 5,
                "name": "Configure Github Action",
                "run": "git config --global user.name \"$GITHUB_ACTOR\"\ngit config --global user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n"
            },
            {
                "id": 6,
                "name": "\ud83e\udd13 Commit & push new Directory (if needed)",
                "run": "if [[ `git status --porcelain` ]]; then\n  git commit -am \"Updated Documentation in README.md\"\n  git push\nelse\n  echo \"NO CHANGES DETECTED\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Generate coverage report",
                "run": "npm test -- --coverage"
            },
            {
                "id": 5,
                "name": "Upload coverage to codecov",
                "run": "codecov/codecov-action@v3"
            }
        ],
        "TheAlgorithms/Algorithms-Explanation": [
            {
                "id": 1,
                "name": "Add \"approved\" label when approved",
                "run": "pullreminders/label-when-approved-action@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "python3 -m pip install codespell"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "codespell ./en/"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Check links",
                "run": "lycheeverse/lychee-action@v1.9.3"
            }
        ],
        "TheAlgorithms/MATLAB-Octave": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Setup Git Specs",
                "run": "git config --global user.name github-actions\ngit config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "import os\nfrom typing import Iterator\nURL_BASE = \"https://github.com/TheAlgorithms/MATLAB-Octave/blob/master\"\ng_output = []\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    fs_exts = tuple(\".m\".split())\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() in fs_exts:\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"# List of all files\\n\" + \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 5,
                "name": "Commit DIRECTORY.md",
                "run": "git commit -m \"updating DIRECTORY.md\" DIRECTORY.md ||  true\ngit diff DIRECTORY.md\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/Rust": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "cargo fmt",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "cargo clippy",
                "run": "cargo clippy --all --all-targets -- -D warnings"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "cargo test",
                "run": "cargo test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Setup Git Specs",
                "run": "git config --global user.name \"$GITHUB_ACTOR\"\ngit config --global user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "cargo run --manifest-path=.github/workflows/scripts/build_directory/Cargo.toml\n"
            },
            {
                "id": 5,
                "name": "Commit DIRECTORY.md",
                "run": "git add DIRECTORY.md\ngit commit -m \"Update DIRECTORY.md [skip actions]\" ||  true\ngit push origin HEAD:$GITHUB_REF || true\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v9"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "taiki-e/install-action@cargo-llvm-cov"
            },
            {
                "id": 3,
                "name": "Generate code coverage",
                "run": "cargo llvm-cov --all-features --workspace --lcov --output-path \"${{ env.REPORT_NAME }}\"\n"
            },
            {
                "id": 4,
                "name": "Upload coverage to codecov (tokenless)",
                "run": "codecov/codecov-action@v4"
            },
            {
                "id": 5,
                "name": "Upload coverage to codecov (with token)",
                "run": "codecov/codecov-action@v4"
            }
        ],
        "TheAlgorithms/R": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Git configuration",
                "run": "git config --global user.name 'autoprettier'\ngit config --global user.email 'actions@github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 3,
                "name": "Filename Formatter",
                "run": "IFS=$'\\n'\nfor fname in `find . -type f -name '*.R' -o -name '*.R'`\ndo\n  echo \"${fname}\"\n  new_fname=`echo ${fname} | tr ' ' '_'`\n  echo \"      ${new_fname}\"\n  new_fname=`echo ${new_fname} | tr 'A-Z' 'a-z'`\n  echo \"      ${new_fname}\"\n  new_fname=`echo ${new_fname} | tr '-' '_'`\n  echo \"      ${new_fname}\"\n  if [ ${fname} != ${new_fname} ]\n  then\n    echo \"      ${fname} --> ${new_fname}\"\n    git \"mv\" \"${fname}\" ${new_fname}\n  fi\ndone\ngit commit -am \"Formatting filenames ${GITHUB_SHA::8}\" || true\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "wget https://raw.githubusercontent.com/TheAlgorithms/scripts/main/build_directory_md.py\npython3 build_directory_md.py R . .R,.r > DIRECTORY.md\ngit diff\ngit commit -m \"Update DIRECTORY.md\" DIRECTORY.md || true\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup R",
                "run": "r-lib/actions/setup-r@v2-branch"
            },
            {
                "id": 3,
                "name": "Create Documentation directory",
                "run": "echo \"Creating 'Documentation'\"\nmkdir -p documentation\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "echo \"Installing R package dependencies. Scripts might have additional dependencies installed.\"\nRscript -e 'if (!require(knitr)) install.packages(\"knitr\")'\nRscript -e 'if (!require(markdown)) install.packages(\"markdown\")'\n"
            },
            {
                "id": 5,
                "name": "Remove old documentation",
                "run": "rm -rf documentation/*"
            },
            {
                "id": 6,
                "name": "Generate new documentation",
                "run": "Rscript .github/scripts/doc_builder.r"
            },
            {
                "id": 7,
                "name": "Commit Documentation",
                "run": "git diff-index --quiet HEAD && exit\necho \"Setting up Git to push changes.\"\ngit config --global user.name 'autoprettier'\ngit config --global user.email 'actions@github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\necho \"Staging documentation\"\ngit add documentation/ # This is the only directory that has changes and should be staged\ngit commit -m \"Update documentation\" || true\ngit push || true\n"
            }
        ],
        "TheAlgorithms/Kotlin": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up JDK 11",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Grant execute permission for gradlew",
                "run": "chmod +x gradlew"
            },
            {
                "id": 4,
                "name": "Build with Gradle",
                "run": "./gradlew build"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Setup Git Specs",
                "run": "git config --global user.name github-actions\ngit config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "import os\nfrom typing import Iterator\nURL_BASE = \"https://github.com/TheAlgorithms/Kotlin/blob/master\"\ng_output = []\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    fs_exts = tuple(\".kt\".split())\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() in fs_exts:\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"# List of all files\\n\" + \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 5,
                "name": "Commit DIRECTORY.md",
                "run": "git commit -m \"updating DIRECTORY.md\" DIRECTORY.md ||  true\ngit diff DIRECTORY.md\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/Dart": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dart pub get"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dart format --set-exit-if-changed ."
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dart test --coverage ."
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "dart pub run coverage:format_coverage -i . -l > coverage.lcov"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "dart analyze"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "update_directory_md",
                "run": "import os\nfrom typing import Iterator\nURL_BASE = \"https://github.com/TheAlgorithms/Dart/blob/master\"\ng_output = []\n\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() == \".dart\":\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\n                \ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\n    \ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\n    \ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "cat DIRECTORY.md\ngit config --global user.name github-actions\ngit config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\ngit add DIRECTORY.md\ngit commit -am \"updating DIRECTORY.md\" ||  true\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/Elm": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Setup Git Specs",
                "run": "git config --global user.name github-actions\ngit config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "import os\nfrom typing import Iterator\nURL_BASE = \"https://github.com/TheAlgorithms/Elm/blob/master\"\ng_output = []\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    fs_exts = tuple(\".elm\".split())\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() in fs_exts:\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"# List of all files\\n\" + \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 5,
                "name": "Commit DIRECTORY.md",
                "run": "git commit -m \"updating DIRECTORY.md\" DIRECTORY.md ||  true\ngit diff DIRECTORY.md\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/Jupyter": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Setup Git Specs",
                "run": "git config --global user.name github-actions\ngit config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "import os\nfrom typing import Iterator\nURL_BASE = \"https://github.com/TheAlgorithms/Jupyter/blob/master\"\ng_output = []\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    fs_exts = tuple(\".ipynb .py\".split())\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() in fs_exts:\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"# List of all files\\n\" + \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 5,
                "name": "Commit DIRECTORY.md",
                "run": "git commit -m \"updating DIRECTORY.md\" DIRECTORY.md ||  true\ngit diff DIRECTORY.md\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/Haskell": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-haskell@v1.1.3"
            },
            {
                "id": 3,
                "name": "Cache (Unix platform)",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "stack update\nstack build --system-ghc --only-dependencies --test --bench --no-run-tests --no-run-benchmarks\n"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "stack build --system-ghc --test --bench --no-run-tests --no-run-benchmarks"
            },
            {
                "id": 6,
                "name": "Run tests",
                "run": "stack test"
            },
            {
                "id": 7,
                "name": "Run benchmarks",
                "run": "stack bench"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Setup Git Specs",
                "run": "git config --global user.name github-actions\ngit config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "import os\nfrom typing import Iterator\nURL_BASE = \"https://github.com/TheAlgorithms/Haskell/blob/master\"\ng_output = []\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    fs_exts = tuple(\".hs\".split())\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() in fs_exts:\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"# List of all files\\n\" + \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 5,
                "name": "Commit DIRECTORY.md",
                "run": "git commit -m \"updating DIRECTORY.md\" DIRECTORY.md ||  true\ngit diff DIRECTORY.md\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/Swift": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Setup Git Specs",
                "run": "git config --global user.name github-actions\ngit config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "import os\nfrom typing import Iterator\nURL_BASE = \"https://github.com/TheAlgorithms/Swift/blob/master\"\ng_output = []\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    fs_exts = tuple(\".swift\".split())\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() in fs_exts:\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"# List of all files\\n\" + \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 5,
                "name": "Commit DIRECTORY.md",
                "run": "git commit -m \"updating DIRECTORY.md\" DIRECTORY.md ||  true\ngit diff DIRECTORY.md\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/PHP": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup PHP",
                "run": "shivammathur/setup-php@v2"
            },
            {
                "id": 3,
                "name": "Validate composer.json and composer.lock",
                "run": "composer validate"
            },
            {
                "id": 4,
                "name": "Cache Composer packages",
                "run": "actions/cache@v3"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "composer install --prefer-dist --no-progress --no-suggest"
            },
            {
                "id": 6,
                "name": "Run PHPUnit",
                "run": "composer run-script test"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup PHP",
                "run": "shivammathur/setup-php@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "composer update --prefer-dist --no-progress --no-suggest"
            },
            {
                "id": 4,
                "name": "Run script",
                "run": "vendor/bin/phpcs -n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Setup Git Specs",
                "run": "git config --global user.name \"$GITHUB_ACTOR\"\ngit config --global user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "import os\nfrom typing import Iterator\ng_output = []\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    fs_exts = tuple(\".php\".split())\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() in fs_exts:\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((\".\", filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"# List of all files\\n\" + \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 5,
                "name": "Commit DIRECTORY.md",
                "run": "git commit -m \"updating DIRECTORY.md\" DIRECTORY.md ||  true\ngit diff DIRECTORY.md\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/OCaml": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Setup Git Specs",
                "run": "git config --global user.name github-actions\ngit config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "import os\nfrom typing import Iterator\nURL_BASE = \"https://github.com/TheAlgorithms/OCaml/blob/master\"\ng_output = []\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    fs_exts = tuple(\".ml\".split())\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() in fs_exts:\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"# List of all files\\n\" + \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 5,
                "name": "Commit DIRECTORY.md",
                "run": "git commit -m \"updating DIRECTORY.md\" DIRECTORY.md ||  true\ngit diff DIRECTORY.md\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/F-Sharp": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Setup Git Specs",
                "run": "git config --global user.name \"$GITHUB_ACTOR\"\ngit config --global user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "import os\nfrom typing import Iterator\nURL_BASE = \"https://github.com/TheAlgorithms/F-Sharp/blob/main\"\ng_output = []\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    fs_exts = tuple(\".fs\".split())\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() in fs_exts:\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"# List of all files\\n\" + \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 5,
                "name": "Commit DIRECTORY.md",
                "run": "git commit -m \"updating DIRECTORY.md\" DIRECTORY.md ||  true\ngit diff DIRECTORY.md\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            },
            {
                "id": 1,
                "name": "Checkout repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Run tests",
                "run": "dotnet test"
            }
        ],
        "TheAlgorithms/algorithms-keeper": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npython -m pip install pre-commit mypy\npython -m pip install -r requirements-dev.txt\n"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "pytest"
            },
            {
                "id": 6,
                "name": "Run pre-commit",
                "run": "pre-commit run --verbose --all-files --show-diff-on-failure"
            },
            {
                "id": 7,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v3"
            }
        ],
        "TheAlgorithms/website": [
            {
                "id": 1,
                "name": "Add \"approved\" label when approved",
                "run": "pullreminders/label-when-approved-action@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Fetch Algorithms",
                "run": "yarn fetch-algorithms"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "yarn lint"
            }
        ],
        "TheAlgorithms/AArch64_Assembly": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Setup Git Specs",
                "run": "git config --global user.name github-actions\ngit config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "import os\nfrom typing import Iterator\nURL_BASE = \"https://github.com/TheAlgorithms/AArch64_Assembly/blob/main\"\ng_output = []\ndef good_filepaths(top_dir: str = \".\") -> Iterator[str]:\n    fs_exts = tuple(\".asm .s\".split())\n    for dirpath, dirnames, filenames in os.walk(top_dir):\n        dirnames[:] = [d for d in dirnames if d[0] not in \"._\"]\n        for filename in filenames:\n            if os.path.splitext(filename)[1].lower() in fs_exts:\n                yield os.path.join(dirpath, filename).lstrip(\"./\")\ndef md_prefix(i):\n    return f\"{i * '  '}*\" if i else \"\\n##\"\ndef print_path(old_path: str, new_path: str) -> str:\n    global g_output\n    old_parts = old_path.split(os.sep)\n    for i, new_part in enumerate(new_path.split(os.sep)):\n        if i + 1 > len(old_parts) or old_parts[i] != new_part:\n            if new_part:\n                g_output.append(f\"{md_prefix(i)} {new_part.replace('_', ' ').title()}\")\n    return new_path\ndef build_directory_md(top_dir: str = \".\") -> str:\n    global g_output\n    old_path = \"\"\n    for filepath in sorted(good_filepaths(), key=str.lower):\n        filepath, filename = os.path.split(filepath)\n        if filepath != old_path:\n            old_path = print_path(old_path, filepath)\n        indent = (filepath.count(os.sep) + 1) if filepath else 0\n        url = \"/\".join((URL_BASE, filepath, filename)).replace(\" \", \"%20\")\n        filename = os.path.splitext(filename.replace(\"_\", \" \").title())[0]\n        g_output.append(f\"{md_prefix(indent)} [{filename}]({url})\")\n    return \"# List of all files\\n\" + \"\\n\".join(g_output)\nwith open(\"DIRECTORY.md\", \"w\") as out_file:\n    out_file.write(build_directory_md(\".\") + \"\\n\")\n"
            },
            {
                "id": 5,
                "name": "Commit DIRECTORY.md",
                "run": "git commit -m \"updating DIRECTORY.md\" DIRECTORY.md ||  true\ngit diff DIRECTORY.md\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/Clojure": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup java",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Setup clojure",
                "run": "DeLaGuardo/setup-clojure@12.1"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "clojure -X:test\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup java",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Setup clojure",
                "run": "DeLaGuardo/setup-clojure@12.1"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "clojure -X:coverage\n"
            },
            {
                "id": 5,
                "name": "Upload coverage to codecov",
                "run": "codecov/codecov-action@v3"
            }
        ],
        "TheAlgorithms/scripts": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./directory_md"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./directory_md"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./formatter"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./formatter"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./license-copyright"
            }
        ],
        "TheAlgorithms/Julia": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "julia-actions/setup-julia@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/cache@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "julia-actions/julia-buildpkg@v1"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "julia-actions/julia-runtest@v1"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "julia-actions/julia-processcoverage@v1"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "julia-actions/setup-julia@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "julia --project=docs -e '\n  using Pkg\n  Pkg.develop(PackageSpec(path=pwd()))\n  Pkg.instantiate()'\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "julia --project=docs -e '\n  using Documenter: DocMeta\n  using TheAlgorithms\n  DocMeta.setdocmeta!(TheAlgorithms, :DocTestSetup, :(using TheAlgorithms); recursive=true)'\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "julia --project=docs docs/make.jl"
            },
            {
                "id": 1,
                "name": "Pkg.add(\"CompatHelper\")",
                "run": "julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'"
            },
            {
                "id": 2,
                "name": "CompatHelper.main()",
                "run": "julia -e 'using CompatHelper; CompatHelper.main()'"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "JuliaRegistries/TagBot@v1"
            },
            {
                "id": 1,
                "name": "Add \"approved\" label when approved",
                "run": "pullreminders/label-when-approved-action@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "julia-actions/setup-julia@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install JuliaFormatter",
                "run": "julia  -e 'using Pkg; Pkg.add(PackageSpec(name=\"JuliaFormatter\"))'\n"
            },
            {
                "id": 4,
                "name": "Format code",
                "run": "git clean -f -x -d\njulia  -e 'using JuliaFormatter; format(\".\", verbose=true)'\n"
            },
            {
                "id": 5,
                "name": "Fail if needs reformatting",
                "run": "if [[ $(git status --porcelain) ]]; then\n    echo \"please reformat these files:\"\n    git status --porcelain=v1\n    exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build directory",
                "run": "TheAlgorithms/scripts/directory_md@main"
            }
        ],
        "TheAlgorithms/Lua": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "JohnnyMorganz/stylua-action@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "leafo/gh-actions-lua@v10"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "leafo/gh-actions-luarocks@v4"
            },
            {
                "id": 4,
                "name": "setup",
                "run": "luarocks install luacheck\n"
            },
            {
                "id": 5,
                "name": "lint",
                "run": "luacheck .spec src\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "leafo/gh-actions-lua@v10"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "leafo/gh-actions-luarocks@v4"
            },
            {
                "id": 4,
                "name": "setup",
                "run": "luarocks install busted\n"
            },
            {
                "id": 5,
                "name": "test",
                "run": "busted -o utfTerminal .spec\n"
            }
        ],
        "TheAlgorithms/Solidity": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install",
                "run": "npm install\nnpm install --save-dev prettier prettier-plugin-solidity\n"
            },
            {
                "id": 4,
                "name": "Execute Prettier",
                "run": "npx prettier --write ."
            },
            {
                "id": 5,
                "name": "Check for modified files",
                "run": "git config --global user.name 'autoprettier'\ngit config --global user.email 'actions@github.com'\necho ::set-output name=modified::$(if git diff-index --quiet HEAD --; then echo \"false\"; else echo \"true\"; fi)\n"
            },
            {
                "id": 6,
                "name": "Commit if any changes.",
                "run": "git commit -am \"\ud83c\udfa8 Format Solidity code with Prettier\"\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/TypeScript": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm test"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "npm run check-style"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Setup Git configuration",
                "run": "git config --global user.name 'autoprettier'\ngit config --global user.email 'actions@github.com'\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 3,
                "name": "Filename Formatter",
                "run": "IFS=$'\\n'\nfor fname in `find . -type f -name '*.ts' -o -name '*.ts'`\ndo\n  echo \"${fname}\"\n  new_fname=`echo ${fname} | tr ' ' '_'`\n  echo \"      ${new_fname}\"\n  new_fname=`echo ${new_fname} | tr 'A-Z' 'a-z'`\n  echo \"      ${new_fname}\"\n  new_fname=`echo ${new_fname} | tr '-' '_'`\n  echo \"      ${new_fname}\"\n  if [ ${fname} != ${new_fname} ]\n  then\n    echo \"      ${fname} --> ${new_fname}\"\n    git \"mv\" \"${fname}\" ${new_fname}\n  fi\ndone\ngit commit -am \"Formatting filenames ${GITHUB_SHA::8}\" || true\n"
            },
            {
                "id": 4,
                "name": "Update DIRECTORY.md",
                "run": "wget https://raw.githubusercontent.com/TheAlgorithms/scripts/main/build_directory_md.py\npython3 build_directory_md.py TypeScript . .ts jest.config.ts,sorts/test,search/test,maths/test,dynamic_programming/test,data_structures/test,ciphers/test > DIRECTORY.md\n\ngit diff\ngit commit -m \"Update DIRECTORY.md\" DIRECTORY.md || true\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Generate coverage report",
                "run": "npm test -- --coverage"
            },
            {
                "id": 5,
                "name": "Upload coverage to codecov",
                "run": "codecov/codecov-action@v3"
            }
        ],
        "TheAlgorithms/Zig": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "goto-bus-stop/setup-zig@v2"
            },
            {
                "id": 3,
                "name": "Testing (Linux & MacOS)",
                "run": "sh runall.sh"
            },
            {
                "id": 4,
                "name": "Testing (Windows)",
                "run": "./runall.cmd"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "goto-bus-stop/setup-zig@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "zig fmt --check --ast-check */*.zig"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Setup Git",
                "run": "git config --global user.name \"$GITHUB_ACTOR\"\ngit config --global user.email \"actions@github.com\"\ngit remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n"
            },
            {
                "id": 3,
                "name": "Update DIRECTORY.md file",
                "run": "wget https://raw.githubusercontent.com/TheAlgorithms/scripts/main/build_directory_md.py\npython3 build_directory_md.py Zig . .zig build.zig > DIRECTORY.md\n"
            },
            {
                "id": 4,
                "name": "Commit changes",
                "run": "git diff\ngit commit -m \"Update DIRECTORY.md\" DIRECTORY.md || true\ngit push --force origin HEAD:$GITHUB_REF || true\n"
            }
        ],
        "TheAlgorithms/Nim": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jiro4989/setup-nim-action@v1"
            },
            {
                "id": 3,
                "name": "Build file",
                "run": "git clean -f -x -d\n\n# Compile the script first\nnim c -o:directory_script .scripts/directory.nim\ncompile_status=$?\nif [ $compile_status -ne 0 ]; then\n    echo \"Compilation of directory.nim failed with exit code $compile_status!\"\n    exit $compile_status\nfi\n\n# Run the compiled script\n./directory_script > DIRECTORY.md\nexec_status=$?\nif [ $exec_status -ne 0 ]; then\n    echo \"Execution of directory.nim script failed with exit code $exec_status!\"\n    exit $exec_status\nfi\n"
            },
            {
                "id": 4,
                "name": "Setup Git configurations",
                "run": "git config --global user.name github-actions[bot]\ngit config --global user.email 'github-actions@users.noreply.github.com'\n"
            },
            {
                "id": 5,
                "name": "Commit and push changes",
                "run": "git checkout -b directory_update-${{ github.sha }}\ngit add .\n\ngit commit -m \"docs: update DIRECTORY.md\"\ngit push origin directory_update-${{ github.sha }}:directory_update-${{ github.sha }}\n"
            },
            {
                "id": 6,
                "name": "Create a pull request",
                "run": "if [[ $(git log --branches --not --remotes) ]]; then\n    gh pr create --base ${GITHUB_REF##*/} --head directory_update-${{ github.sha }} --title 'docs: update DIRECTORY.md' --body 'Updated the DIRECTORY.md file (see the diff. for changes).'\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jiro4989/setup-nim-action@v1"
            },
            {
                "id": 3,
                "name": "Format code",
                "run": "git clean -f -x -d\nnim prettyfy\n"
            },
            {
                "id": 4,
                "name": "Fail if needs reformatting",
                "run": "if [[ $(git status --porcelain) ]]; then\n   echo \"please reformat/prettyfy these files:\"\n   git status --porcelain=v1\n   exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jiro4989/setup-nim-action@v1"
            },
            {
                "id": 3,
                "name": "Build and test",
                "run": "nim test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jiro4989/setup-nim-action@v1"
            },
            {
                "id": 3,
                "name": "Display nim version",
                "run": "nim --version\n"
            },
            {
                "id": 4,
                "name": "Build and test",
                "run": "nim test\n"
            }
        ],
        "TheAlgorithms/Jule": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Panquesito7/setup-jule@v1.1.3"
            },
            {
                "id": 3,
                "name": "Compile Directory Writer",
                "run": "julec -o ./directory_writer ./.github/workflows\ngit update-index --add --chmod=-x ./directory_writer\nchmod +x ./directory_writer\n"
            },
            {
                "id": 4,
                "name": "Generate Directory",
                "run": "./directory_writer\n"
            },
            {
                "id": 5,
                "name": "Cleanup",
                "run": "rm -rf ./jule\nrm -f ./directory_writer\n"
            },
            {
                "id": 6,
                "name": "Setup Git configurations",
                "run": "git config --global user.name github-actions[bot]\ngit config --global user.email 'github-actions[bot]@users.noreply.github.com'\n"
            },
            {
                "id": 7,
                "name": "Commit and push changes",
                "run": "if [[ `git status --porcelain` ]];\nthen\n  git checkout -b directory_update-${{ github.sha }}\n  git add .\n\n  git commit -m 'Update `DIRECTORY.md`' || true\n  git push origin directory_update-${{ github.sha }}:directory_update-${{ github.sha }} || true\n\n  gh pr create --base ${GITHUB_REF##*/} --head directory_update-${{ github.sha }} --title 'Update `DIRECTORY.md`' --body 'Updated the `DIRECTORY.md` file (see the diff. for changes).' || true\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Panquesito7/setup-jule@v1.1.3"
            },
            {
                "id": 3,
                "name": "Test - math",
                "run": "julec test -o test math\ngit update-index --add --chmod=-x test\nchmod +x test\n./test\n"
            },
            {
                "id": 4,
                "name": "Test - search",
                "run": "julec test -o test search\ngit update-index --add --chmod=-x test\nchmod +x test\n./test\n"
            },
            {
                "id": 5,
                "name": "Test - sort",
                "run": "julec test -o test sort\ngit update-index --add --chmod=-x test\nchmod +x test\n./test\n"
            },
            {
                "id": 6,
                "name": "Test - string",
                "run": "julec test -o test string\ngit update-index --add --chmod=-x test\nchmod +x test\n./test\n"
            }
        ]
    },
    "huggingface": {
        "huggingface/transformers": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "sudo apt -y update && sudo apt install -y libsndfile1-dev\n"
            },
            {
                "id": 3,
                "name": "Load cached virtual environment",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Create virtual environment on cache miss",
                "run": "python -m venv ~/venv && . ~/venv/bin/activate\npip install --upgrade pip!=21.3\npip install -e .[dev]\n"
            },
            {
                "id": 5,
                "name": "Check transformers location",
                "run": ". ~/venv/bin/activate\npython setup.py develop\ntransformers_install=$(pip list -e | grep transformers)\ntransformers_install_array=($transformers_install)\ntransformers_loc=${transformers_install_array[-1]}\ntransformers_repo_loc=$(pwd .)\nif [ \"$transformers_loc\" != \"$transformers_repo_loc\" ]; then\n    echo \"transformers is from $transformers_loc but it shoud be from $transformers_repo_loc/src.\"\n    echo \"A fix is required. Stop testing.\"\n    exit 1\nfi\n"
            },
            {
                "id": 6,
                "name": "Create model files",
                "run": ". ~/venv/bin/activate\ntransformers-cli add-new-model-like --config_file tests/fixtures/add_distilbert_like_config.json --path_to_repo .\nmake style\nmake fix-copies\n"
            },
            {
                "id": 7,
                "name": "Run all PyTorch modeling test",
                "run": ". ~/venv/bin/activate\npython -m pytest -n 2 --dist=loadfile -s --make-reports=tests_new_models tests/bert_new/test_modeling_bert_new.py\n"
            },
            {
                "id": 8,
                "name": "Run style changes",
                "run": ". ~/venv/bin/activate\nmake style && make quality && make repo-consistency\n"
            },
            {
                "id": 9,
                "name": "Failure short reports",
                "run": "cat reports/tests_new_models/failures_short.txt"
            },
            {
                "id": 10,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}\n"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "Benchmark (daily)",
                "run": "python3 -m pip install optimum-benchmark>=0.2.0\nHF_TOKEN=${{ secrets.TRANSFORMERS_BENCHMARK_TOKEN }} python3 benchmark/benchmark.py --repo_id hf-internal-testing/benchmark_results --path_in_repo $(date +'%Y-%m-%d') --config-dir benchmark/config --config-name generation --commit=${{ github.sha }} backend.model=google/gemma-2b backend.cache_implementation=null,static backend.torch_compile=false,true --multirun\n"
            },
            {
                "id": 4,
                "name": "Benchmark (merged to main event)",
                "run": "python3 -m pip install optimum-benchmark>=0.2.0\nHF_TOKEN=${{ secrets.TRANSFORMERS_BENCHMARK_TOKEN }} python3 benchmark/benchmark.py --repo_id hf-internal-testing/benchmark_results_merge_event --path_in_repo $(date +'%Y-%m-%d') --config-dir benchmark/config --config-name generation --commit=${{ github.sha }} backend.model=google/gemma-2b backend.cache_implementation=null,static backend.torch_compile=false,true --multirun\n"
            },
            {
                "id": 1,
                "name": "Set tag",
                "run": "if ${{contains(github.event.head_commit.message, '[build-ci-image]')}}; then\n    echo \"TAG=huggingface/transformers-${{ matrix.file }}:dev\" >> \"$GITHUB_ENV\" \n    echo \"setting it to DEV!\"\nelse\n    echo \"TAG=huggingface/transformers-${{ matrix.file }}\" >> \"$GITHUB_ENV\"\n    \nfi\n"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 3,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 5,
                "name": "Build ${{ matrix.file }}.dockerfile",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Build and push",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 5,
                "name": "Build and push (for Push CI) in a daily basis",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 6,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Build and push",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 5,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Build and push (for Push CI) in a daily basis",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 5,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Build and push",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 5,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Build and push",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 5,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Build and push",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 5,
                "name": "Build and push (for Push CI) in a daily basis",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 6,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Build and push",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 5,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Build and push",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 5,
                "name": "Build and push (for Push CI) in a daily basis",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 6,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Build and push",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 5,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Cleanup disk",
                "run": "sudo ls -l /usr/local/lib/\nsudo ls -l /usr/share/\nsudo du -sh /usr/local/lib/\nsudo du -sh /usr/share/\nsudo rm -rf /usr/local/lib/android\nsudo rm -rf /usr/share/dotnet\nsudo du -sh /usr/local/lib/\nsudo du -sh /usr/share/\n"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Cleanup disk",
                "run": "sudo ls -l /usr/local/lib/\nsudo ls -l /usr/share/\nsudo du -sh /usr/local/lib/\nsudo du -sh /usr/share/\nsudo rm -rf /usr/local/lib/android\nsudo rm -rf /usr/share/dotnet\nsudo du -sh /usr/local/lib/\nsudo du -sh /usr/share/\n"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Get Base Image",
                "run": "echo \"base_image=$(python3 -c 'import os; from utils.past_ci_versions import past_versions_testing; base_image = past_versions_testing[\"pytorch\"][os.environ[\"framework_version\"]][\"base_image\"]; print(base_image)')\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Print Base Image",
                "run": "echo ${{ steps.get-base-image.outputs.base_image }}\n"
            },
            {
                "id": 5,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 6,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Get Base Image",
                "run": "echo \"base_image=$(python3 -c 'import os; from utils.past_ci_versions import past_versions_testing; base_image = past_versions_testing[\"tensorflow\"][os.environ[\"framework_version\"]][\"base_image\"]; print(base_image)')\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Print Base Image",
                "run": "echo ${{ steps.get-base-image.outputs.base_image }}\n"
            },
            {
                "id": 5,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 6,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout transformers",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set up Python 3.8",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Install",
                "run": "sudo apt-get -y update && sudo apt-get install -y libsndfile1-dev espeak-ng cmake\npip install --upgrade pip\npython -m pip install -U .[sklearn,torch,testing,sentencepiece,torch-speech,vision,timm,video,tf-cpu]\npip install tensorflow_probability\npython -m pip install -U 'natten<0.15.0'\n"
            },
            {
                "id": 5,
                "name": "Create all tiny models (locally)",
                "run": "python utils/create_dummy_models.py tiny_local_models --all --num_workers 2\n"
            },
            {
                "id": 6,
                "name": "Local tiny model reports artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Run pipeline tests against all new (local) tiny models",
                "run": "OMP_NUM_THREADS=1 TRANSFORMERS_TINY_MODEL_PATH=tiny_local_models python -m pytest --max-worker-restart=0 -n 2 --dist=loadfile -s -rA --make-reports=tests_pipelines tests/models -m is_pipeline_test -k \"test_pipeline_\" | tee tests_output.txt\n"
            },
            {
                "id": 8,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 9,
                "name": "Create + Upload tiny models for new model architecture(s)",
                "run": "python utils/update_tiny_models.py --num_workers 2\n"
            },
            {
                "id": 10,
                "name": "Full report",
                "run": "cat tiny_models/reports/tiny_model_creation_report.json"
            },
            {
                "id": 11,
                "name": "Failure report",
                "run": "cat tiny_models/reports/simple_failed_report.txt"
            },
            {
                "id": 12,
                "name": "Summary report",
                "run": "cat tiny_models/reports/tiny_model_summary.json"
            },
            {
                "id": 13,
                "name": "New tiny model creation reports artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e .[flax]"
            },
            {
                "id": 3,
                "name": "GPU visibility",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 5,
                "name": "Get doctest files",
                "run": "echo \"${{ toJson(fromJson(inputs.job_splits)[matrix.split_keys]) }}\" > doc_tests.txt\ncat doc_tests.txt\n"
            },
            {
                "id": 6,
                "name": "Set `split_keys`",
                "run": "echo \"${{ matrix.split_keys }}\"\nsplit_keys=${{ matrix.split_keys }}\nsplit_keys=${split_keys//'/'/'_'}\necho \"split_keys\"\necho \"split_keys=$split_keys\" >> $GITHUB_ENV\n"
            },
            {
                "id": 7,
                "name": "Run doctests",
                "run": "cat doc_tests.txt\npython3 -m pytest -v --make-reports doc_tests_gpu_${{ env.split_keys }} --doctest-modules $(cat doc_tests.txt) -sv --doctest-continue-on-failure --doctest-glob=\"*.md\"\n"
            },
            {
                "id": 8,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/doc_tests_gpu_${{ env.split_keys }}/failures_short.txt"
            },
            {
                "id": 9,
                "name": "Test suite reports artifacts: doc_tests_gpu_test_reports_${{ env.split_keys }}",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}\n"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 4,
                "name": "Check values for matrix",
                "run": "python3 utils/split_doctest_jobs.py\npython3 utils/split_doctest_jobs.py --only_return_keys --num_splits ${{ env.NUM_SLICES }}\n"
            },
            {
                "id": 5,
                "name": "Set values for matrix",
                "run": "echo \"job_splits=$(python3 utils/split_doctest_jobs.py)\" >> $GITHUB_OUTPUT\necho \"split_keys=$(python3 utils/split_doctest_jobs.py --only_return_keys --num_splits ${{ env.NUM_SLICES }})\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Send message to Slack",
                "run": "pip install slack_sdk\npython utils/notification_service_doc_tests.py\n"
            },
            {
                "id": 4,
                "name": "Upload results",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Echo input and matrix info",
                "run": "echo \"${{ inputs.folder_slices }}\"\necho \"${{ matrix.folders }}\"\necho \"${{ toJson(fromJson(inputs.folder_slices)[inputs.slice_id]) }}\"\n"
            },
            {
                "id": 2,
                "name": "Echo folder ${{ matrix.folders }}",
                "run": "echo \"${{ matrix.folders }}\"\nmatrix_folders=${{ matrix.folders }}\nmatrix_folders=${matrix_folders/'models/'/'models_'}\necho \"$matrix_folders\"\necho \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 4,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 5,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 6,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 7,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 8,
                "name": "Run all tests on GPU",
                "run": "python3 -m pytest -rsfE -v --make-reports=${{ inputs.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports tests/${{ matrix.folders }}"
            },
            {
                "id": 9,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ inputs.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports/failures_short.txt"
            },
            {
                "id": 10,
                "name": "Run test",
                "run": "mkdir -p /transformers/reports/${{ inputs.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports\necho \"hello\" > /transformers/reports/${{ inputs.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports/hello.txt\necho \"${{ inputs.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports\"\n"
            },
            {
                "id": 11,
                "name": "Test suite reports artifacts: ${{ inputs.machine_type }}_run_models_gpu_${{ env.matrix_folders }}_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Get changed files",
                "run": "tj-actions/changed-files@3f54ebb830831fc121d3263c1857cfbdc310cdb9"
            },
            {
                "id": 3,
                "name": "Run step if only the files listed above change",
                "run": "model_arrays=()\nfor file in $ALL_CHANGED_FILES; do\n    model_path=\"${file#*models/}\"\n    model_path=\"models/${model_path%%/*}\"\n    if grep -qFx \"$model_path\" utils/important_models.txt; then\n        # Append the file to the matrix string\n        model_arrays+=(\"$model_path\")\n    fi\ndone\nmatrix_string=$(printf '\"%s\", ' \"${model_arrays[@]}\" | sed 's/, $//')\necho \"matrix=[$matrix_string]\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install locally transformers & other libs",
                "run": "apt install sudo\nsudo -H pip install --upgrade pip\nsudo -H pip uninstall -y transformers \nsudo -H pip install -U -e \".[testing]\" \nMAX_JOBS=4 pip install flash-attn --no-build-isolation\npip install bitsandbytes\n"
            },
            {
                "id": 3,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 4,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 5,
                "name": "Run FA2 tests",
                "run": "pytest -rsfE -m \"flash_attn_test\" --make-reports=${{ matrix.model-name }}_fa2_tests/ tests/${{ matrix.model-name }}/test_modeling_*"
            },
            {
                "id": 6,
                "name": "Test suite reports artifacts: ${{ matrix.model-name }}_fa2_tests",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 8,
                "name": "Run integration tests",
                "run": "pytest -rsfE -k \"IntegrationTest\"  --make-reports=tests_integration_${{ matrix.model-name }} tests/${{ matrix.model-name }}/test_modeling_*"
            },
            {
                "id": 9,
                "name": "Test suite reports artifacts: tests_integration_${{ matrix.model-name }}",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 10,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 11,
                "name": "Tailscale",
                "run": "huggingface/tailscale-action@v1"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Install miniconda",
                "run": "conda-incubator/setup-miniconda@v2"
            },
            {
                "id": 3,
                "name": "Setup conda env",
                "run": "conda install -c defaults anaconda-client conda-build\n"
            },
            {
                "id": 4,
                "name": "Extract version",
                "run": "echo \"TRANSFORMERS_VERSION=`python setup.py --version`\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Build conda packages",
                "run": "conda info\nconda list\nconda-build .github/conda\n"
            },
            {
                "id": 6,
                "name": "Upload to Anaconda",
                "run": "anaconda upload `conda-build .github/conda --output` --force"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}\n"
            },
            {
                "id": 2,
                "name": "Cleanup",
                "run": "rm -rf tests/__pycache__\nrm -rf tests/models/__pycache__\nrm -rf reports\n"
            },
            {
                "id": 3,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 4,
                "name": "Identify models to test",
                "run": "echo \"matrix=$(python3 -c 'import os; tests = os.getcwd(); model_tests = os.listdir(os.path.join(tests, \"models\")); d1 = sorted(list(filter(os.path.isdir, os.listdir(tests)))); d2 = sorted(list(filter(os.path.isdir, [f\"models/{x}\" for x in model_tests]))); d1.remove(\"models\"); d = d2 + d1; print(d)')\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 1,
                "name": "Echo folder ${{ matrix.folders }}",
                "run": "echo \"${{ matrix.folders }}\"\nmatrix_folders=${{ matrix.folders }}\nmatrix_folders=${matrix_folders/'models/'/'models_'}\necho \"$matrix_folders\"\necho \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 3,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 4,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 5,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 6,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 7,
                "name": "Run all tests on GPU",
                "run": "python3 -m pytest -v --make-reports=${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }} tests/${{ matrix.folders }}"
            },
            {
                "id": 8,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}/failures_short.txt"
            },
            {
                "id": 9,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_all_tests_gpu_${{ env.matrix_folders }}_test_reports_postfix_nightly",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Echo folder ${{ matrix.folders }}",
                "run": "echo \"${{ matrix.folders }}\"\nmatrix_folders=${{ matrix.folders }}\nmatrix_folders=${matrix_folders/'models/'/'models_'}\necho \"$matrix_folders\"\necho \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 3,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 4,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 5,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 6,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 7,
                "name": "Run all tests on GPU",
                "run": "python3 -m pytest -v --make-reports=${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }} tests/${{ matrix.folders }}"
            },
            {
                "id": 8,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}/failures_short.txt"
            },
            {
                "id": 9,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_all_tests_gpu_${{ env.matrix_folders }}_test_reports_postfix_nightly",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "Remove cached torch extensions",
                "run": "rm -rf /github/home/.cache/torch_extensions/"
            },
            {
                "id": 4,
                "name": "Pre build DeepSpeed *again*",
                "run": "python3 -m pip uninstall -y deepspeed\nrm -rf DeepSpeed\ngit clone https://github.com/microsoft/DeepSpeed && cd DeepSpeed && rm -rf build\nDS_BUILD_CPU_ADAM=1 DS_BUILD_FUSED_ADAM=1 python3 -m pip install . --global-option=\"build_ext\" --global-option=\"-j8\" --no-cache -v --disable-pip-version-check\n"
            },
            {
                "id": 5,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 6,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 7,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 8,
                "name": "Run all tests on GPU",
                "run": "python -m pytest -v --make-reports=${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports tests/deepspeed tests/extended\n"
            },
            {
                "id": 9,
                "name": "Failure short reports",
                "run": "cat /workspace/transformers/reports/${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports/failures_short.txt"
            },
            {
                "id": 10,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports_postfix_nightly",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Preliminary job status",
                "run": "echo \"Setup status: ${{ needs.setup.result }}\"\n"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "Send message to Slack",
                "run": "pip install slack_sdk\npip show slack_sdk\npython utils/notification_service.py \"${{ needs.setup.outputs.matrix }}\"\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "geekyeggo/delete-artifact@v2"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ inputs.sha }}"
            },
            {
                "id": 2,
                "name": "Cleanup",
                "run": "rm -rf tests/__pycache__\nrm -rf tests/models/__pycache__\nrm -rf reports\n"
            },
            {
                "id": 3,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 4,
                "name": "Identify models to test",
                "run": "cd tests\necho \"matrix=$(python3 -c 'import os; tests = os.getcwd(); model_tests = os.listdir(os.path.join(tests, \"models\")); d1 = sorted(list(filter(os.path.isdir, os.listdir(tests)))); d2 = sorted(list(filter(os.path.isdir, [f\"models/{x}\" for x in model_tests]))); d1.remove(\"models\"); d = d2 + d1; print(d)')\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ inputs.sha }}"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "Update some packages",
                "run": "python3 -m pip install -U datasets"
            },
            {
                "id": 4,
                "name": "Echo folder ${{ matrix.folders }}",
                "run": "echo \"${{ matrix.folders }}\"\nmatrix_folders=${{ matrix.folders }}\nmatrix_folders=${matrix_folders/'models/'/'models_'}\necho \"$matrix_folders\"\necho \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 6,
                "name": "Install",
                "run": "python3 -m pip install --no-cache-dir git+https://github.com/huggingface/accelerate@main#egg=accelerate\n"
            },
            {
                "id": 7,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 8,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 9,
                "name": "Run all tests on GPU",
                "run": "python3 -m pytest -v --make-reports=${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }} tests/${{ matrix.folders }}"
            },
            {
                "id": 10,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}/failures_short.txt"
            },
            {
                "id": 11,
                "name": "Save job name",
                "run": "matrix_folders=${matrix_folders/'models_'/'models/'}\njob_name=\"Model tests ($matrix_folders, ${{ matrix.machine_type }})\"\necho \"$job_name\"\necho \"$job_name\" > /transformers/reports/${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}/job_name.txt\n"
            },
            {
                "id": 12,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_all_tests_gpu_${{ env.matrix_folders }}_test_reports_postfix_${{ inputs.framework }}-${{ inputs.version }}",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ inputs.sha }}"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "Update some packages",
                "run": "python3 -m pip install -U datasets"
            },
            {
                "id": 4,
                "name": "Echo folder ${{ matrix.folders }}",
                "run": "echo \"${{ matrix.folders }}\"\nmatrix_folders=${{ matrix.folders }}\nmatrix_folders=${matrix_folders/'models/'/'models_'}\necho \"$matrix_folders\"\necho \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 6,
                "name": "Install",
                "run": "python3 -m pip install --no-cache-dir git+https://github.com/huggingface/accelerate@main#egg=accelerate\n"
            },
            {
                "id": 7,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 8,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 9,
                "name": "Run all tests on GPU",
                "run": "python3 -m pytest -v --make-reports=${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }} tests/${{ matrix.folders }}"
            },
            {
                "id": 10,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}/failures_short.txt"
            },
            {
                "id": 11,
                "name": "Save job name",
                "run": "matrix_folders=${matrix_folders/'models_'/'models/'}\njob_name=\"Model tests ($matrix_folders, ${{ matrix.machine_type }})\"\necho \"$job_name\"\necho \"$job_name\" > /transformers/reports/${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}/job_name.txt\n"
            },
            {
                "id": 12,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_all_tests_gpu_${{ env.matrix_folders }}_test_reports_postfix_${{ inputs.framework }}-${{ inputs.version }}",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "Update some packages",
                "run": "python3 -m pip install -U datasets"
            },
            {
                "id": 4,
                "name": "Install",
                "run": "python3 -m pip install --no-cache-dir git+https://github.com/huggingface/accelerate@main#egg=accelerate\n"
            },
            {
                "id": 5,
                "name": "Remove cached torch extensions",
                "run": "rm -rf /github/home/.cache/torch_extensions/"
            },
            {
                "id": 6,
                "name": "Pre build DeepSpeed *again*",
                "run": "python3 -m pip uninstall -y deepspeed\nrm -rf DeepSpeed\ngit clone https://github.com/microsoft/DeepSpeed && cd DeepSpeed && rm -rf build\nDS_BUILD_CPU_ADAM=1 DS_BUILD_FUSED_ADAM=1 python3 -m pip install . --global-option=\"build_ext\" --global-option=\"-j8\" --no-cache -v --disable-pip-version-check\n"
            },
            {
                "id": 7,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 8,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 9,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 10,
                "name": "Run all tests on GPU",
                "run": "python3 -m pytest -v --make-reports=${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports tests/deepspeed tests/extended\n"
            },
            {
                "id": 11,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports/failures_short.txt"
            },
            {
                "id": 12,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports_postfix_${{ inputs.framework }}-${{ inputs.version }}",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Preliminary job status",
                "run": "echo \"Setup status: ${{ needs.setup.result }}\"\n"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "Create directory",
                "run": "mkdir test_failure_tables"
            },
            {
                "id": 5,
                "name": "Send message to Slack",
                "run": "pip install slack_sdk\npip show slack_sdk\npython utils/notification_service.py \"${{ needs.setup.outputs.matrix }}\"\n"
            },
            {
                "id": 6,
                "name": "Failure table artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "geekyeggo/delete-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Get commit message",
                "run": "echo \"commit_message=$(git show -s --format=%s)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Get models to run slow tests",
                "run": "echo \"${{ env.commit_message }}\"\npython -m pip install GitPython\npython utils/pr_slow_ci_models.py --commit_message \"${{ env.commit_message }}\" | tee output.txt\necho \"models=$(tail -n 1 output.txt)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Models to run slow tests",
                "run": "echo \"${{ env.models }}\"\necho \"models=${{ env.models }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Echo input and matrix info",
                "run": "echo \"${{ matrix.folders }}\"\n"
            },
            {
                "id": 2,
                "name": "Echo folder ${{ matrix.folders }}",
                "run": "echo \"${{ matrix.folders }}\"\nmatrix_folders=${{ matrix.folders }}\nmatrix_folders=${matrix_folders/'models/'/'models_'}\necho \"$matrix_folders\"\necho \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Update clone",
                "run": "git fetch && git fetch origin pull/${{ github.event.pull_request.number }}/head:pull/${{ github.event.pull_request.number }}/merge && git checkout pull/${{ github.event.pull_request.number }}/merge"
            },
            {
                "id": 4,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 5,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 6,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 7,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 8,
                "name": "Run all tests on GPU",
                "run": "export CUDA_VISIBLE_DEVICES=\"$(python3 utils/set_cuda_devices_for_ci.py --test_folder ${{ matrix.folders }})\"\necho $CUDA_VISIBLE_DEVICES\npython3 -m pytest -v -rsfE --make-reports=${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports tests/${{ matrix.folders }}\n"
            },
            {
                "id": 9,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports/failures_short.txt"
            },
            {
                "id": 10,
                "name": "Make sure report directory exists",
                "run": "mkdir -p /transformers/reports/${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports\necho \"hello\" > /transformers/reports/${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports/hello.txt\necho \"${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports\"\n"
            },
            {
                "id": 11,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_models_gpu_${{ env.matrix_folders }}_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout transformers",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Check Runner Status",
                "run": "python utils/check_self_hosted_runner.py --target_runners amd-mi210-single-gpu-ci-runner-docker --token ${{ secrets.ACCESS_REPO_INFO_TOKEN }}"
            },
            {
                "id": 1,
                "name": "ROCM-SMI",
                "run": "rocm-smi\n"
            },
            {
                "id": 2,
                "name": "ROCM-INFO",
                "run": "rocminfo  | grep \"Agent\" -A 14\n"
            },
            {
                "id": 3,
                "name": "Show ROCR environment",
                "run": "echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n"
            },
            {
                "id": 1,
                "name": "Prepare custom environment variables",
                "run": "CI_BRANCH_PUSH=${{ github.event.ref }}\nCI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\nCI_BRANCH_WORKFLOW_RUN=${{ github.event.workflow_run.head_branch }}\nCI_SHA_PUSH=${{ github.event.head_commit.id }}\nCI_SHA_WORKFLOW_RUN=${{ github.event.workflow_run.head_sha }}\necho $CI_BRANCH_PUSH\necho $CI_BRANCH_WORKFLOW_RUN\necho $CI_SHA_PUSH\necho $CI_SHA_WORKFLOW_RUN\n[[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n[[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "print environment variables",
                "run": "echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\necho \"env.CI_SHA = ${{ env.CI_SHA }}\"\n"
            },
            {
                "id": 3,
                "name": "Update clone using environment variables",
                "run": "echo \"original branch = $(git branch --show-current)\"\ngit fetch && git checkout ${{ env.CI_BRANCH }}\necho \"updated branch = $(git branch --show-current)\"\ngit checkout ${{ env.CI_SHA }}\necho \"log = $(git log -n 1)\"\n"
            },
            {
                "id": 4,
                "name": "Cleanup",
                "run": "rm -rf tests/__pycache__\nrm -rf tests/models/__pycache__\nrm -rf reports\n"
            },
            {
                "id": 5,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 6,
                "name": "Fetch the tests to run",
                "run": "pip install --upgrade git-python\npython3 utils/tests_fetcher.py --diff_with_last_commit | tee test_preparation.txt\n"
            },
            {
                "id": 7,
                "name": "Report fetched tests",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 8,
                "name": "Organize tests into models",
                "run": "if [ -f test_map.json ]; then\n    keys=$(python3 -c 'import json; fp = open(\"test_map.json\"); test_map = json.load(fp); fp.close(); d = list(test_map.keys()); print(d)')\n    test_map=$(python3 -c 'import json; fp = open(\"test_map.json\"); test_map = json.load(fp); fp.close(); print(test_map)')\nelse\n    keys=$(python3 -c 'keys = [\"dummy\"]; print(keys)')\n    test_map=$(python3 -c 'test_map = {\"dummy\": []}; print(test_map)')\nfi\necho $keys\necho $test_map\necho \"matrix=$keys\" >> $GITHUB_OUTPUT\necho \"test_map=$test_map\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Prepare custom environment variables",
                "run": "CI_BRANCH_PUSH=${{ github.event.ref }}\nCI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\nCI_BRANCH_WORKFLOW_RUN=${{ github.event.workflow_run.head_branch }}\nCI_SHA_PUSH=${{ github.event.head_commit.id }}\nCI_SHA_WORKFLOW_RUN=${{ github.event.workflow_run.head_sha }}\necho $CI_BRANCH_PUSH\necho $CI_BRANCH_WORKFLOW_RUN\necho $CI_SHA_PUSH\necho $CI_SHA_WORKFLOW_RUN\n[[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n[[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "print environment variables",
                "run": "echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\necho \"env.CI_SHA = ${{ env.CI_SHA }}\"\n"
            },
            {
                "id": 3,
                "name": "Update clone using environment variables",
                "run": "echo \"original branch = $(git branch --show-current)\"\ngit fetch && git checkout ${{ env.CI_BRANCH }}\necho \"updated branch = $(git branch --show-current)\"\ngit checkout ${{ env.CI_SHA }}\necho \"log = $(git log -n 1)\"\n"
            },
            {
                "id": 4,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 5,
                "name": "Echo folder ${{ matrix.folders }}",
                "run": "echo \"${{ matrix.folders }}\"\necho \"${{ fromJson(needs.setup_gpu.outputs.test_map)[matrix.folders] }}\"\nmatrix_folders=${{ matrix.folders }}\nmatrix_folders=${matrix_folders/'models/'/'models_'}\necho \"$matrix_folders\"\necho \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "ROCM-SMI",
                "run": "rocm-smi\n"
            },
            {
                "id": 7,
                "name": "ROCM-INFO",
                "run": "rocminfo  | grep \"Agent\" -A 14\n"
            },
            {
                "id": 8,
                "name": "Show ROCR environment",
                "run": "echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n"
            },
            {
                "id": 9,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 10,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 11,
                "name": "Run all non-slow selected tests on GPU",
                "run": "python3 -m pytest -n 2 --dist=loadfile -v --make-reports=${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports ${{ fromJson(needs.setup_gpu.outputs.test_map)[matrix.folders] }} -m \"not not_device_test\"\n"
            },
            {
                "id": 12,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports/failures_short.txt"
            },
            {
                "id": 13,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_models_gpu_${{ env.matrix_folders }}_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Preliminary job status",
                "run": "echo \"Runner availability: ${{ needs.check_runner_status.result }}\"\necho \"Setup status: ${{ needs.setup_gpu.result }}\"\necho \"Runner status: ${{ needs.check_runners.result }}\"\n"
            },
            {
                "id": 2,
                "name": "Prepare custom environment variables",
                "run": "CI_BRANCH_PUSH=${{ github.event.ref }}\nCI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\nCI_BRANCH_WORKFLOW_RUN=${{ github.event.workflow_run.head_branch }}\nCI_SHA_PUSH=${{ github.event.head_commit.id }}\nCI_SHA_WORKFLOW_RUN=${{ github.event.workflow_run.head_sha }}\necho $CI_BRANCH_PUSH\necho $CI_BRANCH_WORKFLOW_RUN\necho $CI_SHA_PUSH\necho $CI_SHA_WORKFLOW_RUN\n[[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n[[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "print environment variables",
                "run": "echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\necho \"env.CI_SHA = ${{ env.CI_SHA }}\"\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v4"
            },
            {
                "id": 5,
                "name": "Update clone using environment variables",
                "run": "echo \"original branch = $(git branch --show-current)\"\ngit fetch && git checkout ${{ env.CI_BRANCH }}\necho \"updated branch = $(git branch --show-current)\"\ngit checkout ${{ env.CI_SHA }}\necho \"log = $(git log -n 1)\"\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 7,
                "name": "Send message to Slack",
                "run": "pip install slack_sdk\npip show slack_sdk\npython utils/notification_service.py \"${{ needs.setup_gpu.outputs.matrix }}\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Get changed files",
                "run": "tj-actions/changed-files@v41"
            },
            {
                "id": 3,
                "name": "Was setup changed",
                "run": "for file in ${{ steps.changed-files.outputs.all_changed_files }}; do\n  if [ `basename \"${file}\"` = \"setup.py\" ]; then\n    echo \"changed=1\" >> $GITHUB_OUTPUT\n  fi\ndone\n"
            },
            {
                "id": 1,
                "name": "Trigger push CI via workflow_run",
                "run": "echo \"Trigger push CI via workflow_run\""
            },
            {
                "id": 1,
                "name": "Prepare custom environment variables",
                "run": "CI_BRANCH_PUSH=${{ github.event.ref }}\nCI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\nCI_BRANCH_WORKFLOW_RUN=${{ github.event.workflow_run.head_branch }}\nCI_SHA_PUSH=${{ github.event.head_commit.id }}\nCI_SHA_WORKFLOW_RUN=${{ github.event.workflow_run.head_sha }}\necho $CI_BRANCH_PUSH\necho $CI_BRANCH_WORKFLOW_RUN\necho $CI_SHA_PUSH\necho $CI_SHA_WORKFLOW_RUN\n[[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n[[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "print environment variables",
                "run": "echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\necho \"env.CI_SHA = ${{ env.CI_SHA }}\"\n"
            },
            {
                "id": 3,
                "name": "Update clone using environment variables",
                "run": "echo \"original branch = $(git branch --show-current)\"\ngit fetch && git checkout ${{ env.CI_BRANCH }}\necho \"updated branch = $(git branch --show-current)\"\ngit checkout ${{ env.CI_SHA }}\necho \"log = $(git log -n 1)\"\n"
            },
            {
                "id": 4,
                "name": "Cleanup",
                "run": "rm -rf tests/__pycache__\nrm -rf tests/models/__pycache__\nrm -rf reports\n"
            },
            {
                "id": 5,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 6,
                "name": "Fetch the tests to run",
                "run": "pip install --upgrade git-python\npython3 utils/tests_fetcher.py --diff_with_last_commit | tee test_preparation.txt\n"
            },
            {
                "id": 7,
                "name": "Report fetched tests",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 8,
                "name": "Organize tests into models",
                "run": "if [ -f test_map.json ]; then\n    keys=$(python3 -c 'import json; fp = open(\"test_map.json\"); test_map = json.load(fp); fp.close(); d = list(test_map.keys()); print(d)')\n    test_map=$(python3 -c 'import json; fp = open(\"test_map.json\"); test_map = json.load(fp); fp.close(); print(test_map)')\nelse\n    keys=$(python3 -c 'keys = [\"dummy\"]; print(keys)')\n    test_map=$(python3 -c 'test_map = {\"dummy\": []}; print(test_map)')\nfi\necho $keys\necho $test_map\necho \"matrix=$keys\" >> $GITHUB_OUTPUT\necho \"test_map=$test_map\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Prepare custom environment variables",
                "run": "CI_BRANCH_PUSH=${{ github.event.ref }}\nCI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\nCI_BRANCH_WORKFLOW_RUN=${{ github.event.workflow_run.head_branch }}\nCI_SHA_PUSH=${{ github.event.head_commit.id }}\nCI_SHA_WORKFLOW_RUN=${{ github.event.workflow_run.head_sha }}\necho $CI_BRANCH_PUSH\necho $CI_BRANCH_WORKFLOW_RUN\necho $CI_SHA_PUSH\necho $CI_SHA_WORKFLOW_RUN\n[[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n[[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "print environment variables",
                "run": "echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\necho \"env.CI_SHA = ${{ env.CI_SHA }}\"\n"
            },
            {
                "id": 3,
                "name": "Update clone using environment variables",
                "run": "echo \"original branch = $(git branch --show-current)\"\ngit fetch && git checkout ${{ env.CI_BRANCH }}\necho \"updated branch = $(git branch --show-current)\"\ngit checkout ${{ env.CI_SHA }}\necho \"log = $(git log -n 1)\"\n"
            },
            {
                "id": 4,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 5,
                "name": "Echo folder ${{ matrix.folders }}",
                "run": "echo \"${{ matrix.folders }}\"\necho \"${{ fromJson(needs.setup.outputs.test_map)[matrix.folders] }}\"\nmatrix_folders=${{ matrix.folders }}\nmatrix_folders=${matrix_folders/'models/'/'models_'}\necho \"$matrix_folders\"\necho \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 7,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 8,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 9,
                "name": "Run all non-slow selected tests on GPU",
                "run": "python3 -m pytest -n 2 --dist=loadfile -v --make-reports=${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }} ${{ fromJson(needs.setup.outputs.test_map)[matrix.folders] }}\n"
            },
            {
                "id": 10,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}/failures_short.txt"
            },
            {
                "id": 11,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_all_tests_gpu_${{ env.matrix_folders }}_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Prepare custom environment variables",
                "run": "CI_BRANCH_PUSH=${{ github.event.ref }}\nCI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\nCI_BRANCH_WORKFLOW_RUN=${{ github.event.workflow_run.head_branch }}\nCI_SHA_PUSH=${{ github.event.head_commit.id }}\nCI_SHA_WORKFLOW_RUN=${{ github.event.workflow_run.head_sha }}\necho $CI_BRANCH_PUSH\necho $CI_BRANCH_WORKFLOW_RUN\necho $CI_SHA_PUSH\necho $CI_SHA_WORKFLOW_RUN\n[[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n[[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "print environment variables",
                "run": "echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\necho \"env.CI_SHA = ${{ env.CI_SHA }}\"\n"
            },
            {
                "id": 3,
                "name": "Update clone using environment variables",
                "run": "echo \"original branch = $(git branch --show-current)\"\ngit fetch && git checkout ${{ env.CI_BRANCH }}\necho \"updated branch = $(git branch --show-current)\"\ngit checkout ${{ env.CI_SHA }}\necho \"log = $(git log -n 1)\"\n"
            },
            {
                "id": 4,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 5,
                "name": "Echo folder ${{ matrix.folders }}",
                "run": "echo \"${{ matrix.folders }}\"\necho \"${{ fromJson(needs.setup.outputs.test_map)[matrix.folders] }}\"\nmatrix_folders=${{ matrix.folders }}\nmatrix_folders=${matrix_folders/'models/'/'models_'}\necho \"$matrix_folders\"\necho \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 7,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 8,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 9,
                "name": "Run all non-slow selected tests on GPU",
                "run": "python3 -m pytest -n 2 --dist=loadfile -v --make-reports=${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }} ${{ fromJson(needs.setup.outputs.test_map)[matrix.folders] }}\n"
            },
            {
                "id": 10,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }}/failures_short.txt"
            },
            {
                "id": 11,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_all_tests_gpu_${{ env.matrix_folders }}_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Prepare custom environment variables",
                "run": "CI_BRANCH_PUSH=${{ github.event.ref }}\nCI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\nCI_BRANCH_WORKFLOW_RUN=${{ github.event.workflow_run.head_branch }}\nCI_SHA_PUSH=${{ github.event.head_commit.id }}\nCI_SHA_WORKFLOW_RUN=${{ github.event.workflow_run.head_sha }}\necho $CI_BRANCH_PUSH\necho $CI_BRANCH_WORKFLOW_RUN\necho $CI_SHA_PUSH\necho $CI_SHA_WORKFLOW_RUN\n[[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n[[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "print environment variables",
                "run": "echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\necho \"env.CI_SHA = ${{ env.CI_SHA }}\"\n"
            },
            {
                "id": 3,
                "name": "Update clone using environment variables",
                "run": "echo \"original branch = $(git branch --show-current)\"\ngit fetch && git checkout ${{ env.CI_BRANCH }}\necho \"updated branch = $(git branch --show-current)\"\ngit checkout ${{ env.CI_SHA }}\necho \"log = $(git log -n 1)\"\n"
            },
            {
                "id": 4,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 5,
                "name": "Remove cached torch extensions",
                "run": "rm -rf /github/home/.cache/torch_extensions/"
            },
            {
                "id": 6,
                "name": "Pre build DeepSpeed *again*",
                "run": "python3 -m pip uninstall -y deepspeed\nDS_BUILD_CPU_ADAM=1 DS_BUILD_FUSED_ADAM=1 python3 -m pip install deepspeed --global-option=\"build_ext\" --global-option=\"-j8\" --no-cache -v --disable-pip-version-check\n"
            },
            {
                "id": 7,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 8,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 9,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 10,
                "name": "Run all non-slow selected tests on GPU",
                "run": "python -m pytest -n 1 --dist=loadfile -v --make-reports=${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports tests/deepspeed tests/extended\n"
            },
            {
                "id": 11,
                "name": "Failure short reports",
                "run": "cat /workspace/transformers/reports/${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports/failures_short.txt"
            },
            {
                "id": 12,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Prepare custom environment variables",
                "run": "CI_BRANCH_PUSH=${{ github.event.ref }}\nCI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\nCI_BRANCH_WORKFLOW_RUN=${{ github.event.workflow_run.head_branch }}\nCI_SHA_PUSH=${{ github.event.head_commit.id }}\nCI_SHA_WORKFLOW_RUN=${{ github.event.workflow_run.head_sha }}\necho $CI_BRANCH_PUSH\necho $CI_BRANCH_WORKFLOW_RUN\necho $CI_SHA_PUSH\necho $CI_SHA_WORKFLOW_RUN\n[[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n[[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "print environment variables",
                "run": "echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\necho \"env.CI_SHA = ${{ env.CI_SHA }}\"\n"
            },
            {
                "id": 3,
                "name": "Update clone using environment variables",
                "run": "echo \"original branch = $(git branch --show-current)\"\ngit fetch && git checkout ${{ env.CI_BRANCH }}\necho \"updated branch = $(git branch --show-current)\"\ngit checkout ${{ env.CI_SHA }}\necho \"log = $(git log -n 1)\"\n"
            },
            {
                "id": 4,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 5,
                "name": "Remove cached torch extensions",
                "run": "rm -rf /github/home/.cache/torch_extensions/"
            },
            {
                "id": 6,
                "name": "Pre build DeepSpeed *again*",
                "run": "python3 -m pip uninstall -y deepspeed\nDS_BUILD_CPU_ADAM=1 DS_BUILD_FUSED_ADAM=1 python3 -m pip install deepspeed --global-option=\"build_ext\" --global-option=\"-j8\" --no-cache -v --disable-pip-version-check\n"
            },
            {
                "id": 7,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 8,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 9,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 10,
                "name": "Run all non-slow selected tests on GPU",
                "run": "python -m pytest -n 1 --dist=loadfile -v --make-reports=${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports tests/deepspeed tests/extended\n"
            },
            {
                "id": 11,
                "name": "Failure short reports",
                "run": "cat /workspace/transformers/reports/${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports/failures_short.txt"
            },
            {
                "id": 12,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Preliminary job status",
                "run": "echo \"Setup status: ${{ needs.setup.result }}\"\n"
            },
            {
                "id": 2,
                "name": "Prepare custom environment variables",
                "run": "CI_BRANCH_PUSH=${{ github.event.ref }}\nCI_BRANCH_PUSH=${CI_BRANCH_PUSH/'refs/heads/'/''}\nCI_BRANCH_WORKFLOW_RUN=${{ github.event.workflow_run.head_branch }}\nCI_SHA_PUSH=${{ github.event.head_commit.id }}\nCI_SHA_WORKFLOW_RUN=${{ github.event.workflow_run.head_sha }}\necho $CI_BRANCH_PUSH\necho $CI_BRANCH_WORKFLOW_RUN\necho $CI_SHA_PUSH\necho $CI_SHA_WORKFLOW_RUN\n[[ ! -z \"$CI_BRANCH_PUSH\" ]] && echo \"CI_BRANCH=$CI_BRANCH_PUSH\" >> $GITHUB_ENV || echo \"CI_BRANCH=$CI_BRANCH_WORKFLOW_RUN\" >> $GITHUB_ENV\n[[ ! -z \"$CI_SHA_PUSH\" ]] && echo \"CI_SHA=$CI_SHA_PUSH\" >> $GITHUB_ENV || echo \"CI_SHA=$CI_SHA_WORKFLOW_RUN\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "print environment variables",
                "run": "echo \"env.CI_BRANCH = ${{ env.CI_BRANCH }}\"\necho \"env.CI_SHA = ${{ env.CI_SHA }}\"\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v4"
            },
            {
                "id": 5,
                "name": "Update clone using environment variables",
                "run": "echo \"original branch = $(git branch --show-current)\"\ngit fetch && git checkout ${{ env.CI_BRANCH }}\necho \"updated branch = $(git branch --show-current)\"\ngit checkout ${{ env.CI_SHA }}\necho \"log = $(git log -n 1)\"\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 7,
                "name": "Send message to Slack",
                "run": "pip install slack_sdk\npip show slack_sdk\npython utils/notification_service.py \"${{ needs.setup.outputs.matrix }}\"\n"
            },
            {
                "id": 1,
                "name": "Trigger scheduled AMD CI via workflow_run",
                "run": "echo \"Trigger scheduled AMD CI via workflow_run\""
            },
            {
                "id": 1,
                "name": "Checkout transformers",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Check Runner Status",
                "run": "python utils/check_self_hosted_runner.py --target_runners hf-amd-mi210-ci-1gpu-1,hf-amd-mi250-ci-1gpu-1,hf-amd-mi300-ci-1gpu-1 --token ${{ secrets.ACCESS_REPO_INFO_TOKEN }}"
            },
            {
                "id": 1,
                "name": "ROCM-SMI",
                "run": "rocm-smi\n"
            },
            {
                "id": 2,
                "name": "ROCM-INFO",
                "run": "rocminfo  | grep \"Agent\" -A 14\n"
            },
            {
                "id": 3,
                "name": "Show ROCR environment",
                "run": "echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}\n"
            },
            {
                "id": 2,
                "name": "Cleanup",
                "run": "rm -rf tests/__pycache__\nrm -rf tests/models/__pycache__\nrm -rf reports\n"
            },
            {
                "id": 3,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 4,
                "name": "Identify models to test",
                "run": "echo \"matrix=$(python3 -c 'import os; tests = os.getcwd(); model_tests = os.listdir(os.path.join(tests, \"models\")); d1 = sorted(list(filter(os.path.isdir, os.listdir(tests)))); d2 = sorted(list(filter(os.path.isdir, [f\"models/{x}\" for x in model_tests]))); d1.remove(\"models\"); d = d2 + d1; print(d)')\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "ROCM-SMI",
                "run": "rocm-smi\n"
            },
            {
                "id": 6,
                "name": "ROCM-INFO",
                "run": "rocminfo  | grep \"Agent\" -A 14\n"
            },
            {
                "id": 7,
                "name": "Show ROCR environment",
                "run": "echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n"
            },
            {
                "id": 8,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 1,
                "name": "Echo folder ${{ matrix.folders }}",
                "run": "echo \"${{ matrix.folders }}\"\nmatrix_folders=${{ matrix.folders }}\nmatrix_folders=${matrix_folders/'models/'/'models_'}\necho \"$matrix_folders\"\necho \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 3,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 4,
                "name": "ROCM-SMI",
                "run": "rocm-smi\n"
            },
            {
                "id": 5,
                "name": "ROCM-INFO",
                "run": "rocminfo  | grep \"Agent\" -A 14\n"
            },
            {
                "id": 6,
                "name": "Show ROCR environment",
                "run": "echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n"
            },
            {
                "id": 7,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 8,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 9,
                "name": "Run all tests on GPU",
                "run": "python3 -m pytest -v --make-reports=${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports tests/${{ matrix.folders }} -m \"not not_device_test\""
            },
            {
                "id": 10,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports/failures_short.txt"
            },
            {
                "id": 11,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_models_gpu_${{ env.matrix_folders }}_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Echo folder ${{ matrix.folders }}",
                "run": "echo \"${{ matrix.folders }}\"\nmatrix_folders=${{ matrix.folders }}\nmatrix_folders=${matrix_folders/'models/'/'models_'}\necho \"$matrix_folders\"\necho \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 3,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 4,
                "name": "ROCM-SMI",
                "run": "rocm-smi\n"
            },
            {
                "id": 5,
                "name": "ROCM-INFO",
                "run": "rocminfo  | grep \"Agent\" -A 14\n"
            },
            {
                "id": 6,
                "name": "Show ROCR environment",
                "run": "echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n"
            },
            {
                "id": 7,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 8,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 9,
                "name": "Run all tests on GPU",
                "run": "python3 -m pytest -v --make-reports=${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports tests/${{ matrix.folders }} -m \"not not_device_test\""
            },
            {
                "id": 10,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_run_models_gpu_${{ matrix.folders }}_test_reports/failures_short.txt"
            },
            {
                "id": 11,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_models_gpu_${{ env.matrix_folders }}_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "ROCM-SMI",
                "run": "rocm-smi\n"
            },
            {
                "id": 4,
                "name": "ROCM-INFO",
                "run": "rocminfo  | grep \"Agent\" -A 14\n"
            },
            {
                "id": 5,
                "name": "Show ROCR environment",
                "run": "echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n"
            },
            {
                "id": 6,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 7,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 8,
                "name": "Run examples tests on GPU",
                "run": "pip install -r examples/pytorch/_tests_requirements.txt\npython3 -m pytest -v --make-reports=${{ matrix.machine_type }}_run_examples_gpu_test_reports examples/pytorch -m \"not not_device_test\"\n"
            },
            {
                "id": 9,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_run_examples_gpu_test_reports/failures_short.txt"
            },
            {
                "id": 10,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_examples_gpu_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "ROCM-SMI",
                "run": "rocm-smi\n"
            },
            {
                "id": 4,
                "name": "ROCM-INFO",
                "run": "rocminfo  | grep \"Agent\" -A 14\n"
            },
            {
                "id": 5,
                "name": "Show ROCR environment",
                "run": "echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n"
            },
            {
                "id": 6,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 7,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 8,
                "name": "Run all pipeline tests on GPU",
                "run": "python3 -m pytest -n 1 -v --dist=loadfile --make-reports=${{ matrix.machine_type }}_run_pipelines_torch_gpu_test_reports tests/pipelines -m \"not not_device_test\"\n"
            },
            {
                "id": 9,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_run_pipelines_torch_gpu_test_reports/failures_short.txt"
            },
            {
                "id": 10,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_pipelines_torch_gpu_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "ROCM-SMI",
                "run": "rocm-smi\n"
            },
            {
                "id": 4,
                "name": "ROCM-INFO",
                "run": "rocminfo  | grep \"Agent\" -A 14\n"
            },
            {
                "id": 5,
                "name": "Show ROCR environment",
                "run": "echo \"ROCR: $ROCR_VISIBLE_DEVICES\"\n"
            },
            {
                "id": 6,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 7,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 8,
                "name": "Run all tests on GPU",
                "run": "python3 -m pytest -v --make-reports=${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports tests/deepspeed tests/extended -m \"not not_device_test\""
            },
            {
                "id": 9,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports/failures_short.txt"
            },
            {
                "id": 10,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout transformers",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install transformers",
                "run": "pip install transformers"
            },
            {
                "id": 3,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 4,
                "name": "Create output directory",
                "run": "mkdir warnings_in_ci"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 6,
                "name": "Show artifacts",
                "run": "echo \"$(python3 -c 'import os; d = os.listdir(); print(d)')\""
            },
            {
                "id": 7,
                "name": "Extract warnings in CI artifacts",
                "run": "python3 utils/extract_warnings.py --workflow_run_id ${{ github.run_id }} --output_dir warnings_in_ci --token ${{ secrets.ACCESS_REPO_INFO_TOKEN }} --from_gh\necho \"$(python3 -c 'import os; import json; fp = open(\"warnings_in_ci/selected_warnings.json\"); d = json.load(fp); d = \"\\n\".join(d) ;print(d)')\"\n"
            },
            {
                "id": 8,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Preliminary job status",
                "run": "echo \"Runner availability: ${{ needs.check_runner_status.result }}\"\necho \"Runner status: ${{ needs.check_runners.result }}\"\necho \"Setup status: ${{ needs.setup.result }}\"\n"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "Send message to Slack",
                "run": "sudo apt-get install -y curl\npip install slack_sdk\npip show slack_sdk\npython utils/notification_service.py \"${{ needs.setup.outputs.matrix }}\"\n"
            },
            {
                "id": 5,
                "name": "Failure table artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}\n"
            },
            {
                "id": 2,
                "name": "Cleanup",
                "run": "rm -rf tests/__pycache__\nrm -rf tests/models/__pycache__\nrm -rf reports\n"
            },
            {
                "id": 3,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 4,
                "name": "Identify models to test",
                "run": "echo \"folder_slices=$(python3 ../utils/split_model_tests.py --num_splits ${{ env.NUM_SLICES }})\" >> $GITHUB_OUTPUT\necho \"slice_ids=$(python3 -c 'd = list(range(${{ env.NUM_SLICES }})); print(d)')\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "Identify quantization method to test",
                "run": "echo \"quantization_matrix=$(python3 -c 'import os; tests = os.getcwd(); quantization_tests = os.listdir(os.path.join(tests, \"quantization\")); d = sorted(list(filter(os.path.isdir, [f\"quantization/{x}\" for x in quantization_tests]))) ;  print(d)')\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 6,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 5,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 6,
                "name": "Run all pipeline tests on GPU",
                "run": "python3 -m pytest -n 1 -v --dist=loadfile --make-reports=${{ matrix.machine_type }}_run_pipelines_torch_gpu_test_reports tests/pipelines\n"
            },
            {
                "id": 7,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_run_pipelines_torch_gpu_test_reports/failures_short.txt"
            },
            {
                "id": 8,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_pipelines_torch_gpu_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}\n"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 5,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 6,
                "name": "Run all pipeline tests on GPU",
                "run": "python3 -m pytest -n 1 -v --dist=loadfile --make-reports=${{ matrix.machine_type }}_run_pipelines_tf_gpu_test_reports tests/pipelines\n"
            },
            {
                "id": 7,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_run_pipelines_tf_gpu_test_reports/failures_short.txt\n"
            },
            {
                "id": 8,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_pipelines_tf_gpu_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 5,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 6,
                "name": "Run examples tests on GPU",
                "run": "pip install -r examples/pytorch/_tests_requirements.txt\npython3 -m pytest -v --make-reports=${{ matrix.machine_type }}_run_examples_gpu_test_reports examples/pytorch\n"
            },
            {
                "id": 7,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_run_examples_gpu_test_reports/failures_short.txt"
            },
            {
                "id": 8,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_examples_gpu_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 2,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 3,
                "name": "Remove cached torch extensions",
                "run": "rm -rf /github/home/.cache/torch_extensions/"
            },
            {
                "id": 4,
                "name": "Pre build DeepSpeed *again*",
                "run": "python3 -m pip uninstall -y deepspeed\nDS_DISABLE_NINJA=1 DS_BUILD_CPU_ADAM=1 DS_BUILD_FUSED_ADAM=1 python3 -m pip install deepspeed --global-option=\"build_ext\" --global-option=\"-j8\" --no-cache -v --disable-pip-version-check\n"
            },
            {
                "id": 5,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 6,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 7,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 8,
                "name": "Run all tests on GPU",
                "run": "python -m pytest -v --make-reports=${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports tests/deepspeed tests/extended\n"
            },
            {
                "id": 9,
                "name": "Failure short reports",
                "run": "cat /workspace/transformers/reports/${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports/failures_short.txt"
            },
            {
                "id": 10,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_torch_cuda_extensions_gpu_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Echo folder ${{ matrix.folders }}",
                "run": "echo \"${{ matrix.folders }}\"\nmatrix_folders=${{ matrix.folders }}\nmatrix_folders=${matrix_folders/'quantization/'/'quantization_'}\necho \"$matrix_folders\"\necho \"matrix_folders=$matrix_folders\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}"
            },
            {
                "id": 3,
                "name": "Reinstall transformers in edit mode (remove the one installed during docker image build)",
                "run": "python3 -m pip uninstall -y transformers && python3 -m pip install -e ."
            },
            {
                "id": 4,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 5,
                "name": "Environment",
                "run": "python3 utils/print_env.py\n"
            },
            {
                "id": 6,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 7,
                "name": "Run quantization tests on GPU",
                "run": "python3 -m pytest -v --make-reports=${{ matrix.machine_type }}_run_quantization_torch_gpu_${{ matrix.folders }}_test_reports tests/${{ matrix.folders }}\n"
            },
            {
                "id": 8,
                "name": "Failure short reports",
                "run": "cat /transformers/reports/${{ matrix.machine_type }}_run_quantization_torch_gpu_${{ matrix.folders }}_test_reports/failures_short.txt"
            },
            {
                "id": 9,
                "name": "Test suite reports artifacts: ${{ matrix.machine_type }}_run_quantization_torch_gpu_${{ env.matrix_folders }}_test_reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout transformers",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install transformers",
                "run": "pip install transformers"
            },
            {
                "id": 3,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 4,
                "name": "Create output directory",
                "run": "mkdir warnings_in_ci"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 6,
                "name": "Show artifacts",
                "run": "echo \"$(python3 -c 'import os; d = os.listdir(); print(d)')\""
            },
            {
                "id": 7,
                "name": "Extract warnings in CI artifacts",
                "run": "python3 utils/extract_warnings.py --workflow_run_id ${{ github.run_id }} --output_dir warnings_in_ci --token ${{ secrets.ACCESS_REPO_INFO_TOKEN }} --from_gh\necho \"$(python3 -c 'import os; import json; fp = open(\"warnings_in_ci/selected_warnings.json\"); d = json.load(fp); d = \"\\n\".join(d) ;print(d)')\"\n"
            },
            {
                "id": 8,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Preliminary job status",
                "run": "echo \"Setup status: ${{ inputs.setup_status }}\"\n"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "Send message to Slack",
                "run": "sudo apt-get install -y curl\npip install huggingface_hub\npip install slack_sdk\npip show slack_sdk\npython utils/notification_service.py \"${{ inputs.folder_slices }}\"\n"
            },
            {
                "id": 5,
                "name": "Failure table artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/checkout@v4"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 8,
                "name": "Send message to Slack for quantization workflow",
                "run": "sudo apt-get install -y curl\npip install huggingface_hub\npip install slack_sdk\npip show slack_sdk\npython utils/notification_service_quantization.py \"${{ inputs.quantization_matrix }}\" \n"
            },
            {
                "id": 9,
                "name": "Failure table artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "git fetch && git checkout ${{ github.sha }}\n"
            },
            {
                "id": 2,
                "name": "Cleanup",
                "run": "rm -rf tests/__pycache__\nrm -rf tests/models/__pycache__\nrm -rf reports\n"
            },
            {
                "id": 3,
                "name": "Show installed libraries and their versions",
                "run": "pip freeze"
            },
            {
                "id": 4,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 5,
                "name": "Tailscale",
                "run": "huggingface/tailscale-action@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install requirements",
                "run": "pip install PyGithub\n"
            },
            {
                "id": 4,
                "name": "Close stale issues",
                "run": "python scripts/stale.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "if [ \"${{ github.event_name }}\" == \"push\" ]; then\n  echo \"depth=$(($(jq length <<< '${{ toJson(github.event.commits) }}') + 2))\" >> $GITHUB_ENV\n  echo \"branch=${{ github.ref_name }}\" >> $GITHUB_ENV\nfi\nif [ \"${{ github.event_name }}\" == \"pull_request\" ]; then\n  echo \"depth=$((${{ github.event.pull_request.commits }}+2))\" >> $GITHUB_ENV\n  echo \"branch=${{ github.event.pull_request.head.ref }}\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Secret Scanning",
                "run": "trufflesecurity/trufflehog@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup environment",
                "run": "pip install --upgrade pip\npip install datasets pandas==2.0.3\npip install .[torch,tf,flax]\n"
            },
            {
                "id": 3,
                "name": "Update metadata",
                "run": "python utils/update_metadata.py --token ${{ secrets.LYSANDRE_HF_TOKEN }} --commit_sha ${{ github.sha }}\n"
            }
        ],
        "huggingface/pytorch-image-models": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python }}",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install testing dependencies",
                "run": "python -m pip install --upgrade pip\npip install -r requirements-dev.txt\n"
            },
            {
                "id": 4,
                "name": "Install torch on mac",
                "run": "pip install --no-cache-dir torch==${{ matrix.torch.base }} torchvision==${{ matrix.torch.vision }}"
            },
            {
                "id": 5,
                "name": "Install torch on Windows",
                "run": "pip install --no-cache-dir torch==${{ matrix.torch.base }} torchvision==${{ matrix.torch.vision }}"
            },
            {
                "id": 6,
                "name": "Install torch on ubuntu",
                "run": "sudo sed -i 's/azure\\.//' /etc/apt/sources.list\nsudo apt update\nsudo apt install -y google-perftools\npip install --no-cache-dir torch==${{ matrix.torch.base }}+cpu torchvision==${{ matrix.torch.vision }}+cpu -f https://download.pytorch.org/whl/torch_stable.html\n"
            },
            {
                "id": 7,
                "name": "Install requirements",
                "run": "pip install -r requirements.txt\n"
            },
            {
                "id": 8,
                "name": "Run tests on Windows",
                "run": "pytest -vv tests\n"
            },
            {
                "id": 9,
                "name": "Run '${{ matrix.testmarker }}' tests on Linux / Mac",
                "run": "pytest -vv --forked --durations=0 ${{ matrix.testmarker }} tests\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Secret Scanning",
                "run": "trufflesecurity/trufflehog@main"
            }
        ],
        "huggingface/tokenizers": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Python",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install sphinx sphinx_rtd_theme setuptools-rust"
            },
            {
                "id": 4,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 5,
                "name": "Build tokenizers",
                "run": "pip install -e ."
            },
            {
                "id": 6,
                "name": "Build documentation",
                "run": "make clean && make html_all O=\"-W --keep-going\""
            },
            {
                "id": 7,
                "name": "Upload built doc",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "sudo chown -R $(whoami):$(id -ng) ~/.cargo/"
            },
            {
                "id": 4,
                "name": "Cache Cargo Registry",
                "run": "actions/cache@v1"
            },
            {
                "id": 5,
                "name": "Install Node ${{ matrix.node-version }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 6,
                "name": "Install npm dependencies",
                "run": "yarn install"
            },
            {
                "id": 7,
                "name": "Build and package rust",
                "run": "yarn build &&\nstrip -x *.node\n"
            },
            {
                "id": 8,
                "name": "Install Python",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 9,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup node",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install"
            },
            {
                "id": 4,
                "name": "Download all artifacts",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 5,
                "name": "Move artifacts",
                "run": "yarn artifacts"
            },
            {
                "id": 6,
                "name": "List packages",
                "run": "ls -R ./npm"
            },
            {
                "id": 7,
                "name": "Publish",
                "run": "echo \"//registry.npmjs.org/:_authToken=$NPM_TOKEN\" >> ~/.npmrc\nnpm publish --access public --tag next\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "sudo chown -R $(whoami):$(id -ng) ~/.cargo/"
            },
            {
                "id": 4,
                "name": "Cache Cargo Registry",
                "run": "actions/cache@v1"
            },
            {
                "id": 5,
                "name": "Install Node",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 6,
                "name": "Install dependencies",
                "run": "yarn install"
            },
            {
                "id": 7,
                "name": "Build all",
                "run": "yarn build"
            },
            {
                "id": 8,
                "name": "Lint Rust formatting",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 9,
                "name": "Lint Rust with Clippy",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 10,
                "name": "Lint TS",
                "run": "yarn lint"
            },
            {
                "id": 11,
                "name": "Run JS tests",
                "run": "make test"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install miniconda",
                "run": "conda-incubator/setup-miniconda@v2"
            },
            {
                "id": 3,
                "name": "Conda info",
                "run": "conda info"
            },
            {
                "id": 4,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 5,
                "name": "Setup conda env",
                "run": "conda install setuptools-rust\nconda install -c defaults anaconda-client conda-build\n"
            },
            {
                "id": 6,
                "name": "Extract version",
                "run": "echo \"TOKENIZERS_VERSION=`grep -m 1 version Cargo.toml | grep -e '\".*\"' -o | tr -d '\"' | sed s/-/./ `\" >> $GITHUB_ENV"
            },
            {
                "id": 7,
                "name": "Build conda packages",
                "run": "conda info\nconda list\nconda-build .github/conda --python=${{ matrix.python }}\n"
            },
            {
                "id": 8,
                "name": "Upload to Anaconda",
                "run": "anaconda upload `conda-build .github/conda --output` --force\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install miniconda",
                "run": "yum install -y wget openssl-devel\nexport FILENAME=Miniconda3-py${{ matrix.python }}_23.5.2-0-Linux-x86_64.sh\nwget https://repo.anaconda.com/miniconda/$FILENAME\nsha256sum $FILENAME | awk '$1==\"${{ matrix.checksum}}\"{print\"good to go\"}'\nbash $FILENAME -b -p $HOME/miniconda\nsource $HOME/miniconda/bin/activate\n"
            },
            {
                "id": 3,
                "name": "Show glibc information",
                "run": "ldd --version"
            },
            {
                "id": 4,
                "name": "Conda info",
                "run": "source $HOME/miniconda/bin/activate\nconda info\n"
            },
            {
                "id": 5,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 6,
                "name": "Setup conda env",
                "run": "source $HOME/miniconda/bin/activate\nconda install setuptools-rust\nconda install -c defaults anaconda-client conda-build\n"
            },
            {
                "id": 7,
                "name": "Extract version",
                "run": "source $HOME/miniconda/bin/activate\necho \"TOKENIZERS_VERSION=`grep -m 1 version Cargo.toml | grep -e '\".*\"' -o | tr -d '\"' | sed s/-/./ `\" >> $GITHUB_ENV\n"
            },
            {
                "id": 8,
                "name": "Build conda packages",
                "run": "source $HOME/miniconda/bin/activate\nconda info\nconda list\nconda-build .github/conda --python=${{ matrix.python }}\n"
            },
            {
                "id": 9,
                "name": "Upload to Anaconda",
                "run": "source $HOME/miniconda/bin/activate\nanaconda upload `conda-build .github/conda --output` --force\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Cargo.lock lock exists",
                "run": "cat Cargo.lock"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "set up python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pip install -U twine"
            },
            {
                "id": 4,
                "name": "build wheels",
                "run": "PyO3/maturin-action@v1"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "${{ matrix.ls || 'ls -lh' }} dist/"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "twine check --strict dist/*"
            },
            {
                "id": 7,
                "name": "Upload wheels",
                "run": "pip install awscli\naws s3 sync --exact-timestamps ./bindings/python/dist \"s3://tokenizers-releases/python/$DIST_DIR\"\n\n# - uses: actions/upload-artifact@v3\n#   working-directory: ./bindings/python/\n#   with:\n#     name: pypi_files\n#     path: dist\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "PyO3/maturin-action@v1"
            },
            {
                "id": 3,
                "name": "Upload wheels",
                "run": "pip install awscli\naws s3 sync --exact-timestamps ./bindings/python/dist \"s3://tokenizers-releases/python/$DIST_DIR\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Retrieve all wheels",
                "run": "pip install awscli\naws s3 sync \"s3://tokenizers-releases/python/$DIST_DIR\" ./bindings/python/dist\n"
            },
            {
                "id": 4,
                "name": "Upload to PyPi",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p \"$PYPI_TOKEN\"\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Override toolchain",
                "run": "echo \"stable-i686-pc-windows-msvc\" > rust-toolchain"
            },
            {
                "id": 4,
                "name": "Install Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Install audit",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 4,
                "name": "Install Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 5,
                "name": "Cache Cargo Registry",
                "run": "actions/cache@v1"
            },
            {
                "id": 6,
                "name": "Lint with RustFmt",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 7,
                "name": "Lint with Clippy",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 8,
                "name": "Install cargo-audit",
                "run": "cargo install cargo-audit"
            },
            {
                "id": 9,
                "name": "Run Audit",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 10,
                "name": "Install",
                "run": "python -m venv .env\nsource .env/bin/activate\npip install -U pip\npip install pytest requests setuptools_rust numpy pyarrow datasets\npip install -e .[dev]\n"
            },
            {
                "id": 11,
                "name": "Check style",
                "run": "source .env/bin/activate\nmake check-style\n"
            },
            {
                "id": 12,
                "name": "Run tests",
                "run": "source .env/bin/activate\nmake test\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Cache Cargo Registry",
                "run": "actions/cache@v1"
            },
            {
                "id": 4,
                "name": "Publish package rust",
                "run": "cargo publish --token ${CRATES_TOKEN}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust Stable",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "sudo chown -R $(whoami):$(id -ng) ~/.cargo/"
            },
            {
                "id": 4,
                "name": "Install cargo-readme for Ubuntu",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 5,
                "name": "Install audit",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 7,
                "name": "Lint with RustFmt",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 8,
                "name": "Lint Benchmarks with RustFmt",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 9,
                "name": "Lint with Clippy",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 10,
                "name": "Run Tests",
                "run": "make test"
            },
            {
                "id": 11,
                "name": "Run lib Tests on Windows",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 12,
                "name": "Run doc Tests on Windows",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 13,
                "name": "Install cargo-audit",
                "run": "cargo install cargo-audit"
            },
            {
                "id": 14,
                "name": "Run Audit",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 15,
                "name": "Make sure, Readme generated from lib.rs matches actual Readme",
                "run": "cargo readme > must_match_readme.md && diff must_match_readme.md README.md"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v8"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Secret Scanning",
                "run": "trufflesecurity/trufflehog@main"
            }
        ],
        "huggingface/blog": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "denoland/setup-deno@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "deno run --allow-net --allow-read ./validate-yaml.ts"
            }
        ],
        "huggingface/datasets": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install .[quality]\n"
            },
            {
                "id": 4,
                "name": "Check quality",
                "run": "ruff check tests src benchmarks metrics utils setup.py # linter\nruff format --check tests src benchmarks metrics utils setup.py # formatter\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python 3.8",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install --upgrade pip"
            },
            {
                "id": 4,
                "name": "Pin setuptools-scm",
                "run": "echo \"installing pinned version of setuptools-scm to fix seqeval installation on 3.7\" && pip install \"setuptools-scm==6.4.2\""
            },
            {
                "id": 5,
                "name": "Install uv",
                "run": "pip install --upgrade uv"
            },
            {
                "id": 6,
                "name": "Install dependencies",
                "run": "uv pip install --system \"datasets[tests,metrics-tests] @ .\""
            },
            {
                "id": 7,
                "name": "Install dependencies (latest versions)",
                "run": "uv pip install --system -r additional-tests-requirements.txt --no-deps"
            },
            {
                "id": 8,
                "name": "Install dependencies (latest versions)",
                "run": "uv pip install --system --upgrade pyarrow huggingface-hub dill"
            },
            {
                "id": 9,
                "name": "Install dependencies (minimum versions)",
                "run": "uv pip install --system pyarrow==15.0.0 huggingface-hub==0.21.2 transformers dill==0.3.1.1"
            },
            {
                "id": 10,
                "name": "Test with pytest",
                "run": "python -m pytest -rfExX -m ${{ matrix.test }} -n 2 --dist loadfile -sv ./tests/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python 3.10",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install --upgrade pip"
            },
            {
                "id": 4,
                "name": "Install uv",
                "run": "pip install --upgrade uv"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "uv pip install --system \"datasets[tests] @ .\""
            },
            {
                "id": 6,
                "name": "Test with pytest",
                "run": "python -m pytest -rfExX -m ${{ matrix.test }} -n 2 --dist loadfile -sv ./tests/\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install miniconda",
                "run": "conda-incubator/setup-miniconda@v3"
            },
            {
                "id": 3,
                "name": "Setup conda env",
                "run": "conda install -c defaults anaconda-client conda-build\n"
            },
            {
                "id": 4,
                "name": "Extract version",
                "run": "echo \"DATASETS_VERSION=`python setup.py --version`\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Build conda packages",
                "run": "conda info\nconda build .github/conda\n"
            },
            {
                "id": 6,
                "name": "Upload to Anaconda",
                "run": "anaconda upload `conda build .github/conda --output -c conda-forge` --force\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Secret Scanning",
                "run": "trufflesecurity/trufflehog@main"
            }
        ],
        "huggingface/trl": [
            {
                "id": 1,
                "name": "Get branch of PR",
                "run": "xt0rted/pull-request-comment-branch@v1"
            },
            {
                "id": 2,
                "name": "Set latest commit status as pending",
                "run": "myrotvorets/set-commit-status-action@master"
            },
            {
                "id": 3,
                "name": "Checkout `main` branch",
                "run": "actions/checkout@v3"
            },
            {
                "id": 4,
                "name": "Checkout PR branch",
                "run": "gh pr checkout $PR_NUMBER"
            },
            {
                "id": 5,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 6,
                "name": "Print python depdenencies",
                "run": "pip list --format=freeze"
            },
            {
                "id": 7,
                "name": "Install dependencies",
                "run": "pip install .[test,benchmark]\n"
            },
            {
                "id": 8,
                "name": "Login",
                "run": "wandb login ${{ secrets.WANDB_API_KEY }} && huggingface-cli login --token ${{ secrets.HUGGING_FACE_HUB_TOKEN }}"
            },
            {
                "id": 9,
                "name": "Run benchmark",
                "run": "COMMENT=\"${{ github.event.comment.body }}\"\nif [[ \"$COMMENT\" == *\"/benchmark-trl-experiments benchmark/benchmark_level1.sh\"* ]]; then\n  echo \"Running benchmark/benchmark_level1.sh\"\n  BENCHMARK_SCRIPT=\"benchmark/benchmark_level1.sh\" BENCHMARK_PLOT_SCRIPT=\"benchmark/benchmark_level1_plot.sh\" bash benchmark/benchmark_and_report.sh\nelif [[ \"$COMMENT\" == *\"/benchmark-trl-experiments benchmark/benchmark_level2.sh\"* ]]; then\n  echo \"Running benchmark/benchmark_level2.sh\"\n  BENCHMARK_SCRIPT=\"benchmark/benchmark_level2.sh\" BENCHMARK_PLOT_SCRIPT=\"benchmark/benchmark_level2_plot.sh\" bash benchmark/benchmark_and_report.sh\nelif [[ \"$COMMENT\" == *\"/benchmark-trl-experiments benchmark/benchmark_level3.sh\"* ]]; then\n  echo \"Running benchmark/benchmark_level3.sh\"\n  BENCHMARK_SCRIPT=\"benchmark/benchmark_level3.sh\" BENCHMARK_PLOT_SCRIPT=\"benchmark/benchmark_level3_plot.sh\" bash benchmark/benchmark_and_report.sh\nelse\n  echo \"Invalid command in comment. Skipping execution.\"\nfi\n"
            },
            {
                "id": 10,
                "name": "Setup Node.js 16",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 11,
                "name": "Add workflow result as comment on PR",
                "run": "actions/github-script@v6"
            },
            {
                "id": 12,
                "name": "Set latest commit status as ${{ job.status }}",
                "run": "myrotvorets/set-commit-status-action@master"
            },
            {
                "id": 1,
                "name": "Check out code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Cleanup",
                "run": "gh extension install actions/gh-actions-cache\n\nREPO=${{ github.repository }}\n\necho \"Fetching list of cache key\"\ncacheKeysForPR=$(gh actions-cache list -R $REPO | cut -f 1 )\n\n## Setting this to not fail the workflow while deleting cache keys. \nset +e\necho \"Deleting caches...\"\nfor cacheKey in $cacheKeysForPR\ndo\n    gh actions-cache delete $cacheKey -R $REPO --confirm\ndone\necho \"Done\"\n"
            },
            {
                "id": 1,
                "name": "Cleanup disk",
                "run": "sudo ls -l /usr/local/lib/\nsudo ls -l /usr/share/\nsudo du -sh /usr/local/lib/\nsudo du -sh /usr/share/\nsudo rm -rf /usr/local/lib/android\nsudo rm -rf /usr/share/dotnet\nsudo du -sh /usr/local/lib/\nsudo du -sh /usr/share/\n"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 3,
                "name": "Check out code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 4,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v1"
            },
            {
                "id": 5,
                "name": "Build and Push GPU",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 6,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Cleanup disk",
                "run": "sudo ls -l /usr/local/lib/\nsudo ls -l /usr/share/\nsudo du -sh /usr/local/lib/\nsudo du -sh /usr/share/\nsudo rm -rf /usr/local/lib/android\nsudo rm -rf /usr/share/dotnet\nsudo du -sh /usr/local/lib/\nsudo du -sh /usr/share/\n"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 3,
                "name": "Check out code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 4,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v1"
            },
            {
                "id": 5,
                "name": "Build and Push GPU",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 6,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Pip install",
                "run": "source activate trl\npip install -e \".[test]\" --no-deps\npip install pytest-reportlog parameterized\n"
            },
            {
                "id": 3,
                "name": "Run slow SFT tests on single GPU",
                "run": "source activate trl\nmake slow_tests\n"
            },
            {
                "id": 4,
                "name": "Generate Report",
                "run": "pip install slack_sdk tabulate\npython scripts/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Pip install",
                "run": "source activate trl\npip install -e \".[test]\" --no-deps\npip install pytest-reportlog parameterized\n"
            },
            {
                "id": 3,
                "name": "Run slow SFT tests on Multi GPU",
                "run": "source activate trl\nmake slow_tests\n"
            },
            {
                "id": 4,
                "name": "Run end-to-end examples tests on multi GPU",
                "run": "source activate trl\npip install deepspeed\nmake test_examples\n"
            },
            {
                "id": 5,
                "name": "Generate Reports",
                "run": "pip install slack_sdk tabulate\npython scripts/log_reports.py >> $GITHUB_STEP_SUMMARY\npython scripts/log_example_reports.py --text_file_name temp_results_sft_tests.txt >> $GITHUB_STEP_SUMMARY\npython scripts/log_example_reports.py --text_file_name temp_results_dpo_tests.txt >> $GITHUB_STEP_SUMMARY\nrm *.txt\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install requirements",
                "run": "pip install PyGithub\n"
            },
            {
                "id": 4,
                "name": "Close stale issues",
                "run": "python scripts/stale.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\n# install PEFT & transformers from source\npip install -U git+https://github.com/huggingface/peft.git\npip install -U git+https://github.com/huggingface/transformers.git \n# cpu version of pytorch\npip install \".[test, diffusers]\"\n"
            },
            {
                "id": 4,
                "name": "Test with pytest",
                "run": "make test\n"
            },
            {
                "id": 5,
                "name": "Post to Slack",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v2.0.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\n# cpu version of pytorch\npip install \".[test, peft, diffusers]\"\n"
            },
            {
                "id": 4,
                "name": "Test with pytest",
                "run": "make test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python 3.9",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\n# cpu version of pytorch\npip install .[test]\n"
            },
            {
                "id": 4,
                "name": "Test with pytest",
                "run": "make test\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Secret Scanning",
                "run": "trufflesecurity/trufflehog@main"
            }
        ],
        "huggingface/widgets-server": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Use Node.js",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "sudo npm i -g typescript@4.0.3"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "node --version"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "tsc --version"
            },
            {
                "id": 6,
                "name": "Install deps",
                "run": "npm i @types/node"
            },
            {
                "id": 7,
                "name": "Compile",
                "run": "time tsc *.ts **/*.ts --lib es6,es2016,es2017,es2018,esnext --target es2018 --module commonjs --outDir dist\n"
            }
        ],
        "huggingface/accelerate": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.1.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "echo \"version=$(python setup.py --version)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 2,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Build and Push CPU",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 2,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Build and Push GPU",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 2,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Build and Push GPU",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.1.0"
            },
            {
                "id": 2,
                "name": "Get changed files",
                "run": "tj-actions/changed-files@v41"
            },
            {
                "id": 3,
                "name": "Was setup changed",
                "run": "for file in ${{ steps.changed-files.outputs.all_changed_files }}; do\n  if [ `basename \"${file}\"` == \"setup.py\" ]; then\n    echo \"changed=1\" >> $GITHUB_OUTPUT\n  fi\ndone\n"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 2,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Get current date",
                "run": "echo \"date=$(date '+%Y-%m-%d')\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Build and Push CPU",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 2,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Get current date",
                "run": "echo \"date=$(date '+%Y-%m-%d')\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Build and Push GPU",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 2,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Get current date",
                "run": "echo \"date=$(date '+%Y-%m-%d')\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Build and Push GPU",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.1.0"
            },
            {
                "id": 2,
                "name": "Set up python 3.8",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Install Accelerate from source",
                "run": "pip install --upgrade pip\npip install -e .\n"
            },
            {
                "id": 4,
                "name": "Clone and install transformers",
                "run": "cd ..\ngit clone https://github.com/huggingface/transformers\ncd transformers\npip install .[torch,testing]\n"
            },
            {
                "id": 5,
                "name": "Show installed libraries",
                "run": "pip freeze\n"
            },
            {
                "id": 6,
                "name": "Run Trainer tests",
                "run": "cd ../transformers\npytest -sv tests/trainer\n"
            },
            {
                "id": 1,
                "name": "Update clone & pip install",
                "run": "source activate accelerate\ngit clone https://github.com/huggingface/accelerate;\ncd accelerate;\ngit checkout ${{ github.sha }};\npip install -e . --no-deps\npip install pytest-reportlog tabulate\n"
            },
            {
                "id": 2,
                "name": "Show installed libraries",
                "run": "source activate accelerate;\npip freeze\n"
            },
            {
                "id": 3,
                "name": "Run test on GPUs",
                "run": "source activate accelerate\nmake test\n"
            },
            {
                "id": 4,
                "name": "Run examples on GPUs",
                "run": "source activate accelerate\npip uninstall comet_ml -y\nmake test_examples\n"
            },
            {
                "id": 5,
                "name": "Generate Report",
                "run": "pip install slack_sdk tabulate\npython utils/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Update clone & pip install",
                "run": "source activate accelerate\ngit clone https://github.com/huggingface/accelerate;\ncd accelerate;\ngit checkout ${{ github.sha }};\npip install -e . --no-deps\npip install pytest-reportlog tabulate\n"
            },
            {
                "id": 2,
                "name": "Show installed libraries",
                "run": "source activate accelerate;\npip freeze\n"
            },
            {
                "id": 3,
                "name": "Run test on GPUs",
                "run": "source activate accelerate\nmake test_deepspeed\n"
            },
            {
                "id": 4,
                "name": "Run Integration tests on GPUs",
                "run": "source activate accelerate\nmake test_integrations\n"
            },
            {
                "id": 5,
                "name": "Run examples on GPUs",
                "run": "source activate accelerate\npip uninstall comet_ml -y\nmake test_examples\n"
            },
            {
                "id": 6,
                "name": "Generate Report",
                "run": "pip install slack_sdk tabulate\npython utils/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "source activate accelerate\ngit clone https://github.com/huggingface/accelerate;\ncd accelerate;\ngit checkout ${{ github.sha }};\npip install -e . --no-deps\npip install pytest-reportlog tabulate\n"
            },
            {
                "id": 2,
                "name": "Show installed libraries",
                "run": "source activate accelerate;\npip freeze\n"
            },
            {
                "id": 3,
                "name": "Run core and big modeling tests on GPUs",
                "run": "source activate accelerate\nmake test_core\nmake test_big_modeling\nmake test_cli\n"
            },
            {
                "id": 4,
                "name": "Run Integration tests on GPUs",
                "run": "source activate accelerate\nmake test_integrations\n"
            },
            {
                "id": 5,
                "name": "Run examples on GPUs",
                "run": "source activate accelerate\npip uninstall comet_ml -y\nmake test_examples\n"
            },
            {
                "id": 6,
                "name": "Generate Report",
                "run": "pip install slack_sdk tabulate\npython utils/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "source activate accelerate\ngit clone https://github.com/huggingface/accelerate;\ncd accelerate;\ngit checkout ${{ github.sha }};\npip install -e . --no-deps\npip install pytest-reportlog tabulate\n"
            },
            {
                "id": 2,
                "name": "Show installed libraries",
                "run": "source activate accelerate;\npip freeze\n"
            },
            {
                "id": 3,
                "name": "Run DeepSpeed tests",
                "run": "source activate accelerate\nmake test_deepspeed\n"
            },
            {
                "id": 4,
                "name": "Run Integration tests on GPUs",
                "run": "source activate accelerate\nmake test_integrations\n"
            },
            {
                "id": 5,
                "name": "Run examples on GPUs",
                "run": "source activate accelerate\npip uninstall comet_ml -y\nmake test_examples\n"
            },
            {
                "id": 6,
                "name": "Generate Report",
                "run": "pip install slack_sdk tabulate\npython utils/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.1.0"
            },
            {
                "id": 2,
                "name": "Set up Python 3.8",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Install Python dependencies",
                "run": "pip install -e .[quality]"
            },
            {
                "id": 4,
                "name": "Run Quality check",
                "run": "make quality"
            },
            {
                "id": 5,
                "name": "Check if failure",
                "run": "echo \"Quality check failed. Please ensure the right dependency versions are installed with 'pip install -e .[quality]' and rerun 'make style; make quality;'\" >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Install accelerate",
                "run": "source activate accelerate;\ngit clone https://github.com/huggingface/accelerate;\ncd accelerate;\ngit checkout ${{ github.sha }};\npip install -e .[testing,test_trackers] -U;\npip install pytest-reportlog tabulate  ;\n"
            },
            {
                "id": 2,
                "name": "Show installed libraries",
                "run": "source activate accelerate;\npip freeze\n"
            },
            {
                "id": 3,
                "name": "Run CLI tests (use make cli)",
                "run": "source activate accelerate;\nmake test_cli\n"
            },
            {
                "id": 4,
                "name": "Run test on GPUs",
                "run": "source activate accelerate;\nmake test\n"
            },
            {
                "id": 5,
                "name": "Run examples on GPUs",
                "run": "source activate accelerate;\npip uninstall comet_ml -y;\nmake test_examples\n"
            },
            {
                "id": 6,
                "name": "Generate Report",
                "run": "pip install tabulate;\npython utils/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Install accelerate",
                "run": "source activate accelerate;\ngit clone https://github.com/huggingface/accelerate;\ncd accelerate;\ngit checkout ${{ github.sha }};\npip install -e .[testing,test_trackers] -U;\npip install pytest-reportlog tabulate  ;\n"
            },
            {
                "id": 2,
                "name": "Show installed libraries",
                "run": "source activate accelerate;\npip freeze\n"
            },
            {
                "id": 3,
                "name": "Run test on GPUs",
                "run": "source activate accelerate;\nmake test_deepspeed\n"
            },
            {
                "id": 4,
                "name": "Generate Report",
                "run": "pip install tabulate;\npython utils/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Update clone",
                "run": "source activate accelerate;\ngit clone https://github.com/huggingface/accelerate;\ncd accelerate;\ngit checkout ${{ github.sha }};\npip install -e .[testing,test_trackers] -U;\npip install pytest-reportlog tabulate\n"
            },
            {
                "id": 2,
                "name": "Show installed libraries",
                "run": "source activate accelerate;\npip freeze\n"
            },
            {
                "id": 3,
                "name": "Run test on GPUs",
                "run": "source activate accelerate;\nmake test\n"
            },
            {
                "id": 4,
                "name": "Run examples on GPUs",
                "run": "source activate accelerate;\npip uninstall comet_ml -y;\nmake test_examples\n"
            },
            {
                "id": 5,
                "name": "Generate Report",
                "run": "source activate accelerate;\npython utils/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Install accelerate",
                "run": "source activate accelerate;\ngit clone https://github.com/huggingface/accelerate;\ncd accelerate;\ngit checkout ${{ github.sha }};\npip install -e .[testing,test_trackers] -U;\npip install pytest-reportlog tabulate  ;\n"
            },
            {
                "id": 2,
                "name": "Show installed libraries",
                "run": "source activate accelerate;\npip freeze\n"
            },
            {
                "id": 3,
                "name": "Run test on GPUs",
                "run": "source activate accelerate;\nmake test_deepspeed\n"
            },
            {
                "id": 4,
                "name": "Generate Report",
                "run": "pip install tabulate;\npython utils/log_reports.py >> $GITHUB_STEP_SUMMARY"
            },
            {
                "id": 1,
                "name": "Install transformers",
                "run": "source activate accelerate;\ngit clone https://github.com/huggingface/transformers --depth 1;\ncd transformers;\npip install .[torch,deepspeed-testing];\ncd ..;\n"
            },
            {
                "id": 2,
                "name": "Install accelerate",
                "run": "source activate accelerate;\ngit clone https://github.com/huggingface/accelerate;\ncd accelerate;\ngit checkout ${{ github.sha }} ;\npip install -e .[testing];\npip uninstall comet_ml wandb dvclive -y\ncd ..;\n"
            },
            {
                "id": 3,
                "name": "Show installed libraries",
                "run": "source activate accelerate;\npip freeze\n"
            },
            {
                "id": 4,
                "name": "Run trainer tests",
                "run": "source activate accelerate;\npytest -sv tests/trainer\n"
            },
            {
                "id": 5,
                "name": "Run deepspeed tests",
                "run": "source activate accelerate;\npytest -sv tests/deepspeed\n"
            },
            {
                "id": 6,
                "name": "Run transformers examples tests",
                "run": "source activate accelerate\npip install -r examples/pytorch/_tests_requirements.txt\npytest -sv examples/pytorch/test_accelerate_examples.py examples/pytorch/test_pytorch_examples.py\n"
            },
            {
                "id": 1,
                "name": "Install accelerate",
                "run": "source activate accelerate; git clone https://github.com/huggingface/accelerate; cd accelerate; git checkout ${{ github.sha }}; pip install -e .[testing]; cd .."
            },
            {
                "id": 2,
                "name": "Install skorch",
                "run": "source activate accelerate\ngit clone https://github.com/skorch-dev/skorch;\ncd skorch;\ngit config --global --add safe.directory '*'\ngit checkout master && git pull\npip install .[testing]\npip install flaky\n"
            },
            {
                "id": 3,
                "name": "Show installed libraries",
                "run": "source activate accelerate;\npip freeze\n"
            },
            {
                "id": 4,
                "name": "Run skorch tests",
                "run": "source activate accelerate;\npytest -sv -k TestAccelerate"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.1.0"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Install requirements",
                "run": "pip install PyGithub\n"
            },
            {
                "id": 4,
                "name": "Close stale issues",
                "run": "python utils/stale.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.1.0"
            },
            {
                "id": 2,
                "name": "Set up python 3.8",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Install the library",
                "run": "if [[ ${{ matrix.test-kind }} = test_prod ]]; then pip install -e .[test_prod]; fi\nif [[ ${{ matrix.test-kind }} != test_prod ]]; then pip install -e .[testing,test_trackers]; fi\nif [[ ${{ matrix.test-kind }} = test_rest ]]; then pip uninstall comet_ml -y; fi\nif [[ ${{ matrix.test-kind }} = minimum ]]; then pip install torch==1.10.0; fi\npip install pytest-reportlog tabulate setuptools\n"
            },
            {
                "id": 4,
                "name": "Show installed libraries",
                "run": "pip freeze\n"
            },
            {
                "id": 5,
                "name": "Run Tests",
                "run": "make ${{ matrix.test-kind }}\n"
            },
            {
                "id": 6,
                "name": "Generate Report",
                "run": "python utils/log_reports.py >> $GITHUB_STEP_SUMMARY"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Secret Scanning",
                "run": "trufflesecurity/trufflehog@main"
            }
        ],
        "huggingface/autotrain-advanced": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.9",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npython -m pip install flake8 black isort\n"
            },
            {
                "id": 4,
                "name": "Make quality",
                "run": "make quality\n"
            },
            {
                "id": 1,
                "name": "Check out the repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 3,
                "name": "Log in to Docker Hub",
                "run": "docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20"
            },
            {
                "id": 4,
                "name": "Build and Push Docker Image",
                "run": "make docker"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83"
            },
            {
                "id": 3,
                "name": "Login to Amazon ECR",
                "run": "aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a"
            },
            {
                "id": 4,
                "name": "Build, tag, and push image to Amazon ECR",
                "run": "make api"
            },
            {
                "id": 1,
                "name": "Check out the repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 3,
                "name": "Log in to NGC",
                "run": "docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a"
            },
            {
                "id": 4,
                "name": "Set short git commit SHA",
                "run": "sha=$(git rev-parse --short ${{ github.sha }})\necho \"SHA=$sha\" >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "SHA",
                "run": "echo ${{ env.SHA }}"
            },
            {
                "id": 6,
                "name": "Build and Push NGC Image",
                "run": "docker build -t autotrain-advanced:latest .\ndocker tag autotrain-advanced:latest nvcr.io/ycymhzotssoi/autotrain-advanced:latest\ndocker tag autotrain-advanced:latest nvcr.io/ycymhzotssoi/autotrain-advanced:${{ env.SHA }}\ndocker push nvcr.io/ycymhzotssoi/autotrain-advanced:latest\ndocker push nvcr.io/ycymhzotssoi/autotrain-advanced:${{ env.SHA }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.9",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npython -m pip install .[dev]\n"
            },
            {
                "id": 4,
                "name": "Make test",
                "run": "make test\n"
            }
        ],
        "huggingface/huggingface_hub": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.8",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pip",
                "run": "pip install --upgrade pip"
            },
            {
                "id": 4,
                "name": "Install ${{ matrix.contrib }}",
                "run": "pip install -r contrib/${{ matrix.contrib }}/requirements.txt"
            },
            {
                "id": 5,
                "name": "Install `huggingface_hub`",
                "run": "pip uninstall -y huggingface_hub\npip install .[testing]\n"
            },
            {
                "id": 6,
                "name": "Run tests",
                "run": "pytest contrib/${{ matrix.contrib }}"
            },
            {
                "id": 1,
                "name": "maintain-comment",
                "run": "actions-cool/maintain-one-comment@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Setup venv + uv",
                "run": "pip install --upgrade uv\nuv venv\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "uv pip install \"huggingface_hub[dev] @ .\""
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": ".venv/bin/ruff check tests src contrib"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": ".venv/bin/ruff format --check tests src contrib"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": ".venv/bin/python utils/check_contrib_list.py"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": ".venv/bin/python utils/check_inference_input_params.py"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": ".venv/bin/python utils/check_static_imports.py"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": ".venv/bin/python utils/generate_async_inference_client.py"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": ".venv/bin/python utils/generate_inference_types.py"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": ".venv/bin/mypy src/huggingface_hub/__init__.py --follow-imports=silent --show-traceback"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": ".venv/bin/mypy src"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install --upgrade pip\npip install setuptools wheel\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "python setup.py sdist bdist_wheel"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pip install twine\n"
            },
            {
                "id": 6,
                "name": "Upload to PyPi",
                "run": "twine upload dist/* -u __token__ -p \"$PYPI_TOKEN\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Setup venv + uv",
                "run": "pip install --upgrade uv\nuv venv\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "uv pip install \"huggingface_hub[testing] @ .\"\n\ncase \"${{ matrix.test_name }}\" in\n\n  \"Repository only\" | \"Everything else\")\n    sudo apt update\n    sudo apt install -y libsndfile1-dev\n    ;;\n\n  lfs)\n    git config --global user.email \"ci@dummy.com\"\n    git config --global user.name \"ci\"\n    ;;\n\n  fastai | torch)\n    uv pip install \"huggingface_hub[${{ matrix.test_name }}] @ .\"\n    ;;\n\n  tensorflow)\n    sudo apt update\n    sudo apt install -y graphviz\n    uv pip install \"huggingface_hub[tensorflow-testing] @ .\"\n    ;;\n\nesac\n"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "source ../.venv/bin/activate\nPYTEST=\"python -m pytest --cov=./huggingface_hub --cov-report=xml:../coverage.xml --vcr-record=none --reruns 5 --reruns-delay 1 --only-rerun '(OSError|Timeout|HTTPError.*502|HTTPError.*504||not less than or equal to 0.01)'\"\n\ncase \"${{ matrix.test_name }}\" in\n\n  \"Repository only\")\n    # Run repo tests concurrently\n    PYTEST=\"$PYTEST ../tests -k 'TestRepository' -n 4\"\n    echo $PYTEST\n    eval $PYTEST\n  ;;\n\n  \"Everything else\")\n    PYTEST=\"$PYTEST ../tests -k 'not TestRepository' -n 4\"\n    echo $PYTEST\n    eval $PYTEST\n  ;;\n\n  lfs)\n    eval \"RUN_GIT_LFS_TESTS=1 $PYTEST ../tests -k 'HfLargefilesTest'\"\n  ;;\n\n\n  fastai)\n    eval \"$PYTEST ../tests/test_fastai*\"\n  ;;\n\n  tensorflow)\n    # Cannot be on same line since '_tf*' checks if tensorflow is NOT imported by default\n    eval \"$PYTEST ../tests/test_tf*\"\n    eval \"$PYTEST ../tests/test_keras*\"\n    eval \"$PYTEST ../tests/test_serialization.py\"\n  ;;\n\n  torch)\n  eval \"$PYTEST ../tests/test_hub_mixin*\"\n  eval \"$PYTEST ../tests/test_serialization.py\"\n  ;;\n\nesac\n"
            },
            {
                "id": 6,
                "name": "Upload coverage reports to Codecov with GitHub Action",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Setup venv + uv",
                "run": "pip install --upgrade uv\nuv venv\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "uv pip install \"huggingface_hub[testing] @ .\""
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "..\\.venv\\Scripts\\activate\npython -m pytest -n 4 --cov=./huggingface_hub --cov-report=xml:../coverage.xml --vcr-record=none --reruns 5 --reruns-delay 1 --only-rerun '(OSError|Timeout|HTTPError.*502|HTTPError.*504|not less than or equal to 0.01)' ../tests\n"
            },
            {
                "id": 6,
                "name": "Upload coverage reports to Codecov with GitHub Action",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Install miniconda",
                "run": "conda-incubator/setup-miniconda@v2"
            },
            {
                "id": 3,
                "name": "Setup conda env",
                "run": "conda install -c defaults anaconda-client conda-build\n"
            },
            {
                "id": 4,
                "name": "Extract version",
                "run": "echo \"HUB_VERSION=`python setup.py --version`\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Build conda packages",
                "run": "conda info\nconda-build .github/conda\n"
            },
            {
                "id": 6,
                "name": "Upload to Anaconda",
                "run": "anaconda upload `conda-build .github/conda --output` --force\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Secret Scanning",
                "run": "trufflesecurity/trufflehog@main"
            }
        ],
        "huggingface/collaborative-training-auth": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.8",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "cd backend\npython -m pip install --upgrade pip\npython -m pip install flake8 black isort\n"
            },
            {
                "id": 4,
                "name": "Make quality",
                "run": "cd backend\nmake quality\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build the stack",
                "run": "cd backend\nmv .env.template .env\ndocker-compose up -d --build\n"
            },
            {
                "id": 3,
                "name": "Build test server",
                "run": "docker exec collaborative-training-auth_server_1 pytest -v\n"
            }
        ],
        "huggingface/hf_benchmarks": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python Environment",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install requirements",
                "run": "pip install '.[cron]'"
            },
            {
                "id": 4,
                "name": "Execute scoring script",
                "run": "HF_GEM_TOKEN=$HF_GEM_TOKEN python scripts/run_gem_scoring.py"
            }
        ],
        "huggingface/optimum": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v2"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/checkout@v2"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/checkout@v2"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/checkout@v2"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "actions/checkout@v2"
            },
            {
                "id": 9,
                "name": "Free disk space",
                "run": "df -h\nsudo apt-get purge -y '^apache.*'\nsudo apt-get purge -y '^imagemagick.*'\nsudo apt-get purge -y '^dotnet.*'\nsudo apt-get purge -y '^aspnetcore.*'\nsudo apt-get purge -y 'php.*'\nsudo apt-get purge -y '^temurin.*'\nsudo apt-get purge -y '^mysql.*'\nsudo apt-get purge -y '^java.*'\nsudo apt-get purge -y '^openjdk.*'\nsudo apt-get purge -y microsoft-edge-stable google-cloud-cli azure-cli google-chrome-stable firefox powershell mono-devel\ndf -h\nsudo apt-get autoremove -y >/dev/null 2>&1\nsudo apt-get clean\ndf -h\necho \"https://github.com/actions/virtual-environments/issues/709\"\nsudo rm -rf \"$AGENT_TOOLSDIRECTORY\"\ndf -h\necho \"remove big /usr/local\"\nsudo rm -rf \"/usr/local/share/boost\"\nsudo rm -rf /usr/local/lib/android >/dev/null 2>&1\ndf -h\necho \"remove /usr/share leftovers\"\nsudo rm -rf /usr/share/dotnet/sdk > /dev/null 2>&1\nsudo rm -rf /usr/share/dotnet/shared > /dev/null 2>&1\nsudo rm -rf /usr/share/swift > /dev/null 2>&1\ndf -h\necho \"remove other leftovers\"\nsudo rm -rf /var/lib/mysql > /dev/null 2>&1\nsudo rm -rf /home/runner/.dotnet > /dev/null 2>&1\nsudo rm -rf /home/runneradmin/.dotnet > /dev/null 2>&1\nsudo rm -rf /etc/skel/.dotnet > /dev/null 2>&1\nsudo rm -rf /usr/local/.ghcup > /dev/null 2>&1\nsudo rm -rf /usr/local/aws-cli > /dev/null 2>&1\nsudo rm -rf /usr/lib/heroku > /dev/null 2>&1\nsudo rm -rf /usr/local/share/chromium > /dev/null 2>&1\ndf -h\n"
            },
            {
                "id": 10,
                "name": "Set environment variables",
                "run": "cd optimum\nversion=`echo \"$(grep '^__version__ =' optimum/version.py | cut -d '=' -f 2- | xargs)\"`\n\nif [[ $version == *.dev0 ]]\nthen\n  echo \"VERSION=main\" >> $GITHUB_ENV\nelse\n  echo \"VERSION=v$version\" >> $GITHUB_ENV\nfi\n\ncd ..\n"
            },
            {
                "id": 11,
                "name": "Setup environment",
                "run": "pip uninstall -y doc-builder\ncd doc-builder\ngit pull origin main\npip install .\npip install black\ncd ..\n"
            },
            {
                "id": 12,
                "name": "Make Habana documentation",
                "run": "sudo docker system prune -a -f\ncd optimum-habana\nmake doc BUILD_DIR=habana-doc-build VERSION=${{ env.VERSION }}\nsudo mv habana-doc-build ../optimum\ncd ..\n"
            },
            {
                "id": 13,
                "name": "Make Intel documentation",
                "run": "sudo docker system prune -a -f\ncd optimum-intel\nmake doc BUILD_DIR=intel-doc-build VERSION=${{ env.VERSION }}\nsudo mv intel-doc-build ../optimum\ncd ..\n"
            },
            {
                "id": 14,
                "name": "Make Furiosa documentation",
                "run": "cd optimum-furiosa\npip install .\nsudo apt install software-properties-common\nsudo add-apt-repository --remove https://packages.microsoft.com/ubuntu/22.04/prod\nsudo apt update\nsudo apt install -y ca-certificates apt-transport-https gnupg\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key 5F03AFA423A751913F249259814F888B20B09A7E\nsudo tee -a /etc/apt/auth.conf.d/furiosa.conf > /dev/null <<EOT\n  machine archive.furiosa.ai\n  login ${{ secrets.FURIOSA_ACCESS_KEY }}\n  password ${{ secrets.FURIOSA_SECRET_ACCESS_KEY }}\nEOT\nsudo chmod 400 /etc/apt/auth.conf.d/furiosa.conf\nsudo tee -a /etc/apt/sources.list.d/furiosa.list <<EOT\n  deb [arch=amd64] https://archive.furiosa.ai/ubuntu jammy restricted\nEOT\nsudo apt update && sudo apt install -y furiosa-libnux\ndoc-builder build optimum.furiosa docs/source/ --build_dir furiosa-doc-build --version pr_$PR_NUMBER --version_tag_suffix \"\" --html --clean\nmv furiosa-doc-build ../optimum\ncd ..\n"
            },
            {
                "id": 15,
                "name": "Make TPU documentation",
                "run": "sudo docker system prune -a -f\ncd optimum-tpu\npip install -U pip\npip install . -f https://storage.googleapis.com/libtpu-releases/index.html\ndoc-builder build optimum.tpu docs/source/ --build_dir tpu-doc-build --version pr_$PR_NUMBER --version_tag_suffix \"\" --html --clean\nmv tpu-doc-build ../optimum\ncd ..\n"
            },
            {
                "id": 16,
                "name": "Make AMD documentation",
                "run": "sudo docker system prune -a -f\ncd optimum-amd\nmake doc BUILD_DIR=amd-doc-build VERSION=${{ env.VERSION }}\nsudo mv amd-doc-build ../optimum\ncd ..\n"
            },
            {
                "id": 17,
                "name": "Make Optimum documentation",
                "run": "sudo docker system prune -a -f\ncd optimum\nmkdir -p optimum-doc-build/optimum && cd optimum-doc-build/optimum\nwget https://huggingface.co/datasets/hf-doc-build/doc-build/raw/main/optimum/_versions.yml\ncd ../..\nmake doc BUILD_DIR=optimum-doc-build VERSION=${{ env.VERSION }} COMMIT_SHA_OPTIMUM=${{ env.VERSION }}\ncd ..\n"
            },
            {
                "id": 18,
                "name": "Combine subpackage documentation",
                "run": "cd optimum\nsudo python docs/combine_docs.py --subpackages nvidia amd intel neuron tpu habana furiosa --version ${{ env.VERSION }}\ncd ..\n"
            },
            {
                "id": 19,
                "name": "Push to repositories",
                "run": "cd optimum/optimum-doc-build\nsudo chmod -R ugo+rwx optimum\ndoc-builder push optimum --doc_build_repo_id \"hf-doc-build/doc-build\" --token \"${{ secrets.HF_DOC_BUILD_PUSH }}\" --commit_msg \"Updated with commit ${{ github.sha }} See: https://github.com/huggingface/optimum/commit/${{ github.sha }}\" --n_retries 5 --upload_version_yml\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v2"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/checkout@v2"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/checkout@v2"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/checkout@v2"
            },
            {
                "id": 8,
                "name": "Setup environment",
                "run": "pip uninstall -y doc-builder\ncd doc-builder\ngit pull origin main\npip install .\npip install black\ncd ..\n"
            },
            {
                "id": 9,
                "name": "Make Habana documentation",
                "run": "sudo docker system prune -a -f\ncd optimum-habana\nmake doc BUILD_DIR=habana-doc-build VERSION=pr_$PR_NUMBER\nsudo mv habana-doc-build ../optimum\ncd ..\n"
            },
            {
                "id": 10,
                "name": "Make Intel documentation",
                "run": "sudo docker system prune -a -f\ncd optimum-intel\nmake doc BUILD_DIR=intel-doc-build VERSION=pr_$PR_NUMBER\nsudo mv intel-doc-build ../optimum\ncd ..\n"
            },
            {
                "id": 11,
                "name": "Make Furiosa documentation",
                "run": "echo \"For PRs we don't build Furiosa doc\"\n"
            },
            {
                "id": 12,
                "name": "Make AMD documentation",
                "run": "sudo docker system prune -a -f\ncd optimum-amd\nmake doc BUILD_DIR=amd-doc-build VERSION=pr_$PR_NUMBER\nsudo mv amd-doc-build ../optimum\ncd ..\n"
            },
            {
                "id": 13,
                "name": "Make TPU documentation",
                "run": "sudo docker system prune -a -f\ncd optimum-tpu\npip install -U pip\npip install . -f https://storage.googleapis.com/libtpu-releases/index.html\ndoc-builder build optimum.tpu docs/source/ --build_dir tpu-doc-build --version pr_$PR_NUMBER --version_tag_suffix \"\" --html --clean\nmv tpu-doc-build ../optimum\ncd ..\n"
            },
            {
                "id": 14,
                "name": "Make Optimum documentation",
                "run": "sudo docker system prune -a -f\ncd optimum\nmake doc BUILD_DIR=optimum-doc-build VERSION=pr_$PR_NUMBER COMMIT_SHA_OPTIMUM=$COMMIT_SHA CLONE_URL=$PR_CLONE_URL\ncd ..\n"
            },
            {
                "id": 15,
                "name": "Combine subpackage documentation",
                "run": "cd optimum\nsudo python docs/combine_docs.py --subpackages nvidia amd intel neuron tpu habana furiosa --version pr_$PR_NUMBER\nsudo mv optimum-doc-build ../\ncd ..\n"
            },
            {
                "id": 16,
                "name": "Save commit_sha & pr_number",
                "run": "sudo chmod -R ugo+rwx optimum-doc-build\ncd optimum-doc-build\necho ${{ env.COMMIT_SHA }} > ./commit_sha\necho ${{ env.PR_NUMBER }} > ./pr_number\n"
            },
            {
                "id": 17,
                "name": "Step 17",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Create and start a virtual environment",
                "run": "python -m venv venv\nsource venv/bin/activate\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "source venv/bin/activate\npip install --upgrade pip\npip install .[quality]\n"
            },
            {
                "id": 5,
                "name": "Check style with black",
                "run": "source venv/bin/activate\nblack --check .\n"
            },
            {
                "id": 6,
                "name": "Check style with ruff",
                "run": "source venv/bin/activate\nruff .\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install wheel\npip install .[tests,onnxruntime,benchmark]\npip install -U git+https://github.com/huggingface/evaluate\npip install -U git+https://github.com/huggingface/diffusers\npip install -U git+https://github.com/huggingface/transformers\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "python -m unittest discover --start-directory tests/benchmark --pattern\ntest_*.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests]\npip3 install --upgrade torch torchvision torchaudio\npip install accelerate\npip install -U git+https://github.com/huggingface/evaluate\npip install -U git+https://github.com/huggingface/diffusers\npip install -U git+https://github.com/huggingface/transformers\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "python -m unittest discover -s bettertransformer -p test_*.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install .[tests]\npip install -U git+https://github.com/huggingface/evaluate\npip install -U git+https://github.com/huggingface/diffusers\npip install -U git+https://github.com/huggingface/transformers\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "python -m unittest discover -s utils -p test_*.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,exporters-tf]\npip install -U git+https://github.com/huggingface/evaluate\npip install -U git+https://github.com/huggingface/diffusers\npip install -U git+https://github.com/huggingface/transformers\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "pytest exporters -s --durations=0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests]\npip install git+https://github.com/huggingface/transformers.git\npip install -U git+https://github.com/huggingface/evaluate\npip install -U git+https://github.com/huggingface/diffusers\npip install -U git+https://github.com/huggingface/transformers\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "python -m pytest fx/optimization/test_transformations.py --exitfirst\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,onnxruntime] tensorflow tf2onnx\npip install -U git+https://github.com/huggingface/evaluate\npip install -U git+https://github.com/huggingface/diffusers\npip install -U git+https://github.com/huggingface/transformers\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "python -m unittest discover -s onnx -p test_*.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,onnxruntime]\npip install -U git+https://github.com/huggingface/evaluate\npip install -U git+https://github.com/huggingface/diffusers\npip install -U git+https://github.com/huggingface/transformers\n"
            },
            {
                "id": 4,
                "name": "Test with pytest",
                "run": "python -m pytest -n auto -m \"not run_in_series\" onnxruntime\npython -m pytest -m \"run_in_series\" onnxruntime\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install .[tests]\nls -l optimum/\npip install -U git+https://github.com/huggingface/evaluate\npip install -U git+https://github.com/huggingface/diffusers\npip install -U git+https://github.com/huggingface/transformers\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "# Setting HUGGINGFACE_CO_STAGING to true for only one job of the matrix\nas the staging tests cannot run in parallel.\nexport HUGGINGFACE_CO_STAGING=${{ matrix.python-version == 3.8 && matrix.os\n== ubuntu-20.04 }}\npython -m unittest discover -s tests -p test_*.py\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build image",
                "run": "docker build -f tests/onnxruntime/Dockerfile_onnxruntime_gpu -t onnxruntime-gpu .\n"
            },
            {
                "id": 3,
                "name": "Test with unittest within docker container",
                "run": "docker run --rm --gpus all --workdir=/workspace/optimum/ onnxruntime-gpu:latest /bin/bash tests/run_doctest.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install wheel\npip install .[tests,onnxruntime,benchmark]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "python -m unittest discover --start-directory tests/benchmark --pattern 'test_*.py'\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests]\npip install --no-cache-dir --upgrade torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\npip install accelerate\n"
            },
            {
                "id": 4,
                "name": "Test with stable pytorch",
                "run": "pytest bettertransformer -s -vvvvv\n"
            },
            {
                "id": 5,
                "name": "Install dependencies 2",
                "run": "pip uninstall -y torch torchvision torchaudio\npip install --no-cache-dir --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cpu\n"
            },
            {
                "id": 6,
                "name": "Test with nightly pytorch",
                "run": "pytest bettertransformer -s -vvvvv\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build image",
                "run": "docker build -f tests/bettertransformer/Dockerfile_bettertransformer_gpu -t bettertransformer-gpu .\n"
            },
            {
                "id": 3,
                "name": "Test with unittest within docker container",
                "run": "docker run --rm --gpus all --workdir=/workspace/optimum/tests bettertransformer-gpu:latest\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install --upgrade pip\npip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\npip install .[tests,exporters,exporters-tf]\n"
            },
            {
                "id": 4,
                "name": "Test with pytest",
                "run": "pytest tests/cli -s -vvvv --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies for pytorch export",
                "run": "pip install .[tests,exporters]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "pytest exporters/onnx/test_onnx_*.py -s -n auto -m \"not tensorflow_test and not timm_test\" --durations=0\n"
            },
            {
                "id": 5,
                "name": "Install dependencies for tensorflow export",
                "run": "pip install .[tests,exporters-tf]\n"
            },
            {
                "id": 6,
                "name": "Test with unittest",
                "run": "pytest exporters/onnx/test_onnx_*.py -n auto -m \"tensorflow_test\" -s --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies for pytorch export",
                "run": "pip install .[tests,exporters]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "pytest exporters/onnx/test_exporters_onnx_cli.py -n auto -m \"not tensorflow_test and not timm_test\" -s --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies for pytorch export",
                "run": "pip install .[tests,exporters]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "RUN_SLOW=1 pytest exporters/onnx/test_exporters_onnx_cli.py -n auto -k \"timm\" -s --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies for pytorch export",
                "run": "pip install .[tests,exporters]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "RUN_SLOW=1 pytest exporters/onnx/ -s -n auto -k \"timm\" --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,exporters-tf]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "pytest exporters/tflite/test_tflite_*.py -s --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,exporters-tf]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "pytest exporters/tflite/test_exporters_tflite_cli.py -m \"not quantization\" -s --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,exporters-tf]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "pytest exporters/tflite/test_exporters_tflite_cli.py -k \"int8_dynamic_quantization\" -s --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,exporters-tf]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "pytest exporters/tflite/test_exporters_tflite_cli.py -k \"float16_quantization\" -s --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,exporters-tf]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "pytest exporters/tflite/test_exporters_tflite_cli.py -k \"full_int8_quantization_with_default_dataset\" -s --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,exporters-tf]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "pytest exporters/tflite/test_exporters_tflite_cli.py -k \"tflite_int8_quantization_with_custom_dataset\" -s --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,exporters-tf]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "pytest exporters/tflite/test_exporters_tflite_cli.py -k \"tflite_int8_quantization_with_default_dataset\" -s --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,exporters-tf]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "pytest exporters/tflite/test_exporters_tflite_cli.py -k \"tflite_int8x16_quantization_with_default_dataset\" -s --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,exporters-tf]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "pytest exporters/common/ -s --durations=0\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build image",
                "run": "docker build -f tests/exporters/Dockerfile_exporters_gpu -t exporters-gpu .\n"
            },
            {
                "id": 3,
                "name": "Test with unittest within docker container",
                "run": "docker run --rm --gpus all -v /mnt/cache/.cache/huggingface:/root/.cache/huggingface --workdir=/workspace/optimum/tests exporters-gpu:latest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies for pytorch export",
                "run": "pip install .[tests,exporters]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "RUN_SLOW=1 pytest exporters -s -m \"not tensorflow_test and run_slow\" --durations=0\n"
            },
            {
                "id": 5,
                "name": "Install dependencies for tensorflow export",
                "run": "pip install .[tests,exporters-tf]\n"
            },
            {
                "id": 6,
                "name": "Test with unittest",
                "run": "RUN_SLOW=1 pytest exporters -s -m \"tensorflow_test and run_slow\" --durations=0\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests]\n"
            },
            {
                "id": 4,
                "name": "Test with pytest",
                "run": "python -m pytest -s -v -x fx/optimization\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build image",
                "run": "docker build -f tests/gptq/Dockerfile_quantization_gpu -t gptq-gpu .\n"
            },
            {
                "id": 3,
                "name": "Test with unittest within docker container",
                "run": "docker run --rm --gpus all -v $(pwd)/hf_cache:/root/.cache/huggingface --workdir=/workspace/optimum/tests gptq-gpu:latest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies for pytorch export",
                "run": "pip install .[tests,exporters,onnxruntime]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "HF_HOME=/tmp/ huggingface-cli download hf-internal-testing/tiny-random-gpt2\n\nHF_HOME=/tmp/ HF_HUB_OFFLINE=1 optimum-cli export onnx --model hf-internal-testing/tiny-random-gpt2 gpt2_onnx --task text-generation\n\nhuggingface-cli download hf-internal-testing/tiny-random-gpt2\n\nHF_HUB_OFFLINE=1 optimum-cli export onnx --model hf-internal-testing/tiny-random-gpt2 gpt2_onnx --task text-generation\n\npytest tests/onnxruntime/test_modeling.py -k \"test_load_model_from_hub and not from_hub_onnx\" -s -vvvvv\n\nHF_HUB_OFFLINE=1 pytest tests/onnxruntime/test_modeling.py -k \"test_load_model_from_hub and not from_hub_onnx\" -s -vvvvv"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[tests,onnxruntime,exporters-tf]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "python -m unittest discover -s onnx -p 'test_*.py'\n"
            },
            {
                "id": 1,
                "name": "Free Disk Space (Ubuntu)",
                "run": "jlumbroso/free-disk-space@main"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pip install --upgrade pip\npip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\npip install .[tests,onnxruntime]\n"
            },
            {
                "id": 5,
                "name": "Test with pytest (in series)",
                "run": "pytest onnxruntime -m \"run_in_series\" --durations=0 -vvvv -s\n"
            },
            {
                "id": 6,
                "name": "Test with pytest (in parallel)",
                "run": "pytest onnxruntime -m \"not run_in_series\" --durations=0 -vvvv -s -n auto\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build image",
                "run": "docker build -f tests/onnxruntime/docker/Dockerfile_onnxruntime_gpu -t onnxruntime-gpu .\n"
            },
            {
                "id": 3,
                "name": "Test with unittest within docker container",
                "run": "docker run --rm --gpus all -v /mnt/cache/.cache/huggingface:/root/.cache/huggingface --workdir=/workspace/optimum/tests onnxruntime-gpu:latest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies for export",
                "run": "pip install .[tests,onnxruntime]\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "RUN_SLOW=1 pytest onnxruntime -s -m \"run_slow\" --durations=0\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build image",
                "run": "docker build -f tests/onnxruntime/docker/Dockerfile_onnxruntime_trainer -t onnxruntime/train .\n"
            },
            {
                "id": 3,
                "name": "Run test within docker container",
                "run": "docker run --rm --gpus all -v /mnt/cache/.cache/huggingface:/root/.cache/huggingface --workdir=/workspace/optimum/tests onnxruntime/train:latest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install .[tests]\nls -l optimum/\n"
            },
            {
                "id": 4,
                "name": "Test with unittest",
                "run": "# Setting HUGGINGFACE_CO_STAGING to true for only one job of the matrix as the staging tests cannot run in parallel.\nexport HUGGINGFACE_CO_STAGING=${{ matrix.python-version == '3.8' && matrix.os == 'ubuntu-20.04' }}\npytest tests/test_*.py\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\npip install .[tests]\n"
            },
            {
                "id": 4,
                "name": "Test with pytest",
                "run": "python -m pytest -s -vvvv utils\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Secret Scanning",
                "run": "trufflesecurity/trufflehog@main"
            }
        ],
        "huggingface/dataset-viewer": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build and launch the services (no cache)",
                "run": "docker compose -f docker-compose-dataset-viewer.yml up -d --wait --wait-timeout 20"
            },
            {
                "id": 3,
                "name": "Install poetry",
                "run": "pipx install poetry==${{ env.poetry-version }}"
            },
            {
                "id": 4,
                "name": "Use Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "poetry env use \"${{ env.python-version }}\"\npoetry install\n"
            },
            {
                "id": 6,
                "name": "End-to-end tests",
                "run": "poetry run python -m pytest -vv -s tests\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install poetry",
                "run": "pipx install poetry==${{ env.poetry-version }}"
            },
            {
                "id": 3,
                "name": "Use Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install packages",
                "run": "sudo apt update; sudo apt install -y ffmpeg libavcodec-extra libsndfile1"
            },
            {
                "id": 5,
                "name": "Verify consistency of poetry.lock with pyproject.toml",
                "run": "poetry lock --no-update --check"
            },
            {
                "id": 6,
                "name": "Install dependencies",
                "run": "poetry env use \"${{ env.python-version }}\"\npoetry install\n"
            },
            {
                "id": 7,
                "name": "Run ruff linter",
                "run": "if [ -d src ]; then poetry run ruff check src; fi\nif [ -d tests ]; then poetry run ruff check tests --ignore=ARG; fi\n"
            },
            {
                "id": 8,
                "name": "Run ruff formatter",
                "run": "if [ -d src ]; then poetry run ruff format --check src; fi\nif [ -d tests ]; then poetry run ruff format --check tests; fi\n"
            },
            {
                "id": 9,
                "name": "Run mypy",
                "run": "if [ -d src ]; then poetry run mypy src; fi\nif [ -d tests ]; then poetry run mypy tests; fi\n"
            },
            {
                "id": 10,
                "name": "Run bandit",
                "run": "if [ -d src ]; then poetry run bandit -r src; fi"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install poetry",
                "run": "pipx install poetry==${{ env.poetry-version }}"
            },
            {
                "id": 3,
                "name": "Use Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install packages",
                "run": "sudo apt update; sudo apt install -y ffmpeg libavcodec-extra libsndfile1"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "poetry env use \"${{ env.python-version }}\"\npoetry install\n"
            },
            {
                "id": 6,
                "name": "Launch mongo",
                "run": "docker compose -f docker-compose-mongo.yml up -d --wait --wait-timeout 20"
            },
            {
                "id": 7,
                "name": "Run unit tests",
                "run": "poetry run python -m pytest -s"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 3,
                "name": "Set outputs",
                "run": "echo \"sha_short=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 5,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v5"
            },
            {
                "id": 6,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Update dependencies",
                "run": "helm dependencies update"
            },
            {
                "id": 3,
                "name": "Lint chart with default values",
                "run": "helm lint"
            },
            {
                "id": 4,
                "name": "Lint chart with staging values",
                "run": "helm lint --values env/staging.yaml"
            },
            {
                "id": 5,
                "name": "Lint chart with prod values",
                "run": "helm lint --values env/prod.yaml"
            },
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set outputs",
                "run": "echo \"sha_short=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 3,
                "name": "Gen values",
                "run": "VALUES=$(cat <<-END\n  images:\n    jobs:\n      mongodbMigration:\n        tag: sha-${{ steps.vars.outputs.sha_short }}\n      cacheMaintenance:\n        tag: sha-${{ steps.vars.outputs.sha_short }}\n    services:\n      admin:\n        tag: sha-${{ steps.vars.outputs.sha_short }}\n      api:\n        tag: sha-${{ steps.vars.outputs.sha_short }}\n      rows:\n        tag: sha-${{ steps.vars.outputs.sha_short }}\n      search:\n        tag: sha-${{ steps.vars.outputs.sha_short }}\n      sseApi:\n        tag: sha-${{ steps.vars.outputs.sha_short }}\n      worker:\n        tag: sha-${{ steps.vars.outputs.sha_short }}\n      webhook:\n        tag: sha-${{ steps.vars.outputs.sha_short }}\nEND\n)\necho \"VALUES=$(echo \"$VALUES\" | yq -o=json | jq tostring)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Deploy on infra-deployments",
                "run": "aurelien-baudet/workflow-dispatch@v2"
            },
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Update dependencies",
                "run": "helm dependencies update"
            },
            {
                "id": 3,
                "name": "Lint chart with default values",
                "run": "helm lint"
            },
            {
                "id": 4,
                "name": "Lint chart with staging values",
                "run": "helm lint --values env/staging.yaml"
            },
            {
                "id": 5,
                "name": "Lint chart with prod values",
                "run": "helm lint --values env/prod.yaml"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Update dependencies",
                "run": "helm dependencies update"
            },
            {
                "id": 3,
                "name": "Tailscale",
                "run": "tailscale/github-action@main"
            },
            {
                "id": 4,
                "name": "ArgoCD Diff",
                "run": "XciD/argocd-diff-action@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "stoplightio/spectral-action@latest"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Helm Publish",
                "run": "huggingface/helm-publish-action@latest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install requirements",
                "run": "pip install PyGithub\n"
            },
            {
                "id": 4,
                "name": "Close stale issues",
                "run": "python tools/stale.py\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Secret Scanning",
                "run": "trufflesecurity/trufflehog@main"
            }
        ],
        "huggingface/course": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.8",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install Python dependencies",
                "run": "pip install black"
            },
            {
                "id": 4,
                "name": "Run Quality check",
                "run": "make quality"
            }
        ],
        "huggingface/doc-builder": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Loading cache.",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Setup environment",
                "run": "cd doc-builder\npip install .\ncd ..\n\ncd accelerate\npip install .[dev]\ncd ..\n"
            },
            {
                "id": 6,
                "name": "Make documentation",
                "run": "cd doc-builder &&\ndoc-builder build accelerate ../accelerate/docs/source --build_dir ../build_dir --clean --html &&\ncd ..\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 5,
                "name": "Export ROOT_APT_GET ('apt-get' or 'sudo apt-get')",
                "run": "if [ -z \"${{ inputs.custom_container }}\" ]\nthen\n  echo \"ROOT_APT_GET=sudo apt-get\" >> $GITHUB_ENV\nelse\n  echo \"ROOT_APT_GET=apt-get\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 6,
                "name": "Export PIP_OR_UV ('pip' or 'uv pip')",
                "run": "if [ -z \"${{ inputs.custom_container }}\" ]\nthen\n  echo \"PIP_OR_UV=uv pip\" >> $GITHUB_ENV\nelse\n  echo \"PIP_OR_UV=pip\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 7,
                "name": "Set env variables",
                "run": "if [ -z \"${{ inputs.path_to_docs }}\" ]\nthen\n  echo \"doc_folder=${{ inputs.package }}/docs/source\" >> $GITHUB_ENV\n  echo \"path_to_docs not provided, defaulting to ${{ inputs.package }}/docs/source\"\nelse\n  echo \"doc_folder=${{ inputs.path_to_docs }}\" >> $GITHUB_ENV\nfi\n\nif [ -z \"${{ inputs.package_name }}\" ];\nthen\n  echo \"package_name=${{ inputs.package }}\" >> $GITHUB_ENV\nelse\n  echo \"package_name=${{ inputs.package_name }}\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 8,
                "name": "Install zip",
                "run": "$ROOT_APT_GET install -y zip"
            },
            {
                "id": 9,
                "name": "Install libgl1",
                "run": "$ROOT_APT_GET install -y libgl1"
            },
            {
                "id": 10,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 11,
                "name": "Install uv",
                "run": "pip install -U uv\nuv venv\n"
            },
            {
                "id": 12,
                "name": "Setup environment",
                "run": "source .venv/bin/activate\n$PIP_OR_UV uninstall doc-builder\ncd doc-builder\ngit pull origin main\n$PIP_OR_UV install .\ncd ..\n\nif [[ -n \"${{ inputs.package_path }}\" ]]\nthen\n  cd ${{ inputs.package_path }}\n  $PIP_OR_UV install .[dev]\nelif [[ \"${{ inputs.additional_args }}\" != *\"--not_python_module\"* ]];\nthen\n  cd ${{ inputs.package }}\n  $PIP_OR_UV install .[dev]\nfi\ncd ..\n"
            },
            {
                "id": 13,
                "name": "Setup git",
                "run": "git config --global user.name \"Hugging Face Doc Builder\"\ngit config --global user.email docs@huggingface.co\n"
            },
            {
                "id": 14,
                "name": "Create build directory",
                "run": "mkdir build_dir\nmkdir build_dir/${{ env.package_name }}\ncd build_dir/${{ env.package_name }}\nwget https://huggingface.co/datasets/hf-doc-build/doc-build/raw/main/${{ env.package_name }}/_versions.yml\n"
            },
            {
                "id": 15,
                "name": "Run pre-command",
                "run": "source .venv/bin/activate\nif [ ! -z \"${{ inputs.pre_command }}\" ]\nthen\n  bash -c \"${{ inputs.pre_command }}\"\nfi\n"
            },
            {
                "id": 16,
                "name": "Convert notebooks to markdown files",
                "run": "source .venv/bin/activate\nbranch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}\nremaining_part=$(echo \"${{ env.doc_folder }}\" | perl -pe 's|^[^/]+||')\nremaining_part=${remaining_part%/}\necho https://colab.research.google.com/github/${{ inputs.repo_owner }}/${{ inputs.package }}/blob/$branch$remaining_part\n\ndoc-builder notebook-to-mdx ${{ env.doc_folder }} --open_notebook_prefix https://colab.research.google.com/github/${{ inputs.repo_owner }}/${{ inputs.package }}/blob/$branch$remaining_part\n"
            },
            {
                "id": 17,
                "name": "Make documentation",
                "run": "source .venv/bin/activate\necho \"doc_folder has been set to ${{ env.doc_folder }}\"\ncd doc-builder\nargs=\"--build_dir ../build_dir --clean --html ${{ inputs.additional_args }} --repo_owner ${{ inputs.repo_owner }} --repo_name ${{ inputs.package }} --version_tag_suffix=${{ inputs.version_tag_suffix }}\"\n\nif [ ! -z \"${{ inputs.notebook_folder }}\" ];\nthen\n  args=\"$args --notebook_dir ../notebook_dir\"\nfi\n\nif [ -z \"${{ inputs.languages }}\" ];\nthen\n  echo \"languages not provided, defaulting to English\"\n  doc-builder build ${{ env.package_name }} ../${{ env.doc_folder }} $args\nelse\n  IFS=', ' read -r -a langs <<< \"${{ inputs.languages }}\"\n  for lang in \"${langs[@]}\"\n  do\n      echo \"Generating docs for language $lang\"\n      doc-builder build ${{ env.package_name }} ../${{ env.doc_folder }}/$lang $args --language $lang\n  done\nfi\n\ncd ..\n"
            },
            {
                "id": 18,
                "name": "Push to repositories",
                "run": "source .venv/bin/activate\ncd build_dir\ndoc-builder push ${{ env.package_name }} --doc_build_repo_id \"hf-doc-build/doc-build\" --token \"${{ secrets.hf_token }}\" --commit_msg \"Updated with commit ${{ inputs.commit_sha }} See: https://github.com/${{ inputs.repo_owner }}/${{ inputs.package }}/commit/${{ inputs.commit_sha }}\" --n_retries 5 --upload_version_yml\ncd ..\n\nif [ -d \"notebook_dir\" ]\nthen\n  cd notebooks\n  git pull\n  cp -r ../notebook_dir/. ${{ inputs.notebook_folder }}\n  git status\n  if [[ `git status --porcelain` ]]; then\n    git add ${{ inputs.notebook_folder }}\n    git commit -m \"Updated ${{ inputs.package }} doc notebooks with commit ${{ inputs.commit_sha }} \\n\\nSee: https://github.com/huggingface/${{ inputs.package }}/commit/${{ inputs.commit_sha }}\"\n    git push origin main ||\n    (echo \"Failed on the first try, rebasing and pushing again\" && git pull --rebase && git push origin main) ||\n    (echo \"Failed on the second try, rebasing and pushing again\" && git pull --rebase && git push origin main)\n  else\n    echo \"No diff in the notebooks.\"\n  fi\n  cd ..\nelse\n  echo \"Notebooks creation was not enabled.\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 4,
                "name": "Export ROOT_APT_GET ('apt-get' or 'sudo apt-get')",
                "run": "if [ -z \"${{ inputs.custom_container }}\" ]\nthen\n  echo \"ROOT_APT_GET=sudo apt-get\" >> $GITHUB_ENV\nelse\n  echo \"ROOT_APT_GET=apt-get\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 5,
                "name": "Export PIP_OR_UV ('pip' or 'uv pip')",
                "run": "if [ -z \"${{ inputs.custom_container }}\" ]\nthen\n  echo \"PIP_OR_UV=uv pip\" >> $GITHUB_ENV\nelse\n  echo \"PIP_OR_UV=pip\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 6,
                "name": "Set env variables",
                "run": "if [ -z \"${{ inputs.path_to_docs }}\" ]\nthen\n  echo \"doc_folder=${{ inputs.package }}/docs/source\" >> $GITHUB_ENV\n  echo \"path_to_docs not provided, defaulting to ${{ inputs.package }}/docs/source\"\nelse\n  echo \"doc_folder=${{ inputs.path_to_docs }}\" >> $GITHUB_ENV\nfi\n\nif [ -z \"${{ inputs.package_name }}\" ];\nthen\n  package_name=${{ inputs.package }}\nelse\n  package_name=${{ inputs.package_name }}\nfi\n\nif [ -z \"${{ inputs.package_name }}\" ];\nthen\n  echo \"package_name=${{ inputs.package }}\" >> $GITHUB_ENV\nelse\n  echo \"package_name=${{ inputs.package_name }}\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 7,
                "name": "Install libgl1",
                "run": "$ROOT_APT_GET install -y libgl1"
            },
            {
                "id": 8,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 9,
                "name": "Install uv",
                "run": "pip install -U uv\nuv venv\n"
            },
            {
                "id": 10,
                "name": "Setup environment",
                "run": "source .venv/bin/activate\n$PIP_OR_UV uninstall doc-builder\ncd doc-builder\ngit pull origin ${{ inputs.doc_builder_revision }}\n$PIP_OR_UV install .\ncd ..\n\nif [[ -n \"${{ inputs.package_path }}\" ]]\nthen\n  cd ${{ inputs.package_path }}\n  $PIP_OR_UV install .[dev]\nelif [[ \"${{ inputs.additional_args }}\" != *\"--not_python_module\"* ]];\nthen\n  cd ${{ inputs.package }}\n  $PIP_OR_UV install .[dev]\nfi\ncd ..\n"
            },
            {
                "id": 11,
                "name": "Run pre-command",
                "run": "source .venv/bin/activate\nif [ ! -z \"${{ inputs.pre_command }}\" ]\nthen\n  bash -c \"${{ inputs.pre_command }}\"\nfi\n"
            },
            {
                "id": 12,
                "name": "Convert notebooks to markdown files",
                "run": "source .venv/bin/activate\nbranch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}\nremaining_part=$(echo \"${{ env.doc_folder }}\" | perl -pe 's|^[^/]+||')\nremaining_part=${remaining_part%/}\necho https://colab.research.google.com/github/${{ inputs.repo_owner }}/${{ inputs.package }}/blob/$branch$remaining_part\n\ndoc-builder notebook-to-mdx ${{ env.doc_folder }} --open_notebook_prefix https://colab.research.google.com/github/${{ inputs.repo_owner }}/${{ inputs.package }}/blob/$branch$remaining_part\n"
            },
            {
                "id": 13,
                "name": "Make documentation",
                "run": "source .venv/bin/activate\necho \"doc_folder has been set to ${{ env.doc_folder }}\"\ncd doc-builder\nargs=\"--build_dir ../build_dir --clean --version pr_${{ inputs.pr_number }} --html ${{ inputs.additional_args }} --repo_owner ${{ inputs.repo_owner }} --repo_name ${{ inputs.package }} --version_tag_suffix=${{ inputs.version_tag_suffix }}\"\n\nif [ -z \"${{ inputs.languages }}\" ];\nthen\n  echo \"languages not provided, defaulting to English\"\n  doc-builder build ${{ env.package_name }} ../${{ env.doc_folder }} $args\nelse\n  IFS=', ' read -r -a langs <<< \"${{ inputs.languages }}\"\n  for lang in \"${langs[@]}\"\n  do\n      echo \"Generating docs for language $lang\"\n      doc-builder build ${{ env.package_name }} ../${{ env.doc_folder }}/$lang $args --language $lang\n  done\nfi\ncd ..\n"
            },
            {
                "id": 14,
                "name": "Save commit_sha & pr_number",
                "run": "echo ${{ inputs.commit_sha }} > ./build_dir/commit_sha\necho ${{ inputs.pr_number }} > ./build_dir/pr_number\n"
            },
            {
                "id": 15,
                "name": "Step 15",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "denoland/setup-deno@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "deno run --allow-env --allow-net --allow-run --allow-read ./delete-old-prs.ts"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm install ci"
            },
            {
                "id": 4,
                "name": "Checking lint/format errors",
                "run": "npm run lint"
            },
            {
                "id": 5,
                "name": "Checking type errors",
                "run": "npm run check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install Python dependencies",
                "run": "pip install -e .[quality]"
            },
            {
                "id": 4,
                "name": "Run Quality check",
                "run": "make quality"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install Python dependencies",
                "run": "pip install -e \".[all]\"\npip install git+https://github.com/huggingface/transformers\n"
            },
            {
                "id": 4,
                "name": "Run Tests",
                "run": "python -m pytest -n 1 --dist=loadfile -s -v ./tests/"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup environment",
                "run": "pip install black\ncd doc-builder\npip install .\ncd ..\necho \"current_work_dir=$(pwd)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Download artifact",
                "run": "actions/github-script@v3.1.0"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "mkdir build_dir\nunzip doc-build-artifact.zip -d build_dir\n"
            },
            {
                "id": 5,
                "name": "Display structure of downloaded files",
                "run": "ls -l"
            },
            {
                "id": 6,
                "name": "Get commit_sha & pr_number",
                "run": "content_commit_sha=$(cat ./build_dir/commit_sha)\nif [[ $content_commit_sha =~ ^[0-9a-zA-Z]{40}$ ]]; then\n  echo \"commit_sha=$content_commit_sha\" >> $GITHUB_OUTPUT\n  rm -rf ./build_dir/commit_sha\nelse\n  echo \"Encountered an invalid commit_sha\"\n  exit 1\nfi\n\ncontent_pr_number=$(cat ./build_dir/pr_number)\nif [[ $content_pr_number =~ ^[0-9]+$ ]]; then\n  echo \"pr_number=$content_pr_number\" >> $GITHUB_OUTPUT\n  rm -rf ./build_dir/pr_number\nelse\n  echo \"Encountered an invalid pr_number\"\n  exit 1\nfi\n"
            },
            {
                "id": 7,
                "name": "Set hub_docs_url",
                "run": "if [ -z \"${{ inputs.hub_base_path }}\" ]\nthen\n  echo \"hub_docs_url=https://moon-ci-docs.huggingface.co/docs/${{ inputs.package_name }}/pr_${{ steps.github-context.outputs.pr_number }}\" >> $GITHUB_OUTPUT\n  echo \"hub_base_path not provided, defaulting to https://moon-ci-docs.huggingface.co/docs\"\nelse\n  echo \"hub_docs_url=${{ inputs.hub_base_path }}/${{ inputs.package_name }}/pr_${{ steps.github-context.outputs.pr_number }}\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 8,
                "name": "Push to repositories",
                "run": "cd build_dir\ndoc-builder push ${{ inputs.package_name }} --doc_build_repo_id \"hf-doc-build/doc-build-dev\" --token \"${{ secrets.hf_token }}\" --commit_msg \"Updated with commit ${{ steps.github-context.outputs.commit_sha }} See: https://github.com/${{ inputs.repo_owner }}/${{ inputs.package_name }}/commit/${{ steps.github-context.outputs.commit_sha }}\"\n"
            },
            {
                "id": 9,
                "name": "Find doc comment",
                "run": "peter-evans/find-comment@v2"
            },
            {
                "id": 10,
                "name": "Add doc comment if not present",
                "run": "thollander/actions-comment-pull-request@v2"
            },
            {
                "id": 11,
                "name": "Update doc comment if necessary",
                "run": "peter-evans/create-or-update-comment@v1"
            }
        ],
        "huggingface/workshops": [
            {
                "id": 1,
                "name": "Checkout first",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Add/update badges",
                "run": "trsvchn/colab-badge-action@v4"
            },
            {
                "id": 3,
                "name": "Commit & push changes",
                "run": "stefanzweifel/git-auto-commit-action@v4"
            }
        ],
        "huggingface/optimum-graphcore": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Setup environment",
                "run": "python -m venv doc_builder_venv --clear\nsource doc_builder_venv/bin/activate\npip uninstall -y doc-builder\ncd doc-builder\ngit pull origin main\npip install .\npip install .[quality]\ncd ..\n"
            },
            {
                "id": 4,
                "name": "Make documentation",
                "run": "source doc_builder_venv/bin/activate\ncd optimum-graphcore\nmake doc BUILD_DIR=graphcore-doc-build VERSION=pr_$PR_NUMBER COMMIT_SHA_SUBPACKAGE=$COMMIT_SHA CLONE_URL=$PR_CLONE_URL CLONE_NAME=$PR_CLONE_NAME\ncd ..\n"
            },
            {
                "id": 5,
                "name": "Save commit_sha & pr_number",
                "run": "source doc_builder_venv/bin/activate\ncd optimum-graphcore\nsudo chmod -R ugo+rwx graphcore-doc-build\ncd graphcore-doc-build\nsudo mv optimum.graphcore optimum-graphcore\necho ${{ env.COMMIT_SHA }} > ./commit_sha\necho ${{ env.PR_NUMBER }} > ./pr_number\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Create and start a virtual environment",
                "run": "python -m venv code_quality_venv --clear\nsource code_quality_venv/bin/activate\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "source code_quality_venv/bin/activate\npip install --upgrade pip\npip install .[quality]\n"
            },
            {
                "id": 5,
                "name": "Check style with black",
                "run": "source code_quality_venv/bin/activate\nblack --check examples tests optimum\n"
            },
            {
                "id": 6,
                "name": "Check style with ruff",
                "run": "source code_quality_venv/bin/activate\nruff examples tests optimum\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Create and start a virtual environment",
                "run": "python -m venv examples_venv --clear\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "source examples_venv/bin/activate\npip install --upgrade pip\nexport SDK_PATH=/opt/gc/poplar_sdk-ubuntu_20_04-3.3*\npip install ${SDK_PATH}/poptorch-*.whl\npip install .[testing]\npip install memory-profiler matplotlib\n"
            },
            {
                "id": 5,
                "name": "Test with Pytest",
                "run": "source examples_venv/bin/activate\nexport SDK_PATH=/opt/gc/poplar_sdk-ubuntu_20_04-3.3*\n. ${SDK_PATH}/poplar-ubuntu_20_04*/enable.sh\n. ${SDK_PATH}/popart-ubuntu_20_04*/enable.sh\npytest tests/test_examples_match_transformers.py -v --durations=0\nmprof run --exit-code --interval 1 --include-children --multiprocess \\\n  pytest tests/test_examples.py -v -n 4 --durations=0\nmprof plot -o memory_profile.png\n"
            },
            {
                "id": 6,
                "name": "Upload memory profile",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 7,
                "name": "Upload PopTorch error log if present",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Create and start a virtual environment",
                "run": "python -m venv general_venv --clear \nsource general_venv/bin/activate\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "source general_venv/bin/activate\npip install --upgrade pip\nexport SDK_PATH=/opt/gc/poplar_sdk-ubuntu_20_04-3.3*\npip install ${SDK_PATH}/poptorch-*.whl\npip install .[testing]\n"
            },
            {
                "id": 5,
                "name": "Test with Pytest",
                "run": "source general_venv/bin/activate\nexport SDK_PATH=/opt/gc/poplar_sdk-ubuntu_20_04-3.3*\n. ${SDK_PATH}/poplar-ubuntu_20_04*/enable.sh\n. ${SDK_PATH}/popart-ubuntu_20_04*/enable.sh\npytest tests/ -v -n 16 --ignore=tests/pipelines/ --ignore=tests/test_examples_match_transformers.py\npytest tests/test_examples_match_transformers.py -v\n"
            },
            {
                "id": 6,
                "name": "Upload PopTorch error log if present",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Create and start a virtual environment",
                "run": "python -m venv pipelines_venv --clear \n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "source pipelines_venv/bin/activate\npip install --upgrade pip\nexport SDK_PATH=/opt/gc/poplar_sdk-ubuntu_20_04-3.3*\npip install ${SDK_PATH}/poptorch-*.whl\npip install .[testing]\npip install memory-profiler matplotlib\n"
            },
            {
                "id": 5,
                "name": "Test with Pytest",
                "run": "source pipelines_venv/bin/activate\nexport SDK_PATH=/opt/gc/poplar_sdk-ubuntu_20_04-3.3*\n. ${SDK_PATH}/poplar-ubuntu_20_04*/enable.sh\n. ${SDK_PATH}/popart-ubuntu_20_04*/enable.sh\nmprof run --exit-code --interval 1 --include-children --multiprocess \\\n  pytest tests/pipelines/ -v -n 4\nmprof plot -o memory_profile.png\n"
            },
            {
                "id": 6,
                "name": "Upload memory profile",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 7,
                "name": "Upload PopTorch error log if present",
                "run": "actions/upload-artifact@v3"
            }
        ],
        "huggingface/huggingface_sb3": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install --upgrade pip\npip install setuptools wheel\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "python setup.py sdist bdist_wheel"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pip install twine\n"
            },
            {
                "id": 6,
                "name": "Upload to PyPi",
                "run": "twine upload dist/* -u __token__ -p \"$PYPI_TOKEN\""
            }
        ],
        "huggingface/optimum-habana": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Setup environment",
                "run": "pip uninstall -y doc-builder\ncd doc-builder\ngit pull origin main\npip install .\ncd ..\n"
            },
            {
                "id": 4,
                "name": "Make documentation",
                "run": "cd optimum-habana\nmake doc BUILD_DIR=habana-doc-build VERSION=pr_$PR_NUMBER COMMIT_SHA_SUBPACKAGE=$COMMIT_SHA CLONE_URL=$PR_CLONE_URL\ncd ..\n"
            },
            {
                "id": 5,
                "name": "Save commit_sha & pr_number",
                "run": "cd optimum-habana\nsudo chmod -R ugo+rwx habana-doc-build\ncd habana-doc-build\nsudo mv optimum.habana optimum-habana\necho ${{ env.COMMIT_SHA }} > ./commit_sha\necho ${{ env.PR_NUMBER }} > ./pr_number\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Create and start a virtual environment",
                "run": "python -m venv venv\nsource venv/bin/activate\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "source venv/bin/activate\npip install --upgrade pip\npip install ruff\n"
            },
            {
                "id": 5,
                "name": "Check style with ruff",
                "run": "source venv/bin/activate\nruff check . setup.py\nruff format --check . setup.py\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/fast_tests.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/fast_tests_diffusers.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/example_diff_tests.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/slow_tests_diffusers.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/slow_tests_deepspeed.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/slow_tests_8x.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/slow_tests_1x.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run test",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/albert_xxl_1x.sh\n"
            },
            {
                "id": 4,
                "name": "Warning",
                "run": "echo \"ALBERT XXL 1x is only tested on Saturdays.\""
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\nmake slow_tests_text_generation_example TOKEN=${{ secrets.TEXT_GENERATION_CI_HUB_TOKEN }}\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/slow_tests_trl.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout Optimum Habana",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Checkout Sentence Transformers",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash optimum-habana/tests/ci/sentence_transformers.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n-e GAUDI2_CI=1 \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/slow_tests_diffusers.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n-e GAUDI2_CI=1 \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/slow_tests_deepspeed.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n-e GAUDI2_CI=1 \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\nmake slow_tests_fsdp TOKEN=${{ secrets.TEXT_GENERATION_CI_HUB_TOKEN }}\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n-e GAUDI2_CI=1 \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/slow_tests_8x.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n-e GAUDI2_CI=1 \\\n-e RUN_ALBERT_XXL_1X=1 \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/slow_tests_1x.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n-e GAUDI2_CI=1 \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\nmake slow_tests_text_generation_example TOKEN=${{ secrets.TEXT_GENERATION_CI_HUB_TOKEN }}\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n-e GAUDI2_CI=1 \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash tests/ci/slow_tests_trl.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout Optimum Habana",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Checkout Sentence Transformers",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Pull image",
                "run": "docker pull vault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest\n"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "docker run \\\n-v $PWD:/root/workspace \\\n--workdir=/root/workspace \\\n--runtime=habana \\\n-e HABANA_VISIBLE_DEVICES=all \\\n-e GAUDI2_CI=1 \\\n-e OMPI_MCA_btl_vader_single_copy_mechanism=none \\\n--cap-add=sys_nice \\\n--net=host \\\n--ipc=host \\\nvault.habana.ai/gaudi-docker/1.16.0/ubuntu22.04/habanalabs/pytorch-installer-2.2.2:latest \\\n/bin/bash optimum-habana/tests/ci/sentence_transformers.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Secret Scanning",
                "run": "trufflesecurity/trufflehog@main"
            }
        ],
        "huggingface/hub-docs": [
            {
                "id": 1,
                "name": "maintain-comment",
                "run": "actions-cool/maintain-one-comment@v3"
            }
        ],
        "huggingface/evaluate": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install .[quality]\n"
            },
            {
                "id": 4,
                "name": "Check quality",
                "run": "black --check --line-length 119 --target-version py36 tests src metrics comparisons measurements\nisort --check-only tests src metrics comparisons measurements\nflake8 tests src metrics\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python 3.8",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install --upgrade pip"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pip install .[tests]\npip install -r additional-tests-requirements.txt --no-deps\n"
            },
            {
                "id": 5,
                "name": "Test with pytest",
                "run": "python -m pytest -n 2 --dist loadfile -sv ./tests/ --ignore=./tests/test_trainer_evaluator_parity.py\n"
            },
            {
                "id": 6,
                "name": "Integration test with transformers",
                "run": "python -m pytest -n 2 --dist loadfile -sv ./tests/test_trainer_evaluator_parity.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install --upgrade pip\npip install setuptools wheel\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "python setup.py sdist bdist_wheel"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pip install twine\n"
            },
            {
                "id": 6,
                "name": "Upload to PyPi",
                "run": "twine upload dist/* -u __token__ -p \"$PYPI_TOKEN\"\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Secret Scanning",
                "run": "trufflesecurity/trufflehog@main"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Set up default Git config",
                "run": "git config --global user.name evaluate-bot\ngit config --global user.email leandro@huggingface.co\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install -r requirements.txt\n"
            },
            {
                "id": 5,
                "name": "Update Hub repositories",
                "run": "export HF_TOKEN=${{ secrets.HF_HUB_TOKEN }}\nexport EVALUATE_LIB_PATH=$GITHUB_WORKSPACE\nexport GIT_HASH=$GITHUB_SHA\nexport GIT_LFS_SKIP_SMUDGE=1\npython push_evaluations_to_hub.py"
            }
        ],
        "huggingface/model-evaluator": [
            {
                "id": 1,
                "name": "Check large files",
                "run": "ActionsDesk/lfs-warning@v2.0"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python environment",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npython -m pip install black isort flake8\n"
            },
            {
                "id": 4,
                "name": "Code quality",
                "run": "make quality"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python Environment",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install requirements",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 4,
                "name": "Execute scoring script",
                "run": "HF_TOKEN=$HF_TOKEN AUTOTRAIN_USERNAME=$AUTOTRAIN_USERNAME AUTOTRAIN_BACKEND_API=$AUTOTRAIN_BACKEND_API python run_evaluation_jobs.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Push to hub",
                "run": "git push https://lewtun:$HF_TOKEN@huggingface.co/spaces/autoevaluate/model-evaluator main\n"
            }
        ],
        "huggingface/ml-agents": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-dotnet@v1"
            },
            {
                "id": 4,
                "name": "Cache pip",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npython -m pip install --upgrade setuptools\n# Install the local checkouts of ml-agents. This will prevent the colab notebooks from installing a released version.\npython -m pip install --progress-bar=off -e ./ml-agents-envs\npython -m pip install --progress-bar=off -e ./ml-agents\npython -m pip install --progress-bar=off -r colab_requirements.txt\n"
            },
            {
                "id": 6,
                "name": "Execute notebook",
                "run": "jupyter nbconvert --to notebook --execute --log-level=INFO --ExecutePreprocessor.kernel_name=python3 --output output-${{ matrix.notebook_path }} colab/${{ matrix.notebook_path }}"
            },
            {
                "id": 7,
                "name": "Upload colab results",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "dessant/lock-threads@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@v2-beta"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "sudo npm install -g markdown-link-check"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pre-commit/action@v2.0.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-ruby@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/setup-dotnet@v1"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pre-commit/action@v2.0.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@v2-beta"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "sudo npm install -g markdown-link-check"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pre-commit/action@v2.0.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "python utils/validate_meta_files.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Cache pip",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Display Python version",
                "run": "python -c \"import sys; print(sys.version)\""
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npython -m pip install --upgrade setuptools\npython -m pip install --progress-bar=off -e ./ml-agents-envs -c ${{ matrix.pip_constraints }}\npython -m pip install --progress-bar=off -e ./ml-agents -c ${{ matrix.pip_constraints }}\npython -m pip install --progress-bar=off -r test_requirements.txt -c ${{ matrix.pip_constraints }}\npython -m pip install --progress-bar=off -e ./gym-unity -c ${{ matrix.pip_constraints }}\npython -m pip install --progress-bar=off -e ./ml-agents-plugin-examples -c ${{ matrix.pip_constraints }}\n"
            },
            {
                "id": 6,
                "name": "Save python dependencies",
                "run": "pip freeze > pip_versions-${{ matrix.python-version }}.txt\ncat pip_versions-${{ matrix.python-version }}.txt\n"
            },
            {
                "id": 7,
                "name": "Run pytest",
                "run": "pytest --cov=ml-agents --cov=ml-agents-envs --cov=gym-unity --cov-report html --junitxml=junit/test-results-${{ matrix.python-version }}.xml -p no:warnings -v"
            },
            {
                "id": 8,
                "name": "Upload pytest test results",
                "run": "actions/upload-artifact@v2"
            }
        ],
        "huggingface/simulate": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Caching Unity Library",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Build Unity Simulate",
                "run": "game-ci/unity-builder@v2"
            },
            {
                "id": 4,
                "name": "Compress",
                "run": "mkdir ${{ github.workspace }}/compressed_builds\ncd ${{ github.workspace }}/integrations/Unity/builds/\ntar -cvzf ${{ github.workspace }}/compressed_builds/${{ matrix.targetPlatform }}.tar.gz ./${{ matrix.targetPlatform }}\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 3,
                "name": "Push builds to Hub",
                "run": "GIT_LFS_SKIP_SMUDGE=1 git clone https://huggingface.co/spaces/simulate-tests/$REPO_NAME\ncd ./$REPO_NAME\nrm -r ./builds\nmv ../builds .\ngit config user.name thomwolf\ngit config user.email thomas@huggingface.co\ngit add .\ngit commit -m \"Build github commit ${{ github.event.pull_request.head.sha }}\"\ngit push https://HF_USERNAME:$HF_TOKEN@huggingface.co/spaces/simulate-tests/$REPO_NAME main\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Add requirements",
                "run": "python -m pip install --upgrade wheel setuptools"
            },
            {
                "id": 4,
                "name": "Build and install",
                "run": "pip install --verbose ."
            },
            {
                "id": 5,
                "name": "Test",
                "run": "python -c \"import simulate as sm; scene = sm.Scene() + sm.Box()\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.8",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Install Python dependencies",
                "run": "pip install -e .[quality]"
            },
            {
                "id": 4,
                "name": "Run Quality check",
                "run": "make quality"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Install the library",
                "run": "pip install --upgrade pip\npip install .\n"
            },
            {
                "id": 5,
                "name": "Set up vtk",
                "run": "pip install vtk==${{ matrix.vtk-version }}"
            },
            {
                "id": 6,
                "name": "Run Simple loading test",
                "run": "python -c \"import simulate as sm; scene = sm.Scene() + sm.Box()\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Install the library",
                "run": "pip install --upgrade pip\npip install .[test]\n"
            },
            {
                "id": 5,
                "name": "Set up vtk",
                "run": "pip install vtk==${{ matrix.vtk-version }}"
            },
            {
                "id": 6,
                "name": "Install Testing Requirements pyvista",
                "run": "sudo apt-get update\nsudo apt-get install libgl1-mesa-glx xvfb python-tk -y\nmkdir -p ~/.local/share/pyvista/examples\n"
            },
            {
                "id": 7,
                "name": "Software Report",
                "run": "xvfb-run python -c \"import pyvista; print(pyvista.Report())\"\n# xvfb-run python -c \"import pyvista; print(pyvista.EXAMPLES_PATH)\"\nwhich python\npip list\n"
            },
            {
                "id": 8,
                "name": "Run Tests",
                "run": "make test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Build SDist",
                "run": "pipx run build --sdist"
            },
            {
                "id": 3,
                "name": "Check metadata",
                "run": "pipx run twine check dist/*"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pypa/cibuildwheel@v2.10.1"
            },
            {
                "id": 3,
                "name": "Verify clean directory",
                "run": "git diff --exit-code"
            },
            {
                "id": 4,
                "name": "Upload wheels",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pypa/gh-action-pypi-publish@v1.5.1"
            }
        ],
        "huggingface/optimum-intel": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Setup environment",
                "run": "pip uninstall -y doc-builder\ncd doc-builder\ngit pull origin main\npip install .\npip install black\ncd ..\n"
            },
            {
                "id": 4,
                "name": "Make documentation",
                "run": "cd optimum-intel\nmake doc BUILD_DIR=intel-doc-build VERSION=pr_$PR_NUMBER COMMIT_SHA_SUBPACKAGE=$COMMIT_SHA CLONE_URL=$PR_CLONE_URL\ncd ..\n"
            },
            {
                "id": 5,
                "name": "Save commit_sha & pr_number",
                "run": "cd optimum-intel\nsudo chmod -R ugo+rwx intel-doc-build\ncd intel-doc-build\nsudo mv optimum.intel optimum-intel\necho ${{ env.COMMIT_SHA }} > ./commit_sha\necho ${{ env.PR_NUMBER }} > ./pr_number\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Create and start a virtual environment",
                "run": "python -m venv venv\nsource venv/bin/activate\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "source venv/bin/activate\npip install --upgrade pip\npip install .[quality]\n"
            },
            {
                "id": 5,
                "name": "Check style with black",
                "run": "source venv/bin/activate\nblack --check .\n"
            },
            {
                "id": 6,
                "name": "Check style with ruff",
                "run": "source venv/bin/activate\nruff .\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "if [ \"${{ github.event_name }}\" == \"push\" ]; then\n  echo \"depth=$(($(jq length <<< '${{ toJson(github.event.commits) }}') + 2))\" >> $GITHUB_ENV\n  echo \"branch=${{ github.ref_name }}\" >> $GITHUB_ENV\nfi\nif [ \"${{ github.event_name }}\" == \"pull_request\" ]; then\n  echo \"depth=$((${{ github.event.pull_request.commits }}+2))\" >> $GITHUB_ENV\n  echo \"branch=${{ github.event.pull_request.head.ref }}\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Scan for secrets",
                "run": "trufflesecurity/trufflehog@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install optimum[exporters]\npip install .[tests]\n"
            },
            {
                "id": 4,
                "name": "Test with Pytest",
                "run": "pytest tests/generation/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install cmake\npip install py-cpuinfo\npip install torch==2.3.0 torchaudio==2.3.0 torchvision==0.18 --index-url https://download.pytorch.org/whl/cpu\npip install .[neural-compressor,diffusers,tests]\npip install intel-extension-for-transformers\npip install peft\n"
            },
            {
                "id": 4,
                "name": "Test with Pytest",
                "run": "pytest tests/neural_compressor/ --ignore tests/neural_compressor/test_ipex.py --durations=0\n"
            },
            {
                "id": 5,
                "name": "Test IPEX",
                "run": "pip uninstall -y intel-extension-for-transformers\npip install intel-extension-for-pytorch==2.3.0\npytest tests/neural_compressor/test_ipex.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install torch torchaudio torchvision --extra-index-url https://download.pytorch.org/whl/cpu\npip install .[ipex,tests]\npip install transformers==${{ matrix.transformers-version }}\n"
            },
            {
                "id": 4,
                "name": "Test with Pytest",
                "run": "pytest tests/ipex/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\n# install PyTorch CPU version to avoid installing CUDA packages on GitHub runner without GPU\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\npip install transformers==${{ matrix.transformers-version }}\npip install .[openvino,openvino-tokenizers,tests,diffusers] onnxruntime\n"
            },
            {
                "id": 4,
                "name": "Test with Pytest",
                "run": "pytest tests/openvino/ --ignore tests/openvino/test_modeling_basic.py --durations=0\n"
            },
            {
                "id": 5,
                "name": "Test basic",
                "run": "pip uninstall -y nncf\npytest tests/openvino/test_modeling_basic.py\n"
            },
            {
                "id": 6,
                "name": "Test openvino-nightly",
                "run": "pip uninstall -y openvino\npip install openvino-nightly\npython -c \"from optimum.intel import OVModelForCausalLM; OVModelForCausalLM.from_pretrained('hf-internal-testing/tiny-random-gpt2', export=True, compile=False)\"\noptimum-cli export openvino -m hf-internal-testing/tiny-random-gpt2 gpt2-ov\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "# Install openvino manually to prevent dependency conflicts when .[openvino] pins\n# optimum or transformers to a specific version\n# Install PyTorch CPU to prevent unnecessary downloading/installing of CUDA packages\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\npip install .[tests] openvino onnxruntime ${{ matrix.optimum}}\n"
            },
            {
                "id": 4,
                "name": "Pip freeze",
                "run": "pip freeze"
            },
            {
                "id": 5,
                "name": "Test with Pytest",
                "run": "pytest tests/openvino/test_modeling_basic.py\n"
            },
            {
                "id": 6,
                "name": "Slow tests",
                "run": "pytest tests/openvino/test_modeling.py -s -m \"run_slow\" --durations=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install .[openvino] jstyleson pytest\npip install -r examples/openvino/audio-classification/requirements.txt --extra-index-url https://download.pytorch.org/whl/cpu\npip install -r examples/openvino/image-classification/requirements.txt --extra-index-url https://download.pytorch.org/whl/cpu\npip install -r examples/openvino/question-answering/requirements.txt --extra-index-url https://download.pytorch.org/whl/cpu\npip install -r examples/openvino/text-classification/requirements.txt --extra-index-url https://download.pytorch.org/whl/cpu\n"
            },
            {
                "id": 4,
                "name": "Test examples",
                "run": "python -m pytest examples/openvino/test_examples.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "# Install PyTorch CPU to prevent unnecessary downloading/installing of CUDA packages\n# ffmpeg, torchaudio and pillow are required for image classification and audio classification pipelines\nsudo apt-get install ffmpeg\npip install torch torchaudio --extra-index-url https://download.pytorch.org/whl/cpu\npip install \".[tests, openvino]\" nbval\npip install -r notebooks/openvino/requirements.txt\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "free -h"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "lscpu"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "pip freeze"
            },
            {
                "id": 7,
                "name": "Test with Pytest",
                "run": "sed -i 's/NUM_TRAIN_ITEMS = 600/NUM_TRAIN_ITEMS = 10/' notebooks/openvino/question_answering_quantization.ipynb\nsed -i 's/# %pip install/%pip install/' notebooks/openvino/optimum_openvino_inference.ipynb\npython -m pytest --nbval-lax notebooks/openvino/optimum_openvino_inference.ipynb  notebooks/openvino/question_answering_quantization.ipynb\n"
            }
        ],
        "huggingface/diffusers": [
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install pandas peft\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 5,
                "name": "Diffusers Benchmarking",
                "run": "export TOTAL_GPU_MEMORY=$(python -c \"import torch; print(torch.cuda.get_device_properties(0).total_memory / (1024**3))\")\ncd benchmarks && mkdir ${BASE_PATH} && python run_all.py && python push_results.py\n"
            },
            {
                "id": 6,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Find Changed Dockerfiles",
                "run": "jitterbit/get-changed-files@v1"
            },
            {
                "id": 4,
                "name": "Build Changed Docker Images",
                "run": "CHANGED_FILES=\"${{ steps.file_changes.outputs.all }}\"\nfor FILE in $CHANGED_FILES; do\n  if [[ \"$FILE\" == docker/*Dockerfile ]]; then\n    DOCKER_PATH=\"${FILE%/Dockerfile}\"\n    DOCKER_TAG=$(basename \"$DOCKER_PATH\")\n    echo \"Building Docker image for $DOCKER_TAG\"\n    docker build -t \"$DOCKER_TAG\" \"$DOCKER_PATH\"\n  fi\ndone\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 3,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 5,
                "name": "Post to a Slack channel",
                "run": "huggingface/hf-workflows/.github/actions/post-slack@main"
            },
            {
                "id": 1,
                "name": "Set checkout_ref and path_in_repo",
                "run": "if [ \"${{ github.event_name }}\" == \"workflow_dispatch\" ]; then\n  if [ -z \"${{ github.event.inputs.ref }}\" ]; then\n    echo \"Error: Missing ref input\"\n    exit 1\n  elif [ \"${{ github.event.inputs.ref }}\" == \"main\" ]; then\n    echo \"CHECKOUT_REF=refs/heads/main\" >> $GITHUB_ENV\n    echo \"PATH_IN_REPO=main\" >> $GITHUB_ENV\n  else\n    echo \"CHECKOUT_REF=refs/tags/${{ github.event.inputs.ref }}\" >> $GITHUB_ENV\n    echo \"PATH_IN_REPO=${{ github.event.inputs.ref }}\" >> $GITHUB_ENV\n  fi\nelif [ \"${{ github.ref }}\" == \"refs/heads/main\" ]; then\n  echo \"CHECKOUT_REF=${{ github.ref }}\" >> $GITHUB_ENV\n  echo \"PATH_IN_REPO=main\" >> $GITHUB_ENV\nelse\n  # e.g. refs/tags/v0.28.1 -> v0.28.1\n  echo \"CHECKOUT_REF=${{ github.ref }}\" >> $GITHUB_ENV\n  echo \"PATH_IN_REPO=$(echo ${{ github.ref }} | sed 's/^refs\\/tags\\///')\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 2,
                "name": "Print env vars",
                "run": "echo \"CHECKOUT_REF: ${{ env.CHECKOUT_REF }}\"\necho \"PATH_IN_REPO: ${{ env.PATH_IN_REPO }}\"\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v3"
            },
            {
                "id": 4,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install --upgrade huggingface_hub\n"
            },
            {
                "id": 6,
                "name": "whoami",
                "run": "huggingface-cli whoami"
            },
            {
                "id": 7,
                "name": "Mirror community pipeline to HF",
                "run": "huggingface-cli upload diffusers/community-pipelines-mirror ./examples/community ${PATH_IN_REPO} --repo-type dataset"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install -e .\npip install huggingface_hub\n"
            },
            {
                "id": 4,
                "name": "Fetch Pipeline Matrix",
                "run": "matrix=$(python utils/fetch_torch_cuda_pipeline_test_matrix.py)\necho $matrix\necho \"pipeline_test_matrix=$matrix\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "Pipeline Tests Artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install accelerate@git+https://github.com/huggingface/accelerate.git\npython -m uv pip install pytest-reportlog\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 5,
                "name": "Nightly PyTorch CUDA checkpoint (pipelines) tests",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx\" \\\n  --make-reports=tests_pipeline_${{ matrix.module }}_cuda \\\n  --report-log=tests_pipeline_${{ matrix.module }}_cuda.log \\\n  tests/pipelines/${{ matrix.module }}\n"
            },
            {
                "id": 6,
                "name": "Failure short reports",
                "run": "cat reports/tests_pipeline_${{ matrix.module }}_cuda_stats.txt\ncat reports/tests_pipeline_${{ matrix.module }}_cuda_failures_short.txt\n"
            },
            {
                "id": 7,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 8,
                "name": "Generate Report and Notify Channel",
                "run": "pip install slack_sdk tabulate\npython scripts/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install accelerate@git+https://github.com/huggingface/accelerate.git\npython -m uv pip install pytest-reportlog\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python utils/print_env.py"
            },
            {
                "id": 4,
                "name": "Run nightly PyTorch CUDA tests for non-pipeline modules",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx\" \\\n  --make-reports=tests_torch_${{ matrix.module }}_cuda \\\n  --report-log=tests_torch_${{ matrix.module }}_cuda.log \\\n  tests/${{ matrix.module }}\n"
            },
            {
                "id": 5,
                "name": "Run nightly example tests with Torch",
                "run": "python -m uv pip install peft@git+https://github.com/huggingface/peft.git\npython -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v --make-reports=examples_torch_cuda \\\n  --report-log=examples_torch_cuda.log \\\n  examples/\n"
            },
            {
                "id": 6,
                "name": "Failure short reports",
                "run": "cat reports/tests_torch_${{ matrix.module }}_cuda_stats.txt\ncat reports/tests_torch_${{ matrix.module }}_cuda_failures_short.txt\n"
            },
            {
                "id": 7,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 8,
                "name": "Generate Report and Notify Channel",
                "run": "pip install slack_sdk tabulate\npython scripts/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install accelerate@git+https://github.com/huggingface/accelerate.git\npython -m uv pip install peft@git+https://github.com/huggingface/peft.git\npython -m uv pip install pytest-reportlog\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python utils/print_env.py"
            },
            {
                "id": 4,
                "name": "Run nightly LoRA tests with PEFT and Torch",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx\" \\\n  --make-reports=tests_torch_lora_cuda \\\n  --report-log=tests_torch_lora_cuda.log \\\n  tests/lora\n"
            },
            {
                "id": 5,
                "name": "Failure short reports",
                "run": "cat reports/tests_torch_lora_cuda_stats.txt\ncat reports/tests_torch_lora_cuda_failures_short.txt\n"
            },
            {
                "id": 6,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 7,
                "name": "Generate Report and Notify Channel",
                "run": "pip install slack_sdk tabulate\npython scripts/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install accelerate@git+https://github.com/huggingface/accelerate.git\npython -m uv pip install pytest-reportlog\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python utils/print_env.py"
            },
            {
                "id": 4,
                "name": "Run nightly Flax TPU tests",
                "run": "python -m pytest -n 0 \\\n  -s -v -k \"Flax\" \\\n  --make-reports=tests_flax_tpu \\\n  --report-log=tests_flax_tpu.log \\\n  tests/\n"
            },
            {
                "id": 5,
                "name": "Failure short reports",
                "run": "cat reports/tests_flax_tpu_stats.txt\ncat reports/tests_flax_tpu_failures_short.txt\n"
            },
            {
                "id": 6,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 7,
                "name": "Generate Report and Notify Channel",
                "run": "pip install slack_sdk tabulate\npython scripts/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install accelerate@git+https://github.com/huggingface/accelerate.git\npython -m uv pip install pytest-reportlog\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python utils/print_env.py"
            },
            {
                "id": 5,
                "name": "Run nightly ONNXRuntime CUDA tests",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"Onnx\" \\\n  --make-reports=tests_onnx_cuda \\\n  --report-log=tests_onnx_cuda.log \\\n  tests/\n"
            },
            {
                "id": 6,
                "name": "Failure short reports",
                "run": "cat reports/tests_onnx_cuda_stats.txt\ncat reports/tests_onnx_cuda_failures_short.txt\n"
            },
            {
                "id": 7,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 8,
                "name": "Generate Report and Notify Channel",
                "run": "pip install slack_sdk tabulate\npython scripts/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Clean checkout",
                "run": "git clean -fxd\n"
            },
            {
                "id": 3,
                "name": "Setup miniconda",
                "run": "./.github/actions/setup-miniconda"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "${CONDA_RUN} python -m pip install --upgrade pip uv\n${CONDA_RUN} python -m uv pip install -e [quality,test]\n${CONDA_RUN} python -m uv pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu\n${CONDA_RUN} python -m uv pip install accelerate@git+https://github.com/huggingface/accelerate\n${CONDA_RUN} python -m uv pip install pytest-reportlog\n"
            },
            {
                "id": 5,
                "name": "Environment",
                "run": "${CONDA_RUN} python utils/print_env.py\n"
            },
            {
                "id": 6,
                "name": "Run nightly PyTorch tests on M1 (MPS)",
                "run": "${CONDA_RUN} python -m pytest -n 1 -s -v --make-reports=tests_torch_mps \\\n  --report-log=tests_torch_mps.log \\\n  tests/\n"
            },
            {
                "id": 7,
                "name": "Failure short reports",
                "run": "cat reports/tests_torch_mps_failures_short.txt"
            },
            {
                "id": 8,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 9,
                "name": "Generate Report and Notify Channel",
                "run": "pip install slack_sdk tabulate\npython scripts/log_reports.py >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Notify Slack about the release",
                "run": "pip install requests && python utils/notify_slack_about_release.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pip install --upgrade pip uv\npython -m uv pip install -e .\npython -m uv pip install pytest\n"
            },
            {
                "id": 4,
                "name": "Check for soft dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npytest tests/others/test_dependencies.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pip install --upgrade pip uv\npython -m uv pip install -e .\npython -m uv pip install \"jax[cpu]>=0.2.16,!=0.3.2\"\npython -m uv pip install \"flax>=0.4.1\"\npython -m uv pip install \"jaxlib>=0.1.65\"\npython -m uv pip install pytest\n"
            },
            {
                "id": 4,
                "name": "Check for soft dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npytest tests/others/test_dependencies.py\n"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python utils/print_env.py\necho $(git --version)\n"
            },
            {
                "id": 4,
                "name": "Fetch Tests",
                "run": "python utils/tests_fetcher.py | tee test_preparation.txt\n"
            },
            {
                "id": 5,
                "name": "Report fetched tests",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 6,
                "name": "Create Test Matrix",
                "run": "if [ -f test_map.json ]; then\n    keys=$(python3 -c 'import json; fp = open(\"test_map.json\"); test_map = json.load(fp); fp.close(); d = list(test_map.keys()); print(json.dumps(d))')\n    test_map=$(python3 -c 'import json; fp = open(\"test_map.json\"); test_map = json.load(fp); fp.close(); print(json.dumps(test_map))')\nelse\n    keys=$(python3 -c 'keys = [\"dummy\"]; print(keys)')\n    test_map=$(python3 -c 'test_map = {\"dummy\": []}; print(test_map)')\nfi\necho $keys\necho $test_map\necho \"matrix=$keys\" >> $GITHUB_OUTPUT\necho \"test_map=$test_map\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pip install -e [quality,test]\npython -m pip install accelerate\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Run all selected tests on CPU",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pytest -n 2 --dist=loadfile -v --make-reports=${{ matrix.modules }}_tests_cpu ${{ fromJson(needs.setup_pr_tests.outputs.test_map)[matrix.modules] }}\n"
            },
            {
                "id": 5,
                "name": "Failure short reports",
                "run": "cat reports/${{ matrix.modules }}_tests_cpu_stats.txt\ncat reports/${{ matrix.modules }}_tests_cpu_failures_short.txt\n"
            },
            {
                "id": 6,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pip install -e [quality,test]\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Run Hub tests for models, schedulers, and pipelines on a staging env",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\nHUGGINGFACE_CO_STAGING=true python -m pytest \\\n  -m \"is_staging_test\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests\n"
            },
            {
                "id": 5,
                "name": "Failure short reports",
                "run": "cat reports/tests_${{ matrix.config.report }}_failures_short.txt"
            },
            {
                "id": 6,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install .[quality]\n"
            },
            {
                "id": 4,
                "name": "Check quality",
                "run": "make quality"
            },
            {
                "id": 5,
                "name": "Check if failure",
                "run": "echo \"Quality check failed. Please ensure the right dependency versions are installed with 'pip install -e .[quality]' and run 'make style && make quality'\" >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install .[quality]\n"
            },
            {
                "id": 4,
                "name": "Check repo consistency",
                "run": "python utils/check_copies.py\npython utils/check_dummies.py\nmake deps_table_check_updated\n"
            },
            {
                "id": 5,
                "name": "Check if failure",
                "run": "echo \"Repo consistency check failed. Please ensure the right dependency versions are installed with 'pip install -e .[quality]' and run 'make fix-copies'\" >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\nif [ \"${{ matrix.lib-versions }}\" == \"main\" ]; then\n    python -m pip install -U peft@git+https://github.com/huggingface/peft.git\n    python -m uv pip install -U transformers@git+https://github.com/huggingface/transformers.git\n    python -m uv pip install -U accelerate@git+https://github.com/huggingface/accelerate.git\nelse\n    python -m uv pip install -U peft transformers accelerate\nfi\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Run fast PyTorch LoRA CPU tests with PEFT backend",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pytest -n 4 --max-worker-restart=0 --dist=loadfile \\\n  -s -v \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/lora/\npython -m pytest -n 4 --max-worker-restart=0 --dist=loadfile \\\n  -s -v \\\n  --make-reports=tests_models_lora_${{ matrix.config.report }} \\\n  tests/models/ -k \"lora\"\n"
            },
            {
                "id": 5,
                "name": "Failure short reports",
                "run": "cat reports/tests_${{ matrix.config.report }}_failures_short.txt\ncat reports/tests_models_lora_${{ matrix.config.report }}_failures_short.txt\n"
            },
            {
                "id": 6,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install .[quality]\n"
            },
            {
                "id": 4,
                "name": "Check quality",
                "run": "make quality"
            },
            {
                "id": 5,
                "name": "Check if failure",
                "run": "echo \"Quality check failed. Please ensure the right dependency versions are installed with 'pip install -e .[quality]' and run 'make style && make quality'\" >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install .[quality]\n"
            },
            {
                "id": 4,
                "name": "Check repo consistency",
                "run": "python utils/check_copies.py\npython utils/check_dummies.py\nmake deps_table_check_updated\n"
            },
            {
                "id": 5,
                "name": "Check if failure",
                "run": "echo \"Repo consistency check failed. Please ensure the right dependency versions are installed with 'pip install -e .[quality]' and run 'make fix-copies'\" >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install accelerate\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Run fast PyTorch Pipeline CPU tests",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pytest -n 8 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/pipelines\n"
            },
            {
                "id": 5,
                "name": "Run fast PyTorch Model Scheduler CPU tests",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pytest -n 4 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx and not Dependency\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/models tests/schedulers tests/others\n"
            },
            {
                "id": 6,
                "name": "Run fast Flax TPU tests",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pytest -n 4 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"Flax\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests\n"
            },
            {
                "id": 7,
                "name": "Run example PyTorch CPU tests",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install peft timm\npython -m pytest -n 4 --max-worker-restart=0 --dist=loadfile \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  examples\n"
            },
            {
                "id": 8,
                "name": "Failure short reports",
                "run": "cat reports/tests_${{ matrix.config.report }}_failures_short.txt"
            },
            {
                "id": 9,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Run Hub tests for models, schedulers, and pipelines on a staging env",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\nHUGGINGFACE_CO_STAGING=true python -m pytest \\\n  -m \"is_staging_test\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests\n"
            },
            {
                "id": 5,
                "name": "Failure short reports",
                "run": "cat reports/tests_${{ matrix.config.report }}_failures_short.txt"
            },
            {
                "id": 6,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pip install --upgrade pip uv\npython -m uv pip install -e .\npython -m uv pip install torch torchvision torchaudio\npython -m uv pip install pytest\n"
            },
            {
                "id": 4,
                "name": "Check for soft dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npytest tests/others/test_dependencies.py\n"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Fetch Pipeline Matrix",
                "run": "matrix=$(python utils/fetch_torch_cuda_pipeline_test_matrix.py)\necho $matrix\necho \"pipeline_test_matrix=$matrix\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "Pipeline Tests Artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install accelerate@git+https://github.com/huggingface/accelerate.git\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 5,
                "name": "Slow PyTorch CUDA checkpoint tests on Ubuntu",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx\" \\\n  --make-reports=tests_pipeline_${{ matrix.module }}_cuda \\\n  tests/pipelines/${{ matrix.module }}\n"
            },
            {
                "id": 6,
                "name": "Failure short reports",
                "run": "cat reports/tests_pipeline_${{ matrix.module }}_cuda_stats.txt\ncat reports/tests_pipeline_${{ matrix.module }}_cuda_failures_short.txt\n"
            },
            {
                "id": 7,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install accelerate@git+https://github.com/huggingface/accelerate.git\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Run slow PyTorch CUDA tests",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx\" \\\n  --make-reports=tests_torch_cuda \\\n  tests/${{ matrix.module }}\n"
            },
            {
                "id": 5,
                "name": "Failure short reports",
                "run": "cat reports/tests_torch_cuda_stats.txt\ncat reports/tests_torch_cuda_failures_short.txt\n"
            },
            {
                "id": 6,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install accelerate@git+https://github.com/huggingface/accelerate.git\npython -m pip install -U peft@git+https://github.com/huggingface/peft.git\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Run slow PEFT CUDA tests",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx and not PEFTLoRALoading\" \\\n  --make-reports=tests_peft_cuda \\\n  tests/lora/\npython -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"lora and not Flax and not Onnx and not PEFTLoRALoading\" \\\n  --make-reports=tests_peft_cuda_models_lora \\\n  tests/models/\n"
            },
            {
                "id": 5,
                "name": "Failure short reports",
                "run": "cat reports/tests_peft_cuda_stats.txt\ncat reports/tests_peft_cuda_failures_short.txt\ncat reports/tests_peft_cuda_models_lora_failures_short.txt\n"
            },
            {
                "id": 6,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install accelerate@git+https://github.com/huggingface/accelerate.git\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Run slow Flax TPU tests",
                "run": "python -m pytest -n 0 \\\n  -s -v -k \"Flax\" \\\n  --make-reports=tests_flax_tpu \\\n  tests/\n"
            },
            {
                "id": 5,
                "name": "Failure short reports",
                "run": "cat reports/tests_flax_tpu_stats.txt\ncat reports/tests_flax_tpu_failures_short.txt\n"
            },
            {
                "id": 6,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install accelerate@git+https://github.com/huggingface/accelerate.git\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Run slow ONNXRuntime CUDA tests",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"Onnx\" \\\n  --make-reports=tests_onnx_cuda \\\n  tests/\n"
            },
            {
                "id": 5,
                "name": "Failure short reports",
                "run": "cat reports/tests_onnx_cuda_stats.txt\ncat reports/tests_onnx_cuda_failures_short.txt\n"
            },
            {
                "id": 6,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test,training]\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 5,
                "name": "Run example tests on GPU",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile -s -v -k \"compile\" --make-reports=tests_torch_compile_cuda tests/\n"
            },
            {
                "id": 6,
                "name": "Failure short reports",
                "run": "cat reports/tests_torch_compile_cuda_failures_short.txt"
            },
            {
                "id": 7,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test,training]\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 5,
                "name": "Run example tests on GPU",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile -s -v -k \"xformers\" --make-reports=tests_torch_xformers_cuda tests/\n"
            },
            {
                "id": 6,
                "name": "Failure short reports",
                "run": "cat reports/tests_torch_xformers_cuda_failures_short.txt"
            },
            {
                "id": 7,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test,training]\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython utils/print_env.py\n"
            },
            {
                "id": 5,
                "name": "Run example tests on GPU",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install timm\npython -m pytest -n 1 --max-worker-restart=0 --dist=loadfile -s -v --make-reports=examples_torch_cuda examples/\n"
            },
            {
                "id": 6,
                "name": "Failure short reports",
                "run": "cat reports/examples_torch_cuda_stats.txt\ncat reports/examples_torch_cuda_failures_short.txt\n"
            },
            {
                "id": 7,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Run fast PyTorch CPU tests",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pytest -n 4 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 5,
                "name": "Run fast Flax TPU tests",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pytest -n 4 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"Flax\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 6,
                "name": "Run fast ONNXRuntime CPU tests",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m pytest -n 4 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"Onnx\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 7,
                "name": "Run example PyTorch CPU tests",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install peft timm\npython -m pytest -n 4 --max-worker-restart=0 --dist=loadfile \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  examples\n"
            },
            {
                "id": 8,
                "name": "Failure short reports",
                "run": "cat reports/tests_${{ matrix.config.report }}_failures_short.txt"
            },
            {
                "id": 9,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Clean checkout",
                "run": "git clean -fxd\n"
            },
            {
                "id": 3,
                "name": "Setup miniconda",
                "run": "./.github/actions/setup-miniconda"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "${CONDA_RUN} python -m pip install --upgrade pip uv\n${CONDA_RUN} python -m uv pip install -e [quality,test]\n${CONDA_RUN} python -m uv pip install torch torchvision torchaudio\n${CONDA_RUN} python -m uv pip install accelerate@git+https://github.com/huggingface/accelerate.git\n${CONDA_RUN} python -m uv pip install transformers --upgrade\n"
            },
            {
                "id": 5,
                "name": "Environment",
                "run": "${CONDA_RUN} python utils/print_env.py\n"
            },
            {
                "id": 6,
                "name": "Run fast PyTorch tests on M1 (MPS)",
                "run": "${CONDA_RUN} python -m pytest -n 0 -s -v --make-reports=tests_torch_mps tests/\n"
            },
            {
                "id": 7,
                "name": "Failure short reports",
                "run": "cat reports/tests_torch_mps_failures_short.txt"
            },
            {
                "id": 8,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Validate test files input",
                "run": "if [[ ! \"$PY_TEST\" =~ ^tests/ ]]; then\n  echo \"Error: The input string must start with 'tests/'.\"\n  exit 1\nfi\n\nif [[ ! \"$PY_TEST\" =~ ^tests/(models|pipelines) ]]; then\n  echo \"Error: The input string must contain either 'models' or 'pipelines' after 'tests/'.\"\n  exit 1\nfi\n\nif [[ \"$PY_TEST\" == *\";\"* ]]; then\n  echo \"Error: The input string must not contain ';'.\"\n  exit 1\nfi\necho \"$PY_TEST\"\n"
            },
            {
                "id": 2,
                "name": "Checkout PR branch",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install pytest",
                "run": "python -m venv /opt/venv && export PATH=\"/opt/venv/bin:$PATH\"\npython -m uv pip install -e [quality,test]\npython -m uv pip install peft\n"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "pytest \"$PY_TEST\""
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 3,
                "name": "Tailscale",
                "run": "huggingface/tailscale-action@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install requirements",
                "run": "pip install PyGithub\n"
            },
            {
                "id": 4,
                "name": "Close stale issues",
                "run": "python utils/stale.py\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Secret Scanning",
                "run": "trufflesecurity/trufflehog@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "typos-action",
                "run": "crate-ci/typos@v1.12.4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup environment",
                "run": "pip install --upgrade pip\npip install datasets pandas\npip install .[torch]\n"
            },
            {
                "id": 3,
                "name": "Update metadata",
                "run": "python utils/update_metadata.py --commit_sha ${{ github.sha }}\n"
            }
        ],
        "huggingface/setfit": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python environment",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npython -m pip install \".[quality]\"\n"
            },
            {
                "id": 4,
                "name": "Code quality",
                "run": "make quality\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Python environment",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Try to load cached dependencies",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Install external dependencies on cache miss",
                "run": "python -m pip install --no-cache-dir --upgrade pip\npython -m pip install --no-cache-dir ${{ matrix.requirements }}\npython -m pip install '.[codecarbon]'\npython -m spacy download en_core_web_lg\npython -m spacy download en_core_web_sm\n"
            },
            {
                "id": 5,
                "name": "Install the checked-out setfit",
                "run": "python -m pip install ."
            },
            {
                "id": 6,
                "name": "Restore HF models from cache",
                "run": "actions/cache/restore@v3"
            },
            {
                "id": 7,
                "name": "Run unit tests",
                "run": "echo \"OLD_HF_CACHE_HASH=$(find ~/.cache/huggingface/hub ~/.cache/torch -type f -exec sha256sum {} + | LC_ALL=C sort | sha256sum | cut -d ' ' -f 1)\" >> $GITHUB_ENV\npytest -sv tests/\necho \"NEW_HF_CACHE_HASH=$(find ~/.cache/huggingface/hub ~/.cache/torch -type f -exec sha256sum {} + | LC_ALL=C sort | sha256sum | cut -d ' ' -f 1)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 8,
                "name": "Save new HF models to cache",
                "run": "actions/cache/save@v3"
            }
        ],
        "huggingface/hffs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install .[quality]\n"
            },
            {
                "id": 4,
                "name": "Check quality",
                "run": "black --check tests src\nruff tests src\n"
            },
            {
                "id": 1,
                "name": "Install OS dependencies",
                "run": "sudo apt-get -y update"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Upgrade pip",
                "run": "python -m pip install --upgrade pip"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "pip install .[tests]"
            },
            {
                "id": 6,
                "name": "Test with pytest",
                "run": "python -m pytest -rfExX -sv ./tests/\n"
            }
        ],
        "huggingface/safetensors": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust Stable",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Install cargo-llvm-cov for Ubuntu",
                "run": "cargo install cargo-llvm-cov"
            },
            {
                "id": 5,
                "name": "Coverage report",
                "run": "cargo llvm-cov --release --lcov --output-path lcov.info"
            },
            {
                "id": 6,
                "name": "Upload to codecov.io",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Install Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 4,
                "name": "Install",
                "run": "pip install -U pip\npip install .[dev]\n"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "cargo test\npytest --benchmark-json output.json benches/\n"
            },
            {
                "id": 6,
                "name": "Download previous benchmark data",
                "run": "actions/cache@v1"
            },
            {
                "id": 7,
                "name": "Store benchmark result",
                "run": "benchmark-action/github-action-benchmark@v1"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install miniconda",
                "run": "conda-incubator/setup-miniconda@v2"
            },
            {
                "id": 3,
                "name": "Conda info",
                "run": "conda info"
            },
            {
                "id": 4,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 5,
                "name": "Setup conda env",
                "run": "conda install setuptools-rust\nconda install -c defaults anaconda-client conda-build\n"
            },
            {
                "id": 6,
                "name": "Extract version",
                "run": "echo \"SAFETENSORS_VERSION=`grep -m 1 version Cargo.toml | grep -e '\".*\"' -o | tr -d '\"' | sed s/-/./ `\" >> $GITHUB_ENV"
            },
            {
                "id": 7,
                "name": "Build conda packages",
                "run": "conda info\nconda list\nconda-build .github/conda --python=${{ matrix.python }}\n"
            },
            {
                "id": 8,
                "name": "Upload to Anaconda",
                "run": "anaconda upload `conda-build .github/conda --output` --force\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install miniconda",
                "run": "yum install -y wget openssl-devel\nexport FILENAME=Miniconda3-py${{ matrix.python }}_23.5.2-0-Linux-x86_64.sh\nwget https://repo.anaconda.com/miniconda/$FILENAME\nsha256sum $FILENAME | awk '$1==\"${{ matrix.checksum}}\"{print\"good to go\"}'\nbash $FILENAME -b -p $HOME/miniconda\nsource $HOME/miniconda/bin/activate\n"
            },
            {
                "id": 3,
                "name": "Show glibc information",
                "run": "ldd --version"
            },
            {
                "id": 4,
                "name": "Conda info",
                "run": "source $HOME/miniconda/bin/activate\nconda info\n"
            },
            {
                "id": 5,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 6,
                "name": "Setup conda env",
                "run": "source $HOME/miniconda/bin/activate\nconda install setuptools-rust\nconda install -c defaults anaconda-client conda-build\n"
            },
            {
                "id": 7,
                "name": "Extract version",
                "run": "source $HOME/miniconda/bin/activate\necho \"SAFETENSORS_VERSION=`grep -m 1 version Cargo.toml | grep -e '\".*\"' -o | tr -d '\"' | sed s/-/./ `\" >> $GITHUB_ENV\n"
            },
            {
                "id": 8,
                "name": "Build conda packages",
                "run": "source $HOME/miniconda/bin/activate\nconda info\nconda list\nconda-build .github/conda --python=${{ matrix.python }}\n"
            },
            {
                "id": 9,
                "name": "Upload to Anaconda",
                "run": "source $HOME/miniconda/bin/activate\nanaconda upload `conda-build .github/conda --output` --force\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Cargo.lock lock exists",
                "run": "cat Cargo.lock"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "set up python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pip install -U twine"
            },
            {
                "id": 4,
                "name": "build wheels",
                "run": "PyO3/maturin-action@v1"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "${{ matrix.ls || 'ls -lh' }} dist/"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "twine check --strict dist/*"
            },
            {
                "id": 7,
                "name": "Upload wheels",
                "run": "pip install awscli\naws s3 sync --exact-timestamps ./bindings/python/dist \"s3://safetensors-releases/python/$DIST_DIR\"\n\n# - uses: actions/upload-artifact@v3\n#   working-directory: ./bindings/python/\n#   with:\n#     name: pypi_files\n#     path: dist\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "PyO3/maturin-action@v1"
            },
            {
                "id": 3,
                "name": "Upload wheels",
                "run": "pip install awscli\naws s3 sync --exact-timestamps ./bindings/python/dist \"s3://safetensors-releases/python/$DIST_DIR\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Retrieve all wheels",
                "run": "pip install awscli\naws s3 sync \"s3://safetensors-releases/python/$DIST_DIR\" ./bindings/python/dist\n"
            },
            {
                "id": 4,
                "name": "Upload to PyPi",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p \"$PYPI_TOKEN\"\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Install Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 5,
                "name": "Lint with RustFmt",
                "run": "cargo fmt -- --check"
            },
            {
                "id": 6,
                "name": "Lint with Clippy",
                "run": "cargo clippy --all-targets --all-features -- -D warnings"
            },
            {
                "id": 7,
                "name": "Run Audit",
                "run": "cargo audit -D warnings"
            },
            {
                "id": 8,
                "name": "Install",
                "run": "pip install -U pip\npip install .[numpy,tensorflow]\npip install ${{ matrix.version.torch }}\n"
            },
            {
                "id": 9,
                "name": "Install (jax, flax)",
                "run": "pip install .[jax]\n"
            },
            {
                "id": 10,
                "name": "Install (mlx)",
                "run": "pip install .[mlx]\n"
            },
            {
                "id": 11,
                "name": "Check style",
                "run": "pip install .[quality]\nblack --check --line-length 119 --target-version py35 py_src/safetensors tests\n"
            },
            {
                "id": 12,
                "name": "Run tests",
                "run": "cargo test\npip install .[testing]\npytest -sv tests/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "tailscale/github-action@v1"
            },
            {
                "id": 5,
                "name": "Set short sha",
                "run": "echo \"GITHUB_SHA_SHORT=$(git rev-parse --short HEAD)\" >> $GITHUB_ENV"
            },
            {
                "id": 6,
                "name": "Docker meta",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 7,
                "name": "Login to Registry",
                "run": "docker/login-action@v2"
            },
            {
                "id": 8,
                "name": "Test big endian",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Cache Cargo Registry",
                "run": "actions/cache@v1"
            },
            {
                "id": 4,
                "name": "Publish package rust",
                "run": "cargo publish --token ${CRATES_TOKEN}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust Stable",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Install cargo-audit",
                "run": "cargo install cargo-audit"
            },
            {
                "id": 5,
                "name": "Install cargo-llvm-cov for Ubuntu",
                "run": "cargo install cargo-llvm-cov"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "cargo build --all-targets --verbose"
            },
            {
                "id": 7,
                "name": "Lint with Clippy",
                "run": "cargo clippy --all-targets --all-features -- -D warnings"
            },
            {
                "id": 8,
                "name": "Run Tests",
                "run": "cargo test --verbose"
            },
            {
                "id": 9,
                "name": "Run Audit",
                "run": "cargo audit -D warnings --ignore RUSTSEC-2021-0145"
            },
            {
                "id": 10,
                "name": "Coverage report",
                "run": "cargo llvm-cov --release --lcov --output-path lcov.info"
            },
            {
                "id": 11,
                "name": "Upload to codecov.io",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v8"
            }
        ]
    },
    "facebook": {
        "facebook/hhvm": [
            {
                "id": 1,
                "name": "Installing dependencies to bootstrap env",
                "run": "apt update -y && apt install -y git wget lsb-release software-properties-common gpg"
            },
            {
                "id": 2,
                "name": "Installing llvm",
                "run": "wget https://apt.llvm.org/llvm.sh\nchmod +x llvm.sh\n# Note: Keep this version in sync with the one in the Debian control file.\n./llvm.sh ${CLANG_VERSION}\n"
            },
            {
                "id": 3,
                "name": "Making LLVM the default compiler",
                "run": "if [ -f /etc/alternatives/cc ]\nthen\n  update-alternatives --remove-all cc\nfi\n\nif [ -f /etc/alternatives/c++ ]\nthen\n  update-alternatives --remove-all c++\nfi\n\nupdate-alternatives --install /usr/bin/cc cc /usr/bin/clang++-${CLANG_VERSION} 500\nupdate-alternatives --set cc /usr/bin/clang++-${CLANG_VERSION}\nupdate-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-${CLANG_VERSION} 500\nupdate-alternatives --set c++ /usr/bin/clang++-${CLANG_VERSION}\n"
            },
            {
                "id": 4,
                "name": "Fetching HHVM and its submodules",
                "run": "actions/checkout@v3"
            },
            {
                "id": 5,
                "name": "Installing HHVM deps and building HHVM",
                "run": "ci/bin/make-debianish-package"
            },
            {
                "id": 6,
                "name": "Uploading artifacts",
                "run": "actions/upload-artifact@v3"
            }
        ],
        "facebook/facebook-android-sdk": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Assemble",
                "run": "./gradlew assembleRelease"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Apply Needs Attention Label",
                "run": "hramos/needs-attention@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run corekit tests",
                "run": "GITHUB_ACTIONS=1 ./gradlew :facebook-core:test -i"
            },
            {
                "id": 3,
                "name": "Run GamingServicesKit tests",
                "run": "GITHUB_ACTIONS=1 ./gradlew :facebook-gamingservices:test -i"
            },
            {
                "id": 4,
                "name": "Run CommonKit tests",
                "run": "GITHUB_ACTIONS=1 ./gradlew :facebook-common:test -i"
            },
            {
                "id": 5,
                "name": "Run all tests",
                "run": "GITHUB_ACTIONS=1 ./gradlew :facebook:test -i"
            }
        ],
        "facebook/facebook-ios-sdk": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Apply Needs Attention Label",
                "run": "hramos/needs-attention@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v4"
            }
        ],
        "facebook/folly": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Archive project",
                "run": "FILE_NAME=${GITHUB_REPOSITORY#*/}-${GITHUB_REF##*/}\ngit archive ${{ github.ref }} -o ${FILE_NAME}.zip\ngit archive ${{ github.ref }} -o ${FILE_NAME}.tar.gz\necho \"file_name=${FILE_NAME}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Compute digests",
                "run": "echo \"tgz_256=$(openssl dgst -sha256 ${{ steps.archive_project.outputs.file_name }}.tar.gz)\" >> $GITHUB_OUTPUT\necho \"tgz_512=$(openssl dgst -sha512 ${{ steps.archive_project.outputs.file_name }}.tar.gz)\" >> $GITHUB_OUTPUT\necho \"zip_256=$(openssl dgst -sha256 ${{ steps.archive_project.outputs.file_name }}.zip)\" >> $GITHUB_OUTPUT\necho \"zip_512=$(openssl dgst -sha512 ${{ steps.archive_project.outputs.file_name }}.zip)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Create Release",
                "run": "actions/create-release@v1"
            },
            {
                "id": 5,
                "name": "Upload zip",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 6,
                "name": "Upload tar.gz",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Show disk space at start",
                "run": "df -h"
            },
            {
                "id": 3,
                "name": "Free up disk space",
                "run": "sudo rm -rf /usr/local/lib/android"
            },
            {
                "id": 4,
                "name": "Show disk space after freeing up",
                "run": "df -h"
            },
            {
                "id": 5,
                "name": "Update system package info",
                "run": "sudo apt-get update"
            },
            {
                "id": 6,
                "name": "Install system deps",
                "run": "sudo python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive folly"
            },
            {
                "id": 7,
                "name": "Install packaging system deps",
                "run": "sudo python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive patchelf"
            },
            {
                "id": 8,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests boost"
            },
            {
                "id": 9,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests ninja"
            },
            {
                "id": 10,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests cmake"
            },
            {
                "id": 11,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests double-conversion"
            },
            {
                "id": 12,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fmt"
            },
            {
                "id": 13,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests gflags"
            },
            {
                "id": 14,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests glog"
            },
            {
                "id": 15,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests googletest"
            },
            {
                "id": 16,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libdwarf"
            },
            {
                "id": 17,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libevent"
            },
            {
                "id": 18,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zlib"
            },
            {
                "id": 19,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests lz4"
            },
            {
                "id": 20,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests snappy"
            },
            {
                "id": 21,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zstd"
            },
            {
                "id": 22,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests autoconf"
            },
            {
                "id": 23,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests automake"
            },
            {
                "id": 24,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libtool"
            },
            {
                "id": 25,
                "name": "Fetch libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libiberty"
            },
            {
                "id": 26,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libsodium"
            },
            {
                "id": 27,
                "name": "Fetch libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libunwind"
            },
            {
                "id": 28,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests xz"
            },
            {
                "id": 29,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests boost"
            },
            {
                "id": 30,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests ninja"
            },
            {
                "id": 31,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests cmake"
            },
            {
                "id": 32,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests double-conversion"
            },
            {
                "id": 33,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fmt"
            },
            {
                "id": 34,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests gflags"
            },
            {
                "id": 35,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests glog"
            },
            {
                "id": 36,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests googletest"
            },
            {
                "id": 37,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libdwarf"
            },
            {
                "id": 38,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libevent"
            },
            {
                "id": 39,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zlib"
            },
            {
                "id": 40,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests lz4"
            },
            {
                "id": 41,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests snappy"
            },
            {
                "id": 42,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zstd"
            },
            {
                "id": 43,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests autoconf"
            },
            {
                "id": 44,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests automake"
            },
            {
                "id": 45,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libtool"
            },
            {
                "id": 46,
                "name": "Build libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libiberty"
            },
            {
                "id": 47,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libsodium"
            },
            {
                "id": 48,
                "name": "Build libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libunwind"
            },
            {
                "id": 49,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests xz"
            },
            {
                "id": 50,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --src-dir=. folly  --project-install-prefix folly:/usr/local"
            },
            {
                "id": 51,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fixup-dyn-deps --strip --src-dir=. folly _artifacts/linux  --project-install-prefix folly:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 52,
                "name": "Step 52",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 53,
                "name": "Test folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages test --src-dir=. folly  --project-install-prefix folly:/usr/local"
            },
            {
                "id": 54,
                "name": "Show disk space at end",
                "run": "df -h"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Show disk space at start",
                "run": "df -h"
            },
            {
                "id": 3,
                "name": "Free up disk space",
                "run": "sudo rm -rf /usr/local/lib/android"
            },
            {
                "id": 4,
                "name": "Show disk space after freeing up",
                "run": "df -h"
            },
            {
                "id": 5,
                "name": "Install system deps",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive folly"
            },
            {
                "id": 6,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests boost"
            },
            {
                "id": 7,
                "name": "Fetch openssl",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests openssl"
            },
            {
                "id": 8,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests ninja"
            },
            {
                "id": 9,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests cmake"
            },
            {
                "id": 10,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests double-conversion"
            },
            {
                "id": 11,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fmt"
            },
            {
                "id": 12,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests gflags"
            },
            {
                "id": 13,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests glog"
            },
            {
                "id": 14,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests googletest"
            },
            {
                "id": 15,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libdwarf"
            },
            {
                "id": 16,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libevent"
            },
            {
                "id": 17,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests lz4"
            },
            {
                "id": 18,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests snappy"
            },
            {
                "id": 19,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zstd"
            },
            {
                "id": 20,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests autoconf"
            },
            {
                "id": 21,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests automake"
            },
            {
                "id": 22,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libtool"
            },
            {
                "id": 23,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libsodium"
            },
            {
                "id": 24,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests xz"
            },
            {
                "id": 25,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests boost"
            },
            {
                "id": 26,
                "name": "Build openssl",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests openssl"
            },
            {
                "id": 27,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests ninja"
            },
            {
                "id": 28,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests cmake"
            },
            {
                "id": 29,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests double-conversion"
            },
            {
                "id": 30,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fmt"
            },
            {
                "id": 31,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests gflags"
            },
            {
                "id": 32,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests glog"
            },
            {
                "id": 33,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests googletest"
            },
            {
                "id": 34,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libdwarf"
            },
            {
                "id": 35,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libevent"
            },
            {
                "id": 36,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests lz4"
            },
            {
                "id": 37,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests snappy"
            },
            {
                "id": 38,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zstd"
            },
            {
                "id": 39,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests autoconf"
            },
            {
                "id": 40,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests automake"
            },
            {
                "id": 41,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libtool"
            },
            {
                "id": 42,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libsodium"
            },
            {
                "id": 43,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests xz"
            },
            {
                "id": 44,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --src-dir=. folly  --project-install-prefix folly:/usr/local"
            },
            {
                "id": 45,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fixup-dyn-deps --src-dir=. folly _artifacts/mac  --project-install-prefix folly:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 46,
                "name": "Step 46",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 47,
                "name": "Test folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages test --src-dir=. folly  --project-install-prefix folly:/usr/local"
            },
            {
                "id": 48,
                "name": "Show disk space at end",
                "run": "df -h"
            },
            {
                "id": 1,
                "name": "Export boost environment",
                "run": "echo BOOST_ROOT=%BOOST_ROOT_1_83_0% >> %GITHUB_ENV%"
            },
            {
                "id": 2,
                "name": "Fix Git config",
                "run": "git config --system core.longpaths true"
            },
            {
                "id": 3,
                "name": "Disable autocrlf",
                "run": "git config --system core.autocrlf false"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v4"
            },
            {
                "id": 5,
                "name": "Fetch boost",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests boost"
            },
            {
                "id": 6,
                "name": "Fetch libsodium",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libsodium"
            },
            {
                "id": 7,
                "name": "Fetch ninja",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests ninja"
            },
            {
                "id": 8,
                "name": "Fetch cmake",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests cmake"
            },
            {
                "id": 9,
                "name": "Fetch double-conversion",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests double-conversion"
            },
            {
                "id": 10,
                "name": "Fetch fmt",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests fmt"
            },
            {
                "id": 11,
                "name": "Fetch gflags",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests gflags"
            },
            {
                "id": 12,
                "name": "Fetch glog",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests glog"
            },
            {
                "id": 13,
                "name": "Fetch googletest",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests googletest"
            },
            {
                "id": 14,
                "name": "Fetch libdwarf",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libdwarf"
            },
            {
                "id": 15,
                "name": "Fetch lz4",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests lz4"
            },
            {
                "id": 16,
                "name": "Fetch perl",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests perl"
            },
            {
                "id": 17,
                "name": "Fetch openssl",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests openssl"
            },
            {
                "id": 18,
                "name": "Fetch snappy",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests snappy"
            },
            {
                "id": 19,
                "name": "Fetch zlib",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests zlib"
            },
            {
                "id": 20,
                "name": "Fetch zstd",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests zstd"
            },
            {
                "id": 21,
                "name": "Fetch libevent",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libevent"
            },
            {
                "id": 22,
                "name": "Build boost",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests boost"
            },
            {
                "id": 23,
                "name": "Build libsodium",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests libsodium"
            },
            {
                "id": 24,
                "name": "Build ninja",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests ninja"
            },
            {
                "id": 25,
                "name": "Build cmake",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests cmake"
            },
            {
                "id": 26,
                "name": "Build double-conversion",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests double-conversion"
            },
            {
                "id": 27,
                "name": "Build fmt",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests fmt"
            },
            {
                "id": 28,
                "name": "Build gflags",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests gflags"
            },
            {
                "id": 29,
                "name": "Build glog",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests glog"
            },
            {
                "id": 30,
                "name": "Build googletest",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests googletest"
            },
            {
                "id": 31,
                "name": "Build libdwarf",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests libdwarf"
            },
            {
                "id": 32,
                "name": "Build lz4",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests lz4"
            },
            {
                "id": 33,
                "name": "Build perl",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests perl"
            },
            {
                "id": 34,
                "name": "Build openssl",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests openssl"
            },
            {
                "id": 35,
                "name": "Build snappy",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests snappy"
            },
            {
                "id": 36,
                "name": "Build zlib",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests zlib"
            },
            {
                "id": 37,
                "name": "Build zstd",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests zstd"
            },
            {
                "id": 38,
                "name": "Build libevent",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests libevent"
            },
            {
                "id": 39,
                "name": "Build folly",
                "run": "python build/fbcode_builder/getdeps.py build --src-dir=. folly"
            },
            {
                "id": 40,
                "name": "Copy artifacts",
                "run": "python build/fbcode_builder/getdeps.py fixup-dyn-deps --src-dir=. folly _artifacts/windows  --final-install-prefix /usr/local"
            },
            {
                "id": 41,
                "name": "Step 41",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 42,
                "name": "Test folly",
                "run": "python build/fbcode_builder/getdeps.py test --src-dir=. folly"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "facebook/install-dotslash@latest"
            },
            {
                "id": 3,
                "name": "get_buck_graph",
                "run": "BUCK_GRAPH=$(./buck2 cquery ... --output-attribute '^buck.type$|^name$')\necho \"$BUCK_GRAPH\" > buck_graph_results.json\n"
            },
            {
                "id": 4,
                "name": "Check if rust_binary",
                "run": "OUTPUT=$(cat buck_graph_results.json)\nif [[ \"$OUTPUT\" == *\"rust_binary\"* ]]; then\n  echo \"uses_rust=true\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 5,
                "name": "Check if cxx_binary",
                "run": "OUTPUT=$(cat buck_graph_results.json)\nif [[ \"$OUTPUT\" == *\"cxx_binary\"* ]]; then\n  echo \"uses_cxx=true\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 6,
                "name": "Check if ocaml_binary",
                "run": "OUTPUT=$(cat buck_graph_results.json)\nif [[ \"$OUTPUT\" == *\"ocaml_binary\"* ]]; then\n  echo \"uses_ocaml=true\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 7,
                "name": "Check if python_binary",
                "run": "OUTPUT=$(cat buck_graph_results.json)\nif [[ \"$OUTPUT\" == *\"python_binary\"* ]]; then\n  echo \"uses_python=true\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "sudo apt-get update"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "facebook/install-dotslash@latest"
            },
            {
                "id": 4,
                "name": "Install Rust toolchain",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 5,
                "name": "Install C++ toolchain",
                "run": "sudo apt-get install cmake llvm cppcheck python3-pip\nsudo pip3 install conan==1.*\n"
            },
            {
                "id": 6,
                "name": "Install OCaml toolchain",
                "run": "ocaml/setup-ocaml@v2"
            },
            {
                "id": 7,
                "name": "Install Python toolchain",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 8,
                "name": "buck2 build and test",
                "run": "bash ./.github/scripts/buck_build_and_test.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "facebook/install-dotslash@latest"
            },
            {
                "id": 3,
                "name": "Install Rust toolchain",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 4,
                "name": "Install C++ toolchain",
                "run": "choco install llvm cmake conan cppcheck -y\nif ($LASTEXITCODE -eq 3010) { $LASTEXITCODE = 0 }\n"
            },
            {
                "id": 5,
                "name": "Install OCaml toolchain",
                "run": "ocaml/setup-ocaml@v2"
            },
            {
                "id": 6,
                "name": "Install Python toolchain",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 7,
                "name": "buck2 build and test",
                "run": "bash ./.github/scripts/buck_build_and_test.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "facebook/install-dotslash@latest"
            },
            {
                "id": 3,
                "name": "Install Rust toolchain",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 4,
                "name": "Install C++ toolchain",
                "run": "brew install cmake llvm cppcheck python3 conan@1\n"
            },
            {
                "id": 5,
                "name": "Install OCaml toolchain",
                "run": "ocaml/setup-ocaml@v2"
            },
            {
                "id": 6,
                "name": "Install Python toolchain",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 7,
                "name": "Install homebrew deps",
                "run": "BUCK_GRAPH=$(./buck2 cquery \"attrregexfilter(labels, 'third-party:homebrew:', deps(//...))\" --json --output-attribute=labels)\nHOMEBREW_PACKAGES=$(echo $BUCK_GRAPH | jq '[.[] | .labels] | flatten | unique | map(select(contains(\"third-party:homebrew:\")) | sub(\"third-party:homebrew:\"; \"\")) | .[] | @text')\necho $HOMEBREW_PACKAGES\necho $HOMEBREW_PACKAGES | xargs brew install pkg-config\n"
            },
            {
                "id": 8,
                "name": "buck2 build and test",
                "run": "bash ./.github/scripts/buck_build_and_test.sh"
            }
        ],
        "facebook/watchman": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust Stable",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests boost"
            },
            {
                "id": 4,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests ninja"
            },
            {
                "id": 5,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests cmake"
            },
            {
                "id": 6,
                "name": "Fetch cpptoml",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests cpptoml"
            },
            {
                "id": 7,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fmt"
            },
            {
                "id": 8,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests gflags"
            },
            {
                "id": 9,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests glog"
            },
            {
                "id": 10,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests googletest"
            },
            {
                "id": 11,
                "name": "Fetch python-six",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests python-six"
            },
            {
                "id": 12,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zstd"
            },
            {
                "id": 13,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests double-conversion"
            },
            {
                "id": 14,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libdwarf"
            },
            {
                "id": 15,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libevent"
            },
            {
                "id": 16,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests lz4"
            },
            {
                "id": 17,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests snappy"
            },
            {
                "id": 18,
                "name": "Fetch pcre2",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests pcre2"
            },
            {
                "id": 19,
                "name": "Fetch python-setuptools",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests python-setuptools"
            },
            {
                "id": 20,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zlib"
            },
            {
                "id": 21,
                "name": "Fetch bz2",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests bz2"
            },
            {
                "id": 22,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests autoconf"
            },
            {
                "id": 23,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests automake"
            },
            {
                "id": 24,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libtool"
            },
            {
                "id": 25,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libsodium"
            },
            {
                "id": 26,
                "name": "Fetch libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libiberty"
            },
            {
                "id": 27,
                "name": "Fetch libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libunwind"
            },
            {
                "id": 28,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests xz"
            },
            {
                "id": 29,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests folly"
            },
            {
                "id": 30,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fizz"
            },
            {
                "id": 31,
                "name": "Fetch mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests mvfst"
            },
            {
                "id": 32,
                "name": "Fetch libffi",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libffi"
            },
            {
                "id": 33,
                "name": "Fetch ncurses",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests ncurses"
            },
            {
                "id": 34,
                "name": "Fetch python",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests python"
            },
            {
                "id": 35,
                "name": "Fetch wangle",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests wangle"
            },
            {
                "id": 36,
                "name": "Fetch fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fbthrift"
            },
            {
                "id": 37,
                "name": "Fetch fb303",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fb303"
            },
            {
                "id": 38,
                "name": "Fetch edencommon",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests edencommon"
            },
            {
                "id": 39,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests boost"
            },
            {
                "id": 40,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests ninja"
            },
            {
                "id": 41,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests cmake"
            },
            {
                "id": 42,
                "name": "Build cpptoml",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests cpptoml"
            },
            {
                "id": 43,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fmt"
            },
            {
                "id": 44,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests gflags"
            },
            {
                "id": 45,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests glog"
            },
            {
                "id": 46,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests googletest"
            },
            {
                "id": 47,
                "name": "Build python-six",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests python-six"
            },
            {
                "id": 48,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zstd"
            },
            {
                "id": 49,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests double-conversion"
            },
            {
                "id": 50,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libdwarf"
            },
            {
                "id": 51,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libevent"
            },
            {
                "id": 52,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests lz4"
            },
            {
                "id": 53,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests snappy"
            },
            {
                "id": 54,
                "name": "Build pcre2",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests pcre2"
            },
            {
                "id": 55,
                "name": "Build python-setuptools",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests python-setuptools"
            },
            {
                "id": 56,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zlib"
            },
            {
                "id": 57,
                "name": "Build bz2",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests bz2"
            },
            {
                "id": 58,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests autoconf"
            },
            {
                "id": 59,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests automake"
            },
            {
                "id": 60,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libtool"
            },
            {
                "id": 61,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libsodium"
            },
            {
                "id": 62,
                "name": "Build libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libiberty"
            },
            {
                "id": 63,
                "name": "Build libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libunwind"
            },
            {
                "id": 64,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests xz"
            },
            {
                "id": 65,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests folly"
            },
            {
                "id": 66,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fizz"
            },
            {
                "id": 67,
                "name": "Build mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests mvfst"
            },
            {
                "id": 68,
                "name": "Build libffi",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libffi"
            },
            {
                "id": 69,
                "name": "Build ncurses",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests ncurses"
            },
            {
                "id": 70,
                "name": "Build python",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests python"
            },
            {
                "id": 71,
                "name": "Build wangle",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests wangle"
            },
            {
                "id": 72,
                "name": "Build fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fbthrift"
            },
            {
                "id": 73,
                "name": "Build fb303",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fb303"
            },
            {
                "id": 74,
                "name": "Build edencommon",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests edencommon"
            },
            {
                "id": 75,
                "name": "Build watchman",
                "run": "python3 build/fbcode_builder/getdeps.py build --src-dir=. watchman  --project-install-prefix watchman:/usr/local"
            },
            {
                "id": 76,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py fixup-dyn-deps --strip --src-dir=. watchman _artifacts/linux  --project-install-prefix watchman:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 77,
                "name": "Step 77",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 78,
                "name": "Test watchman",
                "run": "python3 build/fbcode_builder/getdeps.py test --src-dir=. watchman  --project-install-prefix watchman:/usr/local"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust Stable",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests boost"
            },
            {
                "id": 4,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests ninja"
            },
            {
                "id": 5,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests cmake"
            },
            {
                "id": 6,
                "name": "Fetch cpptoml",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests cpptoml"
            },
            {
                "id": 7,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fmt"
            },
            {
                "id": 8,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests gflags"
            },
            {
                "id": 9,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests glog"
            },
            {
                "id": 10,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests googletest"
            },
            {
                "id": 11,
                "name": "Fetch python-six",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests python-six"
            },
            {
                "id": 12,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zstd"
            },
            {
                "id": 13,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests double-conversion"
            },
            {
                "id": 14,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libdwarf"
            },
            {
                "id": 15,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests lz4"
            },
            {
                "id": 16,
                "name": "Fetch openssl",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests openssl"
            },
            {
                "id": 17,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests snappy"
            },
            {
                "id": 18,
                "name": "Fetch pcre2",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests pcre2"
            },
            {
                "id": 19,
                "name": "Fetch python-setuptools",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests python-setuptools"
            },
            {
                "id": 20,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libevent"
            },
            {
                "id": 21,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zlib"
            },
            {
                "id": 22,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests autoconf"
            },
            {
                "id": 23,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests automake"
            },
            {
                "id": 24,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libtool"
            },
            {
                "id": 25,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libsodium"
            },
            {
                "id": 26,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests xz"
            },
            {
                "id": 27,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests folly"
            },
            {
                "id": 28,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fizz"
            },
            {
                "id": 29,
                "name": "Fetch mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests mvfst"
            },
            {
                "id": 30,
                "name": "Fetch wangle",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests wangle"
            },
            {
                "id": 31,
                "name": "Fetch fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fbthrift"
            },
            {
                "id": 32,
                "name": "Fetch fb303",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fb303"
            },
            {
                "id": 33,
                "name": "Fetch edencommon",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests edencommon"
            },
            {
                "id": 34,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests boost"
            },
            {
                "id": 35,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests ninja"
            },
            {
                "id": 36,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests cmake"
            },
            {
                "id": 37,
                "name": "Build cpptoml",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests cpptoml"
            },
            {
                "id": 38,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fmt"
            },
            {
                "id": 39,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests gflags"
            },
            {
                "id": 40,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests glog"
            },
            {
                "id": 41,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests googletest"
            },
            {
                "id": 42,
                "name": "Build python-six",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests python-six"
            },
            {
                "id": 43,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zstd"
            },
            {
                "id": 44,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests double-conversion"
            },
            {
                "id": 45,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libdwarf"
            },
            {
                "id": 46,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests lz4"
            },
            {
                "id": 47,
                "name": "Build openssl",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests openssl"
            },
            {
                "id": 48,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests snappy"
            },
            {
                "id": 49,
                "name": "Build pcre2",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests pcre2"
            },
            {
                "id": 50,
                "name": "Build python-setuptools",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests python-setuptools"
            },
            {
                "id": 51,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libevent"
            },
            {
                "id": 52,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zlib"
            },
            {
                "id": 53,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests autoconf"
            },
            {
                "id": 54,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests automake"
            },
            {
                "id": 55,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libtool"
            },
            {
                "id": 56,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libsodium"
            },
            {
                "id": 57,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests xz"
            },
            {
                "id": 58,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests folly"
            },
            {
                "id": 59,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fizz"
            },
            {
                "id": 60,
                "name": "Build mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests mvfst"
            },
            {
                "id": 61,
                "name": "Build wangle",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests wangle"
            },
            {
                "id": 62,
                "name": "Build fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fbthrift"
            },
            {
                "id": 63,
                "name": "Build fb303",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fb303"
            },
            {
                "id": 64,
                "name": "Build edencommon",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests edencommon"
            },
            {
                "id": 65,
                "name": "Build watchman",
                "run": "python3 build/fbcode_builder/getdeps.py build --src-dir=. watchman  --project-install-prefix watchman:/usr/local"
            },
            {
                "id": 66,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py fixup-dyn-deps --src-dir=. watchman _artifacts/mac  --project-install-prefix watchman:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 67,
                "name": "Step 67",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 68,
                "name": "Test watchman",
                "run": "python3 build/fbcode_builder/getdeps.py test --src-dir=. watchman  --project-install-prefix watchman:/usr/local"
            },
            {
                "id": 1,
                "name": "Export boost environment",
                "run": "echo BOOST_ROOT=%BOOST_ROOT_1_83_0% >> %GITHUB_ENV%"
            },
            {
                "id": 2,
                "name": "Fix Git config",
                "run": "git config --system core.longpaths true"
            },
            {
                "id": 3,
                "name": "Disable autocrlf",
                "run": "git config --system core.autocrlf false"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v4"
            },
            {
                "id": 5,
                "name": "Install Rust Stable",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 6,
                "name": "Fetch boost",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests boost"
            },
            {
                "id": 7,
                "name": "Fetch ninja",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests ninja"
            },
            {
                "id": 8,
                "name": "Fetch cmake",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests cmake"
            },
            {
                "id": 9,
                "name": "Fetch cpptoml",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests cpptoml"
            },
            {
                "id": 10,
                "name": "Fetch fmt",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests fmt"
            },
            {
                "id": 11,
                "name": "Fetch gflags",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests gflags"
            },
            {
                "id": 12,
                "name": "Fetch glog",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests glog"
            },
            {
                "id": 13,
                "name": "Fetch googletest",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests googletest"
            },
            {
                "id": 14,
                "name": "Fetch libsodium",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libsodium"
            },
            {
                "id": 15,
                "name": "Fetch python-six",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests python-six"
            },
            {
                "id": 16,
                "name": "Fetch zstd",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests zstd"
            },
            {
                "id": 17,
                "name": "Fetch double-conversion",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests double-conversion"
            },
            {
                "id": 18,
                "name": "Fetch libdwarf",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libdwarf"
            },
            {
                "id": 19,
                "name": "Fetch lz4",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests lz4"
            },
            {
                "id": 20,
                "name": "Fetch snappy",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests snappy"
            },
            {
                "id": 21,
                "name": "Fetch zlib",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests zlib"
            },
            {
                "id": 22,
                "name": "Fetch pcre2",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests pcre2"
            },
            {
                "id": 23,
                "name": "Fetch python-setuptools",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests python-setuptools"
            },
            {
                "id": 24,
                "name": "Fetch perl",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests perl"
            },
            {
                "id": 25,
                "name": "Fetch openssl",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests openssl"
            },
            {
                "id": 26,
                "name": "Fetch libevent",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libevent"
            },
            {
                "id": 27,
                "name": "Fetch folly",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests folly"
            },
            {
                "id": 28,
                "name": "Fetch fizz",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests fizz"
            },
            {
                "id": 29,
                "name": "Fetch mvfst",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests mvfst"
            },
            {
                "id": 30,
                "name": "Fetch wangle",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests wangle"
            },
            {
                "id": 31,
                "name": "Fetch fbthrift",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests fbthrift"
            },
            {
                "id": 32,
                "name": "Fetch fb303",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests fb303"
            },
            {
                "id": 33,
                "name": "Fetch edencommon",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests edencommon"
            },
            {
                "id": 34,
                "name": "Build boost",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests boost"
            },
            {
                "id": 35,
                "name": "Build ninja",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests ninja"
            },
            {
                "id": 36,
                "name": "Build cmake",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests cmake"
            },
            {
                "id": 37,
                "name": "Build cpptoml",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests cpptoml"
            },
            {
                "id": 38,
                "name": "Build fmt",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests fmt"
            },
            {
                "id": 39,
                "name": "Build gflags",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests gflags"
            },
            {
                "id": 40,
                "name": "Build glog",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests glog"
            },
            {
                "id": 41,
                "name": "Build googletest",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests googletest"
            },
            {
                "id": 42,
                "name": "Build libsodium",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests libsodium"
            },
            {
                "id": 43,
                "name": "Build python-six",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests python-six"
            },
            {
                "id": 44,
                "name": "Build zstd",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests zstd"
            },
            {
                "id": 45,
                "name": "Build double-conversion",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests double-conversion"
            },
            {
                "id": 46,
                "name": "Build libdwarf",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests libdwarf"
            },
            {
                "id": 47,
                "name": "Build lz4",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests lz4"
            },
            {
                "id": 48,
                "name": "Build snappy",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests snappy"
            },
            {
                "id": 49,
                "name": "Build zlib",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests zlib"
            },
            {
                "id": 50,
                "name": "Build pcre2",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests pcre2"
            },
            {
                "id": 51,
                "name": "Build python-setuptools",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests python-setuptools"
            },
            {
                "id": 52,
                "name": "Build perl",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests perl"
            },
            {
                "id": 53,
                "name": "Build openssl",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests openssl"
            },
            {
                "id": 54,
                "name": "Build libevent",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests libevent"
            },
            {
                "id": 55,
                "name": "Build folly",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests folly"
            },
            {
                "id": 56,
                "name": "Build fizz",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests fizz"
            },
            {
                "id": 57,
                "name": "Build mvfst",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests mvfst"
            },
            {
                "id": 58,
                "name": "Build wangle",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests wangle"
            },
            {
                "id": 59,
                "name": "Build fbthrift",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests fbthrift"
            },
            {
                "id": 60,
                "name": "Build fb303",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests fb303"
            },
            {
                "id": 61,
                "name": "Build edencommon",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests edencommon"
            },
            {
                "id": 62,
                "name": "Build watchman",
                "run": "python build/fbcode_builder/getdeps.py build --src-dir=. watchman"
            },
            {
                "id": 63,
                "name": "Copy artifacts",
                "run": "python build/fbcode_builder/getdeps.py fixup-dyn-deps --src-dir=. watchman _artifacts/windows  --final-install-prefix /usr/local"
            },
            {
                "id": 64,
                "name": "Step 64",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 65,
                "name": "Test watchman",
                "run": "python build/fbcode_builder/getdeps.py test --src-dir=. watchman"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "rustup default stable",
                "run": "rustup default stable"
            },
            {
                "id": 3,
                "name": "Install system dependencies",
                "run": "./install-system-packages.sh"
            },
            {
                "id": 4,
                "name": "Test cargo",
                "run": "cargo --help"
            },
            {
                "id": 5,
                "name": "Fix dubious ownership",
                "run": "git config --global --add safe.directory /__w/watchman/watchman"
            },
            {
                "id": 6,
                "name": "Build Watchman binaries",
                "run": "./autogen.sh"
            },
            {
                "id": 7,
                "name": "Make .deb",
                "run": "./watchman/build/package/make-deb.sh"
            },
            {
                "id": 1,
                "name": "Prepare release info",
                "run": "python -c \"print('::set-output name=name::' + '$TAG'.lstrip('refs/tags/'))\""
            },
            {
                "id": 2,
                "name": "Create release",
                "run": "actions/create-release@v1"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Fix HOME",
                "run": "echo HOME=/root >> $GITHUB_ENV"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install system dependencies",
                "run": "./install-system-packages.sh"
            },
            {
                "id": 4,
                "name": "Fix dubious ownership",
                "run": "git config --global --add safe.directory /__w/watchman/watchman"
            },
            {
                "id": 5,
                "name": "Build Watchman binaries",
                "run": "./autogen.sh"
            },
            {
                "id": 6,
                "name": "Make .deb",
                "run": "./watchman/build/package/make-deb.sh"
            },
            {
                "id": 7,
                "name": "Upload .deb",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "Fix HOME",
                "run": "echo HOME=/root >> $GITHUB_ENV"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install system dependencies",
                "run": "./install-system-packages.sh"
            },
            {
                "id": 4,
                "name": "Fix dubious ownership",
                "run": "git config --global --add safe.directory /__w/watchman/watchman"
            },
            {
                "id": 5,
                "name": "Build Watchman binaries",
                "run": "./autogen.sh"
            },
            {
                "id": 6,
                "name": "Make .deb",
                "run": "./watchman/build/package/make-deb.sh"
            },
            {
                "id": 7,
                "name": "Upload .deb",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "Fix HOME",
                "run": "echo HOME=/root >> $GITHUB_ENV"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install system dependencies",
                "run": "./install-system-packages.sh"
            },
            {
                "id": 4,
                "name": "Fix dubious ownership",
                "run": "git config --global --add safe.directory /__w/watchman/watchman"
            },
            {
                "id": 5,
                "name": "Build Watchman binaries",
                "run": "./autogen.sh"
            },
            {
                "id": 6,
                "name": "Make .rpm",
                "run": "./watchman/build/package/make-rpm.sh"
            },
            {
                "id": 7,
                "name": "Upload .rpm",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "Fix HOME",
                "run": "echo HOME=/root >> $GITHUB_ENV"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install system dependencies",
                "run": "./install-system-packages.sh"
            },
            {
                "id": 4,
                "name": "Fix dubious ownership",
                "run": "git config --global --add safe.directory /__w/watchman/watchman"
            },
            {
                "id": 5,
                "name": "Build Watchman binaries",
                "run": "./autogen.sh"
            },
            {
                "id": 6,
                "name": "Make .rpm",
                "run": "./watchman/build/package/make-rpm.sh"
            },
            {
                "id": 7,
                "name": "Upload .rpm",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "Fix HOME",
                "run": "echo HOME=/root >> $GITHUB_ENV"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install system dependencies",
                "run": "./install-system-packages.sh"
            },
            {
                "id": 4,
                "name": "Fix dubious ownership",
                "run": "git config --global --add safe.directory /__w/watchman/watchman"
            },
            {
                "id": 5,
                "name": "Build Watchman binaries",
                "run": "./autogen.sh"
            },
            {
                "id": 6,
                "name": "Make .rpm",
                "run": "./watchman/build/package/make-rpm.sh"
            },
            {
                "id": 7,
                "name": "Upload .rpm",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build watchman",
                "run": "python3 build/fbcode_builder/getdeps.py build --src-dir=. watchman  --project-install-prefix watchman:/usr/local"
            },
            {
                "id": 3,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py fixup-dyn-deps --strip --src-dir=. watchman _artifacts/linux  --project-install-prefix watchman:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 4,
                "name": "Test watchman",
                "run": "python3 build/fbcode_builder/getdeps.py test --src-dir=. watchman  --project-install-prefix watchman:/usr/local"
            },
            {
                "id": 5,
                "name": "Package watchman",
                "run": "mv _artifacts/linux \"watchman-${{ needs.prepare.outputs.release }}-linux\" && zip -r watchman-${{ needs.prepare.outputs.release }}-linux.zip \"watchman-${{ needs.prepare.outputs.release }}-linux/\""
            },
            {
                "id": 6,
                "name": "Upload Linux release",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build watchman",
                "run": "SDKROOT=$(xcrun --show-sdk-path --sdk macosx11.1) python3 build/fbcode_builder/getdeps.py --allow-system-packages build --src-dir=. watchman  --project-install-prefix watchman:/usr/local"
            },
            {
                "id": 3,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fixup-dyn-deps --src-dir=. watchman _artifacts/mac  --project-install-prefix watchman:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 4,
                "name": "Test watchman",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages test --src-dir=. watchman  --project-install-prefix watchman:/usr/local"
            },
            {
                "id": 5,
                "name": "Package watchman",
                "run": "mv _artifacts/mac \"watchman-${{ needs.prepare.outputs.release }}-macos\" && zip -r watchman-${{ needs.prepare.outputs.release }}-macos.zip \"watchman-${{ needs.prepare.outputs.release }}-macos/\""
            },
            {
                "id": 6,
                "name": "Upload macOS release",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Export boost environment",
                "run": "echo BOOST_ROOT=%BOOST_ROOT_1_69_0% >> %GITHUB_ENV%"
            },
            {
                "id": 3,
                "name": "Fix Git config",
                "run": "git config --system core.longpaths true"
            },
            {
                "id": 4,
                "name": "Build watchman",
                "run": "python build/fbcode_builder/getdeps.py --allow-system-packages build --src-dir=. watchman"
            },
            {
                "id": 5,
                "name": "Copy artifacts",
                "run": "python build/fbcode_builder/getdeps.py --allow-system-packages fixup-dyn-deps --src-dir=. watchman _artifacts/windows  --final-install-prefix /usr/local"
            },
            {
                "id": 6,
                "name": "Test watchman",
                "run": "python build/fbcode_builder/getdeps.py --allow-system-packages test --src-dir=. watchman"
            },
            {
                "id": 7,
                "name": "Package watchman",
                "run": "mv _artifacts/windows \"watchman-${{ needs.prepare.outputs.release }}-windows\" && Compress-Archive -DestinationPath \"watchman-${{ needs.prepare.outputs.release }}-windows.zip\" -Path \"watchman-${{ needs.prepare.outputs.release }}-windows/\""
            },
            {
                "id": 8,
                "name": "Upload Windows release",
                "run": "actions/upload-release-asset@v1"
            }
        ],
        "facebook/chef-utils": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Lint Markdown",
                "run": "actionshub/markdownlint@1.2.0"
            },
            {
                "id": 3,
                "name": "Check links",
                "run": "gaurav-nelson/github-action-markdown-link-check@v1"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "bundle install"
            },
            {
                "id": 4,
                "name": "Run rubocop",
                "run": "./scripts/run_rubocop"
            }
        ],
        "facebook/react": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Get last version string for www",
                "run": "# Empty checks only needed for backwards compatibility,can remove later.\nVERSION_CLASSIC=$( [ -f ./compiled/facebook-www/VERSION_CLASSIC ] && cat ./compiled/facebook-www/VERSION_CLASSIC || echo '' )\nVERSION_MODERN=$( [ -f ./compiled/facebook-www/VERSION_MODERN ] && cat ./compiled/facebook-www/VERSION_MODERN || echo '' )\necho \"Last classic version is $VERSION_CLASSIC\"\necho \"Last modern version is $VERSION_MODERN\"\necho \"last_version_classic=$VERSION_CLASSIC\" >> \"$GITHUB_OUTPUT\"\necho \"last_version_modern=$VERSION_MODERN\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Get last version string for rn",
                "run": "# Empty checks only needed for backwards compatibility,can remove later.\nVERSION_NATIVE_FB=$( [ -f ./compiled-rn/VERSION_NATIVE_FB ] && cat ./compiled-rn/VERSION_NATIVE_FB || echo '' )\necho \"Last rn version is $VERSION_NATIVE_FB\"\necho \"last_version_rn=$VERSION_NATIVE_FB\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/checkout@v4"
            },
            {
                "id": 6,
                "name": "Check branches",
                "run": "echo \"www_branch_count=$(git ls-remote --heads origin \"refs/heads/meta-www\" | wc -l)\" >> \"$GITHUB_OUTPUT\"\necho \"fbsource_branch_count=$(git ls-remote --heads origin \"refs/heads/meta-fbsource\" | wc -l)\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 7,
                "name": "Download and unzip artifacts",
                "run": "actions/github-script@v6"
            },
            {
                "id": 8,
                "name": "Strip @license from eslint plugin and react-refresh",
                "run": "sed -i -e 's/ @license React*//' \\\n  build/oss-experimental/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js \\\n  build/oss-experimental/react-refresh/cjs/react-refresh-babel.development.js\n"
            },
            {
                "id": 9,
                "name": "Move relevant files for React in www into compiled",
                "run": "# Move the facebook-www folder into compiled\nmkdir ./compiled\nmv build/facebook-www ./compiled\n\n# Move ReactAllWarnings.js to facebook-www\nmkdir ./compiled/facebook-www/__test_utils__\nmv build/__test_utils__/ReactAllWarnings.js ./compiled/facebook-www/__test_utils__/ReactAllWarnings.js\n\n# Move eslint-plugin-react-hooks into facebook-www\nmv build/oss-experimental/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js \\\n  ./compiled/facebook-www/eslint-plugin-react-hooks.js\n\n# Move unstable_server-external-runtime.js into facebook-www\nmv build/oss-experimental/react-dom/unstable_server-external-runtime.js \\\n  ./compiled/facebook-www/unstable_server-external-runtime.js\n\n# Move react-refresh-babel.development.js into babel-plugin-react-refresh\nmkdir ./compiled/babel-plugin-react-refresh\nmv build/oss-experimental/react-refresh/cjs/react-refresh-babel.development.js \\\n  ./compiled/babel-plugin-react-refresh/index.js\n\nls -R ./compiled\n"
            },
            {
                "id": 10,
                "name": "Move relevant files for React in fbsource into compiled-rn",
                "run": "BASE_FOLDER='compiled-rn/facebook-fbsource/xplat/js'\nmkdir -p ${BASE_FOLDER}/react-native-github/Libraries/Renderer/\nmkdir -p ${BASE_FOLDER}/RKJSModules/vendor/react/{scheduler,react,react-is,react-test-renderer}/\n\n# Move React Native renderer\nmv build/react-native/implementations/ $BASE_FOLDER/react-native-github/Libraries/Renderer/\nmv build/react-native/shims/ $BASE_FOLDER/react-native-github/Libraries/Renderer/\nmv build/facebook-react-native/scheduler/cjs/ $BASE_FOLDER/RKJSModules/vendor/react/scheduler/\nmv build/facebook-react-native/react/cjs/ $BASE_FOLDER/RKJSModules/vendor/react/react/\nmv build/facebook-react-native/react-is/cjs/ $BASE_FOLDER/RKJSModules/vendor/react/react-is/\nmv build/facebook-react-native/react-test-renderer/cjs/ $BASE_FOLDER/RKJSModules/vendor/react/react-test-renderer/\n\n# Delete OSS renderer. OSS renderer is synced through internal script.\nRENDERER_FOLDER=$BASE_FOLDER/react-native-github/Libraries/Renderer/implementations/\nrm $RENDERER_FOLDER/ReactFabric-{dev,prod,profiling}.js\nrm $RENDERER_FOLDER/ReactNativeRenderer-{dev,prod,profiling}.js\n\n# Move React Native version file\nmv build/facebook-react-native/VERSION_NATIVE_FB ./compiled-rn/VERSION_NATIVE_FB\n\nls -R ./compiled-rn\n"
            },
            {
                "id": 11,
                "name": "Add REVISION files",
                "run": "echo ${{ github.sha }} >> ./compiled/facebook-www/REVISION\ncp ./compiled/facebook-www/REVISION ./compiled/facebook-www/REVISION_TRANSFORMS\necho ${{ github.sha }} >> ./compiled-rn/facebook-fbsource/xplat/js/react-native-github/Libraries/Renderer/REVISION\n"
            },
            {
                "id": 12,
                "name": "Get current version string",
                "run": "VERSION_CLASSIC=$(cat ./compiled/facebook-www/VERSION_CLASSIC)\nVERSION_MODERN=$(cat ./compiled/facebook-www/VERSION_MODERN)\nVERSION_NATIVE_FB=$(cat ./compiled-rn/VERSION_NATIVE_FB)\necho \"Current classic version is $VERSION_CLASSIC\"\necho \"Current modern version is $VERSION_MODERN\"\necho \"Current rn version is $VERSION_NATIVE_FB\"\necho \"current_version_classic=$VERSION_CLASSIC\" >> \"$GITHUB_OUTPUT\"\necho \"current_version_modern=$VERSION_MODERN\" >> \"$GITHUB_OUTPUT\"\necho \"current_version_rn=$VERSION_NATIVE_FB\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 14,
                "name": "Step 14",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Ensure clean directory",
                "run": "rm -rf compiled"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Revert version changes",
                "run": "echo \"Reverting $CURRENT_VERSION_CLASSIC to $LAST_VERSION_CLASSIC\"\ngrep -rl \"$CURRENT_VERSION_CLASSIC\" ./compiled || echo \"No files found with $CURRENT_VERSION_CLASSIC\"\ngrep -rl \"$CURRENT_VERSION_CLASSIC\" ./compiled | xargs -r sed -i -e \"s/$CURRENT_VERSION_CLASSIC/$LAST_VERSION_CLASSIC/g\"\ngrep -rl \"$CURRENT_VERSION_CLASSIC\" ./compiled || echo \"Classic version reverted\"\necho \"====================\"\necho \"Reverting $CURRENT_VERSION_MODERN to $LAST_VERSION_MODERN\"\ngrep -rl \"$CURRENT_VERSION_MODERN\" ./compiled || echo \"No files found with $CURRENT_VERSION_MODERN\"\ngrep -rl \"$CURRENT_VERSION_MODERN\" ./compiled | xargs -r sed -i -e \"s/$CURRENT_VERSION_MODERN/$LAST_VERSION_MODERN/g\"\ngrep -rl \"$CURRENT_VERSION_MODERN\" ./compiled || echo \"Modern version reverted\"\n"
            },
            {
                "id": 5,
                "name": "Check for changes",
                "run": "echo \"Full git status\"\ngit add .\ngit status\necho \"====================\"\nif git status --porcelain | grep -qv '/REVISION'; then\n  echo \"Changes detected\"\n  echo \"===== Changes =====\"\n  git --no-pager diff -U0 | grep '^[+-]' | head -n 50\n  echo \"===================\"\n  echo \"should_commit=true\" >> \"$GITHUB_OUTPUT\"\nelse\n  echo \"No Changes detected\"\n  echo \"should_commit=false\" >> \"$GITHUB_OUTPUT\"\nfi\n"
            },
            {
                "id": 6,
                "name": "Re-apply version changes",
                "run": "echo \"Re-applying $LAST_VERSION_CLASSIC to $CURRENT_VERSION_CLASSIC\"\ngrep -rl \"$LAST_VERSION_CLASSIC\" ./compiled || echo \"No files found with $LAST_VERSION_CLASSIC\"\ngrep -rl \"$LAST_VERSION_CLASSIC\" ./compiled | xargs -r sed -i -e \"s/$LAST_VERSION_CLASSIC/$CURRENT_VERSION_CLASSIC/g\"\ngrep -rl \"$LAST_VERSION_CLASSIC\" ./compiled || echo \"Classic version re-applied\"\necho \"====================\"\necho \"Re-applying $LAST_VERSION_MODERN to $CURRENT_VERSION_MODERN\"\ngrep -rl \"$LAST_VERSION_MODERN\" ./compiled || echo \"No files found with $LAST_VERSION_MODERN\"\ngrep -rl \"$LAST_VERSION_MODERN\" ./compiled | xargs -r sed -i -e \"s/$LAST_VERSION_MODERN/$CURRENT_VERSION_MODERN/g\"\ngrep -rl \"$LAST_VERSION_MODERN\" ./compiled || echo \"Classic version re-applied\"\n"
            },
            {
                "id": 7,
                "name": "Will commit these changes",
                "run": "echo \":\"\ngit status -u\n"
            },
            {
                "id": 8,
                "name": "Commit changes to branch",
                "run": "stefanzweifel/git-auto-commit-action@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Ensure clean directory",
                "run": "rm -rf compiled-rn"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Revert version changes",
                "run": "echo \"Reverting $CURRENT_VERSION to $LAST_VERSION\"\ngrep -rl \"$CURRENT_VERSION\" ./compiled-rn || echo \"No files found with $CURRENT_VERSION\"\ngrep -rl \"$CURRENT_VERSION\" ./compiled-rn | xargs -r sed -i -e \"s/$CURRENT_VERSION/$LAST_VERSION/g\"\ngrep -rl \"$CURRENT_VERSION\" ./compiled-rn || echo \"Version reverted\"\n"
            },
            {
                "id": 5,
                "name": "Check for changes",
                "run": "echo \"Full git status\"\ngit add .\ngit --no-pager diff -U0 --cached | grep '^[+-]' | head -n 100\necho \"====================\"\n# Ignore REVISION or lines removing @generated headers.\nif git diff --cached ':(exclude)*REVISION' | grep -vE \"^(@@|diff|index|\\-\\-\\-|\\+\\+\\+|\\- \\* @generated SignedSource)\" | grep \"^[+-]\" > /dev/null; then\n  echo \"Changes detected\"\n  echo \"===== Changes =====\"\n  git --no-pager diff --cached ':(exclude)*REVISION' | grep -vE \"^(@@|diff|index|\\-\\-\\-|\\+\\+\\+|\\- \\* @generated SignedSource)\" | grep \"^[+-]\" | head -n 50\n  echo \"===================\"\n  echo \"should_commit=true\" >> \"$GITHUB_OUTPUT\"\nelse\n  echo \"No Changes detected\"\n  echo \"should_commit=false\" >> \"$GITHUB_OUTPUT\"\nfi\n"
            },
            {
                "id": 6,
                "name": "Re-apply version changes",
                "run": "echo \"Re-applying $LAST_VERSION to $CURRENT_VERSION\"\ngrep -rl \"$LAST_VERSION\" ./compiled-rn || echo \"No files found with $LAST_VERSION\"\ngrep -rl \"$LAST_VERSION\" ./compiled-rn | xargs -r sed -i -e \"s/$LAST_VERSION/$CURRENT_VERSION/g\"\ngrep -rl \"$LAST_VERSION\" ./compiled-rn || echo \"Version re-applied\"\n"
            },
            {
                "id": 7,
                "name": "Add files for signing",
                "run": "echo \":\"\ngit add .\n"
            },
            {
                "id": 8,
                "name": "Signing files",
                "run": "actions/github-script@v6"
            },
            {
                "id": 9,
                "name": "Will commit these changes",
                "run": "git add .\ngit status\n"
            },
            {
                "id": 10,
                "name": "Commit changes to branch",
                "run": "stefanzweifel/git-auto-commit-action@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Restore cached node_modules",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "npx playwright install --with-deps chromium"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "yarn workspace playground test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 3,
                "name": "cargo test",
                "run": "cargo test --manifest-path=Cargo.toml --locked ${{ matrix.target.features && '--features' }} ${{ matrix.target.features }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "rustfmt",
                "run": "grep -r --include \"*.rs\" --files-without-match \"@generated\" crates | xargs rustup run nightly-2023-08-01 rustfmt --check --config=\"skip_children=true\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 3,
                "name": "cargo build",
                "run": "cargo build --release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "echo \"matrix=$(find packages -mindepth 1 -maxdepth 1 -type d | sed 's!packages/!!g' | tr '\\n' ',' | sed s/.$// | jq -Rsc '. / \",\" - [\"\"]')\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Restore cached node_modules",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "yarn prettier:ci"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Restore cached node_modules",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "yarn workspace babel-plugin-react-compiler lint"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Restore cached node_modules",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "yarn workspace babel-plugin-react-compiler jest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Restore cached node_modules",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "yarn workspace ${{ matrix.workspace_name }} test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 4,
                "name": "Run fuzz tests",
                "run": "FUZZ_TEST_SEED=$RANDOM yarn test fuzz --ci\nFUZZ_TEST_SEED=$RANDOM yarn test --prod fuzz --ci"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v9"
            }
        ],
        "facebook/fbthrift": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Show disk space at start",
                "run": "df -h"
            },
            {
                "id": 3,
                "name": "Free up disk space",
                "run": "sudo rm -rf /usr/local/lib/android"
            },
            {
                "id": 4,
                "name": "Show disk space after freeing up",
                "run": "df -h"
            },
            {
                "id": 5,
                "name": "Update system package info",
                "run": "sudo apt-get update"
            },
            {
                "id": 6,
                "name": "Install system deps",
                "run": "sudo python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive fbthrift"
            },
            {
                "id": 7,
                "name": "Install packaging system deps",
                "run": "sudo python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive patchelf"
            },
            {
                "id": 8,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests ninja"
            },
            {
                "id": 9,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests cmake"
            },
            {
                "id": 10,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zlib"
            },
            {
                "id": 11,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zstd"
            },
            {
                "id": 12,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fmt"
            },
            {
                "id": 13,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests boost"
            },
            {
                "id": 14,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests double-conversion"
            },
            {
                "id": 15,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests gflags"
            },
            {
                "id": 16,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests glog"
            },
            {
                "id": 17,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests googletest"
            },
            {
                "id": 18,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libdwarf"
            },
            {
                "id": 19,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libevent"
            },
            {
                "id": 20,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests lz4"
            },
            {
                "id": 21,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests snappy"
            },
            {
                "id": 22,
                "name": "Fetch bz2",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests bz2"
            },
            {
                "id": 23,
                "name": "Fetch python-six",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests python-six"
            },
            {
                "id": 24,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests autoconf"
            },
            {
                "id": 25,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests automake"
            },
            {
                "id": 26,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libtool"
            },
            {
                "id": 27,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libsodium"
            },
            {
                "id": 28,
                "name": "Fetch libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libiberty"
            },
            {
                "id": 29,
                "name": "Fetch libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libunwind"
            },
            {
                "id": 30,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests xz"
            },
            {
                "id": 31,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests folly"
            },
            {
                "id": 32,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fizz"
            },
            {
                "id": 33,
                "name": "Fetch mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests mvfst"
            },
            {
                "id": 34,
                "name": "Fetch libffi",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libffi"
            },
            {
                "id": 35,
                "name": "Fetch ncurses",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests ncurses"
            },
            {
                "id": 36,
                "name": "Fetch python",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests python"
            },
            {
                "id": 37,
                "name": "Fetch wangle",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests wangle"
            },
            {
                "id": 38,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests ninja"
            },
            {
                "id": 39,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests cmake"
            },
            {
                "id": 40,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zlib"
            },
            {
                "id": 41,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zstd"
            },
            {
                "id": 42,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fmt"
            },
            {
                "id": 43,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests boost"
            },
            {
                "id": 44,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests double-conversion"
            },
            {
                "id": 45,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests gflags"
            },
            {
                "id": 46,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests glog"
            },
            {
                "id": 47,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests googletest"
            },
            {
                "id": 48,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libdwarf"
            },
            {
                "id": 49,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libevent"
            },
            {
                "id": 50,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests lz4"
            },
            {
                "id": 51,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests snappy"
            },
            {
                "id": 52,
                "name": "Build bz2",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests bz2"
            },
            {
                "id": 53,
                "name": "Build python-six",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests python-six"
            },
            {
                "id": 54,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests autoconf"
            },
            {
                "id": 55,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests automake"
            },
            {
                "id": 56,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libtool"
            },
            {
                "id": 57,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libsodium"
            },
            {
                "id": 58,
                "name": "Build libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libiberty"
            },
            {
                "id": 59,
                "name": "Build libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libunwind"
            },
            {
                "id": 60,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests xz"
            },
            {
                "id": 61,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests folly"
            },
            {
                "id": 62,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fizz"
            },
            {
                "id": 63,
                "name": "Build mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests mvfst"
            },
            {
                "id": 64,
                "name": "Build libffi",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libffi"
            },
            {
                "id": 65,
                "name": "Build ncurses",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests ncurses"
            },
            {
                "id": 66,
                "name": "Build python",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests python"
            },
            {
                "id": 67,
                "name": "Build wangle",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests wangle"
            },
            {
                "id": 68,
                "name": "Build fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --src-dir=. fbthrift  --project-install-prefix fbthrift:/usr/local"
            },
            {
                "id": 69,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fixup-dyn-deps --strip --src-dir=. fbthrift _artifacts/linux  --project-install-prefix fbthrift:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 70,
                "name": "Step 70",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 71,
                "name": "Test fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages test --src-dir=. fbthrift  --project-install-prefix fbthrift:/usr/local"
            },
            {
                "id": 72,
                "name": "Show disk space at end",
                "run": "df -h"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Show disk space at start",
                "run": "df -h"
            },
            {
                "id": 3,
                "name": "Free up disk space",
                "run": "sudo rm -rf /usr/local/lib/android"
            },
            {
                "id": 4,
                "name": "Show disk space after freeing up",
                "run": "df -h"
            },
            {
                "id": 5,
                "name": "Install system deps",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive fbthrift"
            },
            {
                "id": 6,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests ninja"
            },
            {
                "id": 7,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests cmake"
            },
            {
                "id": 8,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zlib"
            },
            {
                "id": 9,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zstd"
            },
            {
                "id": 10,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fmt"
            },
            {
                "id": 11,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests boost"
            },
            {
                "id": 12,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests double-conversion"
            },
            {
                "id": 13,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests gflags"
            },
            {
                "id": 14,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests glog"
            },
            {
                "id": 15,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests googletest"
            },
            {
                "id": 16,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libdwarf"
            },
            {
                "id": 17,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests lz4"
            },
            {
                "id": 18,
                "name": "Fetch openssl",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests openssl"
            },
            {
                "id": 19,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests snappy"
            },
            {
                "id": 20,
                "name": "Fetch python-six",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests python-six"
            },
            {
                "id": 21,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libevent"
            },
            {
                "id": 22,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests autoconf"
            },
            {
                "id": 23,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests automake"
            },
            {
                "id": 24,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libtool"
            },
            {
                "id": 25,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libsodium"
            },
            {
                "id": 26,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests xz"
            },
            {
                "id": 27,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests folly"
            },
            {
                "id": 28,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fizz"
            },
            {
                "id": 29,
                "name": "Fetch mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests mvfst"
            },
            {
                "id": 30,
                "name": "Fetch wangle",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests wangle"
            },
            {
                "id": 31,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests ninja"
            },
            {
                "id": 32,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests cmake"
            },
            {
                "id": 33,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zlib"
            },
            {
                "id": 34,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zstd"
            },
            {
                "id": 35,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fmt"
            },
            {
                "id": 36,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests boost"
            },
            {
                "id": 37,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests double-conversion"
            },
            {
                "id": 38,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests gflags"
            },
            {
                "id": 39,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests glog"
            },
            {
                "id": 40,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests googletest"
            },
            {
                "id": 41,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libdwarf"
            },
            {
                "id": 42,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests lz4"
            },
            {
                "id": 43,
                "name": "Build openssl",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests openssl"
            },
            {
                "id": 44,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests snappy"
            },
            {
                "id": 45,
                "name": "Build python-six",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests python-six"
            },
            {
                "id": 46,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libevent"
            },
            {
                "id": 47,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests autoconf"
            },
            {
                "id": 48,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests automake"
            },
            {
                "id": 49,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libtool"
            },
            {
                "id": 50,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libsodium"
            },
            {
                "id": 51,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests xz"
            },
            {
                "id": 52,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests folly"
            },
            {
                "id": 53,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fizz"
            },
            {
                "id": 54,
                "name": "Build mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests mvfst"
            },
            {
                "id": 55,
                "name": "Build wangle",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests wangle"
            },
            {
                "id": 56,
                "name": "Build fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --src-dir=. fbthrift  --project-install-prefix fbthrift:/usr/local"
            },
            {
                "id": 57,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fixup-dyn-deps --src-dir=. fbthrift _artifacts/mac  --project-install-prefix fbthrift:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 58,
                "name": "Step 58",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 59,
                "name": "Test fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages test --src-dir=. fbthrift  --project-install-prefix fbthrift:/usr/local"
            },
            {
                "id": 60,
                "name": "Show disk space at end",
                "run": "df -h"
            },
            {
                "id": 1,
                "name": "Export boost environment",
                "run": "echo BOOST_ROOT=%BOOST_ROOT_1_83_0% >> %GITHUB_ENV%"
            },
            {
                "id": 2,
                "name": "Fix Git config",
                "run": "git config --system core.longpaths true"
            },
            {
                "id": 3,
                "name": "Disable autocrlf",
                "run": "git config --system core.autocrlf false"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v4"
            },
            {
                "id": 5,
                "name": "Fetch libsodium",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libsodium"
            },
            {
                "id": 6,
                "name": "Fetch ninja",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests ninja"
            },
            {
                "id": 7,
                "name": "Fetch cmake",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests cmake"
            },
            {
                "id": 8,
                "name": "Fetch zlib",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests zlib"
            },
            {
                "id": 9,
                "name": "Fetch zstd",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests zstd"
            },
            {
                "id": 10,
                "name": "Fetch fmt",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests fmt"
            },
            {
                "id": 11,
                "name": "Fetch boost",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests boost"
            },
            {
                "id": 12,
                "name": "Fetch double-conversion",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests double-conversion"
            },
            {
                "id": 13,
                "name": "Fetch gflags",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests gflags"
            },
            {
                "id": 14,
                "name": "Fetch glog",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests glog"
            },
            {
                "id": 15,
                "name": "Fetch googletest",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests googletest"
            },
            {
                "id": 16,
                "name": "Fetch libdwarf",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libdwarf"
            },
            {
                "id": 17,
                "name": "Fetch lz4",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests lz4"
            },
            {
                "id": 18,
                "name": "Fetch snappy",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests snappy"
            },
            {
                "id": 19,
                "name": "Fetch python-six",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests python-six"
            },
            {
                "id": 20,
                "name": "Fetch perl",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests perl"
            },
            {
                "id": 21,
                "name": "Fetch openssl",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests openssl"
            },
            {
                "id": 22,
                "name": "Fetch libevent",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libevent"
            },
            {
                "id": 23,
                "name": "Fetch folly",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests folly"
            },
            {
                "id": 24,
                "name": "Fetch fizz",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests fizz"
            },
            {
                "id": 25,
                "name": "Fetch mvfst",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests mvfst"
            },
            {
                "id": 26,
                "name": "Fetch wangle",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests wangle"
            },
            {
                "id": 27,
                "name": "Build libsodium",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests libsodium"
            },
            {
                "id": 28,
                "name": "Build ninja",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests ninja"
            },
            {
                "id": 29,
                "name": "Build cmake",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests cmake"
            },
            {
                "id": 30,
                "name": "Build zlib",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests zlib"
            },
            {
                "id": 31,
                "name": "Build zstd",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests zstd"
            },
            {
                "id": 32,
                "name": "Build fmt",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests fmt"
            },
            {
                "id": 33,
                "name": "Build boost",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests boost"
            },
            {
                "id": 34,
                "name": "Build double-conversion",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests double-conversion"
            },
            {
                "id": 35,
                "name": "Build gflags",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests gflags"
            },
            {
                "id": 36,
                "name": "Build glog",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests glog"
            },
            {
                "id": 37,
                "name": "Build googletest",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests googletest"
            },
            {
                "id": 38,
                "name": "Build libdwarf",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests libdwarf"
            },
            {
                "id": 39,
                "name": "Build lz4",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests lz4"
            },
            {
                "id": 40,
                "name": "Build snappy",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests snappy"
            },
            {
                "id": 41,
                "name": "Build python-six",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests python-six"
            },
            {
                "id": 42,
                "name": "Build perl",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests perl"
            },
            {
                "id": 43,
                "name": "Build openssl",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests openssl"
            },
            {
                "id": 44,
                "name": "Build libevent",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests libevent"
            },
            {
                "id": 45,
                "name": "Build folly",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests folly"
            },
            {
                "id": 46,
                "name": "Build fizz",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests fizz"
            },
            {
                "id": 47,
                "name": "Build mvfst",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests mvfst"
            },
            {
                "id": 48,
                "name": "Build wangle",
                "run": "python build/fbcode_builder/getdeps.py build --free-up-disk --no-tests wangle"
            },
            {
                "id": 49,
                "name": "Build fbthrift",
                "run": "python build/fbcode_builder/getdeps.py build --src-dir=. fbthrift"
            },
            {
                "id": 50,
                "name": "Copy artifacts",
                "run": "python build/fbcode_builder/getdeps.py fixup-dyn-deps --src-dir=. fbthrift _artifacts/windows  --final-install-prefix /usr/local"
            },
            {
                "id": 51,
                "name": "Step 51",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 52,
                "name": "Test fbthrift",
                "run": "python build/fbcode_builder/getdeps.py test --src-dir=. fbthrift"
            }
        ],
        "facebook/regenerator": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Use npm v8",
                "run": "npm install --global npm@8"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "npm run build --if-present"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "npm test"
            }
        ],
        "facebook/mcrouter": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build dependencies",
                "run": "./mcrouter/scripts/install_ubuntu_20.04.sh \"$(pwd)\"/mcrouter-install deps\n"
            },
            {
                "id": 3,
                "name": "Build mcrouter",
                "run": "mkdir -p \"$(pwd)\"/mcrouter-install/install\n./mcrouter/scripts/install_ubuntu_20.04.sh \"$(pwd)\"/mcrouter-install mcrouter\n"
            }
        ],
        "facebook/IT-CPE": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "bundle exec rspec 'tests/run_rubocop.rb'\nbundle exec rspec 'tests/run_foodcritic.rb'\n"
            }
        ],
        "facebook/Haxl": [
            {
                "id": 1,
                "name": "apt",
                "run": "apt-get update\napt-get install -y --no-install-recommends gnupg ca-certificates dirmngr curl git software-properties-common libtinfo5\nif [ \"${{ matrix.setup-method }}\" = ghcup ]; then\n  mkdir -p \"$HOME/.ghcup/bin\"\n  curl -sL https://downloads.haskell.org/ghcup/0.1.20.0/x86_64-linux-ghcup-0.1.20.0 > \"$HOME/.ghcup/bin/ghcup\"\n  chmod a+x \"$HOME/.ghcup/bin/ghcup\"\n  \"$HOME/.ghcup/bin/ghcup\" install ghc \"$HCVER\" || (cat \"$HOME\"/.ghcup/logs/*.* && false)\n  \"$HOME/.ghcup/bin/ghcup\" install cabal 3.10.2.0 || (cat \"$HOME\"/.ghcup/logs/*.* && false)\nelse\n  apt-add-repository -y 'ppa:hvr/ghc'\n  apt-get update\n  apt-get install -y \"$HCNAME\"\n  mkdir -p \"$HOME/.ghcup/bin\"\n  curl -sL https://downloads.haskell.org/ghcup/0.1.20.0/x86_64-linux-ghcup-0.1.20.0 > \"$HOME/.ghcup/bin/ghcup\"\n  chmod a+x \"$HOME/.ghcup/bin/ghcup\"\n  \"$HOME/.ghcup/bin/ghcup\" install cabal 3.10.2.0 || (cat \"$HOME\"/.ghcup/logs/*.* && false)\nfi\n"
            },
            {
                "id": 2,
                "name": "Set PATH and environment variables",
                "run": "echo \"$HOME/.cabal/bin\" >> $GITHUB_PATH\necho \"LANG=C.UTF-8\" >> \"$GITHUB_ENV\"\necho \"CABAL_DIR=$HOME/.cabal\" >> \"$GITHUB_ENV\"\necho \"CABAL_CONFIG=$HOME/.cabal/config\" >> \"$GITHUB_ENV\"\nHCDIR=/opt/$HCKIND/$HCVER\nif [ \"${{ matrix.setup-method }}\" = ghcup ]; then\n  HC=$(\"$HOME/.ghcup/bin/ghcup\" whereis ghc \"$HCVER\")\n  HCPKG=$(echo \"$HC\" | sed 's#ghc$#ghc-pkg#')\n  HADDOCK=$(echo \"$HC\" | sed 's#ghc$#haddock#')\n  echo \"HC=$HC\" >> \"$GITHUB_ENV\"\n  echo \"HCPKG=$HCPKG\" >> \"$GITHUB_ENV\"\n  echo \"HADDOCK=$HADDOCK\" >> \"$GITHUB_ENV\"\n  echo \"CABAL=$HOME/.ghcup/bin/cabal-3.10.2.0 -vnormal+nowrap\" >> \"$GITHUB_ENV\"\nelse\n  HC=$HCDIR/bin/$HCKIND\n  echo \"HC=$HC\" >> \"$GITHUB_ENV\"\n  echo \"HCPKG=$HCDIR/bin/$HCKIND-pkg\" >> \"$GITHUB_ENV\"\n  echo \"HADDOCK=$HCDIR/bin/haddock\" >> \"$GITHUB_ENV\"\n  echo \"CABAL=$HOME/.ghcup/bin/cabal-3.10.2.0 -vnormal+nowrap\" >> \"$GITHUB_ENV\"\nfi\n\nHCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\\d+)\\.(\\d+)\\.(\\d+)(\\.(\\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')\necho \"HCNUMVER=$HCNUMVER\" >> \"$GITHUB_ENV\"\necho \"ARG_TESTS=--enable-tests\" >> \"$GITHUB_ENV\"\necho \"ARG_BENCH=--enable-benchmarks\" >> \"$GITHUB_ENV\"\necho \"HEADHACKAGE=false\" >> \"$GITHUB_ENV\"\necho \"ARG_COMPILER=--$HCKIND --with-compiler=$HC\" >> \"$GITHUB_ENV\"\necho \"GHCJSARITH=0\" >> \"$GITHUB_ENV\"\n"
            },
            {
                "id": 3,
                "name": "env",
                "run": "env\n"
            },
            {
                "id": 4,
                "name": "write cabal config",
                "run": "mkdir -p $CABAL_DIR\ncat >> $CABAL_CONFIG <<EOF\nremote-build-reporting: anonymous\nwrite-ghc-environment-files: never\nremote-repo-cache: $CABAL_DIR/packages\nlogs-dir:          $CABAL_DIR/logs\nworld-file:        $CABAL_DIR/world\nextra-prog-path:   $CABAL_DIR/bin\nsymlink-bindir:    $CABAL_DIR/bin\ninstalldir:        $CABAL_DIR/bin\nbuild-summary:     $CABAL_DIR/logs/build.log\nstore-dir:         $CABAL_DIR/store\ninstall-dirs user\n  prefix: $CABAL_DIR\nrepository hackage.haskell.org\n  url: http://hackage.haskell.org/\nEOF\ncat >> $CABAL_CONFIG <<EOF\nprogram-default-options\n  ghc-options: $GHCJOBS +RTS -M3G -RTS\nEOF\ncat $CABAL_CONFIG\n"
            },
            {
                "id": 5,
                "name": "versions",
                "run": "$HC --version || true\n$HC --print-project-git-commit-id || true\n$CABAL --version || true\n"
            },
            {
                "id": 6,
                "name": "update cabal index",
                "run": "$CABAL v2-update -v\n"
            },
            {
                "id": 7,
                "name": "install cabal-plan",
                "run": "mkdir -p $HOME/.cabal/bin\ncurl -sL https://github.com/haskell-hvr/cabal-plan/releases/download/v0.7.3.0/cabal-plan-0.7.3.0-x86_64-linux.xz > cabal-plan.xz\necho 'f62ccb2971567a5f638f2005ad3173dba14693a45154c1508645c52289714cb2  cabal-plan.xz' | sha256sum -c -\nxz -d < cabal-plan.xz > $HOME/.cabal/bin/cabal-plan\nrm -f cabal-plan.xz\nchmod a+x $HOME/.cabal/bin/cabal-plan\ncabal-plan --version\n"
            },
            {
                "id": 8,
                "name": "checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 9,
                "name": "initial cabal.project for sdist",
                "run": "touch cabal.project\necho \"packages: $GITHUB_WORKSPACE/source/.\" >> cabal.project\ncat cabal.project\n"
            },
            {
                "id": 10,
                "name": "sdist",
                "run": "mkdir -p sdist\n$CABAL sdist all --output-dir $GITHUB_WORKSPACE/sdist\n"
            },
            {
                "id": 11,
                "name": "unpack",
                "run": "mkdir -p unpacked\nfind sdist -maxdepth 1 -type f -name '*.tar.gz' -exec tar -C $GITHUB_WORKSPACE/unpacked -xzvf {} \\;\n"
            },
            {
                "id": 12,
                "name": "generate cabal.project",
                "run": "PKGDIR_haxl=\"$(find \"$GITHUB_WORKSPACE/unpacked\" -maxdepth 1 -type d -regex '.*/haxl-[0-9.]*')\"\necho \"PKGDIR_haxl=${PKGDIR_haxl}\" >> \"$GITHUB_ENV\"\nrm -f cabal.project cabal.project.local\ntouch cabal.project\ntouch cabal.project.local\necho \"packages: ${PKGDIR_haxl}\" >> cabal.project\necho \"package haxl\" >> cabal.project\necho \"    ghc-options: -Werror=missing-methods\" >> cabal.project\ncat >> cabal.project <<EOF\nEOF\n$HCPKG list --simple-output --names-only | perl -ne 'for (split /\\s+/) { print \"constraints: $_ installed\\n\" unless /^(haxl)$/; }' >> cabal.project.local\ncat cabal.project\ncat cabal.project.local\n"
            },
            {
                "id": 13,
                "name": "dump install plan",
                "run": "$CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dry-run all\ncabal-plan\n"
            },
            {
                "id": 14,
                "name": "restore cache",
                "run": "actions/cache/restore@v3"
            },
            {
                "id": 15,
                "name": "install dependencies",
                "run": "$CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --dependencies-only -j2 all\n$CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dependencies-only -j2 all\n"
            },
            {
                "id": 16,
                "name": "build w/o tests",
                "run": "$CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all\n"
            },
            {
                "id": 17,
                "name": "build",
                "run": "$CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --write-ghc-environment-files=always\n"
            },
            {
                "id": 18,
                "name": "tests",
                "run": "$CABAL v2-test $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --test-show-details=direct\n"
            },
            {
                "id": 19,
                "name": "haddock",
                "run": "$CABAL v2-haddock --disable-documentation --haddock-all $ARG_COMPILER --with-haddock $HADDOCK $ARG_TESTS $ARG_BENCH all\n"
            },
            {
                "id": 20,
                "name": "unconstrained build",
                "run": "rm -f cabal.project.local\n$CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all\n"
            },
            {
                "id": 21,
                "name": "save cache",
                "run": "actions/cache/save@v3"
            }
        ],
        "facebook/yoga": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-android"
            },
            {
                "id": 3,
                "name": "Publish to Maven Local",
                "run": "./gradlew publishToMavenLocal"
            },
            {
                "id": 4,
                "name": "Upload Build Artifacts",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 5,
                "name": "Publish to the Maven Central",
                "run": "./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-android"
            },
            {
                "id": 3,
                "name": "Publish to Maven Local",
                "run": "./gradlew publishToMavenLocal"
            },
            {
                "id": 4,
                "name": "Upload Build Artifacts",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 5,
                "name": "Publish to the Snapshot Repository",
                "run": "./gradlew publishToSonatype"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-apple"
            },
            {
                "id": 3,
                "name": "Publish Yoga",
                "run": "pod trunk push Yoga.podspec"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-js"
            },
            {
                "id": 3,
                "name": "Store auth token in config file",
                "run": "echo \"//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}\" > ~/.npmrc"
            },
            {
                "id": 4,
                "name": "yarn publish",
                "run": "yarn publish"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-android"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew assemble${{ matrix.mode }} --stacktrace"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-apple"
            },
            {
                "id": 3,
                "name": "pod lib lint",
                "run": "pod lib lint --verbose --include-podspecs=**/*.podspec"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-apple"
            },
            {
                "id": 3,
                "name": "Build Debug",
                "run": "swift build -c debug"
            },
            {
                "id": 4,
                "name": "Build Release",
                "run": "swift build -c release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-cpp"
            },
            {
                "id": 3,
                "name": "Unit tests",
                "run": "./unit_tests ${{ matrix.mode }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-cpp"
            },
            {
                "id": 3,
                "name": "Unit tests",
                "run": "./build_fuzz_tests ${{ matrix.mode }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-cpp"
            },
            {
                "id": 3,
                "name": "Build and run benchmark",
                "run": "cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release\ncmake --build build\n./build/benchmark ./captures\n"
            },
            {
                "id": 4,
                "name": "Build and run benchmarklegacy",
                "run": "./build/benchmarklegacy"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-cpp"
            },
            {
                "id": 3,
                "name": "Build capture",
                "run": "cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release\ncmake --build build\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "clang-format",
                "run": "./.github/actions/clang-format"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-js"
            },
            {
                "id": 3,
                "name": "Restore emsdk",
                "run": "./.github/actions/cache-emsdk"
            },
            {
                "id": 4,
                "name": "yarn benchmark",
                "run": "yarn benchmark"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-js"
            },
            {
                "id": 3,
                "name": "Restore emsdk",
                "run": "./.github/actions/cache-emsdk"
            },
            {
                "id": 4,
                "name": "yarn build",
                "run": "yarn build --verbose"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-js"
            },
            {
                "id": 3,
                "name": "Restore emsdk",
                "run": "./.github/actions/cache-emsdk"
            },
            {
                "id": 4,
                "name": "yarn test",
                "run": "yarn test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-js"
            },
            {
                "id": 3,
                "name": "yarn lint",
                "run": "yarn lint"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-js"
            },
            {
                "id": 3,
                "name": "yarn tsc",
                "run": "yarn tsc"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-js"
            },
            {
                "id": 3,
                "name": "Restore emsdk",
                "run": "./.github/actions/cache-emsdk"
            },
            {
                "id": 4,
                "name": "yarn pack",
                "run": "yarn pack --filename yoga-layout.tar.gz"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup JS",
                "run": "./.github/actions/setup-js"
            },
            {
                "id": 3,
                "name": "yarn gentest-validate",
                "run": "yarn gentest-validate"
            },
            {
                "id": 4,
                "name": "yarn gentest",
                "run": "yarn gentest -h"
            },
            {
                "id": 5,
                "name": "Check for modified tests",
                "run": "if [[ -n $(git status -s) ]]; then\n  git status -s\n  echo \"yarn gentest modified these tests. Please run yarn gentest to resolve.\"\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-js"
            },
            {
                "id": 3,
                "name": "Restore emsdk",
                "run": "./.github/actions/cache-emsdk"
            },
            {
                "id": 4,
                "name": "Build Website",
                "run": "yarn build"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "./.github/actions/setup-js"
            },
            {
                "id": 3,
                "name": "yarn tsc",
                "run": "yarn tsc"
            }
        ],
        "facebook/facebook-php-business-sdk": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup PHP",
                "run": "shivammathur/setup-php@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "php-actions/composer@v6"
            },
            {
                "id": 4,
                "name": "PHPUnit Tests",
                "run": "vendor/bin/phpunit -v -c test/phpunit-travis.xml --coverage-clover=coverage.clover"
            }
        ],
        "facebook/jsx": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm run build"
            },
            {
                "id": 5,
                "name": "commit changes",
                "run": "elstudio/actions-js-build/commit@v3"
            }
        ],
        "facebook/facebook-python-business-sdk": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install setuptools wheel twine\n"
            },
            {
                "id": 4,
                "name": "Build and publish",
                "run": "python setup.py sdist bdist_wheel\ntwine upload dist/*\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Test with tox",
                "run": "pip install tox\ntox -e ${{ matrix.tox-env }}\n"
            }
        ],
        "facebook/grocery-delivery": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "bundle install"
            },
            {
                "id": 4,
                "name": "Run rspec",
                "run": "bundle exec rspec"
            },
            {
                "id": 5,
                "name": "Run rubocop",
                "run": "bundle exec rubocop --display-cop-names"
            },
            {
                "id": 6,
                "name": "Run integration testing",
                "run": "./test/run.sh"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Lint Markdown",
                "run": "actionshub/markdownlint@1.2.0"
            },
            {
                "id": 3,
                "name": "Check links",
                "run": "gaurav-nelson/github-action-markdown-link-check@v1"
            }
        ],
        "facebook/taste-tester": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "bundle install"
            },
            {
                "id": 4,
                "name": "Run rspec",
                "run": "bundle exec rspec"
            },
            {
                "id": 5,
                "name": "Enable rubocop matcher",
                "run": "echo \"::add-matcher::.github/rubocop_matcher.json\""
            },
            {
                "id": 6,
                "name": "Run rubocop",
                "run": "bundle exec rubocop --display-cop-names"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Lint Markdown",
                "run": "actionshub/markdownlint@1.2.0"
            },
            {
                "id": 3,
                "name": "Check links",
                "run": "gaurav-nelson/github-action-markdown-link-check@v1"
            }
        ],
        "facebook/between-meals": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "bundle install"
            },
            {
                "id": 4,
                "name": "Run rspec",
                "run": "bundle exec rspec"
            },
            {
                "id": 5,
                "name": "Run rubocop",
                "run": "bundle exec rubocop --display-cop-names"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Lint Markdown",
                "run": "actionshub/markdownlint@1.2.0"
            },
            {
                "id": 3,
                "name": "Check links",
                "run": "gaurav-nelson/github-action-markdown-link-check@v1"
            }
        ],
        "facebook/fatal": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Archive project",
                "run": "FILE_NAME=${GITHUB_REPOSITORY#*/}-${GITHUB_REF##*/}\ngit archive ${{ github.ref }} -o ${FILE_NAME}.zip\ngit archive ${{ github.ref }} -o ${FILE_NAME}.tar.gz\necho \"file_name=${FILE_NAME}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Compute digests",
                "run": "echo \"tgz_256=$(openssl dgst -sha256 ${{ steps.archive_project.outputs.file_name }}.tar.gz)\" >> $GITHUB_OUTPUT\necho \"tgz_512=$(openssl dgst -sha512 ${{ steps.archive_project.outputs.file_name }}.tar.gz)\" >> $GITHUB_OUTPUT\necho \"zip_256=$(openssl dgst -sha256 ${{ steps.archive_project.outputs.file_name }}.zip)\" >> $GITHUB_OUTPUT\necho \"zip_512=$(openssl dgst -sha512 ${{ steps.archive_project.outputs.file_name }}.zip)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Create Release",
                "run": "actions/create-release@v1"
            },
            {
                "id": 5,
                "name": "Upload zip",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 6,
                "name": "Upload tar.gz",
                "run": "actions/upload-release-asset@v1"
            }
        ],
        "facebook/proxygen": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Archive project",
                "run": "FILE_NAME=${GITHUB_REPOSITORY#*/}-${GITHUB_REF##*/}\ngit archive ${{ github.ref }} -o ${FILE_NAME}.zip\ngit archive ${{ github.ref }} -o ${FILE_NAME}.tar.gz\necho \"file_name=${FILE_NAME}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Compute digests",
                "run": "echo \"tgz_256=$(openssl dgst -sha256 ${{ steps.archive_project.outputs.file_name }}.tar.gz)\" >> $GITHUB_OUTPUT\necho \"tgz_512=$(openssl dgst -sha512 ${{ steps.archive_project.outputs.file_name }}.tar.gz)\" >> $GITHUB_OUTPUT\necho \"zip_256=$(openssl dgst -sha256 ${{ steps.archive_project.outputs.file_name }}.zip)\" >> $GITHUB_OUTPUT\necho \"zip_512=$(openssl dgst -sha512 ${{ steps.archive_project.outputs.file_name }}.zip)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Create Release",
                "run": "actions/create-release@v1"
            },
            {
                "id": 5,
                "name": "Upload zip",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 6,
                "name": "Upload tar.gz",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests ninja"
            },
            {
                "id": 3,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests cmake"
            },
            {
                "id": 4,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zlib"
            },
            {
                "id": 5,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zstd"
            },
            {
                "id": 6,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests boost"
            },
            {
                "id": 7,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests double-conversion"
            },
            {
                "id": 8,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fmt"
            },
            {
                "id": 9,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests gflags"
            },
            {
                "id": 10,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests glog"
            },
            {
                "id": 11,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests googletest"
            },
            {
                "id": 12,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libdwarf"
            },
            {
                "id": 13,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libevent"
            },
            {
                "id": 14,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests lz4"
            },
            {
                "id": 15,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests snappy"
            },
            {
                "id": 16,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests autoconf"
            },
            {
                "id": 17,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests automake"
            },
            {
                "id": 18,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libtool"
            },
            {
                "id": 19,
                "name": "Fetch gperf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests gperf"
            },
            {
                "id": 20,
                "name": "Fetch libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libiberty"
            },
            {
                "id": 21,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libsodium"
            },
            {
                "id": 22,
                "name": "Fetch libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libunwind"
            },
            {
                "id": 23,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests xz"
            },
            {
                "id": 24,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests folly"
            },
            {
                "id": 25,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fizz"
            },
            {
                "id": 26,
                "name": "Fetch mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests mvfst"
            },
            {
                "id": 27,
                "name": "Fetch wangle",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests wangle"
            },
            {
                "id": 28,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests ninja"
            },
            {
                "id": 29,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests cmake"
            },
            {
                "id": 30,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zlib"
            },
            {
                "id": 31,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zstd"
            },
            {
                "id": 32,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests boost"
            },
            {
                "id": 33,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests double-conversion"
            },
            {
                "id": 34,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fmt"
            },
            {
                "id": 35,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests gflags"
            },
            {
                "id": 36,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests glog"
            },
            {
                "id": 37,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests googletest"
            },
            {
                "id": 38,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libdwarf"
            },
            {
                "id": 39,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libevent"
            },
            {
                "id": 40,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests lz4"
            },
            {
                "id": 41,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests snappy"
            },
            {
                "id": 42,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests autoconf"
            },
            {
                "id": 43,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests automake"
            },
            {
                "id": 44,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libtool"
            },
            {
                "id": 45,
                "name": "Build gperf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests gperf"
            },
            {
                "id": 46,
                "name": "Build libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libiberty"
            },
            {
                "id": 47,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libsodium"
            },
            {
                "id": 48,
                "name": "Build libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libunwind"
            },
            {
                "id": 49,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests xz"
            },
            {
                "id": 50,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests folly"
            },
            {
                "id": 51,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fizz"
            },
            {
                "id": 52,
                "name": "Build mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests mvfst"
            },
            {
                "id": 53,
                "name": "Build wangle",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests wangle"
            },
            {
                "id": 54,
                "name": "Build proxygen",
                "run": "python3 build/fbcode_builder/getdeps.py build --src-dir=. proxygen  --project-install-prefix proxygen:/usr/local"
            },
            {
                "id": 55,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py fixup-dyn-deps --strip --src-dir=. proxygen _artifacts/linux  --project-install-prefix proxygen:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 56,
                "name": "Step 56",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 57,
                "name": "Test proxygen",
                "run": "python3 build/fbcode_builder/getdeps.py test --src-dir=. proxygen  --project-install-prefix proxygen:/usr/local"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests ninja"
            },
            {
                "id": 3,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests cmake"
            },
            {
                "id": 4,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zlib"
            },
            {
                "id": 5,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zstd"
            },
            {
                "id": 6,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests boost"
            },
            {
                "id": 7,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests double-conversion"
            },
            {
                "id": 8,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fmt"
            },
            {
                "id": 9,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests gflags"
            },
            {
                "id": 10,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests glog"
            },
            {
                "id": 11,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests googletest"
            },
            {
                "id": 12,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libdwarf"
            },
            {
                "id": 13,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests lz4"
            },
            {
                "id": 14,
                "name": "Fetch openssl",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests openssl"
            },
            {
                "id": 15,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests snappy"
            },
            {
                "id": 16,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libevent"
            },
            {
                "id": 17,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests autoconf"
            },
            {
                "id": 18,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests automake"
            },
            {
                "id": 19,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libtool"
            },
            {
                "id": 20,
                "name": "Fetch gperf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests gperf"
            },
            {
                "id": 21,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libsodium"
            },
            {
                "id": 22,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests xz"
            },
            {
                "id": 23,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests folly"
            },
            {
                "id": 24,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fizz"
            },
            {
                "id": 25,
                "name": "Fetch mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests mvfst"
            },
            {
                "id": 26,
                "name": "Fetch wangle",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests wangle"
            },
            {
                "id": 27,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests ninja"
            },
            {
                "id": 28,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests cmake"
            },
            {
                "id": 29,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zlib"
            },
            {
                "id": 30,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zstd"
            },
            {
                "id": 31,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests boost"
            },
            {
                "id": 32,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests double-conversion"
            },
            {
                "id": 33,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fmt"
            },
            {
                "id": 34,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests gflags"
            },
            {
                "id": 35,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests glog"
            },
            {
                "id": 36,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests googletest"
            },
            {
                "id": 37,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libdwarf"
            },
            {
                "id": 38,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests lz4"
            },
            {
                "id": 39,
                "name": "Build openssl",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests openssl"
            },
            {
                "id": 40,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests snappy"
            },
            {
                "id": 41,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libevent"
            },
            {
                "id": 42,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests autoconf"
            },
            {
                "id": 43,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests automake"
            },
            {
                "id": 44,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libtool"
            },
            {
                "id": 45,
                "name": "Build gperf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests gperf"
            },
            {
                "id": 46,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libsodium"
            },
            {
                "id": 47,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests xz"
            },
            {
                "id": 48,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests folly"
            },
            {
                "id": 49,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fizz"
            },
            {
                "id": 50,
                "name": "Build mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests mvfst"
            },
            {
                "id": 51,
                "name": "Build wangle",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests wangle"
            },
            {
                "id": 52,
                "name": "Build proxygen",
                "run": "python3 build/fbcode_builder/getdeps.py build --src-dir=. proxygen  --project-install-prefix proxygen:/usr/local"
            },
            {
                "id": 53,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py fixup-dyn-deps --src-dir=. proxygen _artifacts/mac  --project-install-prefix proxygen:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 54,
                "name": "Step 54",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 55,
                "name": "Test proxygen",
                "run": "python3 build/fbcode_builder/getdeps.py test --src-dir=. proxygen  --project-install-prefix proxygen:/usr/local"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Log in to the Container registry",
                "run": "docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1"
            },
            {
                "id": 3,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7"
            },
            {
                "id": 4,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4"
            }
        ],
        "facebook/flow": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Install OPAM",
                "run": "./.github/actions/install-opam-linux"
            },
            {
                "id": 3,
                "name": "Create cache breaker",
                "run": ".circleci/make_opam_cachebreaker.sh > .circleci/opamcachebreaker"
            },
            {
                "id": 4,
                "name": "opam cache",
                "run": "actions/cache@v3.3.2"
            },
            {
                "id": 5,
                "name": "Init opam",
                "run": ".circleci/opam_init.sh"
            },
            {
                "id": 6,
                "name": "Install deps from opam",
                "run": "make deps"
            },
            {
                "id": 7,
                "name": "Install extra deps from opam",
                "run": "make deps-js"
            },
            {
                "id": 8,
                "name": "Build flow.js",
                "run": "opam exec -- make js"
            },
            {
                "id": 9,
                "name": "Build flow_parser.js",
                "run": "opam exec -- make -C src/parser js"
            },
            {
                "id": 10,
                "name": "Create artifacts",
                "run": "mkdir -p dist\ncp src/parser/flow_parser.js dist/flow_parser.js\ncp src/parser/flow_parser.js packages/flow-parser/flow_parser.js"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Install OPAM",
                "run": "./.github/actions/install-opam-linux"
            },
            {
                "id": 3,
                "name": "Create cache breaker",
                "run": ".circleci/make_opam_cachebreaker.sh > .circleci/opamcachebreaker"
            },
            {
                "id": 4,
                "name": "opam cache",
                "run": "actions/cache@v3.3.2"
            },
            {
                "id": 5,
                "name": "Init opam",
                "run": ".circleci/opam_init.sh"
            },
            {
                "id": 6,
                "name": "Install deps from opam",
                "run": "make deps"
            },
            {
                "id": 7,
                "name": "Install extra deps from opam",
                "run": "make deps-js"
            },
            {
                "id": 8,
                "name": "Build flow",
                "run": "opam exec -- make bin/flow dist/flow.zip\nmkdir -p bin/linux && cp bin/flow bin/linux/flow"
            },
            {
                "id": 9,
                "name": "Build libflowparser",
                "run": "opam exec -- make -C src/parser dist/libflowparser.zip"
            },
            {
                "id": 10,
                "name": "Create artifacts",
                "run": "cp dist/flow.zip dist/flow-linux64.zip\ncp src/parser/dist/libflowparser.zip dist/libflowparser-linux64.zip"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Install Missing Tools",
                "run": "sudo apt-get install bzip2 gcc g++ rsync patch diffutils curl make zip unzip git m4 perl -y\n"
            },
            {
                "id": 3,
                "name": "Install OPAM",
                "run": "./.github/actions/install-opam-linux"
            },
            {
                "id": 4,
                "name": "Create cache breaker",
                "run": ".circleci/make_opam_cachebreaker.sh > .circleci/opamcachebreaker"
            },
            {
                "id": 5,
                "name": "opam cache",
                "run": "actions/cache@v3.3.2"
            },
            {
                "id": 6,
                "name": "Init opam",
                "run": ".circleci/opam_init.sh"
            },
            {
                "id": 7,
                "name": "Install deps from opam",
                "run": "make deps"
            },
            {
                "id": 8,
                "name": "Build flow",
                "run": "opam exec -- make bin/flow dist/flow.zip\nmkdir -p bin/linux && cp bin/flow bin/linux/flow"
            },
            {
                "id": 9,
                "name": "Build libflowparser",
                "run": "opam exec -- make -C src/parser dist/libflowparser.zip"
            },
            {
                "id": 10,
                "name": "Create artifacts",
                "run": "cp dist/flow.zip dist/flow-linux64-arm64.zip\ncp src/parser/dist/libflowparser.zip dist/libflowparser-linux64-arm64.zip"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "maxim-lobanov/setup-xcode@v1.6.0"
            },
            {
                "id": 3,
                "name": "Update curl cacerts",
                "run": "echo \"cacert $GITHUB_WORKSPACE/.circleci/cacert.pem\" >> ~/.curlrc"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/install-opam-mac"
            },
            {
                "id": 5,
                "name": "Create cache breaker",
                "run": ".circleci/make_opam_cachebreaker.sh > .circleci/opamcachebreaker"
            },
            {
                "id": 6,
                "name": "opam cache",
                "run": "actions/cache@v3.3.2"
            },
            {
                "id": 7,
                "name": "Init opam",
                "run": ".circleci/opam_init.sh"
            },
            {
                "id": 8,
                "name": "Install deps from opam",
                "run": "make deps"
            },
            {
                "id": 9,
                "name": "Build flow",
                "run": "opam exec -- make bin/flow dist/flow.zip\nmkdir -p bin/macos && cp bin/flow bin/macos/flow"
            },
            {
                "id": 10,
                "name": "Build libflowparser",
                "run": "opam exec -- make -C src/parser dist/libflowparser.zip"
            },
            {
                "id": 11,
                "name": "Create artifacts",
                "run": "cp dist/flow.zip dist/flow-osx.zip\ncp src/parser/dist/libflowparser.zip dist/libflowparser-osx.zip"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "maxim-lobanov/setup-xcode@v1.6.0"
            },
            {
                "id": 3,
                "name": "Update curl cacerts",
                "run": "echo \"cacert $GITHUB_WORKSPACE/.circleci/cacert.pem\" >> ~/.curlrc"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/install-opam-mac"
            },
            {
                "id": 5,
                "name": "Create cache breaker",
                "run": ".circleci/make_opam_cachebreaker.sh > .circleci/opamcachebreaker"
            },
            {
                "id": 6,
                "name": "opam cache",
                "run": "actions/cache@v3.3.2"
            },
            {
                "id": 7,
                "name": "Init opam",
                "run": ".circleci/opam_init.sh"
            },
            {
                "id": 8,
                "name": "Install deps from opam",
                "run": "make deps"
            },
            {
                "id": 9,
                "name": "Build flow",
                "run": "opam exec -- make bin/flow dist/flow.zip\nmkdir -p bin/macos-arm64 && cp bin/flow bin/macos-arm64/flow"
            },
            {
                "id": 10,
                "name": "Build libflowparser",
                "run": "opam exec -- make -C src/parser dist/libflowparser.zip"
            },
            {
                "id": 11,
                "name": "Create artifacts",
                "run": "cp dist/flow.zip dist/flow-osx-arm64.zip\ncp src/parser/dist/libflowparser.zip dist/libflowparser-osx-arm64.zip"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Set up workspace",
                "run": "mkdir $Env:FLOW_TMP_DIR"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "choco install --no-progress -y --source https://chocolatey.org/api/v2/ 7zip\nsetx /M PATH $($Env:PATH + ';C:\\Program Files\\7-Zip')\n"
            },
            {
                "id": 4,
                "name": "Install cygwin",
                "run": "cygwin/cygwin-install-action@master"
            },
            {
                "id": 5,
                "name": "Install opam",
                "run": ".\\scripts\\windows\\install_opam.ps1"
            },
            {
                "id": 6,
                "name": "Cache",
                "run": "actions/cache@v3.3.2"
            },
            {
                "id": 7,
                "name": "Init opam",
                "run": "opam init default 'https://github.com/ocaml-opam/opam-repository-mingw.git#opam2' --bare --disable-sandboxing --no-setup"
            },
            {
                "id": 8,
                "name": "Create opam switch",
                "run": "make deps"
            },
            {
                "id": 9,
                "name": "Build flow.exe",
                "run": "cd ${GITHUB_WORKSPACE} ; eval $(opam env) ; make bin/flow.exe dist/flow.zip ; mkdir -p bin/win64 && cp bin/flow.exe bin/win64/flow.exe ; cp dist/flow.zip dist/flow-win64.zip"
            },
            {
                "id": 10,
                "name": "Build parser test runner",
                "run": "cd ${GITHUB_WORKSPACE} ; eval $(opam env) ; dune build src/parser/test/run_tests.exe ; cp _build/default/src/parser/test/run_tests.exe bin/win64/run_parser_tests.exe"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "chmod +x bin/linux/flow"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "./runtests.sh bin/linux/flow | cat"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "maxim-lobanov/setup-xcode@v1.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "chmod +x bin/macos/flow"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "./runtests.sh bin/macos/flow | cat"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "chmod +x bin/linux/flow"
            },
            {
                "id": 4,
                "name": "Install tool deps from yarn",
                "run": "(cd packages/flow-dev-tools && yarn install | cat)"
            },
            {
                "id": 5,
                "name": "Run tool tests",
                "run": "./tool test -p 4 --bin bin/linux/flow | cat"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "maxim-lobanov/setup-xcode@v1.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "chmod +x bin/macos/flow"
            },
            {
                "id": 5,
                "name": "Install tool deps from yarn",
                "run": "(cd packages/flow-dev-tools && yarn install | cat)"
            },
            {
                "id": 6,
                "name": "Run tool tests",
                "run": "./tool test --bin bin/macos/flow | cat"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 3,
                "name": "Install tool deps from yarn",
                "run": "cd packages/flow-dev-tools\nyarn install --ignore-scripts --pure-lockfile"
            },
            {
                "id": 4,
                "name": "Set TMP env var for consistency",
                "run": "echo \"TMP=$env:USERPROFILE\\AppData\\Local\\Temp\" >> $env:GITHUB_ENV\necho \"TEMP=$env:USERPROFILE\\AppData\\Local\\Temp\" >> $env:GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Run tool tests",
                "run": "node packages/flow-dev-tools/bin/tool test --bin bin/win64/flow.exe --parallelism 1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Install OPAM",
                "run": "./.github/actions/install-opam-linux"
            },
            {
                "id": 3,
                "name": "Create cache breaker",
                "run": ".circleci/make_opam_cachebreaker.sh > .circleci/opamcachebreaker"
            },
            {
                "id": 4,
                "name": "opam cache",
                "run": "actions/cache@v3.3.2"
            },
            {
                "id": 5,
                "name": "Init opam",
                "run": ".circleci/opam_init.sh"
            },
            {
                "id": 6,
                "name": "Install deps from opam",
                "run": "make deps"
            },
            {
                "id": 7,
                "name": "Install extra deps from opam",
                "run": "make deps-test | cat"
            },
            {
                "id": 8,
                "name": "Run ounit tests",
                "run": "opam exec -- make ounit-tests-ci"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "maxim-lobanov/setup-xcode@v1.6.0"
            },
            {
                "id": 3,
                "name": "Update curl cacerts",
                "run": "echo \"cacert $GITHUB_WORKSPACE/.circleci/cacert.pem\" >> ~/.curlrc"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/install-opam-mac"
            },
            {
                "id": 5,
                "name": "Create cache breaker",
                "run": ".circleci/make_opam_cachebreaker.sh > .circleci/opamcachebreaker"
            },
            {
                "id": 6,
                "name": "opam cache",
                "run": "actions/cache@v3.3.2"
            },
            {
                "id": 7,
                "name": "Init opam",
                "run": ".circleci/opam_init.sh"
            },
            {
                "id": 8,
                "name": "Install deps from opam",
                "run": "make deps"
            },
            {
                "id": 9,
                "name": "Install extra deps from opam",
                "run": "make deps-test | cat"
            },
            {
                "id": 10,
                "name": "Run ounit tests",
                "run": "opam exec -- make ounit-tests-ci"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 3,
                "name": "Test parser",
                "run": ".\\bin\\win64\\run_parser_tests.exe .\\src\\parser\\test\\flow\\\nif ($LASTEXITCODE -gt 0) {\n  Throw \"flow parser hardcoded ocaml tests exited with error code: $LASTEXITCODE\"\n}\n.\\bin\\win64\\run_parser_tests.exe .\\src\\parser\\test\\esprima\\\nif ($LASTEXITCODE -gt 0) {\n  Throw \"flow parser esprima ocaml tests exited with error code: $LASTEXITCODE\"\n}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 11,
                "name": "Pack flow-parser",
                "run": "mkdir -p packages/flow-parser/dist/\npwd\nls -lR .\ncp dist/flow_parser.js packages/flow-parser/dist/flow_parser.js\nmake dist/npm-flow-parser.tgz\n"
            },
            {
                "id": 12,
                "name": "Pack flow-parser-bin",
                "run": "mkdir -p packages/flow-parser-bin/dist/release/\ncp dist/libflowparser-linux64.zip packages/flow-parser-bin/dist/release/libflowparser-linux64.zip\ncp dist/libflowparser-osx.zip packages/flow-parser-bin/dist/release/libflowparser-osx.zip\nmake dist/npm-flow-parser-bin.tgz\n"
            },
            {
                "id": 13,
                "name": "Pack flow-remove-types and flow-node",
                "run": "rm -rf packages/flow-node\ncp -r packages/flow-remove-types/ packages/flow-node/\nsed -i '0,/flow-remove-types/s//flow-node/' packages/flow-node/package.json\nmake dist/npm-flow-remove-types.tgz\nmake dist/npm-flow-node.tgz\n"
            },
            {
                "id": 14,
                "name": "Step 14",
                "run": "actions/upload-artifact@v3.1.3"
            },
            {
                "id": 15,
                "name": "Deploy to npm",
                "run": ".circleci/deploy_npm.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "chmod +x bin/linux/flow"
            },
            {
                "id": 5,
                "name": "Node cache",
                "run": "actions/cache@v3.3.2"
            },
            {
                "id": 6,
                "name": "Install yarn deps",
                "run": "cd website && yarn install"
            },
            {
                "id": 7,
                "name": "Build website",
                "run": "PATH=${{ github.workspace }}/bin/linux:$PATH .circleci/build_website.sh"
            },
            {
                "id": 8,
                "name": "Publish website to GitHub Pages",
                "run": "cd website\nyarn add gh-pages\nyarn gh-pages -d build -u \"flow-bot <flow-bot@users.noreply.github.com>\" --repo https://${FLOW_BOT_TOKEN}@github.com/facebook/flow.git --no-history"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 3,
                "name": "Upload Linux binary",
                "run": ".circleci/github_upload.sh dist/flow-linux64.zip \"flow-linux64-${{ github.ref_name }}.zip\""
            },
            {
                "id": 4,
                "name": "Upload Linux libflowparser",
                "run": ".circleci/github_upload.sh dist/libflowparser-linux64.zip \"libflowparser-linux64-${{ github.ref_name }}.zip\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 3,
                "name": "Upload Linux binary",
                "run": ".circleci/github_upload.sh dist/flow-linux64-arm64.zip \"flow-linux-arm64-${{ github.ref_name }}.zip\""
            },
            {
                "id": 4,
                "name": "Upload Linux libflowparser",
                "run": ".circleci/github_upload.sh dist/libflowparser-linux64-arm64.zip \"libflowparser-linux-arm64-${{ github.ref_name }}.zip\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 3,
                "name": "Upload Mac binary",
                "run": ".circleci/github_upload.sh dist/flow-osx.zip \"flow-osx-${{ github.ref_name }}.zip\""
            },
            {
                "id": 4,
                "name": "Upload Mac libflowparser",
                "run": ".circleci/github_upload.sh dist/libflowparser-osx.zip \"libflowparser-osx-${{ github.ref_name }}.zip\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 3,
                "name": "Upload Mac binary",
                "run": ".circleci/github_upload.sh dist/flow-osx-arm64.zip \"flow-osx-arm64-${{ github.ref_name }}.zip\""
            },
            {
                "id": 4,
                "name": "Upload Mac libflowparser",
                "run": ".circleci/github_upload.sh dist/libflowparser-osx-arm64.zip \"libflowparser-osx-arm64-${{ github.ref_name }}.zip\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 3,
                "name": "Upload Windows binary",
                "run": ".circleci/github_upload.sh dist/flow-win64.zip \"flow-win64-${{ github.ref_name }}.zip\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Deploy flow-bin",
                "run": ".circleci/deploy_flow_bin.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.6.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3.0.2"
            },
            {
                "id": 3,
                "name": "Assemble files",
                "run": "cp dist/flow.js packages/try-flow-website-js/flow.js\ncp -r lib packages/try-flow-website-js/flowlib\nmake dist/npm-try-flow-website-js.tgz\n"
            },
            {
                "id": 4,
                "name": "Deploy to NPM",
                "run": "echo \"//registry.npmjs.org/:_authToken=${NPM_TOKEN}\" > ~/.npmrc\nnpm publish ./dist/npm-try-flow-website-js.tgz\n"
            }
        ],
        "facebook/wangle": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Archive project",
                "run": "FILE_NAME=${GITHUB_REPOSITORY#*/}-${GITHUB_REF##*/}\ngit archive ${{ github.ref }} -o ${FILE_NAME}.zip\ngit archive ${{ github.ref }} -o ${FILE_NAME}.tar.gz\necho \"file_name=${FILE_NAME}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Compute digests",
                "run": "echo \"tgz_256=$(openssl dgst -sha256 ${{ steps.archive_project.outputs.file_name }}.tar.gz)\" >> $GITHUB_OUTPUT\necho \"tgz_512=$(openssl dgst -sha512 ${{ steps.archive_project.outputs.file_name }}.tar.gz)\" >> $GITHUB_OUTPUT\necho \"zip_256=$(openssl dgst -sha256 ${{ steps.archive_project.outputs.file_name }}.zip)\" >> $GITHUB_OUTPUT\necho \"zip_512=$(openssl dgst -sha512 ${{ steps.archive_project.outputs.file_name }}.zip)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Create Release",
                "run": "actions/create-release@v1"
            },
            {
                "id": 5,
                "name": "Upload zip",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 6,
                "name": "Upload tar.gz",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests ninja"
            },
            {
                "id": 3,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests cmake"
            },
            {
                "id": 4,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zlib"
            },
            {
                "id": 5,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zstd"
            },
            {
                "id": 6,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests boost"
            },
            {
                "id": 7,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests double-conversion"
            },
            {
                "id": 8,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fmt"
            },
            {
                "id": 9,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests gflags"
            },
            {
                "id": 10,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests glog"
            },
            {
                "id": 11,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests googletest"
            },
            {
                "id": 12,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libdwarf"
            },
            {
                "id": 13,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libevent"
            },
            {
                "id": 14,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests lz4"
            },
            {
                "id": 15,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests snappy"
            },
            {
                "id": 16,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests autoconf"
            },
            {
                "id": 17,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests automake"
            },
            {
                "id": 18,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libtool"
            },
            {
                "id": 19,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libsodium"
            },
            {
                "id": 20,
                "name": "Fetch libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libiberty"
            },
            {
                "id": 21,
                "name": "Fetch libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libunwind"
            },
            {
                "id": 22,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests xz"
            },
            {
                "id": 23,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests folly"
            },
            {
                "id": 24,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fizz"
            },
            {
                "id": 25,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests ninja"
            },
            {
                "id": 26,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests cmake"
            },
            {
                "id": 27,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zlib"
            },
            {
                "id": 28,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zstd"
            },
            {
                "id": 29,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests boost"
            },
            {
                "id": 30,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests double-conversion"
            },
            {
                "id": 31,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fmt"
            },
            {
                "id": 32,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests gflags"
            },
            {
                "id": 33,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests glog"
            },
            {
                "id": 34,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests googletest"
            },
            {
                "id": 35,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libdwarf"
            },
            {
                "id": 36,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libevent"
            },
            {
                "id": 37,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests lz4"
            },
            {
                "id": 38,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests snappy"
            },
            {
                "id": 39,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests autoconf"
            },
            {
                "id": 40,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests automake"
            },
            {
                "id": 41,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libtool"
            },
            {
                "id": 42,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libsodium"
            },
            {
                "id": 43,
                "name": "Build libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libiberty"
            },
            {
                "id": 44,
                "name": "Build libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libunwind"
            },
            {
                "id": 45,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests xz"
            },
            {
                "id": 46,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests folly"
            },
            {
                "id": 47,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fizz"
            },
            {
                "id": 48,
                "name": "Build wangle",
                "run": "python3 build/fbcode_builder/getdeps.py build --src-dir=. wangle  --project-install-prefix wangle:/usr/local"
            },
            {
                "id": 49,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py fixup-dyn-deps --strip --src-dir=. wangle _artifacts/linux  --project-install-prefix wangle:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 50,
                "name": "Step 50",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 51,
                "name": "Test wangle",
                "run": "python3 build/fbcode_builder/getdeps.py test --src-dir=. wangle  --project-install-prefix wangle:/usr/local"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests ninja"
            },
            {
                "id": 3,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests cmake"
            },
            {
                "id": 4,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zlib"
            },
            {
                "id": 5,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zstd"
            },
            {
                "id": 6,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests boost"
            },
            {
                "id": 7,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests double-conversion"
            },
            {
                "id": 8,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fmt"
            },
            {
                "id": 9,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests gflags"
            },
            {
                "id": 10,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests glog"
            },
            {
                "id": 11,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests googletest"
            },
            {
                "id": 12,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libdwarf"
            },
            {
                "id": 13,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests lz4"
            },
            {
                "id": 14,
                "name": "Fetch openssl",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests openssl"
            },
            {
                "id": 15,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests snappy"
            },
            {
                "id": 16,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libevent"
            },
            {
                "id": 17,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests autoconf"
            },
            {
                "id": 18,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests automake"
            },
            {
                "id": 19,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libtool"
            },
            {
                "id": 20,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libsodium"
            },
            {
                "id": 21,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests xz"
            },
            {
                "id": 22,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests folly"
            },
            {
                "id": 23,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fizz"
            },
            {
                "id": 24,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests ninja"
            },
            {
                "id": 25,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests cmake"
            },
            {
                "id": 26,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zlib"
            },
            {
                "id": 27,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zstd"
            },
            {
                "id": 28,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests boost"
            },
            {
                "id": 29,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests double-conversion"
            },
            {
                "id": 30,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fmt"
            },
            {
                "id": 31,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests gflags"
            },
            {
                "id": 32,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests glog"
            },
            {
                "id": 33,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests googletest"
            },
            {
                "id": 34,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libdwarf"
            },
            {
                "id": 35,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests lz4"
            },
            {
                "id": 36,
                "name": "Build openssl",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests openssl"
            },
            {
                "id": 37,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests snappy"
            },
            {
                "id": 38,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libevent"
            },
            {
                "id": 39,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests autoconf"
            },
            {
                "id": 40,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests automake"
            },
            {
                "id": 41,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libtool"
            },
            {
                "id": 42,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libsodium"
            },
            {
                "id": 43,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests xz"
            },
            {
                "id": 44,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests folly"
            },
            {
                "id": 45,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fizz"
            },
            {
                "id": 46,
                "name": "Build wangle",
                "run": "python3 build/fbcode_builder/getdeps.py build --src-dir=. wangle  --project-install-prefix wangle:/usr/local"
            },
            {
                "id": 47,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py fixup-dyn-deps --src-dir=. wangle _artifacts/mac  --project-install-prefix wangle:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 48,
                "name": "Step 48",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 49,
                "name": "Test wangle",
                "run": "python3 build/fbcode_builder/getdeps.py test --src-dir=. wangle  --project-install-prefix wangle:/usr/local"
            },
            {
                "id": 1,
                "name": "Export boost environment",
                "run": "echo BOOST_ROOT=%BOOST_ROOT_1_83_0% >> %GITHUB_ENV%"
            },
            {
                "id": 2,
                "name": "Fix Git config",
                "run": "git config --system core.longpaths true"
            },
            {
                "id": 3,
                "name": "Disable autocrlf",
                "run": "git config --system core.autocrlf false"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v4"
            },
            {
                "id": 5,
                "name": "Fetch ninja",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests ninja"
            },
            {
                "id": 6,
                "name": "Fetch cmake",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests cmake"
            },
            {
                "id": 7,
                "name": "Fetch libsodium",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libsodium"
            },
            {
                "id": 8,
                "name": "Fetch zlib",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests zlib"
            },
            {
                "id": 9,
                "name": "Fetch zstd",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests zstd"
            },
            {
                "id": 10,
                "name": "Fetch boost",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests boost"
            },
            {
                "id": 11,
                "name": "Fetch double-conversion",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests double-conversion"
            },
            {
                "id": 12,
                "name": "Fetch fmt",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests fmt"
            },
            {
                "id": 13,
                "name": "Fetch gflags",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests gflags"
            },
            {
                "id": 14,
                "name": "Fetch glog",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests glog"
            },
            {
                "id": 15,
                "name": "Fetch googletest",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests googletest"
            },
            {
                "id": 16,
                "name": "Fetch libdwarf",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libdwarf"
            },
            {
                "id": 17,
                "name": "Fetch lz4",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests lz4"
            },
            {
                "id": 18,
                "name": "Fetch snappy",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests snappy"
            },
            {
                "id": 19,
                "name": "Fetch perl",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests perl"
            },
            {
                "id": 20,
                "name": "Fetch openssl",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests openssl"
            },
            {
                "id": 21,
                "name": "Fetch libevent",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libevent"
            },
            {
                "id": 22,
                "name": "Fetch folly",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests folly"
            },
            {
                "id": 23,
                "name": "Fetch fizz",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests fizz"
            },
            {
                "id": 24,
                "name": "Build ninja",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests ninja"
            },
            {
                "id": 25,
                "name": "Build cmake",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests cmake"
            },
            {
                "id": 26,
                "name": "Build libsodium",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests libsodium"
            },
            {
                "id": 27,
                "name": "Build zlib",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests zlib"
            },
            {
                "id": 28,
                "name": "Build zstd",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests zstd"
            },
            {
                "id": 29,
                "name": "Build boost",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests boost"
            },
            {
                "id": 30,
                "name": "Build double-conversion",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests double-conversion"
            },
            {
                "id": 31,
                "name": "Build fmt",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests fmt"
            },
            {
                "id": 32,
                "name": "Build gflags",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests gflags"
            },
            {
                "id": 33,
                "name": "Build glog",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests glog"
            },
            {
                "id": 34,
                "name": "Build googletest",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests googletest"
            },
            {
                "id": 35,
                "name": "Build libdwarf",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests libdwarf"
            },
            {
                "id": 36,
                "name": "Build lz4",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests lz4"
            },
            {
                "id": 37,
                "name": "Build snappy",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests snappy"
            },
            {
                "id": 38,
                "name": "Build perl",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests perl"
            },
            {
                "id": 39,
                "name": "Build openssl",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests openssl"
            },
            {
                "id": 40,
                "name": "Build libevent",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests libevent"
            },
            {
                "id": 41,
                "name": "Build folly",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests folly"
            },
            {
                "id": 42,
                "name": "Build fizz",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests fizz"
            },
            {
                "id": 43,
                "name": "Build wangle",
                "run": "python build/fbcode_builder/getdeps.py build --src-dir=. wangle"
            },
            {
                "id": 44,
                "name": "Copy artifacts",
                "run": "python build/fbcode_builder/getdeps.py fixup-dyn-deps --src-dir=. wangle _artifacts/windows  --final-install-prefix /usr/local"
            },
            {
                "id": 45,
                "name": "Step 45",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 46,
                "name": "Test wangle",
                "run": "python build/fbcode_builder/getdeps.py test --src-dir=. wangle"
            }
        ],
        "facebook/react-native": [
            {
                "id": 1,
                "name": "Checkout the latest code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Automatic Rebase",
                "run": "cirrus-actions/rebase@1.8"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Check if on stable branch",
                "run": "BRANCH=\"$(git branch --show-current)\"\nPATTERN='^0\\.[0-9]+-stable$'\nif [[ $BRANCH =~ $PATTERN ]]; then\n  echo \"On a stable branch\"\n  echo \"ON_STABLE_BRANCH=true\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 3,
                "name": "Print output",
                "run": "echo \"ON_STABLE_BRANCH ${{steps.check_stable_branch.outputs.ON_STABLE_BRANCH}}\""
            },
            {
                "id": 4,
                "name": "Check if tag already exists",
                "run": "TAG=\"v${{ inputs.version }}\"\nTAG_EXISTS=$(git tag -l \"$TAG\")\nif [[ -n \"$TAG_EXISTS\" ]]; then\n  echo \"Version tag already exists!\"\n  echo \"TAG_EXISTS=true\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 5,
                "name": "Execute Prepare Release",
                "run": "./.github/actions/create-release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Run Yarn Install on Root",
                "run": "yarn install"
            },
            {
                "id": 3,
                "name": "Danger",
                "run": "yarn danger ci --use-github-checks --failOnErrors"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gradle/actions/wrapper-validation@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Apply Needs Attention Label",
                "run": "react-native-community/needs-attention@v2.0.0"
            },
            {
                "id": 3,
                "name": "Result",
                "run": "echo '${{ steps.needs-attention.outputs.result }}'"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "echo \"Setting release type to nightly\"\necho \"RELEASE_TYPE=nightly\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Setup hermes version",
                "run": "mkdir -p \"/tmp/hermes\" \"/tmp/hermes/download\" \"/tmp/hermes/hermes\"\n\nif [ -f \"$HERMES_VERSION_FILE\" ]; then\n  echo \"Hermes Version file found! Using this version for the build:\"\n  echo \"VERSION=$(cat $HERMES_VERSION_FILE)\" >> \"$GITHUB_OUTPUT\"\nelse\n  echo \"Hermes Version file not found!!!\"\n  echo \"Using the last commit from main for the build:\"\n  HERMES_TAG_SHA=$(git ls-remote https://github.com/facebook/hermes main | cut -f 1 | tr -d '[:space:]')\n  echo \"VERSION=$HERMES_TAG_SHA\" >> \"$GITHUB_OUTPUT\"\nfi\necho \"Hermes commit is $HERMES_TAG_SHA\"\n"
            },
            {
                "id": 4,
                "name": "Get react-native version",
                "run": "VERSION=$(cat packages/react-native/package.json | jq -r '.version')\n# Save the react native version we are building in an output variable so we can use that file as part of the cache key.\necho \"VERSION=$VERSION\" >> \"$GITHUB_OUTPUT\"\necho \"React Native Version is $VERSION\"\n"
            },
            {
                "id": 5,
                "name": "Cache hermes workspace",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 6,
                "name": "Yarn- Install Dependencies",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 7,
                "name": "Download Hermes tarball",
                "run": "node packages/react-native/scripts/hermes/prepare-hermes-for-build ${{ github.event.pull_request.html_url }}\ncp packages/react-native/sdks/download/* $HERMES_WS_DIR/download/.\ncp -r packages/react-native/sdks/hermes/* $HERMES_WS_DIR/hermes/.\n\necho ${{ steps.hermes-version.outputs.version }}\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Cache hermes workspace",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 3,
                "name": "Setup Hermes workspace",
                "run": "./.github/actions/setup_hermes_workspace"
            },
            {
                "id": 4,
                "name": "Hermes apple cache",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 5,
                "name": "Build HermesC Apple",
                "run": "cd ./packages/react-native/sdks/hermes || exit 1\n. ./utils/build-apple-framework.sh\nbuild_host_hermesc_if_needed\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup xcode",
                "run": "./.github/actions/setup-xcode"
            },
            {
                "id": 3,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 4,
                "name": "Setup Hermes workspace",
                "run": "./.github/actions/setup_hermes_workspace"
            },
            {
                "id": 5,
                "name": "Check if the required artifacts already exist",
                "run": "FLAVOR=\"${{ matrix.flavor }}\"\necho \"Flavor is $FLAVOR\"\nOSX_BIN=\"/tmp/hermes/osx-bin/$FLAVOR\"\nDSYM=\"/tmp/hermes/dSYM/$FLAVOR\"\nHERMES=\"/tmp/hermes/hermes-runtime-darwin/hermes-ios-$FLAVOR.tar.gz\"\n\nif [[ -d \"$OSX_BIN\" ]] && \\\n   [[ -d \"$DSYM\" ]] && \\\n   [[ -f \"$HERMES\" ]]; then\n\n  echo \"Artifacts are there!\"\n  echo \"ARTIFACTS_EXIST=true\" >> $GITHUB_ENV\n  echo \"ARTIFACTS_EXIST=true\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 6,
                "name": "Build the Hermes ${{ matrix.slice }} frameworks",
                "run": "cd ./packages/react-native/sdks/hermes || exit 1\nSLICE=${{ matrix.slice }}\nFLAVOR=${{ matrix.flavor }}\nFINAL_PATH=build_\"$SLICE\"_\"$FLAVOR\"\necho \"Final path for this slice is: $FINAL_PATH\"\n\nif [[ -d \"$FINAL_PATH\" ]]; then\n  echo \"[HERMES] Skipping! Found the requested slice at $FINAL_PATH\".\n  exit 0\nfi\n\nif [[ \"$ARTIFACTS_EXIST\" ]]; then\n  echo \"[HERMES] Skipping! Artifacts exists already.\"\n  exit 0\nfi\n\nif [[ \"$SLICE\" == \"macosx\" ]]; then\n  echo \"[HERMES] Building Hermes for MacOS\"\n  BUILD_TYPE=\"${{ matrix.flavor }}\" ./utils/build-mac-framework.sh\nelse\n  echo \"[HERMES] Building Hermes for iOS: $SLICE\"\n  BUILD_TYPE=\"${{ matrix.flavor }}\" ./utils/build-ios-framework.sh \"$SLICE\"\nfi\n\necho \"Moving from build_$SLICE to $FINAL_PATH\"\nmv build_\"$SLICE\" \"$FINAL_PATH\"\n\n# check whether everything is there\nif [[ -d \"$FINAL_PATH/API/hermes/hermes.framework\" ]]; then\n  echo \"Successfully built hermes.framework for $SLICE in $FLAVOR\"\nelse\n  echo \"Failed to built hermes.framework for $SLICE in $FLAVOR\"\n  exit 1\nfi\n\nif [[ -d \"$FINAL_PATH/API/hermes/hermes.framework.dSYM\" ]]; then\n  echo \"Successfully built hermes.framework.dSYM for $SLICE in $FLAVOR\"\nelse\n  echo \"Failed to built hermes.framework.dSYM for $SLICE in $FLAVOR\"\n  echo \"Please try again\"\n  exit 1\nfi\n"
            },
            {
                "id": 7,
                "name": "Save slice cache",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup xcode",
                "run": "./.github/actions/setup-xcode"
            },
            {
                "id": 3,
                "name": "Setup node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 4,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 5,
                "name": "Setup Hermes workspace",
                "run": "./.github/actions/setup_hermes_workspace"
            },
            {
                "id": 6,
                "name": "Check if the required artifacts already exist",
                "run": "FLAVOR=\"${{ matrix.flavor }}\"\necho \"Flavor is $FLAVOR\"\nOSX_BIN=\"/tmp/hermes/osx-bin/$FLAVOR\"\nDSYM=\"/tmp/hermes/dSYM/$FLAVOR\"\nHERMES=\"/tmp/hermes/hermes-runtime-darwin/hermes-ios-$FLAVOR.tar.gz\"\n\nif [[ -d \"$OSX_BIN\" ]] && \\\n   [[ -d \"$DSYM\" ]] && \\\n   [[ -f \"$HERMES\" ]]; then\n\n  echo \"Artifacts are there!\"\n  echo \"ARTIFACTS_EXIST=true\" >> $GITHUB_ENV\n  echo \"ARTIFACTS_EXIST=true\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 7,
                "name": "Yarn- Install Dependencies",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 8,
                "name": "Slice cache macosx",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 9,
                "name": "Slice cache iphoneos",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 10,
                "name": "Slice cache iphonesimulator",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 11,
                "name": "Slice cache catalyst",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 12,
                "name": "Slice cache xros",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 13,
                "name": "Slice cache xrsimulator",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 14,
                "name": "Move back build folders",
                "run": "ls -l ./packages/react-native/sdks/hermes\ncd ./packages/react-native/sdks/hermes || exit 1\nmv build_macosx_${{ matrix.flavor }} build_macosx\nmv build_iphoneos_${{ matrix.flavor }} build_iphoneos\nmv build_iphonesimulator_${{ matrix.flavor }} build_iphonesimulator\nmv build_catalyst_${{ matrix.flavor }} build_catalyst\nmv build_xros_${{ matrix.flavor }} build_xros\nmv build_xrsimulator_${{ matrix.flavor }} build_xrsimulator\n"
            },
            {
                "id": 15,
                "name": "Prepare destroot folder",
                "run": "cd ./packages/react-native/sdks/hermes || exit 1\n. ./utils/build-apple-framework.sh\nprepare_dest_root_for_ci\n"
            },
            {
                "id": 16,
                "name": "Create fat framework for iOS",
                "run": "cd ./packages/react-native/sdks/hermes || exit 1\necho \"[HERMES] Creating the universal framework\"\n./utils/build-ios-framework.sh build_framework\n"
            },
            {
                "id": 17,
                "name": "Package the Hermes Apple frameworks",
                "run": "BUILD_TYPE=\"${{ matrix.flavor }}\"\necho \"Packaging Hermes Apple frameworks for $BUILD_TYPE build type\"\n\nTARBALL_OUTPUT_DIR=$(mktemp -d /tmp/hermes-tarball-output-XXXXXXXX)\n\nTARBALL_FILENAME=$(node ./packages/react-native/scripts/hermes/get-tarball-name.js --buildType \"$BUILD_TYPE\")\n\necho \"Packaging Hermes Apple frameworks for $BUILD_TYPE build type\"\n\nTARBALL_OUTPUT_PATH=$(node ./packages/react-native/scripts/hermes/create-tarball.js \\\n  --inputDir ./packages/react-native/sdks/hermes \\\n  --buildType \"$BUILD_TYPE\" \\\n  --outputDir $TARBALL_OUTPUT_DIR)\n\necho \"Hermes tarball saved to $TARBALL_OUTPUT_PATH\"\n\nmkdir -p $HERMES_TARBALL_ARTIFACTS_DIR\ncp $TARBALL_OUTPUT_PATH $HERMES_TARBALL_ARTIFACTS_DIR/.\n\nmkdir -p /tmp/hermes/osx-bin/${{ matrix.flavor }}\ncp ./packages/react-native/sdks/hermes/build_macosx/bin/* /tmp/hermes/osx-bin/${{ matrix.flavor }}\nls -lR /tmp/hermes/osx-bin/\n"
            },
            {
                "id": 18,
                "name": "Upload darwin artifacts",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 19,
                "name": "Upload osx-bin",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 20,
                "name": "Create dSYM archive",
                "run": "FLAVOR=${{ matrix.flavor }}\nWORKING_DIR=\"/tmp/hermes_tmp/dSYM/$FLAVOR\"\n\nmkdir -p \"$WORKING_DIR/macosx\"\nmkdir -p \"$WORKING_DIR/catalyst\"\nmkdir -p \"$WORKING_DIR/iphoneos\"\nmkdir -p \"$WORKING_DIR/iphonesimulator\"\nmkdir -p \"$WORKING_DIR/xros\"\nmkdir -p \"$WORKING_DIR/xrsimulator\"\n\ncd ./packages/react-native/sdks/hermes || exit 1\n\nDSYM_FILE_PATH=API/hermes/hermes.framework.dSYM\ncp -r build_macosx/$DSYM_FILE_PATH \"$WORKING_DIR/macosx/\"\ncp -r build_catalyst/$DSYM_FILE_PATH \"$WORKING_DIR/catalyst/\"\ncp -r build_iphoneos/$DSYM_FILE_PATH \"$WORKING_DIR/iphoneos/\"\ncp -r build_iphonesimulator/$DSYM_FILE_PATH \"$WORKING_DIR/iphonesimulator/\"\ncp -r build_xros/$DSYM_FILE_PATH \"$WORKING_DIR/xros/\"\ncp -r build_xrsimulator/$DSYM_FILE_PATH \"$WORKING_DIR/xrsimulator/\"\n\nDEST_DIR=\"/tmp/hermes/dSYM/$FLAVOR\"\ntar -C \"$WORKING_DIR\" -czvf \"hermes.framework.dSYM\" .\n\nmkdir -p \"$DEST_DIR\"\nmv \"hermes.framework.dSYM\" \"$DEST_DIR\"\n"
            },
            {
                "id": 21,
                "name": "Upload hermes dSYM artifacts",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "sudo apt update\nsudo apt install -y git openssh-client cmake build-essential \\\n    libreadline-dev libicu-dev jq zip python3\n"
            },
            {
                "id": 3,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 4,
                "name": "Linux cache",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 5,
                "name": "Set up workspace",
                "run": "mkdir -p /tmp/hermes/linux64-bin\n"
            },
            {
                "id": 6,
                "name": "Build HermesC for Linux",
                "run": "if [ -f /tmp/hermes/linux64-bin/hermesc ]; then\n  echo 'Skipping; Clean \"/tmp/hermes/linux64-bin\" to rebuild.'\nelse\n  cd /tmp/hermes\n  cmake -S hermes -B build -DHERMES_STATIC_LINK=ON -DCMAKE_BUILD_TYPE=Release -DHERMES_ENABLE_TEST_SUITE=OFF \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=True -DCMAKE_CXX_FLAGS=-s -DCMAKE_C_FLAGS=-s \\\n    -DCMAKE_EXE_LINKER_FLAGS=\"-Wl,--whole-archive -lpthread -Wl,--no-whole-archive\"\n  cmake --build build --target hermesc -j 4\n  cp /tmp/hermes/build/bin/hermesc /tmp/hermes/linux64-bin/.\nfi\n"
            },
            {
                "id": 7,
                "name": "Upload linux artifacts",
                "run": "actions/upload-artifact@v4.3.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 3,
                "name": "Windows cache",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 4,
                "name": "setup-msbuild",
                "run": "microsoft/setup-msbuild@v1.3.2"
            },
            {
                "id": 5,
                "name": "Set up workspace",
                "run": "#New-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\nNew-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\\icu\nNew-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\\deps\nNew-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\\win64-bin\n#New-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\\hermes\n#New-Item -ItemType SymbolicLink -ErrorAction SilentlyContinue -Target tmp\\hermes\\hermes -Path $Env:HERMES_WS_DIR -Name hermes\n"
            },
            {
                "id": 6,
                "name": "Build HermesC for Windows",
                "run": "if (-not(Test-Path -Path $Env:HERMES_WS_DIR\\win64-bin\\hermesc.exe)) {\n  choco install --no-progress cmake --version 3.14.7\n  if (-not $?) { throw \"Failed to install CMake\" }\n\n  cd $Env:HERMES_WS_DIR\\icu\n  # If Invoke-WebRequest shows a progress bar, it will fail with\n  #   Win32 internal error \"Access is denied\" 0x5 occurred [...]\n  $progressPreference = 'silentlyContinue'\n  Invoke-WebRequest -Uri \"$Env:ICU_URL\" -OutFile \"icu.zip\"\n  Expand-Archive -Path \"icu.zip\" -DestinationPath \".\"\n\n  cd $Env:HERMES_WS_DIR\n  Copy-Item -Path \"icu\\bin64\\icu*.dll\" -Destination \"deps\"\n  # Include MSVC++ 2015 redistributables\n  Copy-Item -Path \"c:\\windows\\system32\\msvcp140.dll\" -Destination \"deps\"\n  Copy-Item -Path \"c:\\windows\\system32\\vcruntime140.dll\" -Destination \"deps\"\n  Copy-Item -Path \"c:\\windows\\system32\\vcruntime140_1.dll\" -Destination \"deps\"\n\n  $Env:PATH += \";$Env:CMAKE_DIR;$Env:MSBUILD_DIR\"\n  $Env:ICU_ROOT = \"$Env:HERMES_WS_DIR\\icu\"\n\n  cmake -S hermes -B build_release -G 'Visual Studio 16 2019' -Ax64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=True -DHERMES_ENABLE_WIN10_ICU_FALLBACK=OFF\n  if (-not $?) { throw \"Failed to configure Hermes\" }\n  echo \"Running windows build...\"\n  cd build_release\n  cmake --build . --target hermesc --config Release\n  if (-not $?) { throw \"Failed to build Hermes\" }\n\n  echo \"Copying hermesc.exe to win64-bin\"\n  cd $Env:HERMES_WS_DIR\n  Copy-Item -Path \"build_release\\bin\\Release\\hermesc.exe\" -Destination \"win64-bin\"\n  # Include Windows runtime dependencies\n  Copy-Item -Path \"deps\\*\" -Destination \"win64-bin\"\n}\nelse {\n    Write-Host \"Skipping; Clean c:\\tmp\\hermes\\win64-bin to rebuild.\"\n}\n"
            },
            {
                "id": 7,
                "name": "Upload windows artifacts",
                "run": "actions/upload-artifact@v4.3.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 4,
                "name": "Set React Native Version",
                "run": "node ./scripts/releases/set-rn-version.js --build-type ${{ needs.set_release_type.outputs.RELEASE_TYPE }}"
            },
            {
                "id": 5,
                "name": "Setup gradle",
                "run": "./.github/actions/setup-gradle"
            },
            {
                "id": 6,
                "name": "Build and publish all the Android Artifacts to /tmp/maven-local",
                "run": "# By default we only build ARM64 to save time/resources. For release/nightlies/prealpha, we override this value to build all archs.\nif [[ \"${{ needs.set_release_type.outputs.RELEASE_TYPE }}\" == \"dry-run\" ]]; then\n  export ORG_GRADLE_PROJECT_reactNativeArchitectures=\"arm64-v8a\"\nelse\n  export ORG_GRADLE_PROJECT_reactNativeArchitectures=\"armeabi-v7a,arm64-v8a,x86,x86_64\"\nfi\n./gradlew publishAllToMavenTempLocal build -PenableWarningsAsErrors=true\n"
            },
            {
                "id": 7,
                "name": "Upload test results",
                "run": "actions/upload-artifact@v4.3.0"
            },
            {
                "id": 8,
                "name": "Upload RNTester APK",
                "run": "actions/upload-artifact@v4.3.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Create /tmp/hermes/osx-bin directory",
                "run": "mkdir -p /tmp/hermes/osx-bin"
            },
            {
                "id": 3,
                "name": "Download osx-bin release artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 4,
                "name": "Download osx-bin debug artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 5,
                "name": "Download darwin-bin release artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 6,
                "name": "Download darwin-bin debug artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 7,
                "name": "Download hermes dSYM debug artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 8,
                "name": "Download hermes dSYM release vartifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 9,
                "name": "Download windows-bin artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 10,
                "name": "Download linux-bin artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 11,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 12,
                "name": "Show /tmp/hermes directory",
                "run": "ls -lR /tmp/hermes"
            },
            {
                "id": 13,
                "name": "Copy Hermes binaries",
                "run": "mkdir -p ./packages/react-native/sdks/hermesc ./packages/react-native/sdks/hermesc/osx-bin ./packages/react-native/sdks/hermesc/win64-bin ./packages/react-native/sdks/hermesc/linux64-bin\n\n# When build_hermes_macos runs as a matrix, it outputs\nif [[ -d $HERMES_WS_DIR/osx-bin/Release ]]; then\n  cp -r $HERMES_WS_DIR/osx-bin/Release/* ./packages/react-native/sdks/hermesc/osx-bin/.\nelif [[ -d $HERMES_WS_DIR/osx-bin/Debug ]]; then\n  cp -r $HERMES_WS_DIR/osx-bin/Debug/* ./packages/react-native/sdks/hermesc/osx-bin/.\nelse\n  ls $HERMES_WS_DIR/osx-bin || echo \"hermesc macOS artifacts directory missing.\"\n  echo \"Could not locate macOS hermesc binary.\"; exit 1;\nfi\n\n# Sometimes, GHA creates artifacts with lowercase Debug/Release. Make sure that if it happen, we uppercase them.\nif [[ -f \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-debug.tar.gz\" ]]; then\n  mv \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-debug.tar.gz\" \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-Debug.tar.gz\"\nfi\n\nif [[ -f \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-release.tar.gz\" ]]; then\n  mv \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-release.tar.gz\" \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-Release.tar.gz\"\nfi\n\ncp -r $HERMES_WS_DIR/win64-bin/* ./packages/react-native/sdks/hermesc/win64-bin/.\ncp -r $HERMES_WS_DIR/linux64-bin/* ./packages/react-native/sdks/hermesc/linux64-bin/.\n\n# Make sure the hermesc files are actually executable.\nchmod -R +x packages/react-native/sdks/hermesc/*\n\nmkdir -p ./packages/react-native/ReactAndroid/external-artifacts/artifacts/\ncp $HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-Debug.tar.gz ./packages/react-native/ReactAndroid/external-artifacts/artifacts/hermes-ios-debug.tar.gz\ncp $HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-Release.tar.gz ./packages/react-native/ReactAndroid/external-artifacts/artifacts/hermes-ios-release.tar.gz\ncp $HERMES_WS_DIR/dSYM/Debug/hermes.framework.dSYM  ./packages/react-native/ReactAndroid/external-artifacts/artifacts/hermes-framework-dSYM-debug.tar.gz\ncp $HERMES_WS_DIR/dSYM/Release/hermes.framework.dSYM  ./packages/react-native/ReactAndroid/external-artifacts/artifacts/hermes-framework-dSYM-release.tar.gz\n"
            },
            {
                "id": 14,
                "name": "Setup node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 15,
                "name": "Install dependencies",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 16,
                "name": "Build packages",
                "run": "yarn build"
            },
            {
                "id": 17,
                "name": "Set npm credentials",
                "run": "echo \"//registry.npmjs.org/:_authToken=${{ secrets.GHA_NPM_TOKEN }}\" > ~/.npmrc"
            },
            {
                "id": 18,
                "name": "Publish NPM",
                "run": "echo \"GRADLE_OPTS = $GRADLE_OPTS\"\nexport ORG_GRADLE_PROJECT_reactNativeArchitectures=\"armeabi-v7a,arm64-v8a,x86,x86_64\"\nnode ./scripts/releases-ci/publish-npm.js -t nightly\n"
            },
            {
                "id": 19,
                "name": "Zip Maven Artifacts from /tmp/maven-local",
                "run": "zip -r maven-local.zip maven-local"
            },
            {
                "id": 20,
                "name": "Upload Maven Artifacts",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 21,
                "name": "Upload npm logs",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 22,
                "name": "Build release package as a job artifact",
                "run": "mkdir -p build\n\nFILENAME=$(cd packages/react-native; npm pack | tail -1)\nmv packages/react-native/$FILENAME build/\n\necho $FILENAME > build/react-native-package-version\n"
            },
            {
                "id": 23,
                "name": "Upload release package",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 24,
                "name": "Update rn-diff-purge to generate upgrade-support diff",
                "run": "curl -X POST https://api.github.com/repos/react-native-community/rn-diff-purge/dispatches \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  -H \"Authorization: Bearer $REACT_NATIVE_BOT_GITHUB_TOKEN\" \\\n  -d \"{\\\"event_type\\\": \\\"publish\\\", \\\"client_payload\\\": { \\\"version\\\": \\\"${{ github.ref_name }}\\\" }}\"\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Verify RN version",
                "run": "actions/github-script@v6"
            },
            {
                "id": 3,
                "name": "Add descriptive label",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Run Yarn Install",
                "run": "yarn install"
            },
            {
                "id": 4,
                "name": "Build packages",
                "run": "yarn build"
            },
            {
                "id": 5,
                "name": "Set NPM auth token",
                "run": "echo \"//registry.npmjs.org/:_authToken=$GHA_NPM_TOKEN\" > ~/.npmrc"
            },
            {
                "id": 6,
                "name": "Find and publish all bumped packages",
                "run": "node ./scripts/releases-ci/publish-updated-packages.js"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "echo \"Setting release type to release\"\necho \"RELEASE_TYPE=release\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Setup hermes version",
                "run": "mkdir -p \"/tmp/hermes\" \"/tmp/hermes/download\" \"/tmp/hermes/hermes\"\n\nif [ -f \"$HERMES_VERSION_FILE\" ]; then\n  echo \"Hermes Version file found! Using this version for the build:\"\n  echo \"VERSION=$(cat $HERMES_VERSION_FILE)\" >> \"$GITHUB_OUTPUT\"\nelse\n  echo \"Hermes Version file not found!!!\"\n  echo \"Using the last commit from main for the build:\"\n  HERMES_TAG_SHA=$(git ls-remote https://github.com/facebook/hermes main | cut -f 1 | tr -d '[:space:]')\n  echo \"VERSION=$HERMES_TAG_SHA\" >> \"$GITHUB_OUTPUT\"\nfi\necho \"Hermes commit is $HERMES_TAG_SHA\"\n"
            },
            {
                "id": 4,
                "name": "Get react-native version",
                "run": "VERSION=$(cat packages/react-native/package.json | jq -r '.version')\n# Save the react native version we are building in an output variable so we can use that file as part of the cache key.\necho \"VERSION=$VERSION\" >> \"$GITHUB_OUTPUT\"\necho \"React Native Version is $VERSION\"\n"
            },
            {
                "id": 5,
                "name": "Cache hermes workspace",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 6,
                "name": "Yarn- Install Dependencies",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 7,
                "name": "Download Hermes tarball",
                "run": "node packages/react-native/scripts/hermes/prepare-hermes-for-build ${{ github.event.pull_request.html_url }}\ncp packages/react-native/sdks/download/* $HERMES_WS_DIR/download/.\ncp -r packages/react-native/sdks/hermes/* $HERMES_WS_DIR/hermes/.\n\necho ${{ steps.hermes-version.outputs.version }}\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Cache hermes workspace",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 3,
                "name": "Setup Hermes workspace",
                "run": "./.github/actions/setup_hermes_workspace"
            },
            {
                "id": 4,
                "name": "Hermes apple cache",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 5,
                "name": "Build HermesC Apple",
                "run": "cd ./packages/react-native/sdks/hermes || exit 1\n. ./utils/build-apple-framework.sh\nbuild_host_hermesc_if_needed\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup xcode",
                "run": "./.github/actions/setup-xcode"
            },
            {
                "id": 3,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 4,
                "name": "Setup Hermes workspace",
                "run": "./.github/actions/setup_hermes_workspace"
            },
            {
                "id": 5,
                "name": "Check if the required artifacts already exist",
                "run": "FLAVOR=\"${{ matrix.flavor }}\"\necho \"Flavor is $FLAVOR\"\nOSX_BIN=\"/tmp/hermes/osx-bin/$FLAVOR\"\nDSYM=\"/tmp/hermes/dSYM/$FLAVOR\"\nHERMES=\"/tmp/hermes/hermes-runtime-darwin/hermes-ios-$FLAVOR.tar.gz\"\n\nif [[ -d \"$OSX_BIN\" ]] && \\\n   [[ -d \"$DSYM\" ]] && \\\n   [[ -f \"$HERMES\" ]]; then\n\n  echo \"Artifacts are there!\"\n  echo \"ARTIFACTS_EXIST=true\" >> $GITHUB_ENV\n  echo \"ARTIFACTS_EXIST=true\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 6,
                "name": "Build the Hermes ${{ matrix.slice }} frameworks",
                "run": "cd ./packages/react-native/sdks/hermes || exit 1\nSLICE=${{ matrix.slice }}\nFLAVOR=${{ matrix.flavor }}\nFINAL_PATH=build_\"$SLICE\"_\"$FLAVOR\"\necho \"Final path for this slice is: $FINAL_PATH\"\n\nif [[ -d \"$FINAL_PATH\" ]]; then\n  echo \"[HERMES] Skipping! Found the requested slice at $FINAL_PATH\".\n  exit 0\nfi\n\nif [[ \"$ARTIFACTS_EXIST\" ]]; then\n  echo \"[HERMES] Skipping! Artifacts exists already.\"\n  exit 0\nfi\n\nif [[ \"$SLICE\" == \"macosx\" ]]; then\n  echo \"[HERMES] Building Hermes for MacOS\"\n  BUILD_TYPE=\"${{ matrix.flavor }}\" ./utils/build-mac-framework.sh\nelse\n  echo \"[HERMES] Building Hermes for iOS: $SLICE\"\n  BUILD_TYPE=\"${{ matrix.flavor }}\" ./utils/build-ios-framework.sh \"$SLICE\"\nfi\n\necho \"Moving from build_$SLICE to $FINAL_PATH\"\nmv build_\"$SLICE\" \"$FINAL_PATH\"\n\n# check whether everything is there\nif [[ -d \"$FINAL_PATH/API/hermes/hermes.framework\" ]]; then\n  echo \"Successfully built hermes.framework for $SLICE in $FLAVOR\"\nelse\n  echo \"Failed to built hermes.framework for $SLICE in $FLAVOR\"\n  exit 1\nfi\n\nif [[ -d \"$FINAL_PATH/API/hermes/hermes.framework.dSYM\" ]]; then\n  echo \"Successfully built hermes.framework.dSYM for $SLICE in $FLAVOR\"\nelse\n  echo \"Failed to built hermes.framework.dSYM for $SLICE in $FLAVOR\"\n  echo \"Please try again\"\n  exit 1\nfi\n"
            },
            {
                "id": 7,
                "name": "Save slice cache",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup xcode",
                "run": "./.github/actions/setup-xcode"
            },
            {
                "id": 3,
                "name": "Setup node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 4,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 5,
                "name": "Setup Hermes workspace",
                "run": "./.github/actions/setup_hermes_workspace"
            },
            {
                "id": 6,
                "name": "Check if the required artifacts already exist",
                "run": "FLAVOR=\"${{ matrix.flavor }}\"\necho \"Flavor is $FLAVOR\"\nOSX_BIN=\"/tmp/hermes/osx-bin/$FLAVOR\"\nDSYM=\"/tmp/hermes/dSYM/$FLAVOR\"\nHERMES=\"/tmp/hermes/hermes-runtime-darwin/hermes-ios-$FLAVOR.tar.gz\"\n\nif [[ -d \"$OSX_BIN\" ]] && \\\n   [[ -d \"$DSYM\" ]] && \\\n   [[ -f \"$HERMES\" ]]; then\n\n  echo \"Artifacts are there!\"\n  echo \"ARTIFACTS_EXIST=true\" >> $GITHUB_ENV\n  echo \"ARTIFACTS_EXIST=true\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 7,
                "name": "Yarn- Install Dependencies",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 8,
                "name": "Slice cache macosx",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 9,
                "name": "Slice cache iphoneos",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 10,
                "name": "Slice cache iphonesimulator",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 11,
                "name": "Slice cache catalyst",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 12,
                "name": "Slice cache xros",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 13,
                "name": "Slice cache xrsimulator",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 14,
                "name": "Move back build folders",
                "run": "ls -l ./packages/react-native/sdks/hermes\ncd ./packages/react-native/sdks/hermes || exit 1\nmv build_macosx_${{ matrix.flavor }} build_macosx\nmv build_iphoneos_${{ matrix.flavor }} build_iphoneos\nmv build_iphonesimulator_${{ matrix.flavor }} build_iphonesimulator\nmv build_catalyst_${{ matrix.flavor }} build_catalyst\nmv build_xros_${{ matrix.flavor }} build_xros\nmv build_xrsimulator_${{ matrix.flavor }} build_xrsimulator\n"
            },
            {
                "id": 15,
                "name": "Prepare destroot folder",
                "run": "cd ./packages/react-native/sdks/hermes || exit 1\n. ./utils/build-apple-framework.sh\nprepare_dest_root_for_ci\n"
            },
            {
                "id": 16,
                "name": "Create fat framework for iOS",
                "run": "cd ./packages/react-native/sdks/hermes || exit 1\necho \"[HERMES] Creating the universal framework\"\n./utils/build-ios-framework.sh build_framework\n"
            },
            {
                "id": 17,
                "name": "Package the Hermes Apple frameworks",
                "run": "BUILD_TYPE=\"${{ matrix.flavor }}\"\necho \"Packaging Hermes Apple frameworks for $BUILD_TYPE build type\"\n\nTARBALL_OUTPUT_DIR=$(mktemp -d /tmp/hermes-tarball-output-XXXXXXXX)\n\nTARBALL_FILENAME=$(node ./packages/react-native/scripts/hermes/get-tarball-name.js --buildType \"$BUILD_TYPE\")\n\necho \"Packaging Hermes Apple frameworks for $BUILD_TYPE build type\"\n\nTARBALL_OUTPUT_PATH=$(node ./packages/react-native/scripts/hermes/create-tarball.js \\\n  --inputDir ./packages/react-native/sdks/hermes \\\n  --buildType \"$BUILD_TYPE\" \\\n  --outputDir $TARBALL_OUTPUT_DIR)\n\necho \"Hermes tarball saved to $TARBALL_OUTPUT_PATH\"\n\nmkdir -p $HERMES_TARBALL_ARTIFACTS_DIR\ncp $TARBALL_OUTPUT_PATH $HERMES_TARBALL_ARTIFACTS_DIR/.\n\nmkdir -p /tmp/hermes/osx-bin/${{ matrix.flavor }}\ncp ./packages/react-native/sdks/hermes/build_macosx/bin/* /tmp/hermes/osx-bin/${{ matrix.flavor }}\nls -lR /tmp/hermes/osx-bin/\n"
            },
            {
                "id": 18,
                "name": "Upload darwin artifacts",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 19,
                "name": "Upload osx-bin",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 20,
                "name": "Create dSYM archive",
                "run": "FLAVOR=${{ matrix.flavor }}\nWORKING_DIR=\"/tmp/hermes_tmp/dSYM/$FLAVOR\"\n\nmkdir -p \"$WORKING_DIR/macosx\"\nmkdir -p \"$WORKING_DIR/catalyst\"\nmkdir -p \"$WORKING_DIR/iphoneos\"\nmkdir -p \"$WORKING_DIR/iphonesimulator\"\nmkdir -p \"$WORKING_DIR/xros\"\nmkdir -p \"$WORKING_DIR/xrsimulator\"\n\ncd ./packages/react-native/sdks/hermes || exit 1\n\nDSYM_FILE_PATH=API/hermes/hermes.framework.dSYM\ncp -r build_macosx/$DSYM_FILE_PATH \"$WORKING_DIR/macosx/\"\ncp -r build_catalyst/$DSYM_FILE_PATH \"$WORKING_DIR/catalyst/\"\ncp -r build_iphoneos/$DSYM_FILE_PATH \"$WORKING_DIR/iphoneos/\"\ncp -r build_iphonesimulator/$DSYM_FILE_PATH \"$WORKING_DIR/iphonesimulator/\"\ncp -r build_xros/$DSYM_FILE_PATH \"$WORKING_DIR/xros/\"\ncp -r build_xrsimulator/$DSYM_FILE_PATH \"$WORKING_DIR/xrsimulator/\"\n\nDEST_DIR=\"/tmp/hermes/dSYM/$FLAVOR\"\ntar -C \"$WORKING_DIR\" -czvf \"hermes.framework.dSYM\" .\n\nmkdir -p \"$DEST_DIR\"\nmv \"hermes.framework.dSYM\" \"$DEST_DIR\"\n"
            },
            {
                "id": 21,
                "name": "Upload hermes dSYM artifacts",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "sudo apt update\nsudo apt install -y git openssh-client cmake build-essential \\\n    libreadline-dev libicu-dev jq zip python3\n"
            },
            {
                "id": 3,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 4,
                "name": "Linux cache",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 5,
                "name": "Set up workspace",
                "run": "mkdir -p /tmp/hermes/linux64-bin\n"
            },
            {
                "id": 6,
                "name": "Build HermesC for Linux",
                "run": "if [ -f /tmp/hermes/linux64-bin/hermesc ]; then\n  echo 'Skipping; Clean \"/tmp/hermes/linux64-bin\" to rebuild.'\nelse\n  cd /tmp/hermes\n  cmake -S hermes -B build -DHERMES_STATIC_LINK=ON -DCMAKE_BUILD_TYPE=Release -DHERMES_ENABLE_TEST_SUITE=OFF \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=True -DCMAKE_CXX_FLAGS=-s -DCMAKE_C_FLAGS=-s \\\n    -DCMAKE_EXE_LINKER_FLAGS=\"-Wl,--whole-archive -lpthread -Wl,--no-whole-archive\"\n  cmake --build build --target hermesc -j 4\n  cp /tmp/hermes/build/bin/hermesc /tmp/hermes/linux64-bin/.\nfi\n"
            },
            {
                "id": 7,
                "name": "Upload linux artifacts",
                "run": "actions/upload-artifact@v4.3.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 3,
                "name": "Windows cache",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 4,
                "name": "setup-msbuild",
                "run": "microsoft/setup-msbuild@v1.3.2"
            },
            {
                "id": 5,
                "name": "Set up workspace",
                "run": "#New-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\nNew-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\\icu\nNew-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\\deps\nNew-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\\win64-bin\n#New-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\\hermes\n#New-Item -ItemType SymbolicLink -ErrorAction SilentlyContinue -Target tmp\\hermes\\hermes -Path $Env:HERMES_WS_DIR -Name hermes\n"
            },
            {
                "id": 6,
                "name": "Build HermesC for Windows",
                "run": "if (-not(Test-Path -Path $Env:HERMES_WS_DIR\\win64-bin\\hermesc.exe)) {\n  choco install --no-progress cmake --version 3.14.7\n  if (-not $?) { throw \"Failed to install CMake\" }\n\n  cd $Env:HERMES_WS_DIR\\icu\n  # If Invoke-WebRequest shows a progress bar, it will fail with\n  #   Win32 internal error \"Access is denied\" 0x5 occurred [...]\n  $progressPreference = 'silentlyContinue'\n  Invoke-WebRequest -Uri \"$Env:ICU_URL\" -OutFile \"icu.zip\"\n  Expand-Archive -Path \"icu.zip\" -DestinationPath \".\"\n\n  cd $Env:HERMES_WS_DIR\n  Copy-Item -Path \"icu\\bin64\\icu*.dll\" -Destination \"deps\"\n  # Include MSVC++ 2015 redistributables\n  Copy-Item -Path \"c:\\windows\\system32\\msvcp140.dll\" -Destination \"deps\"\n  Copy-Item -Path \"c:\\windows\\system32\\vcruntime140.dll\" -Destination \"deps\"\n  Copy-Item -Path \"c:\\windows\\system32\\vcruntime140_1.dll\" -Destination \"deps\"\n\n  $Env:PATH += \";$Env:CMAKE_DIR;$Env:MSBUILD_DIR\"\n  $Env:ICU_ROOT = \"$Env:HERMES_WS_DIR\\icu\"\n\n  cmake -S hermes -B build_release -G 'Visual Studio 16 2019' -Ax64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=True -DHERMES_ENABLE_WIN10_ICU_FALLBACK=OFF\n  if (-not $?) { throw \"Failed to configure Hermes\" }\n  echo \"Running windows build...\"\n  cd build_release\n  cmake --build . --target hermesc --config Release\n  if (-not $?) { throw \"Failed to build Hermes\" }\n\n  echo \"Copying hermesc.exe to win64-bin\"\n  cd $Env:HERMES_WS_DIR\n  Copy-Item -Path \"build_release\\bin\\Release\\hermesc.exe\" -Destination \"win64-bin\"\n  # Include Windows runtime dependencies\n  Copy-Item -Path \"deps\\*\" -Destination \"win64-bin\"\n}\nelse {\n    Write-Host \"Skipping; Clean c:\\tmp\\hermes\\win64-bin to rebuild.\"\n}\n"
            },
            {
                "id": 7,
                "name": "Upload windows artifacts",
                "run": "actions/upload-artifact@v4.3.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 4,
                "name": "Set React Native Version",
                "run": "git config --global --add safe.directory /__w/react-native/react-native\nnode ./scripts/releases/set-rn-version.js --build-type ${{ needs.set_release_type.outputs.RELEASE_TYPE }}\n"
            },
            {
                "id": 5,
                "name": "Setup gradle",
                "run": "./.github/actions/setup-gradle"
            },
            {
                "id": 6,
                "name": "Build and publish all the Android Artifacts to /tmp/maven-local",
                "run": "# By default we only build ARM64 to save time/resources. For release/nightlies/prealpha, we override this value to build all archs.\nif [[ \"${{ needs.set_release_type.outputs.RELEASE_TYPE }}\" == \"dry-run\" ]]; then\n  export ORG_GRADLE_PROJECT_reactNativeArchitectures=\"arm64-v8a\"\nelse\n  export ORG_GRADLE_PROJECT_reactNativeArchitectures=\"armeabi-v7a,arm64-v8a,x86,x86_64\"\nfi\n./gradlew publishAllToMavenTempLocal build -PenableWarningsAsErrors=true\n"
            },
            {
                "id": 7,
                "name": "Upload test results",
                "run": "actions/upload-artifact@v4.3.0"
            },
            {
                "id": 8,
                "name": "Upload RNTester APK",
                "run": "actions/upload-artifact@v4.3.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Create /tmp/hermes/osx-bin directory",
                "run": "mkdir -p /tmp/hermes/osx-bin"
            },
            {
                "id": 3,
                "name": "Download osx-bin release artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 4,
                "name": "Download osx-bin debug artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 5,
                "name": "Download darwin-bin release artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 6,
                "name": "Download darwin-bin debug artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 7,
                "name": "Download hermes dSYM debug artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 8,
                "name": "Download hermes dSYM release vartifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 9,
                "name": "Download windows-bin artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 10,
                "name": "Download linux-bin artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 11,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 12,
                "name": "Show /tmp/hermes directory",
                "run": "ls -lR /tmp/hermes"
            },
            {
                "id": 13,
                "name": "Copy Hermes binaries",
                "run": "mkdir -p ./packages/react-native/sdks/hermesc ./packages/react-native/sdks/hermesc/osx-bin ./packages/react-native/sdks/hermesc/win64-bin ./packages/react-native/sdks/hermesc/linux64-bin\n\n# When build_hermes_macos runs as a matrix, it outputs\nif [[ -d $HERMES_WS_DIR/osx-bin/Release ]]; then\n  cp -r $HERMES_WS_DIR/osx-bin/Release/* ./packages/react-native/sdks/hermesc/osx-bin/.\nelif [[ -d $HERMES_WS_DIR/osx-bin/Debug ]]; then\n  cp -r $HERMES_WS_DIR/osx-bin/Debug/* ./packages/react-native/sdks/hermesc/osx-bin/.\nelse\n  ls $HERMES_WS_DIR/osx-bin || echo \"hermesc macOS artifacts directory missing.\"\n  echo \"Could not locate macOS hermesc binary.\"; exit 1;\nfi\n\n# Sometimes, GHA creates artifacts with lowercase Debug/Release. Make sure that if it happen, we uppercase them.\nif [[ -f \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-debug.tar.gz\" ]]; then\n  mv \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-debug.tar.gz\" \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-Debug.tar.gz\"\nfi\n\nif [[ -f \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-release.tar.gz\" ]]; then\n  mv \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-release.tar.gz\" \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-Release.tar.gz\"\nfi\n\ncp -r $HERMES_WS_DIR/win64-bin/* ./packages/react-native/sdks/hermesc/win64-bin/.\ncp -r $HERMES_WS_DIR/linux64-bin/* ./packages/react-native/sdks/hermesc/linux64-bin/.\n\n# Make sure the hermesc files are actually executable.\nchmod -R +x packages/react-native/sdks/hermesc/*\n\nmkdir -p ./packages/react-native/ReactAndroid/external-artifacts/artifacts/\ncp $HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-Debug.tar.gz ./packages/react-native/ReactAndroid/external-artifacts/artifacts/hermes-ios-debug.tar.gz\ncp $HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-Release.tar.gz ./packages/react-native/ReactAndroid/external-artifacts/artifacts/hermes-ios-release.tar.gz\ncp $HERMES_WS_DIR/dSYM/Debug/hermes.framework.dSYM  ./packages/react-native/ReactAndroid/external-artifacts/artifacts/hermes-framework-dSYM-debug.tar.gz\ncp $HERMES_WS_DIR/dSYM/Release/hermes.framework.dSYM  ./packages/react-native/ReactAndroid/external-artifacts/artifacts/hermes-framework-dSYM-release.tar.gz\n"
            },
            {
                "id": 14,
                "name": "Setup node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 15,
                "name": "Install dependencies",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 16,
                "name": "Build packages",
                "run": "yarn build"
            },
            {
                "id": 17,
                "name": "Set npm credentials",
                "run": "echo \"//registry.npmjs.org/:_authToken=${{ secrets.GHA_NPM_TOKEN }}\" > ~/.npmrc"
            },
            {
                "id": 18,
                "name": "Publish NPM",
                "run": "echo \"GRADLE_OPTS = $GRADLE_OPTS\"\nexport ORG_GRADLE_PROJECT_reactNativeArchitectures=\"armeabi-v7a,arm64-v8a,x86,x86_64\"\nnode ./scripts/releases-ci/publish-npm.js -t release\n"
            },
            {
                "id": 19,
                "name": "Zip Maven Artifacts from /tmp/maven-local",
                "run": "zip -r maven-local.zip maven-local"
            },
            {
                "id": 20,
                "name": "Upload Maven Artifacts",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 21,
                "name": "Upload npm logs",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 22,
                "name": "Build release package as a job artifact",
                "run": "mkdir -p build\n\nFILENAME=$(cd packages/react-native; npm pack | tail -1)\nmv packages/react-native/$FILENAME build/\n\necho $FILENAME > build/react-native-package-version\n"
            },
            {
                "id": 23,
                "name": "Upload release package",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 24,
                "name": "Update rn-diff-purge to generate upgrade-support diff",
                "run": "curl -X POST https://api.github.com/repos/react-native-community/rn-diff-purge/dispatches \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  -H \"Authorization: Bearer $REACT_NATIVE_BOT_GITHUB_TOKEN\" \\\n  -d \"{\\\"event_type\\\": \\\"publish\\\", \\\"client_payload\\\": { \\\"version\\\": \\\"${{ github.ref_name }}\\\" }}\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v9"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v9"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v9"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v9"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "if [[ $EVENT_NAME == \"schedule\" ]]; then\n  echo \"Setting release type to nightly\"\n  echo \"RELEASE_TYPE=nightly\" >> $GITHUB_OUTPUT\nelif [[ $EVENT_NAME == \"push\" && $REF == refs/tags/v* ]]; then\n  echo \"Setting release type to release\"\n  echo \"RELEASE_TYPE=release\" >> $GITHUB_OUTPUT\nelse\n  echo \"Setting release type to dry-run\"\n  echo \"RELEASE_TYPE=dry-run\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Setup hermes version",
                "run": "mkdir -p \"/tmp/hermes\" \"/tmp/hermes/download\" \"/tmp/hermes/hermes\"\n\nif [ -f \"$HERMES_VERSION_FILE\" ]; then\n  echo \"Hermes Version file found! Using this version for the build:\"\n  echo \"VERSION=$(cat $HERMES_VERSION_FILE)\" >> \"$GITHUB_OUTPUT\"\nelse\n  echo \"Hermes Version file not found!!!\"\n  echo \"Using the last commit from main for the build:\"\n  HERMES_TAG_SHA=$(git ls-remote https://github.com/facebook/hermes main | cut -f 1 | tr -d '[:space:]')\n  echo \"VERSION=$HERMES_TAG_SHA\" >> \"$GITHUB_OUTPUT\"\nfi\necho \"Hermes commit is $HERMES_TAG_SHA\"\n"
            },
            {
                "id": 4,
                "name": "Get react-native version",
                "run": "VERSION=$(cat packages/react-native/package.json | jq -r '.version')\n# Save the react native version we are building in an output variable so we can use that file as part of the cache key.\necho \"VERSION=$VERSION\" >> \"$GITHUB_OUTPUT\"\necho \"React Native Version is $VERSION\"\n"
            },
            {
                "id": 5,
                "name": "Cache hermes workspace",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 6,
                "name": "Yarn- Install Dependencies",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 7,
                "name": "Download Hermes tarball",
                "run": "node packages/react-native/scripts/hermes/prepare-hermes-for-build ${{ github.event.pull_request.html_url }}\ncp packages/react-native/sdks/download/* $HERMES_WS_DIR/download/.\ncp -r packages/react-native/sdks/hermes/* $HERMES_WS_DIR/hermes/.\n\necho ${{ steps.hermes-version.outputs.version }}\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Cache hermes workspace",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 3,
                "name": "Setup Hermes workspace",
                "run": "./.github/actions/setup_hermes_workspace"
            },
            {
                "id": 4,
                "name": "Hermes apple cache",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 5,
                "name": "Build HermesC Apple",
                "run": "cd ./packages/react-native/sdks/hermes || exit 1\n. ./utils/build-apple-framework.sh\nbuild_host_hermesc_if_needed\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup xcode",
                "run": "./.github/actions/setup-xcode"
            },
            {
                "id": 3,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 4,
                "name": "Setup Hermes workspace",
                "run": "./.github/actions/setup_hermes_workspace"
            },
            {
                "id": 5,
                "name": "Check if the required artifacts already exist",
                "run": "FLAVOR=\"${{ matrix.flavor }}\"\necho \"Flavor is $FLAVOR\"\nOSX_BIN=\"/tmp/hermes/osx-bin/$FLAVOR\"\nDSYM=\"/tmp/hermes/dSYM/$FLAVOR\"\nHERMES=\"/tmp/hermes/hermes-runtime-darwin/hermes-ios-$FLAVOR.tar.gz\"\n\nif [[ -d \"$OSX_BIN\" ]] && \\\n   [[ -d \"$DSYM\" ]] && \\\n   [[ -f \"$HERMES\" ]]; then\n\n  echo \"Artifacts are there!\"\n  echo \"ARTIFACTS_EXIST=true\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 6,
                "name": "Build the Hermes ${{ matrix.slice }} frameworks",
                "run": "cd ./packages/react-native/sdks/hermes || exit 1\nSLICE=${{ matrix.slice }}\nFLAVOR=${{ matrix.flavor }}\nFINAL_PATH=build_\"$SLICE\"_\"$FLAVOR\"\necho \"Final path for this slice is: $FINAL_PATH\"\n\nif [[ -d \"$FINAL_PATH\" ]]; then\n  echo \"[HERMES] Skipping! Found the requested slice at $FINAL_PATH\".\n  exit 0\nfi\n\nif [[ \"$ARTIFACTS_EXIST\" ]]; then\n  echo \"[HERMES] Skipping! Artifacts exists already.\"\n  exit 0\nfi\n\nif [[ \"$SLICE\" == \"macosx\" ]]; then\n  echo \"[HERMES] Building Hermes for MacOS\"\n  BUILD_TYPE=\"${{ matrix.flavor }}\" ./utils/build-mac-framework.sh\nelse\n  echo \"[HERMES] Building Hermes for iOS: $SLICE\"\n  BUILD_TYPE=\"${{ matrix.flavor }}\" ./utils/build-ios-framework.sh \"$SLICE\"\nfi\n\necho \"Moving from build_$SLICE to $FINAL_PATH\"\nmv build_\"$SLICE\" \"$FINAL_PATH\"\n\n# check whether everything is there\nif [[ -d \"$FINAL_PATH/API/hermes/hermes.framework\" ]]; then\n  echo \"Successfully built hermes.framework for $SLICE in $FLAVOR\"\nelse\n  echo \"Failed to built hermes.framework for $SLICE in $FLAVOR\"\n  exit 1\nfi\n\nif [[ -d \"$FINAL_PATH/API/hermes/hermes.framework.dSYM\" ]]; then\n  echo \"Successfully built hermes.framework.dSYM for $SLICE in $FLAVOR\"\nelse\n  echo \"Failed to built hermes.framework.dSYM for $SLICE in $FLAVOR\"\n  echo \"Please try again\"\n  exit 1\nfi\n"
            },
            {
                "id": 7,
                "name": "Save slice cache",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup xcode",
                "run": "./.github/actions/setup-xcode"
            },
            {
                "id": 3,
                "name": "Setup node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 4,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 5,
                "name": "Setup Hermes workspace",
                "run": "./.github/actions/setup_hermes_workspace"
            },
            {
                "id": 6,
                "name": "Check if the required artifacts already exist",
                "run": "FLAVOR=\"${{ matrix.flavor }}\"\necho \"Flavor is $FLAVOR\"\nOSX_BIN=\"/tmp/hermes/osx-bin/$FLAVOR\"\nDSYM=\"/tmp/hermes/dSYM/$FLAVOR\"\nHERMES=\"/tmp/hermes/hermes-runtime-darwin/hermes-ios-$FLAVOR.tar.gz\"\n\nif [[ -d \"$OSX_BIN\" ]] && \\\n   [[ -d \"$DSYM\" ]] && \\\n   [[ -f \"$HERMES\" ]]; then\n\n  echo \"Artifacts are there!\"\n  echo \"ARTIFACTS_EXIST=true\" >> $GITHUB_ENV\n  echo \"ARTIFACTS_EXIST=true\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 7,
                "name": "Yarn- Install Dependencies",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 8,
                "name": "Slice cache macosx",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 9,
                "name": "Slice cache iphoneos",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 10,
                "name": "Slice cache iphonesimulator",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 11,
                "name": "Slice cache catalyst",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 12,
                "name": "Slice cache xros",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 13,
                "name": "Slice cache xrsimulator",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 14,
                "name": "Move back build folders",
                "run": "ls -l ./packages/react-native/sdks/hermes\ncd ./packages/react-native/sdks/hermes || exit 1\nmv build_macosx_${{ matrix.flavor }} build_macosx\nmv build_iphoneos_${{ matrix.flavor }} build_iphoneos\nmv build_iphonesimulator_${{ matrix.flavor }} build_iphonesimulator\nmv build_catalyst_${{ matrix.flavor }} build_catalyst\nmv build_xros_${{ matrix.flavor }} build_xros\nmv build_xrsimulator_${{ matrix.flavor }} build_xrsimulator\n"
            },
            {
                "id": 15,
                "name": "Prepare destroot folder",
                "run": "cd ./packages/react-native/sdks/hermes || exit 1\n. ./utils/build-apple-framework.sh\nprepare_dest_root_for_ci\n"
            },
            {
                "id": 16,
                "name": "Create fat framework for iOS",
                "run": "cd ./packages/react-native/sdks/hermes || exit 1\necho \"[HERMES] Creating the universal framework\"\n./utils/build-ios-framework.sh build_framework\n"
            },
            {
                "id": 17,
                "name": "Package the Hermes Apple frameworks",
                "run": "BUILD_TYPE=\"${{ matrix.flavor }}\"\necho \"Packaging Hermes Apple frameworks for $BUILD_TYPE build type\"\n\nTARBALL_OUTPUT_DIR=$(mktemp -d /tmp/hermes-tarball-output-XXXXXXXX)\n\nTARBALL_FILENAME=$(node ./packages/react-native/scripts/hermes/get-tarball-name.js --buildType \"$BUILD_TYPE\")\n\necho \"Packaging Hermes Apple frameworks for $BUILD_TYPE build type\"\n\nTARBALL_OUTPUT_PATH=$(node ./packages/react-native/scripts/hermes/create-tarball.js \\\n  --inputDir ./packages/react-native/sdks/hermes \\\n  --buildType \"$BUILD_TYPE\" \\\n  --outputDir $TARBALL_OUTPUT_DIR)\n\necho \"Hermes tarball saved to $TARBALL_OUTPUT_PATH\"\n\nmkdir -p $HERMES_TARBALL_ARTIFACTS_DIR\ncp $TARBALL_OUTPUT_PATH $HERMES_TARBALL_ARTIFACTS_DIR/.\n\nmkdir -p /tmp/hermes/osx-bin/${{ matrix.flavor }}\ncp ./packages/react-native/sdks/hermes/build_macosx/bin/* /tmp/hermes/osx-bin/${{ matrix.flavor }}\nls -lR /tmp/hermes/osx-bin/\n"
            },
            {
                "id": 18,
                "name": "Upload darwin artifacts",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 19,
                "name": "Upload osx-bin",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 20,
                "name": "Create dSYM archive",
                "run": "FLAVOR=${{ matrix.flavor }}\nWORKING_DIR=\"/tmp/hermes_tmp/dSYM/$FLAVOR\"\n\nmkdir -p \"$WORKING_DIR/macosx\"\nmkdir -p \"$WORKING_DIR/catalyst\"\nmkdir -p \"$WORKING_DIR/iphoneos\"\nmkdir -p \"$WORKING_DIR/iphonesimulator\"\nmkdir -p \"$WORKING_DIR/xros\"\nmkdir -p \"$WORKING_DIR/xrsimulator\"\n\ncd ./packages/react-native/sdks/hermes || exit 1\n\nDSYM_FILE_PATH=API/hermes/hermes.framework.dSYM\ncp -r build_macosx/$DSYM_FILE_PATH \"$WORKING_DIR/macosx/\"\ncp -r build_catalyst/$DSYM_FILE_PATH \"$WORKING_DIR/catalyst/\"\ncp -r build_iphoneos/$DSYM_FILE_PATH \"$WORKING_DIR/iphoneos/\"\ncp -r build_iphonesimulator/$DSYM_FILE_PATH \"$WORKING_DIR/iphonesimulator/\"\ncp -r build_xros/$DSYM_FILE_PATH \"$WORKING_DIR/xros/\"\ncp -r build_xrsimulator/$DSYM_FILE_PATH \"$WORKING_DIR/xrsimulator/\"\n\nDEST_DIR=\"/tmp/hermes/dSYM/$FLAVOR\"\ntar -C \"$WORKING_DIR\" -czvf \"hermes.framework.dSYM\" .\n\nmkdir -p \"$DEST_DIR\"\nmv \"hermes.framework.dSYM\" \"$DEST_DIR\"\n"
            },
            {
                "id": 21,
                "name": "Upload hermes dSYM artifacts",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Run it",
                "run": "./.github/actions/test_ios_rntester"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Run it",
                "run": "./.github/actions/test_ios_rntester"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Run it",
                "run": "./.github/actions/test_ios_rntester"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "sudo apt update\nsudo apt install -y git openssh-client cmake build-essential \\\n    libreadline-dev libicu-dev jq zip python3\n"
            },
            {
                "id": 3,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 4,
                "name": "Linux cache",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 5,
                "name": "Set up workspace",
                "run": "mkdir -p /tmp/hermes/linux64-bin\n"
            },
            {
                "id": 6,
                "name": "Build HermesC for Linux",
                "run": "if [ -f /tmp/hermes/linux64-bin/hermesc ]; then\n  echo 'Skipping; Clean \"/tmp/hermes/linux64-bin\" to rebuild.'\nelse\n  cd /tmp/hermes\n  cmake -S hermes -B build -DHERMES_STATIC_LINK=ON -DCMAKE_BUILD_TYPE=Release -DHERMES_ENABLE_TEST_SUITE=OFF \\\n    -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=True -DCMAKE_CXX_FLAGS=-s -DCMAKE_C_FLAGS=-s \\\n    -DCMAKE_EXE_LINKER_FLAGS=\"-Wl,--whole-archive -lpthread -Wl,--no-whole-archive\"\n  cmake --build build --target hermesc -j 4\n  cp /tmp/hermes/build/bin/hermesc /tmp/hermes/linux64-bin/.\nfi\n"
            },
            {
                "id": 7,
                "name": "Upload linux artifacts",
                "run": "actions/upload-artifact@v4.3.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 3,
                "name": "Windows cache",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 4,
                "name": "setup-msbuild",
                "run": "microsoft/setup-msbuild@v1.3.2"
            },
            {
                "id": 5,
                "name": "Set up workspace",
                "run": "#New-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\nNew-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\\icu\nNew-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\\deps\nNew-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\\win64-bin\n#New-Item -ItemType Directory -ErrorAction SilentlyContinue $Env:HERMES_WS_DIR\\hermes\n#New-Item -ItemType SymbolicLink -ErrorAction SilentlyContinue -Target tmp\\hermes\\hermes -Path $Env:HERMES_WS_DIR -Name hermes\n"
            },
            {
                "id": 6,
                "name": "Build HermesC for Windows",
                "run": "if (-not(Test-Path -Path $Env:HERMES_WS_DIR\\win64-bin\\hermesc.exe)) {\n  choco install --no-progress cmake --version 3.14.7\n  if (-not $?) { throw \"Failed to install CMake\" }\n\n  cd $Env:HERMES_WS_DIR\\icu\n  # If Invoke-WebRequest shows a progress bar, it will fail with\n  #   Win32 internal error \"Access is denied\" 0x5 occurred [...]\n  $progressPreference = 'silentlyContinue'\n  Invoke-WebRequest -Uri \"$Env:ICU_URL\" -OutFile \"icu.zip\"\n  Expand-Archive -Path \"icu.zip\" -DestinationPath \".\"\n\n  cd $Env:HERMES_WS_DIR\n  Copy-Item -Path \"icu\\bin64\\icu*.dll\" -Destination \"deps\"\n  # Include MSVC++ 2015 redistributables\n  Copy-Item -Path \"c:\\windows\\system32\\msvcp140.dll\" -Destination \"deps\"\n  Copy-Item -Path \"c:\\windows\\system32\\vcruntime140.dll\" -Destination \"deps\"\n  Copy-Item -Path \"c:\\windows\\system32\\vcruntime140_1.dll\" -Destination \"deps\"\n\n  $Env:PATH += \";$Env:CMAKE_DIR;$Env:MSBUILD_DIR\"\n  $Env:ICU_ROOT = \"$Env:HERMES_WS_DIR\\icu\"\n\n  cmake -S hermes -B build_release -G 'Visual Studio 16 2019' -Ax64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=True -DHERMES_ENABLE_WIN10_ICU_FALLBACK=OFF\n  if (-not $?) { throw \"Failed to configure Hermes\" }\n  echo \"Running windows build...\"\n  cd build_release\n  cmake --build . --target hermesc --config Release\n  if (-not $?) { throw \"Failed to build Hermes\" }\n\n  echo \"Copying hermesc.exe to win64-bin\"\n  cd $Env:HERMES_WS_DIR\n  Copy-Item -Path \"build_release\\bin\\Release\\hermesc.exe\" -Destination \"win64-bin\"\n  # Include Windows runtime dependencies\n  Copy-Item -Path \"deps\\*\" -Destination \"win64-bin\"\n}\nelse {\n    Write-Host \"Skipping; Clean c:\\tmp\\hermes\\win64-bin to rebuild.\"\n}\n"
            },
            {
                "id": 7,
                "name": "Upload windows artifacts",
                "run": "actions/upload-artifact@v4.3.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Setup node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 4,
                "name": "Set React Native Version",
                "run": "node ./scripts/releases/set-rn-version.js --build-type ${{ needs.set_release_type.outputs.RELEASE_TYPE }}"
            },
            {
                "id": 5,
                "name": "Setup gradle",
                "run": "./.github/actions/setup-gradle"
            },
            {
                "id": 6,
                "name": "Build and publish all the Android Artifacts to /tmp/maven-local",
                "run": "# By default we only build ARM64 to save time/resources. For release/nightlies/prealpha, we override this value to build all archs.\nif [[ \"${{ needs.set_release_type.outputs.RELEASE_TYPE }}\" == \"dry-run\" ]]; then\n  export ORG_GRADLE_PROJECT_reactNativeArchitectures=\"arm64-v8a\"\nelse\n  export ORG_GRADLE_PROJECT_reactNativeArchitectures=\"armeabi-v7a,arm64-v8a,x86,x86_64\"\nfi\n./gradlew publishAllToMavenTempLocal build -PenableWarningsAsErrors=true\n"
            },
            {
                "id": 7,
                "name": "Upload test results",
                "run": "actions/upload-artifact@v4.3.0"
            },
            {
                "id": 8,
                "name": "Upload RNTester APK",
                "run": "actions/upload-artifact@v4.3.0"
            },
            {
                "id": 1,
                "name": "Add github.com to SSH known hosts",
                "run": "mkdir -p ~/.ssh\necho '|1|If6MU203eXTaaWL678YEfWkVMrw=|kqLeIAyTy8pzpj8x8Ae4Fr8Mtlc= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts\n"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 3,
                "name": "Create /tmp/hermes/osx-bin directory",
                "run": "mkdir -p /tmp/hermes/osx-bin"
            },
            {
                "id": 4,
                "name": "Download osx-bin release artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 5,
                "name": "Download osx-bin debug artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 6,
                "name": "Download darwin-bin release artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 7,
                "name": "Download darwin-bin debug artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 8,
                "name": "Download hermes dSYM debug artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 9,
                "name": "Download hermes dSYM release vartifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 10,
                "name": "Download windows-bin artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 11,
                "name": "Download linux-bin artifacts",
                "run": "actions/download-artifact@v4.1.3"
            },
            {
                "id": 12,
                "name": "Show /tmp/hermes directory",
                "run": "ls -lR /tmp/hermes"
            },
            {
                "id": 13,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 14,
                "name": "Copy Hermes binaries",
                "run": "mkdir -p ./packages/react-native/sdks/hermesc ./packages/react-native/sdks/hermesc/osx-bin ./packages/react-native/sdks/hermesc/win64-bin ./packages/react-native/sdks/hermesc/linux64-bin\n\n# When build_hermes_macos runs as a matrix, it outputs\nif [[ -d $HERMES_WS_DIR/osx-bin/Release ]]; then\n  cp -r $HERMES_WS_DIR/osx-bin/Release/* ./packages/react-native/sdks/hermesc/osx-bin/.\nelif [[ -d $HERMES_WS_DIR/osx-bin/Debug ]]; then\n  cp -r $HERMES_WS_DIR/osx-bin/Debug/* ./packages/react-native/sdks/hermesc/osx-bin/.\nelse\n  ls $HERMES_WS_DIR/osx-bin || echo \"hermesc macOS artifacts directory missing.\"\n  echo \"Could not locate macOS hermesc binary.\"; exit 1;\nfi\n\n# Sometimes, GHA creates artifacts with lowercase Debug/Release. Make sure that if it happen, we uppercase them.\nif [[ -f \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-debug.tar.gz\" ]]; then\n  mv \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-debug.tar.gz\" \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-Debug.tar.gz\"\nfi\n\nif [[ -f \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-release.tar.gz\" ]]; then\n  mv \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-release.tar.gz\" \"$HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-Release.tar.gz\"\nfi\n\ncp -r $HERMES_WS_DIR/win64-bin/* ./packages/react-native/sdks/hermesc/win64-bin/.\ncp -r $HERMES_WS_DIR/linux64-bin/* ./packages/react-native/sdks/hermesc/linux64-bin/.\n\n# Make sure the hermesc files are actually executable.\nchmod -R +x packages/react-native/sdks/hermesc/*\n\nmkdir -p ./packages/react-native/ReactAndroid/external-artifacts/artifacts/\ncp $HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-Debug.tar.gz ./packages/react-native/ReactAndroid/external-artifacts/artifacts/hermes-ios-debug.tar.gz\ncp $HERMES_WS_DIR/hermes-runtime-darwin/hermes-ios-Release.tar.gz ./packages/react-native/ReactAndroid/external-artifacts/artifacts/hermes-ios-release.tar.gz\ncp $HERMES_WS_DIR/dSYM/Debug/hermes.framework.dSYM  ./packages/react-native/ReactAndroid/external-artifacts/artifacts/hermes-framework-dSYM-debug.tar.gz\ncp $HERMES_WS_DIR/dSYM/Release/hermes.framework.dSYM  ./packages/react-native/ReactAndroid/external-artifacts/artifacts/hermes-framework-dSYM-release.tar.gz\n"
            },
            {
                "id": 15,
                "name": "Use Node.js 18",
                "run": "actions/setup-node@v4.0.0"
            },
            {
                "id": 16,
                "name": "Install dependencies",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 17,
                "name": "Build packages",
                "run": "yarn build"
            },
            {
                "id": 18,
                "name": "Set npm credentials",
                "run": "echo \"//registry.npmjs.org/:_authToken=${{ secrets.CIRCLE_NPM_TOKEN }}\" > ~/.npmrc"
            },
            {
                "id": 19,
                "name": "Publish NPM",
                "run": "echo \"GRADLE_OPTS = $GRADLE_OPTS\"\n# We can't have a separate step because each command is executed in a separate shell\n# so variables exported in a command are not visible in another.\nif [[ \"${{ needs.set_release_type.outputs.RELEASE_TYPE }}\" == \"dry-run\" ]]; then\n  export ORG_GRADLE_PROJECT_reactNativeArchitectures=\"arm64-v8a\"\nelse\n  export ORG_GRADLE_PROJECT_reactNativeArchitectures=\"armeabi-v7a,arm64-v8a,x86,x86_64\"\nfi\nnode ./scripts/releases-ci/publish-npm.js -t ${{ needs.set_release_type.outputs.RELEASE_TYPE }}\n"
            },
            {
                "id": 20,
                "name": "Zip Maven Artifacts from /tmp/maven-local",
                "run": "zip -r maven-local.zip maven-local"
            },
            {
                "id": 21,
                "name": "Upload Maven Artifacts",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 22,
                "name": "Upload npm logs",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 23,
                "name": "Build release package as a job artifact",
                "run": "mkdir -p build\n\nFILENAME=$(cd packages/react-native; npm pack | tail -1)\nmv packages/react-native/$FILENAME build/\n\necho $FILENAME > build/react-native-package-version\n"
            },
            {
                "id": 24,
                "name": "Upload release package",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 25,
                "name": "Update rn-diff-purge to generate upgrade-support diff",
                "run": "curl -X POST https://api.github.com/repos/react-native-community/rn-diff-purge/dispatches \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  -H \"Authorization: Bearer $REACT_NATIVE_BOT_GITHUB_TOKEN\" \\\n  -d \"{\\\"event_type\\\": \\\"publish\\\", \\\"client_payload\\\": { \\\"version\\\": \\\"${{ github.ref_name }}\\\" }}\"\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Cache setup",
                "run": "./.github/actions/cache_setup"
            },
            {
                "id": 3,
                "name": "Run yarn",
                "run": "yarn install --non-interactive"
            },
            {
                "id": 4,
                "name": "Setup gradle",
                "run": "./.github/actions/setup-gradle"
            },
            {
                "id": 5,
                "name": "Build CodeGen JS scripts",
                "run": "cd packages/react-native-codegen\nyarn run build\n"
            },
            {
                "id": 6,
                "name": "Monitor Disk utilization (before build)",
                "run": "echo \"On Runner:\"\ndf -h\necho \"Root:\"\ndu -hs *\necho \"Projects folder:\"\ndu -hs ./packages/*\n"
            },
            {
                "id": 7,
                "name": "Build the Helloworld application for ${{ matrix.flavor }} with Architecture set to ${{ matrix.architecture }}, and using the ${{ matrix.jsengine }} JS engine.",
                "run": "cd packages/helloworld/android\nargs=()\nif [[ ${{ matrix.architecture }} == \"OldArch\" ]]; then\n  args+=(--arch old)\nfi\nif [[ ${{ matrix.jsengine }} == \"JSC\" ]]; then\n  args+=(--jsvm jsc)\nfi\nif [[ ${{ matrix.flavor }} == \"Release\" ]]; then\n  args+=(--prod)\nfi\nyarn build android \"${args[@]}\" -P reactNativeArchitectures=\"$TARGET_ARCHITECTURE\"\n"
            },
            {
                "id": 8,
                "name": "Monitor Disk utilization (after build)",
                "run": "echo \"On Runner:\"\ndf -h\necho \"Root:\"\ndu -hs *\necho \"Projects folder:\"\ndu -hs ./packages/*\n"
            },
            {
                "id": 9,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/test_ios_helloworld"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/test_ios_helloworld"
            }
        ],
        "facebook/zstd": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Dependencies",
                "run": "sudo apt-get update\nsudo apt-get install libcurl4-gnutls-dev\n"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "./tests/test-license.py\ncc -v\nCFLAGS=\"-O0 -Werror -pedantic\" make allmost; make clean\nmake c99build; make clean\nmake c11build; make clean\nmake -j regressiontest; make clean\nmake shortest; make clean\nmake cxxtest; make clean\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Dependencies",
                "run": "sudo apt-get update\nsudo apt-get install gcc-powerpc-linux-gnu gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu libc6-dev-ppc64-powerpc-cross libcurl4-gnutls-dev lib64gcc-11-dev-powerpc-cross\n"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "make gnu90build; make clean\nmake gnu99build; make clean\nmake ppc64build V=1; make clean\nmake ppcbuild   V=1; make clean\nmake armbuild   V=1; make clean\nmake aarch64build V=1; make clean\nmake -C tests test-legacy test-longmatch; make clean\nmake -C lib libzstd-nomt; make clean"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "restore_cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "sudo apt-get update\nsudo apt-get install libcurl4-gnutls-dev\n"
            },
            {
                "id": 4,
                "name": "Regression Test",
                "run": "make -C programs zstd\nmake -C tests/regression test\nmkdir -p $CIRCLE_ARTIFACTS\n./tests/regression/test                     \\\n    --cache  tests/regression/cache         \\\n    --output $CIRCLE_ARTIFACTS/results.csv  \\\n    --zstd   programs/zstd\necho \"NOTE: The new results.csv is uploaded as an artifact to this job\"\necho \"      If this fails, go to the Artifacts pane in CircleCI, \"\necho \"      download /tmp/circleci-artifacts/results.csv, and if they \"\necho \"      are still good, copy it into the repo and commit it.\"\necho \"> diff tests/regression/results.csv $CIRCLE_ARTIFACTS/results.csv\"\ndiff tests/regression/results.csv $CIRCLE_ARTIFACTS/results.csv\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "make all",
                "run": "make all"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "make test",
                "run": "make test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "make test on macos",
                "run": "make test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "make test",
                "run": "sudo apt-get -qqq update\nmake libc6install\nCFLAGS=\"-m32\" make test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "no intrinsics fuzztest",
                "run": "MOREFLAGS=\"-DZSTD_NO_INTRINSICS\" make -C tests fuzztest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "thread sanitizer zstreamtest",
                "run": "CC=clang ZSTREAM_TESTTIME=-T3mn make tsan-test-zstream"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "undefined behavior sanitizer zstreamtest",
                "run": "CC=clang make uasan-test-zstream"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "thread sanitizer fuzztest",
                "run": "CC=clang make tsan-fuzztest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "zstream tests in 32bit mode, with big tests",
                "run": "sudo apt-get -qqq update\nmake libc6install\nCC=clang make -C tests test-zstream32 FUZZER_FLAGS=\"--big-tests\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "gcc-8 + ASan + UBSan + Test Zstd",
                "run": "echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal main universe\" | sudo tee -a /etc/apt/sources.list\nsudo apt-get -qqq update\nmake gcc8install\nCC=gcc-8 make -j uasan-test-zstd </dev/null V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "clang + ASan + UBSan + Test Zstd",
                "run": "CC=clang make -j uasan-test-zstd </dev/null V=1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "ASan + UBSan + Test Zstd, 32bit mode",
                "run": "sudo apt-get -qqq update\nmake libc6install\nmake -j uasan-test-zstd32 V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "gcc-8 + ASan + UBSan + Fuzz Test",
                "run": "echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal main universe\" | sudo tee -a /etc/apt/sources.list\nsudo apt-get -qqq update\nmake gcc8install\nCC=gcc-8 FUZZER_FLAGS=\"--long-tests\" make clean uasan-fuzztest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "clang + ASan + UBSan + Fuzz Test",
                "run": "CC=clang FUZZER_FLAGS=\"--long-tests\" make clean uasan-fuzztest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "ASan + UBSan + Fuzz Test 32bit",
                "run": "sudo apt-get -qqq update\nmake libc6install\nCFLAGS=\"-O3 -m32\" FUZZER_FLAGS=\"--long-tests\" make uasan-fuzztest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "clang + ASan + UBSan + Fuzz Test 32bit",
                "run": "sudo apt-get -qqq update\nmake libc6install\nCC=clang CFLAGS=\"-O3 -m32\" FUZZER_FLAGS=\"--long-tests\" make uasan-fuzztest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "ASan + UBSan + Regression Test",
                "run": "make -j uasanregressiontest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "clang + ASan + UBSan + Regression Test",
                "run": "CC=clang make -j uasanregressiontest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "MSan + Regression Test",
                "run": "make -j msanregressiontest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "clang + MSan + Fuzz Test",
                "run": "sudo apt-get -qqq update\nsudo apt-get install clang\nCC=clang MOREFLAGS=\"-O0\" make clean msan-fuzztest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "clang + MSan + Fuzz Test",
                "run": "sudo apt-get -qqq update\nsudo apt-get install clang\nCC=clang FUZZER_FLAGS=\"--long-tests\" make clean msan-fuzztest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "clang + MSan + Test Zstd",
                "run": "sudo apt-get update\nsudo apt-get install clang\nCC=clang make msan-test-zstd HAVE_ZLIB=0 HAVE_LZ4=0 HAVE_LZMA=0 V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Qemu ARM emulation + Fuzz Test",
                "run": "sudo apt-get -qqq update\nmake arminstall\nmake armfuzz\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "valgrind + fuzz test stack mode",
                "run": "sudo apt-get -qqq update\nmake valgrindinstall\nmake -C tests test-valgrind\nmake clean\nmake -C tests test-fuzzer-stackmode\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "msys2/setup-msys2@d0e80f58dffbc64f6a3a1f43527d469b4fc7b6c8"
            },
            {
                "id": 3,
                "name": "install mingw gcc",
                "run": "pacman --noconfirm -S gcc"
            },
            {
                "id": 4,
                "name": "MINGW64 gcc fuzztest",
                "run": "export CC=\"gcc\"\nexport CXX=\"g++\"\nexport FUZZERTEST=\"-T2mn\"\nexport ZSTREAM_TESTTIME=\"-T2mn\"\necho \"Testing $CC $CXX MINGW64\"\nmake -v\n$CC --version\n$CXX --version\nmake -C tests fuzztest\n"
            },
            {
                "id": 1,
                "name": "Build Fuzzers (${{ matrix.sanitizer }})",
                "run": "google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master"
            },
            {
                "id": 2,
                "name": "Run Fuzzers (${{ matrix.sanitizer }})",
                "run": "google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master"
            },
            {
                "id": 3,
                "name": "Upload Crash",
                "run": "actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "linux kernel, library + build + test",
                "run": "make -C contrib/linux-kernel test CFLAGS=\"-Werror -Wunused-const-variable -Wunused-but-set-variable\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "make benchmarking",
                "run": "make benchmarking"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "make check on 32-bit",
                "run": "sudo apt update\nAPT_PACKAGES=\"gcc-multilib\" make apt-install\nCFLAGS=\"-m32 -O1 -fstack-protector\" make check V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "make check on x32 ABI",
                "run": "sudo apt update\nAPT_PACKAGES=\"gcc-multilib\" make apt-install\nCFLAGS=\"-mx32 -O1 -fstack-protector\" make check V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "ensure zstd can be build with c89/c90 compilers (+ long long support + variadic macros)",
                "run": "make c89build V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "build zstd bin against a dynamic lib (debuglevel for more dependencies)",
                "run": "make -C lib lib-mt-release\nDEBUGLEVEL=2 make -C programs zstd-dll\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "gcc-7 + libzstdmt compilation",
                "run": "echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal main universe\" | sudo tee -a /etc/apt/sources.list\nsudo apt-get -qqq update\nmake gcc7install\nCC=gcc-7 CFLAGS=-Werror make -j all\nmake clean\nLDFLAGS=-Wl,--no-undefined make -C lib libzstd-mt\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "cmake build and test",
                "run": "FUZZERTEST=-T1mn ZSTREAM_TESTTIME=-T1mn make cmakebuild V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "C++, gnu90 and c99 compatibility",
                "run": "make cxxtest\nmake clean\nmake gnu90build\nmake clean\nmake c99build\nmake clean\nmake travis-install   # just ensures `make install` works\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "mingw cross-compilation",
                "run": "# sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix; (doesn't work)\nsudo apt-get -qqq update\nsudo apt-get install gcc-mingw-w64\nCC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ CFLAGS=\"-Werror -O1\" make zstd\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "ARM Build Test",
                "run": "sudo apt-get -qqq update\nmake arminstall\nmake armbuild\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Bourne shell compatibility (shellcheck)",
                "run": "wget https://github.com/koalaman/shellcheck/releases/download/v0.7.1/shellcheck-v0.7.1.linux.x86_64.tar.xz\ntar -xf shellcheck-v0.7.1.linux.x86_64.tar.xz\nshellcheck-v0.7.1/shellcheck --shell=sh --severity=warning --exclude=SC2010 tests/playTests.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "zlib wrapper test",
                "run": "sudo apt-get -qqq update\nmake valgrindinstall\nmake -C zlibWrapper test\nmake -C zlibWrapper test-valgrind\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "LZ4, thread pool, and libs build testslib wrapper test",
                "run": "make lz4install\nmake -C tests test-lz4\nmake check < /dev/null | tee   # mess with lz4 console detection\nmake clean\nmake -C tests test-pool\nmake clean\nbash tests/libzstd_builds.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Make all, 32bit mode",
                "run": "sudo apt-get -qqq update\nmake libc6install\nCFLAGS=\"-Werror -m32\" make -j all32\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "gcc-8 build",
                "run": "echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal main universe\" | sudo tee -a /etc/apt/sources.list\nsudo apt-get -qqq update\nmake gcc8install\nCC=gcc-8 CFLAGS=\"-Werror\" make -j all\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Build with ${{matrix.name}}",
                "run": "${{matrix.flags}} make zstd"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "-Wimplicit-fallthrough build",
                "run": "make clean\nCC=gcc MOREFLAGS=\"-Werror -Wimplicit-fallthrough=2 -O0\" make -C lib -j libzstd.a ZSTD_LEGACY_SUPPORT=0\nmake clean\nCC=clang MOREFLAGS=\"-Werror -Wimplicit-fallthrough -O0\" make -C lib -j libzstd.a ZSTD_LEGACY_SUPPORT=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Install packages",
                "run": "sudo apt-get update\nsudo apt-get -y install build-essential python3-pip ninja-build liblz4-dev\npip install --pre meson\n"
            },
            {
                "id": 3,
                "name": "Build with Meson",
                "run": "meson setup \\\n  --buildtype=debugoptimized \\\n  -Db_lundef=false \\\n  -Dauto_features=enabled \\\n  -Dbin_programs=true \\\n  -Dbin_tests=true \\\n  -Dbin_contrib=true \\\n  -Ddefault_library=both \\\n  build/meson builddir\nninja -C builddir/\nmeson test -C builddir/ --print-errorlogs\nmeson install -C builddir --destdir staging/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Install packages",
                "run": "sudo apt-get -qqq update\nsudo apt-get -y install build-essential python3-pip ninja-build {gcc,g++}-mingw-w64-x86-64\npip install --pre meson\n"
            },
            {
                "id": 3,
                "name": "Build with Meson",
                "run": "cat > cross.ini <<EOF\n[binaries]\nar = 'x86_64-w64-mingw32-ar'\nc = 'x86_64-w64-mingw32-gcc'\ncpp = 'x86_64-w64-mingw32-g++'\nld = 'x86_64-w64-mingw32-ld'\nobjcopy = 'x86_64-w64-mingw32-objcopy'\nobjdump = 'x86_64-w64-mingw32-objdump'\nstrip = 'x86_64-w64-mingw32-strip'\nwindres = 'x86_64-w64-mingw32-windres'\n\n[host_machine]\nsystem = 'windows'\nendian = 'little'\ncpu_family = 'x86_64'\ncpu = 'x86_64'\nEOF\n\n# pzstd doesn't build; skip -Dbin_contrib=true\nmeson setup \\\n  --buildtype=debugoptimized \\\n  --cross-file=cross.ini \\\n  -Db_lundef=false \\\n  -Dbin_programs=true \\\n  -Dbin_tests=true \\\n  -Ddefault_library=both \\\n  build/meson builddir\nninja -C builddir/\nif grep -- -pthread builddir/meson-private/libzstd.pc; then\n  echo \"Error: found stray pthread dependency\"\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Install packages",
                "run": "pip install --pre meson"
            },
            {
                "id": 3,
                "name": "Configure with Meson",
                "run": "meson setup --vsenv build/meson/ builddir -Dbin_tests=true -Dbin_programs=true -Dbin_contrib=true\n"
            },
            {
                "id": 4,
                "name": "Build with Meson",
                "run": "meson compile -C builddir/\n"
            },
            {
                "id": 5,
                "name": "Test with Meson",
                "run": "meson test -C builddir/ --print-errorlogs\n"
            },
            {
                "id": 6,
                "name": "Install with Meson",
                "run": "meson install -C builddir --destdir staging/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Add MSBuild to PATH",
                "run": "microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce"
            },
            {
                "id": 3,
                "name": "Build & Test",
                "run": "cd build\\cmake\nmkdir build\ncd build\ncmake.exe -G \"${{matrix.generator}}\" ${{matrix.flags}} -DCMAKE_BUILD_TYPE=Debug -DZSTD_BUILD_TESTS:BOOL=ON -DZSTD_ZSTREAM_FLAGS=-T30s -DZSTD_FUZZER_FLAGS=-T30s -DZSTD_FULLBENCH_FLAGS=-i0 ..\ncmake.exe --build .\nctest.exe -V -C Debug\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Add MSBuild to PATH",
                "run": "microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce"
            },
            {
                "id": 3,
                "name": "Build ${{matrix.name}}",
                "run": "msbuild \"build\\VS2010\\zstd.sln\" /m /verbosity:minimal /property:PlatformToolset=${{matrix.toolset}} /t:Clean,Build /p:Platform=${{matrix.platform}} /p:Configuration=${{matrix.configuration}} /warnaserror\n"
            },
            {
                "id": 4,
                "name": "Build ${{matrix.name}}",
                "run": "msbuild \"build\\VS2010\\zstd.sln\" /m /verbosity:minimal /property:PlatformToolset=${{matrix.toolset}} /t:Clean,Build /p:Platform=${{matrix.platform}} /p:Configuration=${{matrix.configuration}} /warnaserror /p:InstructionSet=${{matrix.arch}}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "libzstd size test",
                "run": "make clean && make -j -C lib libzstd && ./tests/check_size.py lib/libzstd.so 1100000\nmake clean && make -j -C lib libzstd ZSTD_LIB_COMPRESSION=0 ZSTD_LIB_DICTBUILDER=0 && ./tests/check_size.py lib/libzstd.so 400000\nmake clean && make -j -C lib libzstd ZSTD_LIB_MINIFY=1 && ./tests/check_size.py lib/libzstd.so 300000\nmake clean && make -j -C lib libzstd ZSTD_LIB_MINIFY=1 ZSTD_LIB_COMPRESSION=0 ZSTD_LIB_DICTBUILDER=0 && ./tests/check_size.py lib/libzstd.so 80000\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "minimal decompressor macros",
                "run": "make clean && make -j all ZSTD_LIB_MINIFY=1 MOREFLAGS=\"-Werror\"\nmake clean && make check ZSTD_LIB_MINIFY=1 MOREFLAGS=\"-Werror\"\nmake clean && make -j all MOREFLAGS=\"-Werror -DHUF_FORCE_DECOMPRESS_X1 -DZSTD_FORCE_DECOMPRESS_SEQUENCES_SHORT\"\nmake clean && make check MOREFLAGS=\"-Werror -DHUF_FORCE_DECOMPRESS_X1 -DZSTD_FORCE_DECOMPRESS_SEQUENCES_SHORT\"\nmake clean && make -j all MOREFLAGS=\"-Werror -DHUF_FORCE_DECOMPRESS_X2 -DZSTD_FORCE_DECOMPRESS_SEQUENCES_LONG\"\nmake clean && make check MOREFLAGS=\"-Werror -DHUF_FORCE_DECOMPRESS_X2 -DZSTD_FORCE_DECOMPRESS_SEQUENCES_LONG\"\nmake clean && make -j all MOREFLAGS=\"-Werror -DZSTD_NO_INLINE -DZSTD_STRIP_ERROR_STRINGS\"\nmake clean && make check MOREFLAGS=\"-Werror -DZSTD_NO_INLINE -DZSTD_STRIP_ERROR_STRINGS\"\nmake clean && make check ZSTD_LIB_EXCLUDE_COMPRESSORS_DFAST_AND_UP=1 MOREFLAGS=\"-Werror\"\nmake clean && make check ZSTD_LIB_EXCLUDE_COMPRESSORS_GREEDY_AND_UP=1 MOREFLAGS=\"-Werror\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "dynamic bmi2 tests",
                "run": "make clean && make -j check MOREFLAGS=\"-O0 -Werror -mbmi2\"\nmake clean && make -j check MOREFLAGS=\"-O0 -Werror -DDYNAMIC_BMI2=1\"\nmake clean && make -j check MOREFLAGS=\"-O0 -Werror -DDYNAMIC_BMI2=1 -mbmi2\"\nmake clean && make -j check MOREFLAGS=\"-O0 -Werror -DDYNAMIC_BMI2=0\"\nmake clean && make -j check MOREFLAGS=\"-O0 -Werror -DDYNAMIC_BMI2=0 -mbmi2\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "make all variants & validate",
                "run": "make -j -C programs allVariants MOREFLAGS=-O0\n./tests/test-variants.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "apt update & install",
                "run": "sudo apt-get update\nsudo apt-get install gcc-multilib g++-multilib qemu-utils qemu-user-static\nsudo apt-get install ${{ matrix.xcc_pkg }} ${{ matrix.xemu_pkg }}\n"
            },
            {
                "id": 3,
                "name": "Environment info",
                "run": "echo && which $XCC\necho && $XCC --version\necho && $XCC -v  # Show built-in specs\necho && which $XEMU\necho && $XEMU --version\n"
            },
            {
                "id": 4,
                "name": "ARM",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 5,
                "name": "ARM64",
                "run": "LDFLAGS=\"-static -z force-bti\" MOREFLAGS=\"-mbranch-protection=standard\" CC=$XCC QEMU_SYS=$XEMU make clean check\nLDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 6,
                "name": "PPC",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 7,
                "name": "PPC64LE",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 8,
                "name": "S390X",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 9,
                "name": "MIPS",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 10,
                "name": "RISC-V",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 11,
                "name": "M68K",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 12,
                "name": "SPARC",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "msys2/setup-msys2@d0e80f58dffbc64f6a3a1f43527d469b4fc7b6c8"
            },
            {
                "id": 3,
                "name": "install mingw gcc i686",
                "run": "pacman --noconfirm -S mingw-w64-i686-gcc"
            },
            {
                "id": 4,
                "name": "install mingw gcc x86_64",
                "run": "pacman --noconfirm -S mingw-w64-x86_64-gcc"
            },
            {
                "id": 5,
                "name": "install mingw clang i686",
                "run": "pacman --noconfirm -S mingw-w64-i686-clang"
            },
            {
                "id": 6,
                "name": "install mingw clang x86_64",
                "run": "pacman --noconfirm -S mingw-w64-x86_64-clang"
            },
            {
                "id": 7,
                "name": "run mingw tests",
                "run": "make -v\nexport CC=${{ matrix.compiler }}\n$CC --version\nCFLAGS=\"${{ matrix.cflags }}\" make -j allzstd\necho \"Testing $CC ${{ matrix.msystem }}\"\nmake clean\nMSYS=\"\" make check\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Add MSBuild to PATH",
                "run": "microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce"
            },
            {
                "id": 3,
                "name": "Build and run tests",
                "run": "msbuild \"build\\VS2010\\zstd.sln\" /m /verbosity:minimal /property:PlatformToolset=v142 /t:Clean,Build /p:Platform=${{matrix.platform}} /p:Configuration=${{matrix.configuration}}\nCOPY build\\VS2010\\bin\\${{matrix.platform}}_${{matrix.configuration}}\\*.exe tests\\\nCD tests\nsh -e playTests.sh\n.\\fuzzer.exe -T2m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "git config --global core.autocrlf input"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cygwin/cygwin-install-action@006ad0b0946ca6d0a3ea2d4437677fa767392401"
            },
            {
                "id": 4,
                "name": "cygwin tests",
                "run": "export PATH=/usr/bin:$(cygpath ${SYSTEMROOT})/system32 && export CFLAGS=\"-Werror -O1\" && ls && make -j allzstd && make -C tests fuzzer && ./tests/fuzzer.exe -v -T1m"
            },
            {
                "id": 5,
                "name": "cygwin install test",
                "run": "make -j && make install"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "apt -y update\napt -y install --no-install-recommends gcc libc6-dev make pkg-config\n"
            },
            {
                "id": 3,
                "name": "Build and install",
                "run": "make -C lib install"
            },
            {
                "id": 4,
                "name": "Test pkg-config",
                "run": "cc -Wall -Wextra -Wpedantic -Werror -o simple examples/simple_compression.c $(pkg-config --cflags --libs libzstd)\n./simple LICENSE\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Versions Compatibility Test",
                "run": "make -C tests versionsTest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "make clangbuild",
                "run": "make clangbuild\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Build PGO Zstd with Clang",
                "run": "make -C programs zstd-pgo\n./programs/zstd -b\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Build PGO Zstd with GCC",
                "run": "make -C programs zstd-pgo\n./programs/zstd -b\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Build Zstd",
                "run": "make -j zstd V=1\nreadelf -n zstd\n"
            },
            {
                "id": 3,
                "name": "Get Intel SDE",
                "run": "curl -LO https://downloadmirror.intel.com/813591/sde-external-9.33.0-2024-01-07-lin.tar.xz\ntar xJvf sde-external-9.33.0-2024-01-07-lin.tar.xz\n"
            },
            {
                "id": 4,
                "name": "Configure Permissions",
                "run": "echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope\n"
            },
            {
                "id": 5,
                "name": "Run Under SDE",
                "run": "sde-external-9.33.0-2024-01-07-lin/sde -cet -cet-raise 0 -cet-endbr-exe -cet-stderr -cet-abort -- ./zstd -b3\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "sudo apt-get update\nsudo apt-get install libcurl4-gnutls-dev\n"
            },
            {
                "id": 5,
                "name": "Regression Test",
                "run": "make -C programs zstd\nmake -C tests/regression test\nmkdir -p $CIRCLE_ARTIFACTS\n./tests/regression/test                     \\\n    --cache  tests/regression/cache         \\\n    --output $CIRCLE_ARTIFACTS/results.csv  \\\n    --zstd   programs/zstd\necho \"NOTE: The new results.csv is uploaded as an artifact to this job\"\necho \"      If this fails, go to the Artifacts pane in CircleCI, \"\necho \"      download /tmp/circleci-artifacts/results.csv, and if they \"\necho \"      are still good, copy it into the repo and commit it.\"\necho \"> diff tests/regression/results.csv $CIRCLE_ARTIFACTS/results.csv\"\ndiff tests/regression/results.csv $CIRCLE_ARTIFACTS/results.csv\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Archive",
                "run": "# compute file name\nexport TAG=\"$(echo \"$GITHUB_REF\" | sed -n 's_^refs/tags/__p')\"\nif [ -z \"$TAG\" ]; then\n  echo \"action must be run on a tag. GITHUB_REF is not a tag: $GITHUB_REF\"\n  exit 1\nfi\n# Attempt to extract \"1.2.3\" from \"v1.2.3\" to maintain artifact name backwards compat.\n# Otherwise, degrade to using full tag.\nexport VERSION=\"$(echo \"$TAG\" | sed 's_^v\\([0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\)$_\\1_')\"\nexport ZSTD_VERSION=\"zstd-$VERSION\"\n\n# archive\ngit archive $TAG \\\n    --prefix $ZSTD_VERSION/ \\\n    --format tar \\\n    -o $ZSTD_VERSION.tar\n\n# Do the rest of the work in a sub-dir so we can glob everything we want to publish.\nmkdir artifacts/\nmv $ZSTD_VERSION.tar artifacts/\ncd artifacts/\n\n# compress\nzstd -k -19 $ZSTD_VERSION.tar\ngzip -k  -9 $ZSTD_VERSION.tar\n\n# we only publish the compressed tarballs\nrm $ZSTD_VERSION.tar\n\n# hash\nsha256sum $ZSTD_VERSION.tar.zst > $ZSTD_VERSION.tar.zst.sha256\nsha256sum $ZSTD_VERSION.tar.gz  > $ZSTD_VERSION.tar.gz.sha256\n\n# sign\nif [ -n \"$RELEASE_SIGNING_KEY\" ]; then\n  export GPG_BATCH_OPTS=\"--batch --no-use-agent --pinentry-mode loopback --no-tty --yes\"\n  echo \"$RELEASE_SIGNING_KEY\" | gpg $GPG_BATCH_OPTS --import\n  gpg $GPG_BATCH_OPTS --armor --sign --sign-with signing@zstd.net --detach-sig --passphrase \"$RELEASE_SIGNING_KEY_PASSPHRASE\" --output $ZSTD_VERSION.tar.zst.sig $ZSTD_VERSION.tar.zst\n  gpg $GPG_BATCH_OPTS --armor --sign --sign-with signing@zstd.net --detach-sig --passphrase \"$RELEASE_SIGNING_KEY_PASSPHRASE\" --output $ZSTD_VERSION.tar.gz.sig  $ZSTD_VERSION.tar.gz\nfi\n"
            },
            {
                "id": 3,
                "name": "Publish",
                "run": "skx/github-action-publish-binaries@b9ca5643b2f1d7371a6cba7f35333f1461bbc703"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@c7f9125735019aa87cfc361530512d50ea439c71"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "msys2/setup-msys2@d0e80f58dffbc64f6a3a1f43527d469b4fc7b6c8"
            },
            {
                "id": 3,
                "name": "display versions",
                "run": "make -v\ncc -v\n"
            },
            {
                "id": 4,
                "name": "Building zlib to static link",
                "run": "git clone --depth 1 --branch v1.2.11 https://github.com/madler/zlib\nmake -C zlib -f win32/Makefile.gcc libz.a\n"
            },
            {
                "id": 5,
                "name": "Building zstd programs",
                "run": "CPPFLAGS=-I../zlib LDFLAGS=../zlib/libz.a make -j allzstd MOREFLAGS=-static V=1\n"
            },
            {
                "id": 6,
                "name": "Create artifacts",
                "run": "./lib/dll/example/build_package.bat\nmv bin/ zstd-${{ github.ref_name }}-${{matrix.ziparch}}/\n7z a -tzip -mx9 zstd-${{ github.ref_name }}-${{matrix.ziparch}}.zip zstd-${{ github.ref_name }}-${{matrix.ziparch}}/\ncd ..\n"
            },
            {
                "id": 7,
                "name": "Publish zstd-$VERSION-${{matrix.ziparch}}.zip",
                "run": "actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3"
            }
        ],
        "facebook/infer": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ env.node-version }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Get yarn cache directory",
                "run": "echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 4,
                "name": "Restore yarn cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Install packages",
                "run": "yarn --frozen-lockfile"
            },
            {
                "id": 6,
                "name": "Deploy to GitHub Pages",
                "run": "git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\ngit config --global user.name \"${GITHUB_ACTOR}\"\necho \"machine github.com login ${GITHUB_ACTOR} password ${{ secrets.GITHUB_TOKEN }}\" > ~/.netrc\nGIT_USER=${GITHUB_ACTOR} yarn deploy\n"
            },
            {
                "id": 1,
                "name": "Create Release",
                "run": "actions/create-release@v1"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Required Apt Packages for Ubuntu",
                "run": "sudo apt install clang libmpfr-dev libsqlite3-dev ninja-build\nsudo apt clean\n"
            },
            {
                "id": 3,
                "name": "Install Required Brew Packages for MacOS",
                "run": "brew install automake jq ninja pkg-config lzlib zlib coreutils"
            },
            {
                "id": 4,
                "name": "Setup Java SDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 5,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 6,
                "name": "Get OS version",
                "run": "sersoft-gmbh/os-version-action@v1"
            },
            {
                "id": 7,
                "name": "Force the use of test dependencies",
                "run": "cp opam/infer-tests.opam.locked opam/infer.opam.locked"
            },
            {
                "id": 8,
                "name": "Use OCaml ${{ matrix.ocaml-compiler }}",
                "run": "ocaml/setup-ocaml@v2"
            },
            {
                "id": 9,
                "name": "Compute hash of clang installation",
                "run": "echo \"value=$(./facebook-clang-plugins/clang/setup.sh --clang-hash)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 10,
                "name": "Attempt to get clang from the cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 11,
                "name": "Record that the clang cache was hit",
                "run": "./facebook-clang-plugins/clang/setup.sh --only-record-install"
            },
            {
                "id": 12,
                "name": "Build clang on cache misses",
                "run": "./facebook-clang-plugins/clang/src/prepare_clang_src.sh\nCC=clang CXX=clang++ ./facebook-clang-plugins/clang/setup.sh --ninja --sequential-link\n"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "./build-infer.sh --yes --user-opam-switch"
            },
            {
                "id": 14,
                "name": "Step 14",
                "run": "./build-infer.sh --yes --user-opam-switch -- --disable-python-analyzers"
            },
            {
                "id": 15,
                "name": "Install ocamlformat",
                "run": "opam install --deps-only --locked opam/ocamlformat.opam.locked\nopam install ocamlformat.$(grep -e '^version:' ./opam/ocamlformat.opam.locked | cut -d ' ' -f 2 | tr -d \\\")\nopam exec -- ocamlformat --version\n"
            },
            {
                "id": 16,
                "name": "Test infer",
                "run": "make test -k NDKBUILD=no"
            },
            {
                "id": 17,
                "name": "Step 17",
                "run": "sudo make install BUILD_MODE=opt\n# restore permissions after root build\nsudo chown -R $USER: .\n"
            },
            {
                "id": 18,
                "name": "Build release tarball",
                "run": "./scripts/create_binary_release.sh \"$(echo '${{ github.ref }}' | rev | cut -d / -f 1 | rev)\"\n"
            },
            {
                "id": 19,
                "name": "Upload Release Asset",
                "run": "actions/upload-release-asset@v1"
            }
        ],
        "facebook/ThreatExchange": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run clang-format style check for C/C++ programs.",
                "run": "jidicula/clang-format-action@v4.6.2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "make",
                "run": "make"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/labeler@v5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run clang-format style check for C/C++ programs.",
                "run": "jidicula/clang-format-action@v4.6.2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "make",
                "run": "sudo apt-get update\nsudo apt-get install ffmpeg\nmake\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Run clang-format style check for C/C++ programs.",
                "run": "jidicula/clang-format-action@v4.11.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "sudo apt-get update\nsudo apt-get install -y make cmake ffmpeg libavdevice-dev libavfilter-dev libavformat-dev libavcodec-dev libswresample-dev libswscale-dev libavutil-dev\n"
            },
            {
                "id": 4,
                "name": "Make with address,leak,undefined sanitizer",
                "run": "rm -rf cpp/build\nmkdir cpp/build\ncd cpp/build\ncmake .. -DCMAKE_CXX_FLAGS=\"-O2 -fPIC -Wall -Wextra -Werror -Wno-unused-function -Wno-deprecated-declarations -fsanitize=address,leak,undefined\" -DCMAKE_EXE_LINKER_FLAGS=\"-fsanitize=thread,undefined\"\nmake\n"
            },
            {
                "id": 5,
                "name": "Test with address,leak,undefined sanitizer",
                "run": "python cpp/regtest.py -i ${GITHUB_WORKSPACE}/tmk/sample-videos\n"
            },
            {
                "id": 6,
                "name": "Make with thread,undefined sanitizer",
                "run": "rm -rf cpp/build\nmkdir cpp/build\ncd cpp/build\ncmake .. -DCMAKE_CXX_FLAGS=\"-O2 -fPIC -Wall -Wextra -Werror -Wno-unused-function -Wno-deprecated-declarations -fsanitize=thread,undefined\" -DCMAKE_EXE_LINKER_FLAGS=\"-fsanitize=address,leak,undefined\"\nmake\n"
            },
            {
                "id": 7,
                "name": "Test with thread,undefined sanitizer",
                "run": "python cpp/regtest.py -i ${GITHUB_WORKSPACE}/tmk/sample-videos\n"
            }
        ],
        "facebook/facebook-ruby-business-sdk": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Gem deploy",
                "run": "mkdir -p $HOME/.gem\ntouch $HOME/.gem/credentials\nchmod 0600 $HOME/.gem/credentials\nprintf -- \"---\\n:rubygems_api_key: ${RUBYGEMS_API_KEY}\\n\" > $HOME/.gem/credentials\ngem build *.gemspec\ngem push *.gem\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Before install",
                "run": "gem install bundler -v \"< 2.0\""
            },
            {
                "id": 4,
                "name": "Bundle install",
                "run": "bundle install"
            },
            {
                "id": 5,
                "name": "Gem build",
                "run": "gem build *.gemspec"
            }
        ],
        "facebook/fresco": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "nttld/setup-ndk@v1"
            },
            {
                "id": 3,
                "name": "Install JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Print debug info",
                "run": "echo \"Printing env PATH var\"\necho $PATH\necho \"Printing Gradle Wrapper version\"\n./gradlew --version\n"
            },
            {
                "id": 5,
                "name": "Build & run tests",
                "run": "./ci/build-and-test.sh"
            },
            {
                "id": 6,
                "name": "Copy Results",
                "run": "mkdir -p ./gh_actions/test-results/junit\nfind . -type f -regex \".*/build/test-results/.*xml\" -exec cp {} ./gh_actions/test-results/junit \\;\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gradle/actions/wrapper-validation@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Setup Android SDK",
                "run": "android-actions/setup-android@v3"
            },
            {
                "id": 4,
                "name": "Install NDK",
                "run": "nttld/setup-ndk@v1"
            },
            {
                "id": 5,
                "name": "Register NDK",
                "run": "echo $PATH\necho 'ndk.path=/opt/hostedtoolcache/ndk/r25c/x64' >> local.properties\n"
            },
            {
                "id": 6,
                "name": "Write GPG Sec Ring",
                "run": "echo '${{ secrets.GPG_KEY_CONTENTS }}' | base64 -d > /tmp/secring.gpg"
            },
            {
                "id": 7,
                "name": "Update gradle.properties",
                "run": "echo -e \"signing.secretKeyRingFile=/tmp/secring.gpg\\nsigning.keyId=${{ secrets.SIGNING_KEY_ID }}\\nsigning.password=${{ secrets.SIGNING_PASSWORD }}\\nmavenCentralPassword=${{ secrets.SONATYPE_NEXUS_PASSWORD }}\\nmavenCentralUsername=${{ secrets.SONATYPE_NEXUS_USERNAME }}\" >> gradle.properties"
            },
            {
                "id": 8,
                "name": "Upload Android Archives",
                "run": "./gradlew publish --no-daemon --no-parallel --info --stacktrace"
            },
            {
                "id": 9,
                "name": "Release and close",
                "run": "./gradlew closeAndReleaseRepository"
            },
            {
                "id": 10,
                "name": "Clean secrets",
                "run": "rm /tmp/secring.gpg"
            }
        ],
        "facebook/jscodeshift": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn --frozen-lockfile"
            },
            {
                "id": 4,
                "name": "Run test",
                "run": "yarn test"
            }
        ],
        "facebook/fbjs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 4,
                "name": "Run ${{ matrix.cmd }}",
                "run": "yarn run ${{ matrix.cmd }}"
            }
        ],
        "facebook/relay": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile --ignore-scripts"
            },
            {
                "id": 4,
                "name": "ESLint",
                "run": "yarn --ignore-engines run lint"
            },
            {
                "id": 5,
                "name": "Prettier",
                "run": "yarn --ignore-engines run prettier-check"
            },
            {
                "id": 6,
                "name": "Typecheck",
                "run": "yarn --ignore-engines run typecheck"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "yarn run jest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile --ignore-scripts"
            },
            {
                "id": 4,
                "name": "Test dependencies",
                "run": "yarn run test-dependencies"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "yarn run lint"
            },
            {
                "id": 6,
                "name": "Prettier",
                "run": "yarn run prettier-check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile --ignore-scripts"
            },
            {
                "id": 4,
                "name": "Flow",
                "run": "yarn run typecheck"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "cargo test --manifest-path=compiler/Cargo.toml --locked ${{ matrix.target.features && '--features' }} ${{ matrix.target.features }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Update fixture tests",
                "run": "./scripts/update-fixtures.sh"
            },
            {
                "id": 4,
                "name": "Build test project",
                "run": "cargo run --manifest-path=compiler/Cargo.toml --bin relay --release ${{ matrix.target.features && '--features' }} ${{ matrix.target.features }} ./compiler/test-project/relay.config.json"
            },
            {
                "id": 5,
                "name": "Build Relay unit-test artifacts",
                "run": "cargo run --manifest-path=compiler/Cargo.toml --bin relay --release ${{ matrix.target.features && '--features' }} ${{ matrix.target.features }} ./scripts/config.tests.json"
            },
            {
                "id": 6,
                "name": "Check working directory status",
                "run": "./scripts/check-git-status.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "rustfmt",
                "run": "grep -r --include \"*.rs\" --files-without-match \"@generated\" crates | xargs rustfmt --check --config=\"skip_children=true\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile --ignore-scripts"
            },
            {
                "id": 5,
                "name": "Set the compiler version when releasing the `main` branch",
                "run": "yarn gulp setCompilerMainVersion"
            },
            {
                "id": 6,
                "name": "Install packages",
                "run": "sudo apt install ${{ matrix.target.packages }} -y"
            },
            {
                "id": 7,
                "name": "Install cross",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 8,
                "name": "Build project",
                "run": "${{ matrix.target.cross && 'cross' || 'cargo' }} build --release --target ${{ matrix.target.target }} ${{ matrix.target.features && '--features' }} ${{ matrix.target.features }}"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile --ignore-scripts"
            },
            {
                "id": 4,
                "name": "Download artifact relay-bin-linux-x64",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 5,
                "name": "Download artifact relay-bin-linux-arm64",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 6,
                "name": "Download artifact relay-bin-macos-x64",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 7,
                "name": "Download artifact relay-bin-macos-arm64",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 8,
                "name": "Download artifact relay-bin-win-x64",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 9,
                "name": "Mark binaries as executable",
                "run": "chmod +x linux-x64/relay\nchmod +x linux-arm64/relay\nchmod +x macos-x64/relay\nchmod +x macos-arm64/relay\n"
            },
            {
                "id": 10,
                "name": "Build latest (main) version",
                "run": "yarn gulp mainrelease"
            },
            {
                "id": 11,
                "name": "Build release version",
                "run": "yarn gulp release"
            },
            {
                "id": 12,
                "name": "Publish to npm",
                "run": "for pkg in dist/*; do\n  npm publish \"$pkg\" ${TAG}\ndone\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Install wasm-pack",
                "run": "curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh"
            },
            {
                "id": 4,
                "name": "Build Compiler Playground Wasm NPM package",
                "run": "wasm-pack build --target web"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Set up Docusaurus Build Cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Download Compiler Explorer",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 5,
                "name": "Link Compiler Explorer",
                "run": "yarn link"
            },
            {
                "id": 6,
                "name": "Install and Build",
                "run": "yarn\nyarn link relay-compiler-playground\nyarn build\n"
            },
            {
                "id": 7,
                "name": "Deploy",
                "run": "JamesIves/github-pages-deploy-action@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "cargo check",
                "run": "cargo check --features vendored --manifest-path=compiler/Cargo.toml"
            },
            {
                "id": 4,
                "name": "pull-request",
                "run": "peter-evans/create-pull-request@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile --ignore-scripts"
            },
            {
                "id": 4,
                "name": "ESLint",
                "run": "yarn --ignore-engines run lint"
            },
            {
                "id": 5,
                "name": "Prettier",
                "run": "yarn --ignore-engines run prettier-check"
            },
            {
                "id": 6,
                "name": "Typecheck",
                "run": "yarn --ignore-engines run typecheck"
            },
            {
                "id": 7,
                "name": "Publish",
                "run": "yarn --ignore-engines vsce publish --pat ${{ secrets.VSCE_PAT }}"
            }
        ],
        "facebook/idb": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Deploying to GitHub Pages",
                "run": "git config --global user.email \"docusaurus-bot@users.noreply.github.com\"\ngit config --global user.name \"Website Deployment Script\"\necho \"machine github.com login docusaurus-bot password ${{ secrets.GITHUB_TOKEN }}\" > ~/.netrc\necho \"Deploying website...\"\ncd website && yarn install && GIT_USER=docusaurus-bot USE_SSH=false yarn deploy\n"
            }
        ],
        "facebook/SoLoader": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Buck build",
                "run": "passy/run-buck@v0.1.0"
            }
        ],
        "facebook/facebook-java-business-sdk": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Maven Central Repository",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Configure GPG Key",
                "run": "mkdir -p ~/.gnupg/\nprintf \"${GPG_SIGNING_KEY}\" | base64 --decode > ~/.gnupg/private.key\nmd5sum ~/.gnupg/private.key\ngpg --import --no-tty --batch --yes ~/.gnupg/private.key\necho use-agent >> ~/.gnupg/gpg.conf\necho pinentry-mode loopback >> ~/.gnupg/gpg.conf\necho allow-loopback-pinentry >> ~/.gnupg/gpg-agent.conf\necho RELOADAGENT | gpg-connect-agent\ngpg --list-keys\n"
            },
            {
                "id": 4,
                "name": "Configure Maven Credentials and GPG Key",
                "run": "./release.sh config_maven"
            },
            {
                "id": 5,
                "name": "Publish package",
                "run": "mvn -Djava.net.preferIPv6Addresses=true clean deploy --settings=\"./.github/workflows/settings.xml\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "mvn package"
            }
        ],
        "facebook/chef-cookbooks": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "bundle install"
            },
            {
                "id": 4,
                "name": "Run rspec",
                "run": "./scripts/run_chefspec"
            },
            {
                "id": 5,
                "name": "Run cookstyle",
                "run": "./scripts/run_cookstyle"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Chef",
                "run": "actionshub/chef-install@2.0.4"
            },
            {
                "id": 3,
                "name": "Run Kitchen",
                "run": "actionshub/test-kitchen@2.1.0"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Run Shellcheck",
                "run": "ludeeus/action-shellcheck@2.0.0"
            }
        ],
        "facebook/redex": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/build_debian"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/build_debian"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/build_debian"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/build_debian"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/build_debian"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup-build-and-test-windows"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup-build-and-test-windows"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v4.0.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/build_debian"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 4,
                "name": "Build website",
                "run": "yarn build"
            },
            {
                "id": 5,
                "name": "Deploy to GitHub Pages",
                "run": "peaceiris/actions-gh-pages@v3"
            }
        ],
        "facebook/FBRetainCycleDetector": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "./build.sh"
            }
        ],
        "facebook/sapling": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Show disk space at start",
                "run": "df -h"
            },
            {
                "id": 3,
                "name": "Free up disk space",
                "run": "sudo rm -rf /usr/local/lib/android"
            },
            {
                "id": 4,
                "name": "Show disk space after freeing up",
                "run": "df -h"
            },
            {
                "id": 5,
                "name": "Update system package info",
                "run": "sudo apt-get update"
            },
            {
                "id": 6,
                "name": "Install system deps",
                "run": "sudo python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive eden"
            },
            {
                "id": 7,
                "name": "Install packaging system deps",
                "run": "sudo python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive patchelf"
            },
            {
                "id": 8,
                "name": "Install Rust Stable",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 9,
                "name": "Fetch lmdb",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests lmdb"
            },
            {
                "id": 10,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests ninja"
            },
            {
                "id": 11,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests cmake"
            },
            {
                "id": 12,
                "name": "Fetch blake3",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests blake3"
            },
            {
                "id": 13,
                "name": "Fetch cpptoml",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests cpptoml"
            },
            {
                "id": 14,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fmt"
            },
            {
                "id": 15,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests gflags"
            },
            {
                "id": 16,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests glog"
            },
            {
                "id": 17,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests googletest"
            },
            {
                "id": 18,
                "name": "Fetch python-six",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests python-six"
            },
            {
                "id": 19,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zstd"
            },
            {
                "id": 20,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests boost"
            },
            {
                "id": 21,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests double-conversion"
            },
            {
                "id": 22,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libdwarf"
            },
            {
                "id": 23,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libevent"
            },
            {
                "id": 24,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests lz4"
            },
            {
                "id": 25,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests snappy"
            },
            {
                "id": 26,
                "name": "Fetch libgit2",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libgit2"
            },
            {
                "id": 27,
                "name": "Fetch python-ptyprocess",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests python-ptyprocess"
            },
            {
                "id": 28,
                "name": "Fetch pexpect",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests pexpect"
            },
            {
                "id": 29,
                "name": "Fetch bz2",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests bz2"
            },
            {
                "id": 30,
                "name": "Fetch python-filelock",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests python-filelock"
            },
            {
                "id": 31,
                "name": "Fetch python-toml",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests python-toml"
            },
            {
                "id": 32,
                "name": "Fetch re2",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests re2"
            },
            {
                "id": 33,
                "name": "Fetch rocksdb",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests rocksdb"
            },
            {
                "id": 34,
                "name": "Fetch sqlite3",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests sqlite3"
            },
            {
                "id": 35,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zlib"
            },
            {
                "id": 36,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests autoconf"
            },
            {
                "id": 37,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests automake"
            },
            {
                "id": 38,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libtool"
            },
            {
                "id": 39,
                "name": "Fetch nghttp2",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests nghttp2"
            },
            {
                "id": 40,
                "name": "Fetch libcurl",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libcurl"
            },
            {
                "id": 41,
                "name": "Fetch libffi",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libffi"
            },
            {
                "id": 42,
                "name": "Fetch ncurses",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests ncurses"
            },
            {
                "id": 43,
                "name": "Fetch python",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests python"
            },
            {
                "id": 44,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libsodium"
            },
            {
                "id": 45,
                "name": "Fetch libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libiberty"
            },
            {
                "id": 46,
                "name": "Fetch libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libunwind"
            },
            {
                "id": 47,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests xz"
            },
            {
                "id": 48,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests folly"
            },
            {
                "id": 49,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fizz"
            },
            {
                "id": 50,
                "name": "Fetch mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests mvfst"
            },
            {
                "id": 51,
                "name": "Fetch wangle",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests wangle"
            },
            {
                "id": 52,
                "name": "Fetch fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fbthrift"
            },
            {
                "id": 53,
                "name": "Fetch fb303",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fb303"
            },
            {
                "id": 54,
                "name": "Fetch rust-shed",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests rust-shed"
            },
            {
                "id": 55,
                "name": "Fetch edencommon",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests edencommon"
            },
            {
                "id": 56,
                "name": "Build lmdb",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests lmdb"
            },
            {
                "id": 57,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests ninja"
            },
            {
                "id": 58,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests cmake"
            },
            {
                "id": 59,
                "name": "Build blake3",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests blake3"
            },
            {
                "id": 60,
                "name": "Build cpptoml",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests cpptoml"
            },
            {
                "id": 61,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fmt"
            },
            {
                "id": 62,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests gflags"
            },
            {
                "id": 63,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests glog"
            },
            {
                "id": 64,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests googletest"
            },
            {
                "id": 65,
                "name": "Build python-six",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests python-six"
            },
            {
                "id": 66,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zstd"
            },
            {
                "id": 67,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests boost"
            },
            {
                "id": 68,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests double-conversion"
            },
            {
                "id": 69,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libdwarf"
            },
            {
                "id": 70,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libevent"
            },
            {
                "id": 71,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests lz4"
            },
            {
                "id": 72,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests snappy"
            },
            {
                "id": 73,
                "name": "Build libgit2",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libgit2"
            },
            {
                "id": 74,
                "name": "Build python-ptyprocess",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests python-ptyprocess"
            },
            {
                "id": 75,
                "name": "Build pexpect",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests pexpect"
            },
            {
                "id": 76,
                "name": "Build bz2",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests bz2"
            },
            {
                "id": 77,
                "name": "Build python-filelock",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests python-filelock"
            },
            {
                "id": 78,
                "name": "Build python-toml",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests python-toml"
            },
            {
                "id": 79,
                "name": "Build re2",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests re2"
            },
            {
                "id": 80,
                "name": "Build rocksdb",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests rocksdb"
            },
            {
                "id": 81,
                "name": "Build sqlite3",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests sqlite3"
            },
            {
                "id": 82,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zlib"
            },
            {
                "id": 83,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests autoconf"
            },
            {
                "id": 84,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests automake"
            },
            {
                "id": 85,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libtool"
            },
            {
                "id": 86,
                "name": "Build nghttp2",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests nghttp2"
            },
            {
                "id": 87,
                "name": "Build libcurl",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libcurl"
            },
            {
                "id": 88,
                "name": "Build libffi",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libffi"
            },
            {
                "id": 89,
                "name": "Build ncurses",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests ncurses"
            },
            {
                "id": 90,
                "name": "Build python",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests python"
            },
            {
                "id": 91,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libsodium"
            },
            {
                "id": 92,
                "name": "Build libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libiberty"
            },
            {
                "id": 93,
                "name": "Build libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libunwind"
            },
            {
                "id": 94,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests xz"
            },
            {
                "id": 95,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests folly"
            },
            {
                "id": 96,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fizz"
            },
            {
                "id": 97,
                "name": "Build mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests mvfst"
            },
            {
                "id": 98,
                "name": "Build wangle",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests wangle"
            },
            {
                "id": 99,
                "name": "Build fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fbthrift"
            },
            {
                "id": 100,
                "name": "Build fb303",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fb303"
            },
            {
                "id": 101,
                "name": "Build rust-shed",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests rust-shed"
            },
            {
                "id": 102,
                "name": "Build edencommon",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests edencommon"
            },
            {
                "id": 103,
                "name": "Build eden",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests --src-dir=. eden  --project-install-prefix eden:/usr/local"
            },
            {
                "id": 104,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fixup-dyn-deps --strip --src-dir=. eden _artifacts/linux  --project-install-prefix eden:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 105,
                "name": "Step 105",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 106,
                "name": "Show disk space at end",
                "run": "df -h"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run auth tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/auth/Cargo.toml"
            },
            {
                "id": 3,
                "name": "Run backingstore tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/backingstore/Cargo.toml"
            },
            {
                "id": 4,
                "name": "Run blackbox tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/blackbox/Cargo.toml"
            },
            {
                "id": 5,
                "name": "Run cliparser tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/cliparser/Cargo.toml"
            },
            {
                "id": 6,
                "name": "Run config/loader tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/config/loader/Cargo.toml"
            },
            {
                "id": 7,
                "name": "Run cpython-ext tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/cpython-ext/Cargo.toml"
            },
            {
                "id": 8,
                "name": "Run dag tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/dag/Cargo.toml"
            },
            {
                "id": 9,
                "name": "Run drawdag tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/drawdag/Cargo.toml"
            },
            {
                "id": 10,
                "name": "Run encoding tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/encoding/Cargo.toml"
            },
            {
                "id": 11,
                "name": "Run hgtime tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/hgtime/Cargo.toml"
            },
            {
                "id": 12,
                "name": "Run indexedlog tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/indexedlog/Cargo.toml"
            },
            {
                "id": 13,
                "name": "Run lz4-pyframe tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/lz4-pyframe/Cargo.toml"
            },
            {
                "id": 14,
                "name": "Run manifest tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/manifest/Cargo.toml"
            },
            {
                "id": 15,
                "name": "Run manifest-tree tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/manifest-tree/Cargo.toml"
            },
            {
                "id": 16,
                "name": "Run metalog tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/metalog/Cargo.toml"
            },
            {
                "id": 17,
                "name": "Run mincode tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/mincode/Cargo.toml"
            },
            {
                "id": 18,
                "name": "Run minibench tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/minibench/Cargo.toml"
            },
            {
                "id": 19,
                "name": "Run minibytes tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/minibytes/Cargo.toml"
            },
            {
                "id": 20,
                "name": "Run mpatch tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/mpatch/Cargo.toml"
            },
            {
                "id": 21,
                "name": "Run mpatch-sys tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/mpatch-sys/Cargo.toml"
            },
            {
                "id": 22,
                "name": "Run mutationstore tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/mutationstore/Cargo.toml"
            },
            {
                "id": 23,
                "name": "Run nodemap tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/nodemap/Cargo.toml"
            },
            {
                "id": 24,
                "name": "Run pathmatcher tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/pathmatcher/Cargo.toml"
            },
            {
                "id": 25,
                "name": "Run procinfo tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/procinfo/Cargo.toml"
            },
            {
                "id": 26,
                "name": "Run radixbuf tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/radixbuf/Cargo.toml"
            },
            {
                "id": 27,
                "name": "Run renderdag tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/renderdag/Cargo.toml"
            },
            {
                "id": 28,
                "name": "Run revisionstore tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/revisionstore/Cargo.toml"
            },
            {
                "id": 29,
                "name": "Run tracing-collector tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/tracing-collector/Cargo.toml"
            },
            {
                "id": 30,
                "name": "Run treestate tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/treestate/Cargo.toml"
            },
            {
                "id": 31,
                "name": "Run types tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/types/Cargo.toml"
            },
            {
                "id": 32,
                "name": "Run util tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/util/Cargo.toml"
            },
            {
                "id": 33,
                "name": "Run vlqencoding tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/vlqencoding/Cargo.toml"
            },
            {
                "id": 34,
                "name": "Run workingcopy tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/workingcopy/Cargo.toml"
            },
            {
                "id": 35,
                "name": "Run xdiff tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/xdiff/Cargo.toml"
            },
            {
                "id": 36,
                "name": "Run xdiff-sys tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/xdiff-sys/Cargo.toml"
            },
            {
                "id": 37,
                "name": "Run zstdelta tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/zstdelta/Cargo.toml"
            },
            {
                "id": 38,
                "name": "Run zstore tests",
                "run": "cargo test --verbose --target-dir target --manifest-path eden/scm/lib/zstore/Cargo.toml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Show disk space at start",
                "run": "df -h"
            },
            {
                "id": 3,
                "name": "Free up disk space",
                "run": "sudo rm -rf /usr/local/lib/android"
            },
            {
                "id": 4,
                "name": "Show disk space after freeing up",
                "run": "df -h"
            },
            {
                "id": 5,
                "name": "Update system package info",
                "run": "sudo apt-get update"
            },
            {
                "id": 6,
                "name": "Install system deps",
                "run": "sudo python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive mononoke"
            },
            {
                "id": 7,
                "name": "Install packaging system deps",
                "run": "sudo python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive patchelf"
            },
            {
                "id": 8,
                "name": "Install Rust Stable",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 9,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests ninja"
            },
            {
                "id": 10,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests cmake"
            },
            {
                "id": 11,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fmt"
            },
            {
                "id": 12,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests googletest"
            },
            {
                "id": 13,
                "name": "Fetch python-six",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests python-six"
            },
            {
                "id": 14,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zstd"
            },
            {
                "id": 15,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests boost"
            },
            {
                "id": 16,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests double-conversion"
            },
            {
                "id": 17,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests gflags"
            },
            {
                "id": 18,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests glog"
            },
            {
                "id": 19,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libdwarf"
            },
            {
                "id": 20,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libevent"
            },
            {
                "id": 21,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests lz4"
            },
            {
                "id": 22,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests snappy"
            },
            {
                "id": 23,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zlib"
            },
            {
                "id": 24,
                "name": "Fetch bz2",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests bz2"
            },
            {
                "id": 25,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests autoconf"
            },
            {
                "id": 26,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests automake"
            },
            {
                "id": 27,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libtool"
            },
            {
                "id": 28,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libsodium"
            },
            {
                "id": 29,
                "name": "Fetch libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libiberty"
            },
            {
                "id": 30,
                "name": "Fetch libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libunwind"
            },
            {
                "id": 31,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests xz"
            },
            {
                "id": 32,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests folly"
            },
            {
                "id": 33,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fizz"
            },
            {
                "id": 34,
                "name": "Fetch mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests mvfst"
            },
            {
                "id": 35,
                "name": "Fetch libffi",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libffi"
            },
            {
                "id": 36,
                "name": "Fetch ncurses",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests ncurses"
            },
            {
                "id": 37,
                "name": "Fetch python",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests python"
            },
            {
                "id": 38,
                "name": "Fetch wangle",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests wangle"
            },
            {
                "id": 39,
                "name": "Fetch fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fbthrift"
            },
            {
                "id": 40,
                "name": "Fetch fb303",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fb303"
            },
            {
                "id": 41,
                "name": "Fetch rust-shed",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests rust-shed"
            },
            {
                "id": 42,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests ninja"
            },
            {
                "id": 43,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests cmake"
            },
            {
                "id": 44,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fmt"
            },
            {
                "id": 45,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests googletest"
            },
            {
                "id": 46,
                "name": "Build python-six",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests python-six"
            },
            {
                "id": 47,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zstd"
            },
            {
                "id": 48,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests boost"
            },
            {
                "id": 49,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests double-conversion"
            },
            {
                "id": 50,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests gflags"
            },
            {
                "id": 51,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests glog"
            },
            {
                "id": 52,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libdwarf"
            },
            {
                "id": 53,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libevent"
            },
            {
                "id": 54,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests lz4"
            },
            {
                "id": 55,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests snappy"
            },
            {
                "id": 56,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zlib"
            },
            {
                "id": 57,
                "name": "Build bz2",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests bz2"
            },
            {
                "id": 58,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests autoconf"
            },
            {
                "id": 59,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests automake"
            },
            {
                "id": 60,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libtool"
            },
            {
                "id": 61,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libsodium"
            },
            {
                "id": 62,
                "name": "Build libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libiberty"
            },
            {
                "id": 63,
                "name": "Build libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libunwind"
            },
            {
                "id": 64,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests xz"
            },
            {
                "id": 65,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests folly"
            },
            {
                "id": 66,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fizz"
            },
            {
                "id": 67,
                "name": "Build mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests mvfst"
            },
            {
                "id": 68,
                "name": "Build libffi",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libffi"
            },
            {
                "id": 69,
                "name": "Build ncurses",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests ncurses"
            },
            {
                "id": 70,
                "name": "Build python",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests python"
            },
            {
                "id": 71,
                "name": "Build wangle",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests wangle"
            },
            {
                "id": 72,
                "name": "Build fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fbthrift"
            },
            {
                "id": 73,
                "name": "Build fb303",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fb303"
            },
            {
                "id": 74,
                "name": "Build rust-shed",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests rust-shed"
            },
            {
                "id": 75,
                "name": "Build mononoke",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --src-dir=. mononoke  --project-install-prefix mononoke:/usr/local"
            },
            {
                "id": 76,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fixup-dyn-deps --strip --src-dir=. mononoke _artifacts/linux  --project-install-prefix mononoke:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 77,
                "name": "Step 77",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 78,
                "name": "Test mononoke",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages test --src-dir=. mononoke  --project-install-prefix mononoke:/usr/local"
            },
            {
                "id": 79,
                "name": "Show disk space at end",
                "run": "df -h"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Show disk space at start",
                "run": "df -h"
            },
            {
                "id": 3,
                "name": "Free up disk space",
                "run": "sudo rm -rf /usr/local/lib/android"
            },
            {
                "id": 4,
                "name": "Show disk space after freeing up",
                "run": "df -h"
            },
            {
                "id": 5,
                "name": "Install system deps",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive mononoke"
            },
            {
                "id": 6,
                "name": "Install Rust Stable",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 7,
                "name": "Fetch openssl",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests openssl"
            },
            {
                "id": 8,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests ninja"
            },
            {
                "id": 9,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests cmake"
            },
            {
                "id": 10,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fmt"
            },
            {
                "id": 11,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests googletest"
            },
            {
                "id": 12,
                "name": "Fetch python-six",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests python-six"
            },
            {
                "id": 13,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zstd"
            },
            {
                "id": 14,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests boost"
            },
            {
                "id": 15,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests double-conversion"
            },
            {
                "id": 16,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests gflags"
            },
            {
                "id": 17,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests glog"
            },
            {
                "id": 18,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libdwarf"
            },
            {
                "id": 19,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libevent"
            },
            {
                "id": 20,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests lz4"
            },
            {
                "id": 21,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests snappy"
            },
            {
                "id": 22,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zlib"
            },
            {
                "id": 23,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests autoconf"
            },
            {
                "id": 24,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests automake"
            },
            {
                "id": 25,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libtool"
            },
            {
                "id": 26,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libsodium"
            },
            {
                "id": 27,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests xz"
            },
            {
                "id": 28,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests folly"
            },
            {
                "id": 29,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fizz"
            },
            {
                "id": 30,
                "name": "Fetch mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests mvfst"
            },
            {
                "id": 31,
                "name": "Fetch wangle",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests wangle"
            },
            {
                "id": 32,
                "name": "Fetch fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fbthrift"
            },
            {
                "id": 33,
                "name": "Fetch fb303",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fb303"
            },
            {
                "id": 34,
                "name": "Fetch rust-shed",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests rust-shed"
            },
            {
                "id": 35,
                "name": "Build openssl",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests openssl"
            },
            {
                "id": 36,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests ninja"
            },
            {
                "id": 37,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests cmake"
            },
            {
                "id": 38,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fmt"
            },
            {
                "id": 39,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests googletest"
            },
            {
                "id": 40,
                "name": "Build python-six",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests python-six"
            },
            {
                "id": 41,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zstd"
            },
            {
                "id": 42,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests boost"
            },
            {
                "id": 43,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests double-conversion"
            },
            {
                "id": 44,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests gflags"
            },
            {
                "id": 45,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests glog"
            },
            {
                "id": 46,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libdwarf"
            },
            {
                "id": 47,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libevent"
            },
            {
                "id": 48,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests lz4"
            },
            {
                "id": 49,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests snappy"
            },
            {
                "id": 50,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests zlib"
            },
            {
                "id": 51,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests autoconf"
            },
            {
                "id": 52,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests automake"
            },
            {
                "id": 53,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libtool"
            },
            {
                "id": 54,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests libsodium"
            },
            {
                "id": 55,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests xz"
            },
            {
                "id": 56,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests folly"
            },
            {
                "id": 57,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fizz"
            },
            {
                "id": 58,
                "name": "Build mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests mvfst"
            },
            {
                "id": 59,
                "name": "Build wangle",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests wangle"
            },
            {
                "id": 60,
                "name": "Build fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fbthrift"
            },
            {
                "id": 61,
                "name": "Build fb303",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests fb303"
            },
            {
                "id": 62,
                "name": "Build rust-shed",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests rust-shed"
            },
            {
                "id": 63,
                "name": "Build mononoke",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --src-dir=. mononoke  --project-install-prefix mononoke:/usr/local"
            },
            {
                "id": 64,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fixup-dyn-deps --src-dir=. mononoke _artifacts/mac  --project-install-prefix mononoke:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 65,
                "name": "Step 65",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 66,
                "name": "Test mononoke",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages test --src-dir=. mononoke  --project-install-prefix mononoke:/usr/local"
            },
            {
                "id": 67,
                "name": "Show disk space at end",
                "run": "df -h"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --prefer-offline"
            },
            {
                "id": 4,
                "name": "GraphQL/TextMate codegen",
                "run": "yarn codegen"
            },
            {
                "id": 5,
                "name": "ESLint",
                "run": "yarn eslint"
            },
            {
                "id": 6,
                "name": "Unit tests",
                "run": "yarn test --watchAll=false"
            },
            {
                "id": 7,
                "name": "Build the static site",
                "run": "yarn release"
            },
            {
                "id": 8,
                "name": "Deploy",
                "run": "peaceiris/actions-gh-pages@v3"
            },
            {
                "id": 1,
                "name": "Install fb-watchman",
                "run": "curl -fsSL https://github.com/facebook/watchman/releases/download/v2023.09.18.00/watchman_ubuntu20.04_v2023.09.18.00.deb -o watchman.deb && apt -y -f install ./watchman.deb"
            },
            {
                "id": 2,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 4,
                "name": "yarn install",
                "run": "yarn install --prefer-offline"
            },
            {
                "id": 5,
                "name": "Run addons/verify-addons-folder.py",
                "run": "./verify-addons-folder.py"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "set-env SAPLING_VERSION",
                "run": "echo \"SAPLING_VERSION=$(ci/tag-name.sh)\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Tap homebrew-core",
                "run": "brew tap homebrew/core"
            },
            {
                "id": 5,
                "name": "Prepare build environment",
                "run": "eden/scm/packaging/mac/prepare_formula.py \\\n-t aarch64-apple-darwin \\\n-r ${{ env.SAPLING_VERSION }} \\\n-o $(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula/s/sapling.rb"
            },
            {
                "id": 6,
                "name": "Install and build Sapling bottle",
                "run": "HOMEBREW_NO_INSTALL_FROM_API=1 HOMEBREW_FAIL_LOG_LINES=100 brew install --build-bottle sapling"
            },
            {
                "id": 7,
                "name": "Create Sapling bottle",
                "run": "HOMEBREW_NO_INSTALL_FROM_API=1 brew bottle sapling"
            },
            {
                "id": 8,
                "name": "Rename bottle to some platform specific name",
                "run": "mv sapling*ventura.bottle*.tar.gz sapling_${{ env.SAPLING_VERSION }}.arm64_ventura.bottle.tar.gz"
            },
            {
                "id": 9,
                "name": "Upload Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "Download Artifact",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Create pre-release",
                "run": "bash ci/retry.sh bash ci/create-release.sh $(ci/tag-name.sh)"
            },
            {
                "id": 5,
                "name": "Upload Release",
                "run": "bash ci/retry.sh gh release upload --clobber $(ci/tag-name.sh) sapling*ventura.bottle*.tar.gz"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "set-env SAPLING_VERSION",
                "run": "echo \"SAPLING_VERSION=$(ci/tag-name.sh)\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Tap homebrew-core",
                "run": "brew tap homebrew/core"
            },
            {
                "id": 5,
                "name": "Prepare build environment",
                "run": "eden/scm/packaging/mac/prepare_formula.py \\\n-t x86_64-apple-darwin \\\n-r ${{ env.SAPLING_VERSION }} \\\n-o $(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula/s/sapling.rb"
            },
            {
                "id": 6,
                "name": "Install and build Sapling bottle",
                "run": "HOMEBREW_NO_INSTALL_FROM_API=1 HOMEBREW_FAIL_LOG_LINES=100 brew install --build-bottle sapling"
            },
            {
                "id": 7,
                "name": "Create Sapling bottle",
                "run": "HOMEBREW_NO_INSTALL_FROM_API=1 brew bottle sapling"
            },
            {
                "id": 8,
                "name": "Rename bottle to some platform specific name",
                "run": "mv sapling*monterey.bottle*.tar.gz sapling_${{ env.SAPLING_VERSION }}.monterey.bottle.tar.gz"
            },
            {
                "id": 9,
                "name": "Upload Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "Download Artifact",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Create pre-release",
                "run": "bash ci/retry.sh bash ci/create-release.sh $(ci/tag-name.sh)"
            },
            {
                "id": 5,
                "name": "Upload Release",
                "run": "bash ci/retry.sh gh release upload --clobber $(ci/tag-name.sh) sapling*monterey.bottle*.tar.gz"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "rustup",
                "run": "rustup default stable"
            },
            {
                "id": 4,
                "name": "set-env DEB_UPSTREAM_VERSION",
                "run": "echo \"DEB_UPSTREAM_VERSION=$(ci/tag-name.sh)\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "set-env SAPLING_VERSION",
                "run": "echo \"SAPLING_VERSION=$(ci/tag-name.sh)\" >> $GITHUB_ENV"
            },
            {
                "id": 6,
                "name": "Create .deb",
                "run": "${{ format('VERSION={0} make deb', env.DEB_UPSTREAM_VERSION) }}"
            },
            {
                "id": 7,
                "name": "Rename .deb",
                "run": "${{ format('mv sapling_{0}_amd64.deb sapling_{0}_amd64.Ubuntu20.04.deb', env.DEB_UPSTREAM_VERSION, env.DEB_UPSTREAM_VERSION) }}"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and Push Docker Image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "rustup",
                "run": "rustup default stable"
            },
            {
                "id": 4,
                "name": "set-env DEB_UPSTREAM_VERSION",
                "run": "echo \"DEB_UPSTREAM_VERSION=$(ci/tag-name.sh)\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "set-env SAPLING_VERSION",
                "run": "echo \"SAPLING_VERSION=$(ci/tag-name.sh)\" >> $GITHUB_ENV"
            },
            {
                "id": 6,
                "name": "Create .deb",
                "run": "${{ format('VERSION={0} make deb', env.DEB_UPSTREAM_VERSION) }}"
            },
            {
                "id": 7,
                "name": "Rename .deb",
                "run": "${{ format('mv sapling_{0}_amd64.deb sapling_{0}_amd64.Ubuntu20.04.deb', env.DEB_UPSTREAM_VERSION, env.DEB_UPSTREAM_VERSION) }}"
            },
            {
                "id": 8,
                "name": "Upload Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "Download Artifact",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Create pre-release",
                "run": "bash ci/retry.sh bash ci/create-release.sh $(ci/tag-name.sh)"
            },
            {
                "id": 5,
                "name": "Upload Release",
                "run": "bash ci/retry.sh gh release upload --clobber $(ci/tag-name.sh) sapling_*.deb"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "rustup",
                "run": "rustup default stable"
            },
            {
                "id": 4,
                "name": "set-env DEB_UPSTREAM_VERSION",
                "run": "echo \"DEB_UPSTREAM_VERSION=$(ci/tag-name.sh)\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "set-env SAPLING_VERSION",
                "run": "echo \"SAPLING_VERSION=$(ci/tag-name.sh)\" >> $GITHUB_ENV"
            },
            {
                "id": 6,
                "name": "Create .deb",
                "run": "${{ format('VERSION={0} make deb', env.DEB_UPSTREAM_VERSION) }}"
            },
            {
                "id": 7,
                "name": "Rename .deb",
                "run": "${{ format('mv sapling_{0}_amd64.deb sapling_{0}_amd64.Ubuntu22.04.deb', env.DEB_UPSTREAM_VERSION, env.DEB_UPSTREAM_VERSION) }}"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and Push Docker Image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "rustup",
                "run": "rustup default stable"
            },
            {
                "id": 4,
                "name": "set-env DEB_UPSTREAM_VERSION",
                "run": "echo \"DEB_UPSTREAM_VERSION=$(ci/tag-name.sh)\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "set-env SAPLING_VERSION",
                "run": "echo \"SAPLING_VERSION=$(ci/tag-name.sh)\" >> $GITHUB_ENV"
            },
            {
                "id": 6,
                "name": "Create .deb",
                "run": "${{ format('VERSION={0} make deb', env.DEB_UPSTREAM_VERSION) }}"
            },
            {
                "id": 7,
                "name": "Rename .deb",
                "run": "${{ format('mv sapling_{0}_amd64.deb sapling_{0}_amd64.Ubuntu22.04.deb', env.DEB_UPSTREAM_VERSION, env.DEB_UPSTREAM_VERSION) }}"
            },
            {
                "id": 8,
                "name": "Upload Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "Download Artifact",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Create pre-release",
                "run": "bash ci/retry.sh bash ci/create-release.sh $(ci/tag-name.sh)"
            },
            {
                "id": 5,
                "name": "Upload Release",
                "run": "bash ci/retry.sh gh release upload --clobber $(ci/tag-name.sh) sapling_*.deb"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "rustup",
                "run": "rustup default stable"
            },
            {
                "id": 4,
                "name": "Support longpaths",
                "run": "git config --system core.longpaths true"
            },
            {
                "id": 5,
                "name": "openssl",
                "run": "vcpkg install openssl:x64-windows-static-md"
            },
            {
                "id": 6,
                "name": "integrate vcpkg",
                "run": "vcpkg integrate install"
            },
            {
                "id": 7,
                "name": "set-env SAPLING_VERSION",
                "run": "echo \"SAPLING_VERSION=$(ci/tag-name.sh)\" >> $GITHUB_ENV"
            },
            {
                "id": 8,
                "name": "set-env OPENSSL_DIR",
                "run": "echo \"OPENSSL_DIR=C:/vcpkg/packages/openssl_x64-windows-static-md\" >> $GITHUB_ENV"
            },
            {
                "id": 9,
                "name": "set-env OPENSSL_LIB_DIR",
                "run": "echo \"OPENSSL_LIB_DIR=C:/vcpkg/packages/openssl_x64-windows-static-md/lib\" >> $GITHUB_ENV"
            },
            {
                "id": 10,
                "name": "set-env OPENSSL_INCLUDE_DIR",
                "run": "echo \"OPENSSL_INCLUDE_DIR=C:/vcpkg/packages/openssl_x64-windows-static-md/include\" >> $GITHUB_ENV"
            },
            {
                "id": 11,
                "name": "build and zip",
                "run": "python3 ./eden/scm/packaging/windows/build_windows_zip.py"
            },
            {
                "id": 12,
                "name": "rename .zip",
                "run": "${{ format('Rename-Item sapling_windows_amd64.zip -NewName sapling_windows_{0}_amd64.zip', env.SAPLING_VERSION) }}"
            },
            {
                "id": 13,
                "name": "Upload Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Grant Access",
                "run": "git config --global --add safe.directory \"$PWD\""
            },
            {
                "id": 3,
                "name": "Download Artifact",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Create pre-release",
                "run": "bash ci/retry.sh bash ci/create-release.sh $(ci/tag-name.sh)"
            },
            {
                "id": 5,
                "name": "Upload Release",
                "run": "bash ci/retry.sh gh release upload --clobber $(ci/tag-name.sh) sapling_windows_*.zip"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Node",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 4,
                "name": "Download latest Sapling release",
                "run": "${{ format('gh release download --pattern \\*.Ubuntu22.04.deb --repo {0}', github.repository) }}"
            },
            {
                "id": 5,
                "name": "Install Sapling",
                "run": "sudo apt install -y ./*.Ubuntu22.04.deb"
            },
            {
                "id": 6,
                "name": "Write out release data",
                "run": "${{ format('./scripts/gen_release_data.py --repo {0} --out ./src/rawReleaseData.ts', github.repository) }}"
            },
            {
                "id": 7,
                "name": "Generate docstring docs",
                "run": "./scripts/generate-command-markdown.py --full-build"
            },
            {
                "id": 8,
                "name": "Build website",
                "run": "yarn build"
            },
            {
                "id": 9,
                "name": "Deploy",
                "run": "peaceiris/actions-gh-pages@v3"
            }
        ],
        "facebook/create-react-app": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm ci --prefer-offline"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "npm run build"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup node",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm ci --prefer-offline"
            },
            {
                "id": 4,
                "name": "Install yarn",
                "run": "npm i -g yarn"
            },
            {
                "id": 5,
                "name": "Run integration tests",
                "run": "npm run test:integration"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install",
                "run": "npm ci --prefer-offline"
            },
            {
                "id": 4,
                "name": "Initialize Global Git config",
                "run": "git config --global core.autocrlf false\ngit config --global user.name \"Create React App\"\ngit config --global user.email \"cra@email.com\"\n"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "${{ inputs.testScript }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install",
                "run": "npm ci --prefer-offline"
            },
            {
                "id": 4,
                "name": "Alex",
                "run": "npm run alex"
            },
            {
                "id": 5,
                "name": "Prettier",
                "run": "npm run prettier -- --list-different"
            },
            {
                "id": 6,
                "name": "Eslint",
                "run": "npm run eslint -- --max-warnings 0"
            }
        ],
        "facebook/prophet": [
            {
                "id": 1,
                "name": "Set environment variables (Windows)",
                "run": "(Get-ItemProperty \"HKLM:System\\CurrentControlSet\\Control\\FileSystem\").LongPathsEnabled\n$os_version = (Get-CimInstance Win32_OperatingSystem).version\nEcho \"OS_VERSION=$os_version\" >> $env:GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Restore RTools40",
                "run": "actions/cache@v3"
            },
            {
                "id": 5,
                "name": "Install and test",
                "run": "cd python\npython -m pip install -U --editable \".[dev,parallel]\"\npython -m pytest prophet/tests/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "r-lib/actions/setup-pandoc@v2"
            },
            {
                "id": 3,
                "name": "Set up R",
                "run": "r-lib/actions/setup-r@v2"
            },
            {
                "id": 4,
                "name": "Install remotes",
                "run": "install.packages('remotes')\n"
            },
            {
                "id": 5,
                "name": "Query dependencies",
                "run": "saveRDS(remotes::dev_package_deps(pkgdir = \"R/\", dependencies = TRUE), \".github/depends.Rds\", version = 2)\nwriteLines(sprintf(\"R-%i.%i\", getRversion()$major, getRversion()$minor), \".github/R-version\")\n"
            },
            {
                "id": 6,
                "name": "Restore R package cache",
                "run": "actions/cache@v3"
            },
            {
                "id": 7,
                "name": "Install system dependencies",
                "run": "while read -r cmd\ndo\n  eval sudo $cmd\ndone < <(Rscript -e 'writeLines(remotes::system_requirements(os = \"ubuntu\", os_release = \"20.04\", path = \"R/\"))')\n"
            },
            {
                "id": 8,
                "name": "Install dependencies",
                "run": "remotes::install_deps(pkgdir = \"R/\", dependencies = NA)\nremotes::install_cran(c(\"rcmdcheck\", \"knitr\", \"testthat\", \"readr\", \"rmarkdown\"))\ninstall.packages(c(\"cmdstanr\", \"posterior\"), repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\")))\n"
            },
            {
                "id": 9,
                "name": "Check",
                "run": "r-lib/actions/check-r-package@v2"
            },
            {
                "id": 1,
                "name": "Set environment variables (Windows)",
                "run": "(Get-ItemProperty \"HKLM:System\\CurrentControlSet\\Control\\FileSystem\").LongPathsEnabled\n$os_version = (Get-CimInstance Win32_OperatingSystem).version\nEcho \"OS_VERSION=$os_version\" >> $env:GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Checkout repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install pipx",
                "run": "brew install pipx\npipx ensurepath\n"
            },
            {
                "id": 4,
                "name": "Restore RTools40",
                "run": "actions/cache@v3"
            },
            {
                "id": 5,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 6,
                "name": "Build wheels",
                "run": "pypa/cibuildwheel@v2.16.2"
            },
            {
                "id": 7,
                "name": "Upload wheel as artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pipx run build --sdist"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Download all artifacts",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 2,
                "name": "Copy artifacts to dist/ folder",
                "run": "find . -name 'artifact-*' -exec unzip '{}' \\;\nmkdir -p dist/\nfind . -name '*.tar.gz' -exec mv '{}' dist/ \\;\nfind . -name '*.whl' -exec mv '{}' dist/ \\;\n"
            },
            {
                "id": 3,
                "name": "Upload",
                "run": "pypa/gh-action-pypi-publish@v1.4.2"
            }
        ],
        "facebook/metro": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ env.node-version }}",
                "run": "actions/setup-node@v4.0.1"
            },
            {
                "id": 3,
                "name": "Get yarn cache directory",
                "run": "echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 4,
                "name": "Restore yarn cache",
                "run": "actions/cache@v3.3.2"
            },
            {
                "id": 5,
                "name": "Install packages",
                "run": "yarn --frozen-lockfile"
            },
            {
                "id": 6,
                "name": "Deploy to GitHub Pages",
                "run": "git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\ngit config --global user.name \"${GITHUB_ACTOR}\"\necho \"machine github.com login ${GITHUB_ACTOR} password ${{ secrets.GITHUB_TOKEN }}\" > ~/.netrc\nGIT_USER=${GITHUB_ACTOR} yarn deploy\n"
            }
        ],
        "facebook/litho": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Set up GCC",
                "run": "egor-tensin/setup-gcc@v1"
            },
            {
                "id": 4,
                "name": "Setup NDK",
                "run": "nttld/setup-ndk@v1"
            },
            {
                "id": 5,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 6,
                "name": "Gradle caches",
                "run": "actions/cache@v3"
            },
            {
                "id": 7,
                "name": "Gradle wrapper caches",
                "run": "actions/cache@v3"
            },
            {
                "id": 8,
                "name": "Fetch buck",
                "run": "(rm -rf buck && mkdir buck && \\\nwget https://jitpack.io/com/github/facebook/buck/v2022.05.05.01/buck-v2022.05.05.01-java11.pex && \\\nmv buck-v2022.05.05.01-java11.pex buck/buck && \\\nchmod +x buck/buck && \\\nls -l buck)\n"
            },
            {
                "id": 9,
                "name": "Build everything",
                "run": "BUCK_PATH=`realpath buck/buck` ./gradlew assemble --stacktrace --no-daemon"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Set up GCC",
                "run": "egor-tensin/setup-gcc@v1"
            },
            {
                "id": 4,
                "name": "Setup NDK",
                "run": "nttld/setup-ndk@v1"
            },
            {
                "id": 5,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 6,
                "name": "Gradle caches",
                "run": "actions/cache@v3"
            },
            {
                "id": 7,
                "name": "Gradle wrapper caches",
                "run": "actions/cache@v3"
            },
            {
                "id": 8,
                "name": "Fetch buck",
                "run": "(rm -rf buck && mkdir buck && \\\nwget https://jitpack.io/com/github/facebook/buck/v2022.05.05.01/buck-v2022.05.05.01-java11.pex && \\\nmv buck-v2022.05.05.01-java11.pex buck/buck && \\\nchmod +x buck/buck && \\\nls -l buck)\n"
            },
            {
                "id": 9,
                "name": "Run tests",
                "run": "BUCK_PATH=`realpath buck/buck` ./gradlew test -x :litho-intellij-plugin:test --stacktrace --no-daemon"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Check if SNAPSHOT version",
                "run": "echo \"IS_SNAPSHOT=`grep 'VERSION_NAME=[0-9\\.]\\+-SNAPSHOT' gradle.properties)`\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Set up GCC",
                "run": "egor-tensin/setup-gcc@v1"
            },
            {
                "id": 4,
                "name": "Setup NDK",
                "run": "nttld/setup-ndk@v1"
            },
            {
                "id": 5,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 6,
                "name": "Gradle caches",
                "run": "actions/cache@v3"
            },
            {
                "id": 7,
                "name": "Gradle wrapper caches",
                "run": "actions/cache@v3"
            },
            {
                "id": 8,
                "name": "Fetch buck",
                "run": "(rm -rf buck && mkdir buck && \\\nwget https://jitpack.io/com/github/facebook/buck/v2022.05.05.01/buck-v2022.05.05.01-java11.pex && \\\nmv buck-v2022.05.05.01-java11.pex buck/buck && \\\nchmod +x buck/buck && \\\nls -l buck)\n"
            },
            {
                "id": 9,
                "name": "Publish Snapshot",
                "run": "BUCK_PATH=`realpath buck/buck` ./gradlew uploadArchives --stacktrace"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Gradle caches",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Gradle wrapper caches",
                "run": "actions/cache@v3"
            },
            {
                "id": 5,
                "name": "Generate Reference Docs",
                "run": "./gradlew dokkaHtmlMultiModule"
            },
            {
                "id": 6,
                "name": "Install and Build",
                "run": "yarn\nyarn build\n"
            },
            {
                "id": 7,
                "name": "Deploy",
                "run": "JamesIves/github-pages-deploy-action@v4"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Extract version info",
                "run": "echo \"VERSION_INFO=`git log --format=%B -n 1 . | egrep '^[rR]elease version' | egrep -o '([[:digit:]]+\\.){2}[[:digit:]]+' | xargs -0 printf v%s`\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 3,
                "name": "Check version",
                "run": "echo $VERSION_INFO"
            },
            {
                "id": 1,
                "name": "Check step",
                "run": "echo \"Starting a release\""
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Fetch buck",
                "run": "(rm -rf buck && mkdir buck && \\\nwget https://jitpack.io/com/github/facebook/buck/v2022.05.05.01/buck-v2022.05.05.01-java11.pex && \\\nmv buck-v2022.05.05.01-java11.pex buck/buck && \\\nchmod +x buck/buck && \\\nls -l buck)\n"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "nick-invision/retry@v1"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Fetch buck",
                "run": "(rm -rf buck && mkdir buck && \\\nwget https://jitpack.io/com/github/facebook/buck/v2022.05.05.01/buck-v2022.05.05.01-java11.pex && \\\nmv buck-v2022.05.05.01-java11.pex buck/buck && \\\nchmod +x buck/buck && \\\nls -l buck)\n"
            },
            {
                "id": 5,
                "name": "Assemble sample app",
                "run": "BUCK_PATH=`realpath buck/buck` ./gradlew :sample:assembleRelease --stacktrace"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Write GPG Sec Ring",
                "run": "echo '${{ secrets.GPG_KEY_CONTENTS }}' | base64 -d > /tmp/secring.gpg"
            },
            {
                "id": 5,
                "name": "Update gradle.properties",
                "run": "echo -e \"signing.secretKeyRingFile=/tmp/secring.gpg\\nsigning.keyId=${{ secrets.SIGNING_KEY_ID }}\\nsigning.password=${{ secrets.SIGNING_PASSWORD }}\\nmavenCentralPassword=${{ secrets.SONATYPE_NEXUS_PASSWORD }}\\nmavenCentralUsername=${{ secrets.SONATYPE_NEXUS_USERNAME }}\" >> gradle.properties"
            },
            {
                "id": 6,
                "name": "Fetch buck",
                "run": "(rm -rf buck && mkdir buck && \\\nwget https://jitpack.io/com/github/facebook/buck/v2022.05.05.01/buck-v2022.05.05.01-java11.pex && \\\nmv buck-v2022.05.05.01-java11.pex buck/buck && \\\nchmod +x buck/buck && \\\nls -l buck)\n"
            },
            {
                "id": 7,
                "name": "Upload Android Archives",
                "run": "./gradlew publish --no-daemon --no-parallel --info --stacktrace"
            },
            {
                "id": 8,
                "name": "Release and close",
                "run": "./gradlew closeAndReleaseRepository"
            },
            {
                "id": 9,
                "name": "Clean secrets",
                "run": "rm /tmp/secring.gpg"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set Git tag",
                "run": "tvdias/github-tagger@v0.0.1"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Get tag for the current date",
                "run": "echo \"TAG_NAME=$(date +'v%Y.%m.%d')\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 3,
                "name": "Tag the latest commit",
                "run": "weareyipyip/walking-tag-action@v2"
            }
        ],
        "facebook/duckling": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Haskell Stack",
                "run": "haskell/actions/setup@v1"
            },
            {
                "id": 3,
                "name": "Cache ~/.stack",
                "run": "actions/cache@v2.1.4"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "stack build duckling:lib --system-ghc --test --bench --no-run-tests --no-run-benchmarks\n"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "stack test --system-ghc\n"
            }
        ],
        "facebook/prop-types": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn add react@${{ matrix.react_version }}"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "yarn list --pattern 'react'"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "yarn run pretest"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "yarn run tests-only"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "yarn run build"
            }
        ],
        "facebook/docusaurus": [
            {
                "id": 1,
                "name": "Check out repository code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Use Node.js",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 4,
                "name": "Install Playwright browsers",
                "run": "npx playwright install --with-deps chromium"
            },
            {
                "id": 5,
                "name": "Build website fast",
                "run": "yarn build:website:fast --dev"
            },
            {
                "id": 6,
                "name": "Take Argos screenshots",
                "run": "yarn argos:screenshot"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up Node",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Build blog-only",
                "run": "yarn workspace website build:blogOnly"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up Node",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Build Hash Router",
                "run": "yarn build:website:fast"
            },
            {
                "id": 5,
                "name": "Upload Website artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 6,
                "name": "Deploy to GitHub Pages",
                "run": "peaceiris/actions-gh-pages@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up Node",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Track build size changes",
                "run": "preactjs/compressed-size-action@f780fd104362cfce9e118f9198df2ee37d12946c"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up Node",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Build (cold cache)",
                "run": "yarn workspace website build --locale en"
            },
            {
                "id": 5,
                "name": "Build (warm cache)",
                "run": "yarn workspace website build --locale en"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up Node",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Prepare git",
                "run": "git config --global user.name \"Docusaurus Canary\"\ngit config --global user.email \"canary@docusaurus.io\"\ngit fetch\ngit checkout main\necho \"//registry.npmjs.org/:_authToken=${NPM_TOKEN}\" >> .npmrc\ncat .npmrc\necho \"npm whoami\"\nnpm whoami\n"
            },
            {
                "id": 4,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 5,
                "name": "Publish Canary release",
                "run": "yarn canary\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 3,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Dependency Review",
                "run": "actions/dependency-review-action@72eb03d02c7872a771aacd928f3123ac62ad6d3a"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Use Node.js",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 4,
                "name": "Build website fast",
                "run": "yarn build:website:fast"
            },
            {
                "id": 5,
                "name": "Audit URLs using Lighthouse",
                "run": "treosh/lighthouse-ci-action@1b0e7c33270fbba31a18a0fbb1de7cc5256b6d39"
            },
            {
                "id": 6,
                "name": "Format lighthouse score",
                "run": "actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea"
            },
            {
                "id": 7,
                "name": "Add Lighthouse stats as comment",
                "run": "marocchino/sticky-pull-request-comment@331f8f5b4215f0445d3c07b4967662a32a2d3e31"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 3,
                "name": "AutoFix Format",
                "run": "yarn format"
            },
            {
                "id": 4,
                "name": "AutoFix JS",
                "run": "yarn lint:js:fix"
            },
            {
                "id": 5,
                "name": "AutoFix Style",
                "run": "yarn lint:style:fix"
            },
            {
                "id": 6,
                "name": "AutoFix Spelling",
                "run": "yarn lint:spelling:fix"
            },
            {
                "id": 7,
                "name": "Print Diff",
                "run": "git diff"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "stefanzweifel/git-auto-commit-action@v5"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up Node",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Check immutable yarn.lock",
                "run": "git diff --exit-code"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "echo \"::add-matcher::.github/workflows/cspell-problem-matcher.json\"\nyarn lint:ci\n"
            },
            {
                "id": 6,
                "name": "Prettier Code",
                "run": "yarn format:diff"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up Node",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "yarn test website/src/data/__tests__/user.test.ts"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Generate test-website project against main branch",
                "run": "yarn test:build:website -s"
            },
            {
                "id": 5,
                "name": "Install test-website project with Yarn v1",
                "run": "yarn install"
            },
            {
                "id": 6,
                "name": "Start test-website project",
                "run": "yarn start --no-open"
            },
            {
                "id": 7,
                "name": "Build test-website project",
                "run": "yarn build"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Use Node.js 18",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Generate test-website project with ${{ matrix.variant }} against main branch",
                "run": "yarn test:build:website ${{ matrix.variant }}"
            },
            {
                "id": 5,
                "name": "Install test-website project with Yarn Berry and nodeLinker = ${{ matrix.nodeLinker }}",
                "run": "yarn set version berry\n\nyarn config set nodeLinker ${{ matrix.nodeLinker }}\nyarn config set npmRegistryServer http://localhost:4873\nyarn config set unsafeHttpWhitelist --json '[\"localhost\"]'\nyarn config set enableGlobalCache true\n\n# Make PnP as strict as possible\n# https://yarnpkg.com/features/pnp#fallback-mode\nyarn config set pnpFallbackMode none\n\nyarn install\n"
            },
            {
                "id": 6,
                "name": "Install missing dependencies",
                "run": "# These dependencies are referenced in the init project, not by our packages\nyarn add @docusaurus/theme-classic @docusaurus/types @types/node\nyarn config set packageExtensions --json '{ \"unified@^9.2.2\": { \"dependencies\": { \"@types/unist\": \"^2.0.6\" } } }'\n"
            },
            {
                "id": 7,
                "name": "Start test-website project",
                "run": "yarn start --no-open"
            },
            {
                "id": 8,
                "name": "TypeCheck website",
                "run": "yarn typecheck"
            },
            {
                "id": 9,
                "name": "TypeCheck website - min version - v5.1",
                "run": "yarn add typescript@5.1.6 --exact\nyarn typecheck\n"
            },
            {
                "id": 10,
                "name": "TypeCheck website - max version - Latest",
                "run": "yarn add typescript@latest --exact\nyarn typecheck\n"
            },
            {
                "id": 11,
                "name": "Build test-website project",
                "run": "yarn build"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Use Node.js 18",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Generate test-website project against main branch",
                "run": "yarn test:build:website -s"
            },
            {
                "id": 5,
                "name": "Install test-website project with npm",
                "run": "npm install"
            },
            {
                "id": 6,
                "name": "Start test-website project",
                "run": "npm run start -- --no-open"
            },
            {
                "id": 7,
                "name": "Build test-website project",
                "run": "npm run build"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Use Node.js 18",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Generate test-website project against main branch",
                "run": "yarn test:build:website -s"
            },
            {
                "id": 5,
                "name": "Install test-website project with pnpm",
                "run": "npm install -g pnpm\n# Fix some peer dependencies errors\npnpm add @algolia/client-search @types/react@17 typescript\n"
            },
            {
                "id": 6,
                "name": "Start test-website project",
                "run": "pnpm start --no-open"
            },
            {
                "id": 7,
                "name": "Build test-website project",
                "run": "pnpm run build"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up Node",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Swizzle (${{matrix.action}} - ${{matrix.variant}})",
                "run": "yarn workspace website test:swizzle:${{matrix.action}}:${{matrix.variant}}"
            },
            {
                "id": 5,
                "name": "Build website",
                "run": "yarn build:website:fast"
            },
            {
                "id": 6,
                "name": "TypeCheck website",
                "run": "yarn workspace website typecheck"
            },
            {
                "id": 1,
                "name": "Support longpaths",
                "run": "git config --system core.longpaths true"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 3,
                "name": "Use Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 4,
                "name": "Installation",
                "run": "yarn || yarn || yarn"
            },
            {
                "id": 5,
                "name": "Docusaurus Jest Tests",
                "run": "yarn test"
            },
            {
                "id": 6,
                "name": "Create a deep path",
                "run": "mkdir -p \"website/_dogfooding/_pages tests/deep-file-path-test/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar/foo/bar\"\ncd \"$_\"\necho \"# hello\" > test-file.md\n"
            },
            {
                "id": 7,
                "name": "Swizzle Wrap TS",
                "run": "yarn workspace website test:swizzle:wrap:ts"
            },
            {
                "id": 8,
                "name": "Docusaurus Build",
                "run": "yarn build:website:fast"
            },
            {
                "id": 9,
                "name": "TypeCheck website",
                "run": "yarn workspace website typecheck"
            },
            {
                "id": 10,
                "name": "TypeCheck website - min version - v5.1",
                "run": "yarn workspace website add typescript@5.1.6 --exact\nyarn workspace website typecheck\n"
            },
            {
                "id": 11,
                "name": "TypeCheck website - max version - Latest",
                "run": "yarn workspace website add typescript@latest --exact\nyarn workspace website typecheck\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Installation",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "yarn test"
            },
            {
                "id": 5,
                "name": "Remove Theme Internal Re-export",
                "run": "yarn workspace @docusaurus/theme-common removeThemeInternalReexport"
            },
            {
                "id": 6,
                "name": "Docusaurus Build",
                "run": "yarn build:website:fast"
            },
            {
                "id": 7,
                "name": "TypeCheck website",
                "run": "yarn workspace website typecheck"
            },
            {
                "id": 8,
                "name": "TypeCheck website - min version - v5.1",
                "run": "yarn workspace website add typescript@5.1.6 --exact\nyarn workspace website typecheck\n"
            },
            {
                "id": 9,
                "name": "TypeCheck website - max version - Latest",
                "run": "yarn workspace website add typescript@latest --exact\nyarn workspace website typecheck\n"
            }
        ],
        "facebook/facebook-nodejs-business-sdk": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Deploy",
                "run": "npm install\nnpm config set '//registry.npmjs.org/:_authToken' \"${NPM_TOKEN}\"\nnpm publish\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm run flow"
            }
        ],
        "facebook/openr": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Set up Python",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 4,
                "name": "Link check markdown + yaml with prettier",
                "run": "npm install prettier\nnpx prettier --check *.md openr/docs\n"
            },
            {
                "id": 5,
                "name": "Install docs dependencies",
                "run": "python -m pip install --upgrade pip setuptools wheel\npython -m pip install -r \"openr/docs/requirements.txt\"\n"
            },
            {
                "id": 6,
                "name": "Check all links resolve",
                "run": "make -C openr/docs linkcheck"
            },
            {
                "id": 7,
                "name": "Build documentation",
                "run": "make -C openr/docs html"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests boost"
            },
            {
                "id": 3,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests ninja"
            },
            {
                "id": 4,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests cmake"
            },
            {
                "id": 5,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests gflags"
            },
            {
                "id": 6,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests glog"
            },
            {
                "id": 7,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fmt"
            },
            {
                "id": 8,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests googletest"
            },
            {
                "id": 9,
                "name": "Fetch python-six",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests python-six"
            },
            {
                "id": 10,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zstd"
            },
            {
                "id": 11,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests double-conversion"
            },
            {
                "id": 12,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libdwarf"
            },
            {
                "id": 13,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libevent"
            },
            {
                "id": 14,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests lz4"
            },
            {
                "id": 15,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests snappy"
            },
            {
                "id": 16,
                "name": "Fetch range-v3",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests range-v3"
            },
            {
                "id": 17,
                "name": "Fetch re2",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests re2"
            },
            {
                "id": 18,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests zlib"
            },
            {
                "id": 19,
                "name": "Fetch bz2",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests bz2"
            },
            {
                "id": 20,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests autoconf"
            },
            {
                "id": 21,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests automake"
            },
            {
                "id": 22,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libtool"
            },
            {
                "id": 23,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libsodium"
            },
            {
                "id": 24,
                "name": "Fetch libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libiberty"
            },
            {
                "id": 25,
                "name": "Fetch libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libunwind"
            },
            {
                "id": 26,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests xz"
            },
            {
                "id": 27,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests folly"
            },
            {
                "id": 28,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fizz"
            },
            {
                "id": 29,
                "name": "Fetch mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests mvfst"
            },
            {
                "id": 30,
                "name": "Fetch libffi",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests libffi"
            },
            {
                "id": 31,
                "name": "Fetch ncurses",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests ncurses"
            },
            {
                "id": 32,
                "name": "Fetch python",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests python"
            },
            {
                "id": 33,
                "name": "Fetch wangle",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests wangle"
            },
            {
                "id": 34,
                "name": "Fetch fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fbthrift"
            },
            {
                "id": 35,
                "name": "Fetch fb303",
                "run": "python3 build/fbcode_builder/getdeps.py fetch --no-tests fb303"
            },
            {
                "id": 36,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests boost"
            },
            {
                "id": 37,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests ninja"
            },
            {
                "id": 38,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests cmake"
            },
            {
                "id": 39,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests gflags"
            },
            {
                "id": 40,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests glog"
            },
            {
                "id": 41,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fmt"
            },
            {
                "id": 42,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests googletest"
            },
            {
                "id": 43,
                "name": "Build python-six",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests python-six"
            },
            {
                "id": 44,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zstd"
            },
            {
                "id": 45,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests double-conversion"
            },
            {
                "id": 46,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libdwarf"
            },
            {
                "id": 47,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libevent"
            },
            {
                "id": 48,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests lz4"
            },
            {
                "id": 49,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests snappy"
            },
            {
                "id": 50,
                "name": "Build range-v3",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests range-v3"
            },
            {
                "id": 51,
                "name": "Build re2",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests re2"
            },
            {
                "id": 52,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests zlib"
            },
            {
                "id": 53,
                "name": "Build bz2",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests bz2"
            },
            {
                "id": 54,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests autoconf"
            },
            {
                "id": 55,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests automake"
            },
            {
                "id": 56,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libtool"
            },
            {
                "id": 57,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libsodium"
            },
            {
                "id": 58,
                "name": "Build libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libiberty"
            },
            {
                "id": 59,
                "name": "Build libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libunwind"
            },
            {
                "id": 60,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests xz"
            },
            {
                "id": 61,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests folly"
            },
            {
                "id": 62,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fizz"
            },
            {
                "id": 63,
                "name": "Build mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests mvfst"
            },
            {
                "id": 64,
                "name": "Build libffi",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests libffi"
            },
            {
                "id": 65,
                "name": "Build ncurses",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests ncurses"
            },
            {
                "id": 66,
                "name": "Build python",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests python"
            },
            {
                "id": 67,
                "name": "Build wangle",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests wangle"
            },
            {
                "id": 68,
                "name": "Build fbthrift",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fbthrift"
            },
            {
                "id": 69,
                "name": "Build fb303",
                "run": "python3 build/fbcode_builder/getdeps.py build --no-tests fb303"
            },
            {
                "id": 70,
                "name": "Build openr",
                "run": "python3 build/fbcode_builder/getdeps.py build --src-dir=. openr  --project-install-prefix openr:/usr/local"
            },
            {
                "id": 71,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py fixup-dyn-deps --strip --src-dir=. openr _artifacts/linux  --project-install-prefix openr:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 72,
                "name": "Step 72",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 73,
                "name": "Test openr",
                "run": "python3 build/fbcode_builder/getdeps.py test --src-dir=. openr  --project-install-prefix openr:/usr/local"
            }
        ],
        "facebook/react-native-website": [
            {
                "id": 1,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 2,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile --no-progress --non-interactive"
            },
            {
                "id": 4,
                "name": "Run Lint",
                "run": "yarn ci:lint"
            },
            {
                "id": 1,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 2,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile --no-progress --non-interactive"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "yarn build"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v4"
            }
        ],
        "facebook/pyre-check": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Install pre-commit",
                "run": "pip install -r requirements-dev.txt"
            },
            {
                "id": 4,
                "name": "Run pre-commit on all files",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Build the Website",
                "run": "cd documentation/website\nyarn install\nyarn run build\necho \"OUTPUT_TIME=$(date +'%Y-%m-%d %H:%M:%S')\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Get output time",
                "run": "echo \"The time was ${{ env.OUTPUT_TIME }} (UTC)\""
            },
            {
                "id": 4,
                "name": "Deploy",
                "run": "JamesIves/github-pages-deploy-action@ec9c88baef04b842ca6f0a132fd61c762aa6c1b0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "pip install --upgrade pip\npip install -r requirements.txt\npip install -r requirements-dev.txt\npip install cython flask flask_cors graphql-core typing_inspect\nVERSION=$(grep \"version\" .pyre_configuration | sed -n -e 's/.*\\(0\\.0\\.[0-9]*\\).*/\\1/p')\npip install pyre-check-nightly==$VERSION\n"
            },
            {
                "id": 4,
                "name": "Run Pyre",
                "run": "pyre -n --output=sarif check > sarif.json\n"
            },
            {
                "id": 5,
                "name": "Expose SARIF Results",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 6,
                "name": "Upload SARIF Results",
                "run": "github/codeql-action/upload-sarif@b7cec7526559c32f1616476ff32d17ba4c59b2d6"
            },
            {
                "id": 7,
                "name": "Fail Command On Errors",
                "run": "if [ \"$(cat sarif.json | grep 'PYRE-ERROR')\" != \"\" ]; then python -m json.tool sarif.json && exit 1; fi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "pip install -r requirements.txt\nsudo apt-get install ocaml ocaml-dune\n"
            },
            {
                "id": 4,
                "name": "Setup OCaml",
                "run": "avsm/setup-ocaml@8ea37830f3b2c9f54178d255808ae377b5758062"
            },
            {
                "id": 5,
                "name": "Setup opam switch",
                "run": "opam switch create 4.14.0\necho \"OPAM_SWITCH_PREFIX=$HOME/.opam/4.14.0\" >> $GITHUB_ENV\necho \"CAML_LD_LIBRARY_PATH=$HOME/.opam/4.14.0/lib/stublibs:$HOME/.opam/4.14.0/lib/ocaml/stublibs:$HOME/.opam/4.14.0/lib/ocam\" >> $GITHUB_ENV\necho \"$HOME/.opam/4.14.0/bin\" >> $GITHUB_PATH\necho \"/home/opam/.opam/4.14.0/bin\" >> $GITHUB_PATH\n"
            },
            {
                "id": 6,
                "name": "Build Pyre (and Pysa)",
                "run": "./scripts/setup.sh --local --no-tests\nmake -C source\necho \"PYTHONPATH=$GITHUB_WORKSPACE/..:$PYTHONPATH\" >> $GITHUB_ENV\necho \"pythonLocation=$GITHUB_WORKSPACE:$pythonLocation\" >> $GITHUB_ENV\necho \"PYRE_BINARY=$GITHUB_WORKSPACE/source/_build/default/main.exe\" >> $GITHUB_ENV\necho \"PYRE_TYPESHED=$GITHUB_WORKSPACE/stubs/typeshed/typeshed/\" >> $GITHUB_ENV\n"
            },
            {
                "id": 7,
                "name": "Run and test pysa output",
                "run": "cd ./documentation/deliberately_vulnerable_flask_app\n. ./setup.sh\n./run_integration_tests.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Install tox",
                "run": "pip install tox"
            },
            {
                "id": 4,
                "name": "Run tox on python version from matrix",
                "run": "tox -e py"
            }
        ],
        "facebook/mvfst": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Update system package info",
                "run": "sudo apt-get update"
            },
            {
                "id": 3,
                "name": "Install system deps",
                "run": "sudo python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive mvfst"
            },
            {
                "id": 4,
                "name": "Install packaging system deps",
                "run": "sudo python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive patchelf"
            },
            {
                "id": 5,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests ninja"
            },
            {
                "id": 6,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests cmake"
            },
            {
                "id": 7,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zlib"
            },
            {
                "id": 8,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zstd"
            },
            {
                "id": 9,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests boost"
            },
            {
                "id": 10,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests double-conversion"
            },
            {
                "id": 11,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fmt"
            },
            {
                "id": 12,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests gflags"
            },
            {
                "id": 13,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests glog"
            },
            {
                "id": 14,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests googletest"
            },
            {
                "id": 15,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libdwarf"
            },
            {
                "id": 16,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libevent"
            },
            {
                "id": 17,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests lz4"
            },
            {
                "id": 18,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests snappy"
            },
            {
                "id": 19,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests autoconf"
            },
            {
                "id": 20,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests automake"
            },
            {
                "id": 21,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libtool"
            },
            {
                "id": 22,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libsodium"
            },
            {
                "id": 23,
                "name": "Fetch libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libiberty"
            },
            {
                "id": 24,
                "name": "Fetch libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libunwind"
            },
            {
                "id": 25,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests xz"
            },
            {
                "id": 26,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests folly"
            },
            {
                "id": 27,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fizz"
            },
            {
                "id": 28,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests ninja"
            },
            {
                "id": 29,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests cmake"
            },
            {
                "id": 30,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests zlib"
            },
            {
                "id": 31,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests zstd"
            },
            {
                "id": 32,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests boost"
            },
            {
                "id": 33,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests double-conversion"
            },
            {
                "id": 34,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests fmt"
            },
            {
                "id": 35,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests gflags"
            },
            {
                "id": 36,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests glog"
            },
            {
                "id": 37,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests googletest"
            },
            {
                "id": 38,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests libdwarf"
            },
            {
                "id": 39,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests libevent"
            },
            {
                "id": 40,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests lz4"
            },
            {
                "id": 41,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests snappy"
            },
            {
                "id": 42,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests autoconf"
            },
            {
                "id": 43,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests automake"
            },
            {
                "id": 44,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests libtool"
            },
            {
                "id": 45,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests libsodium"
            },
            {
                "id": 46,
                "name": "Build libiberty",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests libiberty"
            },
            {
                "id": 47,
                "name": "Build libunwind",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests libunwind"
            },
            {
                "id": 48,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests xz"
            },
            {
                "id": 49,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests folly"
            },
            {
                "id": 50,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests fizz"
            },
            {
                "id": 51,
                "name": "Build mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --src-dir=. mvfst  --project-install-prefix mvfst:/usr/local"
            },
            {
                "id": 52,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fixup-dyn-deps --strip --src-dir=. mvfst _artifacts/linux  --project-install-prefix mvfst:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 53,
                "name": "Step 53",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 54,
                "name": "Test mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages test --src-dir=. mvfst  --project-install-prefix mvfst:/usr/local"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install system deps",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive mvfst"
            },
            {
                "id": 3,
                "name": "Fetch ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests ninja"
            },
            {
                "id": 4,
                "name": "Fetch cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests cmake"
            },
            {
                "id": 5,
                "name": "Fetch zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zlib"
            },
            {
                "id": 6,
                "name": "Fetch zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests zstd"
            },
            {
                "id": 7,
                "name": "Fetch boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests boost"
            },
            {
                "id": 8,
                "name": "Fetch double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests double-conversion"
            },
            {
                "id": 9,
                "name": "Fetch fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fmt"
            },
            {
                "id": 10,
                "name": "Fetch gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests gflags"
            },
            {
                "id": 11,
                "name": "Fetch glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests glog"
            },
            {
                "id": 12,
                "name": "Fetch googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests googletest"
            },
            {
                "id": 13,
                "name": "Fetch libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libdwarf"
            },
            {
                "id": 14,
                "name": "Fetch lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests lz4"
            },
            {
                "id": 15,
                "name": "Fetch openssl",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests openssl"
            },
            {
                "id": 16,
                "name": "Fetch snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests snappy"
            },
            {
                "id": 17,
                "name": "Fetch libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libevent"
            },
            {
                "id": 18,
                "name": "Fetch autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests autoconf"
            },
            {
                "id": 19,
                "name": "Fetch automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests automake"
            },
            {
                "id": 20,
                "name": "Fetch libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libtool"
            },
            {
                "id": 21,
                "name": "Fetch libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests libsodium"
            },
            {
                "id": 22,
                "name": "Fetch xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests xz"
            },
            {
                "id": 23,
                "name": "Fetch folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests folly"
            },
            {
                "id": 24,
                "name": "Fetch fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests fizz"
            },
            {
                "id": 25,
                "name": "Build ninja",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests ninja"
            },
            {
                "id": 26,
                "name": "Build cmake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests cmake"
            },
            {
                "id": 27,
                "name": "Build zlib",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests zlib"
            },
            {
                "id": 28,
                "name": "Build zstd",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests zstd"
            },
            {
                "id": 29,
                "name": "Build boost",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests boost"
            },
            {
                "id": 30,
                "name": "Build double-conversion",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests double-conversion"
            },
            {
                "id": 31,
                "name": "Build fmt",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests fmt"
            },
            {
                "id": 32,
                "name": "Build gflags",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests gflags"
            },
            {
                "id": 33,
                "name": "Build glog",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests glog"
            },
            {
                "id": 34,
                "name": "Build googletest",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests googletest"
            },
            {
                "id": 35,
                "name": "Build libdwarf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests libdwarf"
            },
            {
                "id": 36,
                "name": "Build lz4",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests lz4"
            },
            {
                "id": 37,
                "name": "Build openssl",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests openssl"
            },
            {
                "id": 38,
                "name": "Build snappy",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests snappy"
            },
            {
                "id": 39,
                "name": "Build libevent",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests libevent"
            },
            {
                "id": 40,
                "name": "Build autoconf",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests autoconf"
            },
            {
                "id": 41,
                "name": "Build automake",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests automake"
            },
            {
                "id": 42,
                "name": "Build libtool",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests libtool"
            },
            {
                "id": 43,
                "name": "Build libsodium",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests libsodium"
            },
            {
                "id": 44,
                "name": "Build xz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests xz"
            },
            {
                "id": 45,
                "name": "Build folly",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests folly"
            },
            {
                "id": 46,
                "name": "Build fizz",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --no-tests fizz"
            },
            {
                "id": 47,
                "name": "Build mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages build --src-dir=. mvfst  --project-install-prefix mvfst:/usr/local"
            },
            {
                "id": 48,
                "name": "Copy artifacts",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages fixup-dyn-deps --src-dir=. mvfst _artifacts/mac  --project-install-prefix mvfst:/usr/local --final-install-prefix /usr/local"
            },
            {
                "id": 49,
                "name": "Step 49",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 50,
                "name": "Test mvfst",
                "run": "python3 build/fbcode_builder/getdeps.py --allow-system-packages test --src-dir=. mvfst  --project-install-prefix mvfst:/usr/local"
            },
            {
                "id": 1,
                "name": "Export boost environment",
                "run": "echo BOOST_ROOT=%BOOST_ROOT_1_83_0% >> %GITHUB_ENV%"
            },
            {
                "id": 2,
                "name": "Fix Git config",
                "run": "git config --system core.longpaths true"
            },
            {
                "id": 3,
                "name": "Disable autocrlf",
                "run": "git config --system core.autocrlf false"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v4"
            },
            {
                "id": 5,
                "name": "Fetch ninja",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests ninja"
            },
            {
                "id": 6,
                "name": "Fetch cmake",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests cmake"
            },
            {
                "id": 7,
                "name": "Fetch libsodium",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libsodium"
            },
            {
                "id": 8,
                "name": "Fetch zlib",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests zlib"
            },
            {
                "id": 9,
                "name": "Fetch zstd",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests zstd"
            },
            {
                "id": 10,
                "name": "Fetch boost",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests boost"
            },
            {
                "id": 11,
                "name": "Fetch double-conversion",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests double-conversion"
            },
            {
                "id": 12,
                "name": "Fetch fmt",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests fmt"
            },
            {
                "id": 13,
                "name": "Fetch gflags",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests gflags"
            },
            {
                "id": 14,
                "name": "Fetch glog",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests glog"
            },
            {
                "id": 15,
                "name": "Fetch googletest",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests googletest"
            },
            {
                "id": 16,
                "name": "Fetch libdwarf",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libdwarf"
            },
            {
                "id": 17,
                "name": "Fetch lz4",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests lz4"
            },
            {
                "id": 18,
                "name": "Fetch snappy",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests snappy"
            },
            {
                "id": 19,
                "name": "Fetch perl",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests perl"
            },
            {
                "id": 20,
                "name": "Fetch openssl",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests openssl"
            },
            {
                "id": 21,
                "name": "Fetch libevent",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests libevent"
            },
            {
                "id": 22,
                "name": "Fetch folly",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests folly"
            },
            {
                "id": 23,
                "name": "Fetch fizz",
                "run": "python build/fbcode_builder/getdeps.py fetch --no-tests fizz"
            },
            {
                "id": 24,
                "name": "Build ninja",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests ninja"
            },
            {
                "id": 25,
                "name": "Build cmake",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests cmake"
            },
            {
                "id": 26,
                "name": "Build libsodium",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests libsodium"
            },
            {
                "id": 27,
                "name": "Build zlib",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests zlib"
            },
            {
                "id": 28,
                "name": "Build zstd",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests zstd"
            },
            {
                "id": 29,
                "name": "Build boost",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests boost"
            },
            {
                "id": 30,
                "name": "Build double-conversion",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests double-conversion"
            },
            {
                "id": 31,
                "name": "Build fmt",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests fmt"
            },
            {
                "id": 32,
                "name": "Build gflags",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests gflags"
            },
            {
                "id": 33,
                "name": "Build glog",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests glog"
            },
            {
                "id": 34,
                "name": "Build googletest",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests googletest"
            },
            {
                "id": 35,
                "name": "Build libdwarf",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests libdwarf"
            },
            {
                "id": 36,
                "name": "Build lz4",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests lz4"
            },
            {
                "id": 37,
                "name": "Build snappy",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests snappy"
            },
            {
                "id": 38,
                "name": "Build perl",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests perl"
            },
            {
                "id": 39,
                "name": "Build openssl",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests openssl"
            },
            {
                "id": 40,
                "name": "Build libevent",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests libevent"
            },
            {
                "id": 41,
                "name": "Build folly",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests folly"
            },
            {
                "id": 42,
                "name": "Build fizz",
                "run": "python build/fbcode_builder/getdeps.py build --no-tests fizz"
            },
            {
                "id": 43,
                "name": "Build mvfst",
                "run": "python build/fbcode_builder/getdeps.py build --src-dir=. mvfst"
            },
            {
                "id": 44,
                "name": "Copy artifacts",
                "run": "python build/fbcode_builder/getdeps.py fixup-dyn-deps --src-dir=. mvfst _artifacts/windows  --final-install-prefix /usr/local"
            },
            {
                "id": 45,
                "name": "Step 45",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 46,
                "name": "Test mvfst",
                "run": "python build/fbcode_builder/getdeps.py test --src-dir=. mvfst"
            }
        ],
        "facebook/flipper": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v3.11.0"
            },
            {
                "id": 3,
                "name": "Compute build cache",
                "run": "./scripts/checksum-android.sh checksum-android.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v3.3.1"
            },
            {
                "id": 5,
                "name": "Build debug artifact",
                "run": "./gradlew :android:assembleDebug"
            },
            {
                "id": 6,
                "name": "Verify libraries in artifact",
                "run": "scripts/verify-android-libraries.sh"
            },
            {
                "id": 7,
                "name": "Build sample apps with Gradle",
                "run": "./gradlew :sample:assembleDebug :tutorial:assembleDebug"
            },
            {
                "id": 8,
                "name": "Build remaining artifacts with Gradle",
                "run": "./gradlew assembleDebug"
            },
            {
                "id": 9,
                "name": "upload artifact",
                "run": "actions/upload-artifact@v3.1.2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Dependencies",
                "run": "sudo apt-get update\nsudo apt-get install -y sdkmanager\n"
            },
            {
                "id": 3,
                "name": "Install JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Install Retry",
                "run": "scripts/install-retry.sh"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "yes | sdkmanager \"platforms;android-33\" || true\n/tmp/retry -m 3 ./gradlew :android:assembleRelease --info\n"
            },
            {
                "id": 6,
                "name": "Deploy Snapshot",
                "run": "/tmp/retry -m 3 scripts/publish-android-snapshot.sh"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install and Build",
                "run": "yarn\nyarn  build\n"
            },
            {
                "id": 3,
                "name": "Deploy to GitHub Pages",
                "run": "JamesIves/github-pages-deploy-action@v4.4.2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gradle/wrapper-validation-action@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "pod install --repo-update"
            },
            {
                "id": 3,
                "name": "Build Sample app",
                "run": "IPHONESIMULATOR=$(xcodebuild -showsdks | grep -o \"iphonesimulator[0-9]\\\\+\\\\.[0-9]\\\\+$\") && echo $IPHONESIMULATOR\nxcodebuild build -workspace Sample.xcworkspace -scheme Sample -sdk $IPHONESIMULATOR EXCLUDED_ARCHS=\"arm64\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "pod install --repo-update"
            },
            {
                "id": 3,
                "name": "Build SampleSwift app",
                "run": "IPHONESIMULATOR=$(xcodebuild -showsdks | grep -o \"iphonesimulator[0-9]\\\\+\\\\.[0-9]\\\\+$\") && echo $IPHONESIMULATOR\nxcodebuild build -workspace SampleSwift.xcworkspace -scheme SampleSwift -sdk $IPHONESIMULATOR\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "pod install --repo-update"
            },
            {
                "id": 3,
                "name": "Build Tutorial app",
                "run": "IPHONESIMULATOR=$(xcodebuild -showsdks | grep -o \"iphonesimulator[0-9]\\\\+\\\\.[0-9]\\\\+$\") && echo $IPHONESIMULATOR\nxcodebuild build -workspace Tutorial.xcworkspace -scheme Tutorial -sdk $IPHONESIMULATOR\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint Folly",
                "run": "pod spec lint Flipper-Folly.podspec --use-libraries --allow-warnings --verbose --skip-import-validation"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint Peertalk",
                "run": "pod spec lint Flipper-PeerTalk.podspec --use-libraries --allow-warnings --verbose --skip-import-validation"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FBDefines",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/Core",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/CppBridge",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FBCxxFollyDynamicConvert",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FKPortForwarding",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FlipperKitHighlightOverlay",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FlipperKitHighlightOverlay",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FlipperKitLayoutHelpers",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FlipperKitLayoutIOSDescriptors",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FlipperKitLayoutPlugin",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FlipperKitLayoutComponentKitSupport",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FlipperKitNetworkPlugin",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/SKIOSNetworkPlugin",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FlipperKitUserDefaultsPlugin",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FlipperKitExamplePlugin",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint FlipperKit/FlipperKitReactPlugin",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Lint Flipper",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Apply Needs Attention Label",
                "run": "hramos/needs-attention@v2.0.0"
            },
            {
                "id": 3,
                "name": "Result",
                "run": "echo '${{ steps.needs-attention.outputs.result }}'"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "yarn install (with retry)",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 4,
                "name": "lint",
                "run": "yarn lint"
            },
            {
                "id": 5,
                "name": "test",
                "run": "yarn test --coverage"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "js-flipper - yarn install (with retry)",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 4,
                "name": "js-flipper build",
                "run": "yarn build"
            },
            {
                "id": 5,
                "name": "yarn install (with retry)",
                "run": "nick-fields/retry@v2.8.3"
            },
            {
                "id": 6,
                "name": "link local js-flipper",
                "run": "yarn relative-deps"
            },
            {
                "id": 7,
                "name": "build",
                "run": "yarn build"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "install",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "run",
                "run": "yarn run run"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "install",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "run",
                "run": "bin/run"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "Get yarn cache directory path",
                "run": "echo \"::set-output name=dir::$(yarn cache dir)\""
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "yarn install (with retry)",
                "run": "nick-invision/retry@v2.6.0"
            },
            {
                "id": 6,
                "name": "lint",
                "run": "yarn lint"
            },
            {
                "id": 7,
                "name": "test",
                "run": "yarn test --coverage"
            },
            {
                "id": 8,
                "name": "coveralls",
                "run": "coverallsapp/github-action@v1.1.2"
            },
            {
                "id": 9,
                "name": "build linux",
                "run": "yarn build --linux"
            },
            {
                "id": 10,
                "name": "build macos",
                "run": "yarn build --mac --mac-dmg"
            },
            {
                "id": 11,
                "name": "build windows",
                "run": "yarn build --win"
            },
            {
                "id": 12,
                "name": "upload linux artifact",
                "run": "actions/upload-artifact@v3.1.2"
            },
            {
                "id": 13,
                "name": "upload windows artifact",
                "run": "actions/upload-artifact@v3.1.2"
            },
            {
                "id": 14,
                "name": "upload mac zip artifact",
                "run": "actions/upload-artifact@v3.1.2"
            },
            {
                "id": 15,
                "name": "upload mac dmg artifact",
                "run": "actions/upload-artifact@v3.1.2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Setup toolchain",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "cd packer && cargo test"
            },
            {
                "id": 4,
                "name": "Format",
                "run": "cd packer && cargo fmt -- --check"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "cd packer && cargo clippy -- -Dwarnings"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v3.11.0"
            },
            {
                "id": 3,
                "name": "Write GPG Sec Ring",
                "run": "echo '${{ secrets.GPG_KEY_CONTENTS }}' | base64 -d > /tmp/secring.gpg"
            },
            {
                "id": 4,
                "name": "Update gradle.properties",
                "run": "echo -e \"signing.secretKeyRingFile=/tmp/secring.gpg\\nsigning.keyId=${{ secrets.SIGNING_KEY_ID }}\\nsigning.password=${{ secrets.SIGNING_PASSWORD }}\\nmavenCentralPassword=${{ secrets.SONATYPE_NEXUS_PASSWORD }}\\nmavenCentralUsername=${{ secrets.SONATYPE_NEXUS_USERNAME }}\\nSONATYPE_HOST=DEFAULT\\nRELEASE_SIGNING_ENABLED=true\\nSONATYPE_AUTOMATIC_RELEASE=true\" >> gradle.properties"
            },
            {
                "id": 5,
                "name": "Compute build cache",
                "run": "./scripts/checksum-android.sh checksum-android.txt"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/cache@v3.3.1"
            },
            {
                "id": 7,
                "name": "Build artifacts",
                "run": "./gradlew :sample:assembleDebug :sample:assembleRelease && ./gradlew :android:assembleRelease"
            },
            {
                "id": 8,
                "name": "Upload Archives",
                "run": "./gradlew publish -info"
            },
            {
                "id": 9,
                "name": "Clean secrets",
                "run": "rm /tmp/secring.gpg"
            },
            {
                "id": 10,
                "name": "Rename apk",
                "run": "mv android/sample/build/outputs/apk/debug/sample-debug.apk SampleApp-android.apk"
            },
            {
                "id": 11,
                "name": "Attach sample APK to release",
                "run": "aigoncharov/github-upload-release-artifacts-action@2.2.3"
            },
            {
                "id": 12,
                "name": "Open issue on failure",
                "run": "JasonEtco/create-an-issue@v2.4.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "Install",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Set versions",
                "run": "yarn bump-versions"
            },
            {
                "id": 5,
                "name": "Set up npm token",
                "run": "echo \"//registry.yarnpkg.com/:_authToken=${{ secrets.FLIPPER_NPM_TOKEN }}\" >> ~/.npmrc"
            },
            {
                "id": 6,
                "name": "Publish packages",
                "run": "yarn publish-packages"
            },
            {
                "id": 7,
                "name": "Publish React Native",
                "run": "yarn publish"
            },
            {
                "id": 8,
                "name": "Publish JS Flipper",
                "run": "yarn\nyarn build\nyarn publish\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Pod Version",
                "run": "pod --version"
            },
            {
                "id": 4,
                "name": "Update Flipper version",
                "run": "./scripts/update-pod-versions.sh ./ ./Flipper.podspec"
            },
            {
                "id": 5,
                "name": "Push Flipper",
                "run": "./scripts/publish-flipper-pods.sh ./ Flipper"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Install Dependences",
                "run": "pod repo update"
            },
            {
                "id": 3,
                "name": "Pod Version",
                "run": "pod --version"
            },
            {
                "id": 4,
                "name": "Update FlipperKit version",
                "run": "./scripts/update-pod-versions.sh ./ ./FlipperKit.podspec"
            },
            {
                "id": 5,
                "name": "Push FlipperKit",
                "run": "./scripts/publish-flipper-pods.sh ./ FlipperKit"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Update Flipper's Podspec",
                "run": "./scripts/update-pod-versions.sh ./ ./Flipper.podspec"
            },
            {
                "id": 3,
                "name": "Update FlipperKit's Podspec",
                "run": "./scripts/update-pod-versions.sh ./ ./FlipperKit.podspec"
            },
            {
                "id": 4,
                "name": "Update Tutorial's Podfile",
                "run": "./scripts/update-pod-versions.sh ./ ./iOS/Tutorial/Podfile"
            },
            {
                "id": 5,
                "name": "Update Getting Started",
                "run": "./scripts/update-pod-versions.sh ./ ./docs/getting-started/ios-native.mdx"
            },
            {
                "id": 6,
                "name": "Update RN getting started guide",
                "run": "./scripts/update-pod-versions.sh ./ ./docs/getting-started/react-native-ios.mdx"
            },
            {
                "id": 7,
                "name": "Update ReactNativeFlipperExample",
                "run": "./scripts/update-pod-versions.sh ./ ./react-native/ReactNativeFlipperExample/ios/Podfile"
            },
            {
                "id": 8,
                "name": "Install Dependencies",
                "run": "pod repo update"
            },
            {
                "id": 9,
                "name": "Pod Version",
                "run": "pod --version"
            },
            {
                "id": 10,
                "name": "Update Sample's Podfile.lock",
                "run": "cd iOS/Sample/\npod update\nls\n"
            },
            {
                "id": 11,
                "name": "Update SampleSwift's Podfile.lock",
                "run": "cd iOS/SampleSwift/\npod update\nls\n"
            },
            {
                "id": 12,
                "name": "Update Tutorial's Podfile.lock",
                "run": "cd iOS/Tutorial/\n# Retrying an update, as Flipper and FlipperKit pod may take time to get updated on CocoaPods. Putting this hack unless we have cocoapods 1.10. More information related to the bug https://github.com/CocoaPods/CocoaPods/issues/9502#issuecomment-579486258\nfor i in {1..20}; do pod update && break || sleep 30; done\nls\n"
            },
            {
                "id": 13,
                "name": "Update ReactNativeFlipperExample Podfile.lock",
                "run": "cd react-native/ReactNativeFlipperExample\nyarn install\ncd ios\npod update --repo-update\nls\n"
            },
            {
                "id": 14,
                "name": "Create a temporary tag branch",
                "run": "git config --global user.name 'GitHub'\ngit config --global user.email 'noreply@github.com'\ngit checkout -b temp-${GITHUB_REF:10}\ngit push --set-upstream origin temp-${GITHUB_REF:10}\n"
            },
            {
                "id": 15,
                "name": "Git status",
                "run": "git status\n"
            },
            {
                "id": 16,
                "name": "Git diff",
                "run": "git diff\n"
            },
            {
                "id": 17,
                "name": "Git branch",
                "run": "git branch\n"
            },
            {
                "id": 18,
                "name": "Create PR to Update Podfile.lock",
                "run": "peter-evans/create-pull-request@v5.0.2"
            },
            {
                "id": 19,
                "name": "Delete tag branch",
                "run": "git push --delete origin temp-${GITHUB_REF:10}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "maxim-lobanov/setup-cocoapods@v1.3.0"
            },
            {
                "id": 4,
                "name": "Install yarn dependencies",
                "run": "yarn install --ignore-scripts"
            },
            {
                "id": 5,
                "name": "Install react-native-flipper",
                "run": "yarn relative-deps"
            },
            {
                "id": 6,
                "name": "Install pod dependencies",
                "run": "cd ios && pod install --repo-update"
            },
            {
                "id": 7,
                "name": "Build React Native iOS Example debug app",
                "run": "cd ios\nIPHONESIMULATOR=$(xcodebuild -showsdks | grep -o \"iphonesimulator[0-9]\\\\+\\\\.[0-9]\\\\+$\") && echo $IPHONESIMULATOR\nxcodebuild -workspace ReactNativeFlipperExample.xcworkspace -configuration Debug -scheme ReactNativeFlipperExample -sdk $IPHONESIMULATOR EXCLUDED_ARCHS=\"arm64\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "set up JDK",
                "run": "actions/setup-java@v3.11.0"
            },
            {
                "id": 4,
                "name": "Compute build cache",
                "run": "${GITHUB_WORKSPACE}/scripts/checksum-android.sh checksum-android.txt"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/cache@v3.3.1"
            },
            {
                "id": 6,
                "name": "Install yarn dependencies",
                "run": "yarn install --ignore-scripts"
            },
            {
                "id": 7,
                "name": "Install react-native-flipper",
                "run": "yarn relative-deps"
            },
            {
                "id": 8,
                "name": "Build React Native Android Example debug app",
                "run": "mkdir -p android/app/src/main/assets\nyarn react-native bundle --platform android --dev true --entry-file index.native.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res\ncd android && ./gradlew assembleDebug\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "NuGet/setup-nuget@v1.2.0"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "microsoft/setup-msbuild@v1.3.1"
            },
            {
                "id": 7,
                "name": "Gather environment info",
                "run": "npx envinfo"
            },
            {
                "id": 8,
                "name": "Install vcpkg packages",
                "run": "vcpkg install openssl:x64-uwp openssl:arm-uwp"
            },
            {
                "id": 9,
                "name": "Integrate vcpkg",
                "run": "vcpkg integrate install"
            },
            {
                "id": 10,
                "name": "Install yarn dependencies (react-native-flipper)",
                "run": "yarn install"
            },
            {
                "id": 11,
                "name": "Nuget restore (react-native-flipper)",
                "run": "nuget install ReactNativeFlipper/packages.config"
            },
            {
                "id": 12,
                "name": "Install yarn dependencies",
                "run": "yarn install"
            },
            {
                "id": 13,
                "name": "Install react-native-flipper",
                "run": "yarn relative-deps"
            },
            {
                "id": 14,
                "name": "Build React Native Windows Example debug app",
                "run": "npx react-native run-windows --logging --no-autolink --no-packager --no-deploy --no-launch --arch x64"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "passy/extract-version-commit@v1.0.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 3,
                "name": "Tag version commit",
                "run": "passy/tag-version-commit@v1.2.0"
            },
            {
                "id": 4,
                "name": "Create release",
                "run": "softprops/action-gh-release@v0.1.15"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "Install",
                "run": "nick-invision/retry@v2.0.0"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "cd ${{env.desktop-directory}} && yarn build:flipper-server --mac --dmg --linux --win --tar"
            },
            {
                "id": 5,
                "name": "List dist artifacts",
                "run": "ls -l dist/"
            },
            {
                "id": 6,
                "name": "Upload Mac x86-64",
                "run": "actions/upload-artifact@v3.1.2"
            },
            {
                "id": 7,
                "name": "Upload Mac aarch64",
                "run": "actions/upload-artifact@v3.1.2"
            },
            {
                "id": 8,
                "name": "Upload Linux x64",
                "run": "actions/upload-artifact@v3.1.2"
            },
            {
                "id": 9,
                "name": "Upload Windows x64",
                "run": "actions/upload-artifact@v3.1.2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "Install",
                "run": "nick-invision/retry@v2.0.0"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "cd ${{env.desktop-directory}} && yarn build:flipper-server"
            },
            {
                "id": 5,
                "name": "List dist artifacts",
                "run": "ls -l dist/"
            },
            {
                "id": 6,
                "name": "Upload flipper-server",
                "run": "actions/upload-artifact@v3.1.2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.5.3"
            },
            {
                "id": 2,
                "name": "Download Flipper Server x86-64",
                "run": "actions/download-artifact@v1"
            },
            {
                "id": 3,
                "name": "Download Flipper Server aarch64",
                "run": "actions/download-artifact@v1"
            },
            {
                "id": 4,
                "name": "Download Flipper Server",
                "run": "actions/download-artifact@v1"
            },
            {
                "id": 5,
                "name": "GitHub Upload Release Artifacts",
                "run": "aigoncharov/github-upload-release-artifacts-action@2.2.3"
            },
            {
                "id": 6,
                "name": "Set up npm token",
                "run": "echo \"//registry.yarnpkg.com/:_authToken=${{ secrets.FLIPPER_NPM_TOKEN }}\" >> ~/.npmrc"
            },
            {
                "id": 7,
                "name": "Publish flipper-server on NPM",
                "run": "tar zxvf flipper-server.tgz/flipper-server.tgz\ncd package\nyarn publish\n"
            },
            {
                "id": 8,
                "name": "Open issue on failure",
                "run": "JasonEtco/create-an-issue@v2.9.1"
            },
            {
                "id": 1,
                "name": "Publish Workflow Dispatch",
                "run": "benc-uk/workflow-dispatch@v1.2.2"
            },
            {
                "id": 2,
                "name": "Publish NPM",
                "run": "benc-uk/workflow-dispatch@v1.2.2"
            },
            {
                "id": 3,
                "name": "Publish Android",
                "run": "benc-uk/workflow-dispatch@v1.2.2"
            }
        ],
        "facebook/SPARTA": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install boost",
                "run": "sudo apt update && sudo apt install libboost-all-dev"
            },
            {
                "id": 3,
                "name": "Configure CMake",
                "run": "cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "ctest -C ${{env.BUILD_TYPE}}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install latest nightly",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "cargo build --verbose"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "cargo test --verbose"
            }
        ],
        "facebook/fbt": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup node",
                "run": "actions/setup-node@v2-beta"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn run ${{matrix.test}}"
            }
        ],
        "facebook/TestSlide": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Run Tests",
                "run": "TESTSLIDE_FORMAT=progress UNITTEST_VERBOSE=0 make ci V=1"
            },
            {
                "id": 4,
                "name": "Coveralls",
                "run": "AndreMiras/coveralls-python-action@develop"
            },
            {
                "id": 1,
                "name": "Coveralls Finished",
                "run": "AndreMiras/coveralls-python-action@develop"
            }
        ],
        "facebook/hermes": [
            {
                "id": 1,
                "name": "Set up workspace and install dependencies",
                "run": "yes | sdkmanager \"cmake;3.22.1\" &\nsudo apt update && sudo apt install -y libicu-dev"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 3,
                "name": "Build Hermes Compiler",
                "run": "cmake -S hermes -B build\n# Build the Hermes compiler so that the cross compiler build can\n# access it to build the VM\ncmake --build ./build --target hermesc -j 4"
            },
            {
                "id": 4,
                "name": "Build Hermes for Android",
                "run": "cd hermes/android\n./gradlew githubRelease"
            },
            {
                "id": 5,
                "name": "Copy artifacts",
                "run": "mkdir output\ncp build_android/distributions/hermes-runtime-android-*.tar.gz output"
            },
            {
                "id": 6,
                "name": "Checksum artifacts",
                "run": "cd output\nfor file in *\ndo\n  sha256sum \"$file\" > \"$file.sha256\"\ndone"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 1,
                "name": "Install dependencies",
                "run": "sudo apt update\nsudo apt install -y git openssh-client cmake build-essential \\\n    libreadline-dev libicu-dev zip python3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 3,
                "name": "Build linux CLI",
                "run": "cmake -S hermes -B build_hdb -DHERMES_STATIC_LINK=ON -DCMAKE_BUILD_TYPE=Release \\\n  -DCMAKE_CXX_FLAGS=-s -DCMAKE_C_FLAGS=-s \\\n  -DCMAKE_EXE_LINKER_FLAGS=\"-Wl,--whole-archive -lpthread -Wl,--no-whole-archive\"\ncmake -S hermes -B build -DHERMES_STATIC_LINK=ON -DCMAKE_BUILD_TYPE=Release \\\n  -DCMAKE_CXX_FLAGS=-s -DCMAKE_C_FLAGS=-s \\\n  -DCMAKE_EXE_LINKER_FLAGS=\"-Wl,--whole-archive -lpthread -Wl,--no-whole-archive\" \\\n  -DHERMES_ENABLE_DEBUGGER=False\ncmake --build build_hdb --target hdb\ncmake --build build --target check-hermes hermes hvm hbcdump hermesc"
            },
            {
                "id": 4,
                "name": "Create CLI tarball",
                "run": "mkdir output staging\ncp build/bin/hermes build/bin/hvm build/bin/hbcdump \\\n  build/bin/hermesc build_hdb/bin/hdb staging\ntar -C staging -czvf output/${TAR_NAME} .\nshasum -a 256 output/${TAR_NAME} > output/${TAR_NAME}.sha256"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "maxim-lobanov/setup-xcode@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "brew install cmake ninja"
            },
            {
                "id": 4,
                "name": "Build macOS CLI",
                "run": "cmake -S hermes -B build -G Ninja ${RELEASE_FLAGS} -DHERMES_ENABLE_DEBUGGER=False\ncmake --build ./build --target hermes hvm hbcdump hermesc check-hermes\ncmake -S hermes -B build_hdb -G Ninja ${RELEASE_FLAGS}\ncmake --build ./build_hdb --target hdb check-hermes"
            },
            {
                "id": 5,
                "name": "Create CLI tarball",
                "run": "mkdir output staging\ncp build/bin/hermes build/bin/hvm build/bin/hbcdump \\\n  build/bin/hermesc build_hdb/bin/hdb staging\ntar -C staging -czvf output/${TAR_NAME} .\nshasum -a 256 output/${TAR_NAME} > output/${TAR_NAME}.sha256"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "maxim-lobanov/setup-xcode@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 3,
                "name": "Cache setup",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 4,
                "name": "Set up workspace",
                "run": "mkdir -p /tmp/hermes/output"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "brew install cmake ninja\nsudo gem install cocoapods"
            },
            {
                "id": 6,
                "name": "Build the iOS frameworks",
                "run": "./utils/build-ios-framework.sh"
            },
            {
                "id": 7,
                "name": "Build the Mac frameworks",
                "run": "./utils/build-mac-framework.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "maxim-lobanov/setup-xcode@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "brew install cmake"
            },
            {
                "id": 4,
                "name": "Run MacOS regression tests in debug mode",
                "run": "cmake -S hermes -B build -GXcode\ncmake --build ./build\ncmake --build ./build --target check-hermes"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "maxim-lobanov/setup-xcode@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 3,
                "name": "Cache setup",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "brew install cmake ninja"
            },
            {
                "id": 5,
                "name": "Build the test application",
                "run": "pod install"
            },
            {
                "id": 6,
                "name": "Test MacOS application",
                "run": "xcodebuild test \\\n  -workspace ApplePlatformsIntegrationTests.xcworkspace \\\n  -configuration Debug \\\n  -destination 'platform=macOS' \\\n  -scheme ApplePlatformsIntegrationMacTests"
            },
            {
                "id": 7,
                "name": "Test iPhone application",
                "run": "# Xcode 15 uses iOS 17 for simulator, and only iPhone 14/15 can work by\n# default, so use the oldest working model here.\nxcodebuild test \\\n  -workspace ApplePlatformsIntegrationTests.xcworkspace \\\n  -configuration Debug \\\n  -destination 'platform=iOS Simulator,name=iPhone 14' \\\n  -scheme ApplePlatformsIntegrationMobileTests"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "maxim-lobanov/setup-xcode@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 3,
                "name": "Cache setup",
                "run": "actions/cache@v4.0.0"
            },
            {
                "id": 4,
                "name": "Set up workspace",
                "run": "mkdir -p /tmp/hermes/output"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "brew install cmake ninja\nsudo gem install cocoapods"
            },
            {
                "id": 6,
                "name": "Package the framework",
                "run": ". ./utils/build-apple-framework.sh\nmkdir -p /tmp/cocoapods-package-root/destroot\ncp -R ./destroot /tmp/cocoapods-package-root\ncp hermes-engine.podspec LICENSE /tmp/cocoapods-package-root\ntar -C /tmp/cocoapods-package-root/ -czvf /tmp/hermes/output/hermes-runtime-darwin-v$(get_release_version).tar.gz ."
            },
            {
                "id": 7,
                "name": "Checksum artifacts",
                "run": "cd /tmp/hermes/output\nfor file in *\ndo\n  shasum -a 256 \"$file\" > \"$file.sha256\"\ndone"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 2,
                "name": "Set up workspace",
                "run": "New-Item -ItemType Directory $Env:HERMES_WS_DIR\nNew-Item -ItemType Directory $Env:HERMES_WS_DIR\\icu\nNew-Item -ItemType Directory $Env:HERMES_WS_DIR\\staging\nNew-Item -ItemType Directory $Env:HERMES_WS_DIR\\output\nNew-Item -ItemType SymbolicLink -Target $Env:GITHUB_WORKSPACE -Path $Env:HERMES_WS_DIR -Name hermes"
            },
            {
                "id": 3,
                "name": "Download ICU",
                "run": "cd $Env:HERMES_WS_DIR\\icu\n# If Invoke-WebRequest shows a progress bar, it will fail with\n#   Win32 internal error \"Access is denied\" 0x5 occurred [...]\n$progressPreference = 'silentlyContinue'\nInvoke-WebRequest -Uri \"$Env:ICU_URL\" -OutFile \"icu.zip\"\nExpand-Archive -Path \"icu.zip\" -DestinationPath \".\""
            },
            {
                "id": 4,
                "name": "Setup cmake",
                "run": "jwlawson/actions-setup-cmake@v2.0.0"
            },
            {
                "id": 5,
                "name": "Setup python",
                "run": "actions/setup-python@v5.0.0"
            },
            {
                "id": 6,
                "name": "Assemble Windows runtime dependencies",
                "run": "cd $Env:HERMES_WS_DIR\nCopy-Item -Path \"icu\\bin64\\icu*.dll\" -Destination \"staging\"\n# Include MSVC++ 2015 redistributables\nCopy-Item -Path \"c:\\windows\\system32\\msvcp140.dll\" -Destination \"staging\"\nCopy-Item -Path \"c:\\windows\\system32\\vcruntime140.dll\" -Destination \"staging\"\nCopy-Item -Path \"c:\\windows\\system32\\vcruntime140_1.dll\" -Destination \"staging\""
            },
            {
                "id": 7,
                "name": "Build Windows CLI",
                "run": "$Env:PATH += \";$Env:MSBUILD_DIR\"\n$Env:ICU_ROOT = \"$Env:HERMES_WS_DIR\\icu\"\ncd $Env:HERMES_WS_DIR\ncmake -S hermes -B build -G 'Visual Studio 16 2019' -Ax64 -DHERMES_ENABLE_DEBUGGER=False $Env:RELEASE_FLAGS\nif (-not $?) { throw \"Failed to configure Hermes\" }\ncmake -S hermes -B build_hdb -G 'Visual Studio 16 2019' -Ax64 $Env:RELEASE_FLAGS\nif (-not $?) { throw \"Failed to configure Hermes\" }\ncmake --build ./build --config Release -- -m /p:UseMultiToolTask=true -m /p:EnforceProcessCountAcrossBuilds=true\nif (-not $?) { throw \"Failed to build Hermes\" }\ncmake --build ./build_hdb --config Release --target hdb -- -m /p:UseMultiToolTask=true -m /p:EnforceProcessCountAcrossBuilds=true\nif (-not $?) { throw \"Failed to build Hermes\" }"
            },
            {
                "id": 8,
                "name": "Create CLI tarball",
                "run": "cd $Env:HERMES_WS_DIR\nCopy-Item -Path \"build\\bin\\Release\\hermes.exe\" -Destination \"staging\"\nCopy-Item -Path \"build\\bin\\Release\\hvm.exe\" -Destination \"staging\"\nCopy-Item -Path \"build\\bin\\Release\\hbcdump.exe\" -Destination \"staging\"\nCopy-Item -Path \"build\\bin\\Release\\hermesc.exe\" -Destination \"staging\"\nCopy-Item -Path \"build_hdb\\bin\\Release\\hdb.exe\" -Destination \"staging\"\ncd staging\ncmake -E tar zcf ..\\output\\$Env:TAR_NAME ."
            },
            {
                "id": 9,
                "name": "Checksum artifacts",
                "run": "cd $Env:HERMES_WS_DIR\\output\n$hash = Get-FileHash -Path $Env:TAR_NAME -Algorithm SHA256\nWrite-Output ($hash.Hash + \"  \" + $Env:TAR_NAME) |\n      Out-File -Encoding ASCII -FilePath ($Env:TAR_NAME +\".sha256\")"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-node@v4.0.2"
            },
            {
                "id": 2,
                "name": "Print versions",
                "run": "node --version\nyarn --version"
            },
            {
                "id": 3,
                "name": "Install dependencies and set up",
                "run": "mkdir -p /tmp/hermes/output"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@v4.1.2"
            },
            {
                "id": 6,
                "name": "Build NPM",
                "run": "ls -lR\ncd npm\ncp ../macos-hermes/* .\ncp ../windows-hermes/* .\ncp ../android-hermes/* .\ncp ../apple-runtime/* .\ncp ../emscripten-hermes/* .\ncp ../linux-hermes/* .\nyarn install\nyarn unpack-builds\nyarn create-npms"
            },
            {
                "id": 7,
                "name": "Copy artifacts",
                "run": "cd npm\ncp *.tgz /tmp/hermes/output"
            },
            {
                "id": 8,
                "name": "Checksum artifacts",
                "run": "cd /tmp/hermes/output\nfor file in *\ndo\n  sha256sum \"$file\" > \"$file.sha256\"\ndone"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 1,
                "name": "Install dependencies",
                "run": "apt update\napt install -y libicu-dev"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 3,
                "name": "Build Hermes Compiler",
                "run": "cmake -S hermes -B build_host_hermesc\ncmake --build ./build_host_hermesc --target hermesc -j 4"
            },
            {
                "id": 4,
                "name": "Build Hermes with Emscripten for Website Playground",
                "run": "echo LINKER_FLAGS: $LINKER_FLAGS\ncmake -S hermes -B playground \\\n    -DCMAKE_BUILD_TYPE=Release  \\\n    -DCMAKE_EXE_LINKER_FLAGS=\"$LINKER_FLAGS\" \\\n    -DCMAKE_TOOLCHAIN_FILE=\"$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake\" \\\n    -DIMPORT_HERMESC=\"$PWD/build_host_hermesc/ImportHermesc.cmake\"\ncmake --build ./playground --target hermes -j 4\ncmake --build ./playground --target hermesc -j 4\ncmake --build ./playground --target emhermesc -j 4\nEMHERMESC=\"$PWD/playground/bin/emhermesc.js\" node ./hermes/tools/emhermesc/test.js"
            },
            {
                "id": 5,
                "name": "Create Playground tarball",
                "run": "mkdir output staging\ncp ./playground/bin/hermes.js ./playground/bin/hermes.wasm staging\ntar -C staging -czvf output/${TAR_NAME} .\nshasum -a 256 output/${TAR_NAME} > output/${TAR_NAME}.sha256"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v4.3.1"
            },
            {
                "id": 1,
                "name": "Install dependencies",
                "run": "apt update\napt install -y libicu-dev tzdata\nwget https://github.com/WebAssembly/wabt/releases/download/1.0.33/wabt-1.0.33-ubuntu.tar.gz\ntar -xvf ./wabt-1.0.33-ubuntu.tar.gz"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 3,
                "name": "Build Hermes with Emscripten",
                "run": "# Generate the host compiler.\ncmake -S hermes -B build_host\ncmake --build ./build_host --target hermesc -j 4\n# Generate and build the debug artefact.\ncmake -S hermes -B build_wasm_dbg \\\n  -DCMAKE_TOOLCHAIN_FILE=$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \\\n  -DIMPORT_HERMESC=build_host/ImportHermesc.cmake \\\n  -DCMAKE_BUILD_TYPE=Debug -DHERMES_UNICODE_LITE=ON \\\n  -DCMAKE_CXX_FLAGS=-O2  -DCMAKE_C_FLAGS=-O2 \\\n  -DCMAKE_EXE_LINKER_FLAGS=\"-sALLOW_MEMORY_GROWTH=1 -sSTACK_SIZE=256KB\" \\\n  -DHERMES_ENABLE_DEBUGGER=OFF -DHERMES_SLOW_DEBUG=OFF\ncmake --build build_wasm_dbg --target hermesSandboxImpl -j 4\n./wabt-1.0.33/bin/wasm2c build_wasm_dbg/API/hermes_sandbox/hermesSandboxImpl.wasm -n hermes \\\n  -o hermes/API/hermes_sandbox/external/hermes_sandbox_impl_dbg_compiled.c --num-outputs 8\n# Generate and build the release artefact.\ncmake -S hermes -B build_wasm_opt \\\n  -DCMAKE_TOOLCHAIN_FILE=$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \\\n  -DIMPORT_HERMESC=build_host/ImportHermesc.cmake \\\n  -DCMAKE_BUILD_TYPE=Release -DHERMES_UNICODE_LITE=ON \\\n  -DCMAKE_EXE_LINKER_FLAGS=\"-sALLOW_MEMORY_GROWTH=1 -sSTACK_SIZE=256KB -g2\" \\\n  -DHERMES_ENABLE_DEBUGGER=OFF\ncmake --build build_wasm_opt --target hermesSandboxImpl -j 4\n./wabt-1.0.33/bin/wasm2c build_wasm_opt/API/hermes_sandbox/hermesSandboxImpl.wasm -n hermes \\\n  -o hermes/API/hermes_sandbox/external/hermes_sandbox_impl_opt_compiled.c --num-outputs 8"
            },
            {
                "id": 4,
                "name": "Build and test with the newly generated sandbox",
                "run": "cmake -S hermes -B build_dbg -DCMAKE_BUILD_TYPE=Debug\ncmake --build build_dbg -j 4\ncmake --build build_dbg --target check-hermes -j 4\ncmake -S hermes -B build_opt -DCMAKE_BUILD_TYPE=Release\ncmake --build build_opt -j 4\ncmake --build build_opt --target check-hermes -j 4"
            },
            {
                "id": 1,
                "name": "Install dependencies",
                "run": "sudo apt update\nsudo apt install -y git openssh-client cmake build-essential \\\n    libicu-dev zip python3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 3,
                "name": "Run Hermes regression tests",
                "run": "cmake -S hermes -B build\ncmake --build build --target check-hermes all -j 4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 2,
                "name": "Run Hermes regression tests",
                "run": "cmake -S hermes -B build -G 'Visual Studio 16 2019'\ncmake --build build --target check-hermes -- -m /p:UseMultiToolTask=true -m /p:EnforceProcessCountAcrossBuilds=true"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-node@v4.0.2"
            },
            {
                "id": 2,
                "name": "Setup dependencies",
                "run": "(yes | sdkmanager \"cmake;3.22.1\" --verbose) || true\nsudo apt update && sudo apt install -y openjdk-11-jdk"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 4,
                "name": "Prepare RNTester",
                "run": "git clone --depth=1 https://github.com/facebook/react-native\ncd react-native\nyarn install\necho \"console.log('Using Hermes: ' + (global.HermesInternal != null));\" >> packages/rn-tester/js/RNTesterApp.android.js"
            },
            {
                "id": 5,
                "name": "Run android tests",
                "run": "./gradlew -PreactNativeArchitectures=x86 :packages:rn-tester:android:app:installHermesRelease\n&& adb shell am start com.facebook.react.uiapp/.RNTesterActivity\n&& timeout 30s adb logcat -e \"Using Hermes: true\" -m 1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 2,
                "name": "Setup dependencies",
                "run": "(yes | sdkmanager \"cmake;3.22.1\" --verbose) || true\n# Check out test262 at a pinned revision to reduce flakiness\ngit clone https://github.com/tc39/test262\ncd test262\ngit checkout 19da3ca0757248f7595ee09d532bb83dd438f2b5"
            },
            {
                "id": 3,
                "name": "Build Hermes Compiler",
                "run": "cmake -S hermes -B ./build -DCMAKE_BUILD_TYPE=Release\ncmake --build ./build -j 4 --target hermesc"
            },
            {
                "id": 4,
                "name": "Run android tests",
                "run": "./gradlew :intltest:prepareTests && ./gradlew -Pabis=x86 :intltest:connectedAndroidTest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "maxim-lobanov/setup-xcode@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4.1.0"
            },
            {
                "id": 3,
                "name": "Setup dependencies",
                "run": "brew install cmake ninja\n# Check out test262 at a pinned revision to reduce flakiness\ngit clone https://github.com/tc39/test262\ncd test262\ngit checkout 19da3ca0757248f7595ee09d532bb83dd438f2b5"
            },
            {
                "id": 4,
                "name": "Run Hermes tests and test262 with Intl",
                "run": "cmake -S hermes -B build -GNinja -DHERMES_ENABLE_INTL=ON\ncmake --build ./build\ncmake --build ./build --target check-hermes\npython3 hermes/utils/testsuite/run_testsuite.py --test-intl test262/test -b build/bin"
            },
            {
                "id": 1,
                "name": "Get current date",
                "run": "echo \"date=$(date +'%Y-%m-%d')\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 2,
                "name": "Get the target SHA",
                "run": "echo \"targetSha=$(if [ -z \"$TARGET_SHA\" ]; then echo $GITHUB_SHA; else echo $TARGET_SHA; fi)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 3,
                "name": "Create tag",
                "run": "actions/github-script@v5"
            }
        ],
        "facebook/Ax": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install black==24.2.0\npip install usort==1.0.8\npip install libcst==1.1.0\npip install ufmt\npip install flake8\n"
            },
            {
                "id": 4,
                "name": "ufmt",
                "run": "ufmt diff .\n"
            },
            {
                "id": 5,
                "name": "Flake8",
                "run": "flake8\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "# use latest Botorch\npip install git+https://github.com/cornellius-gp/gpytorch.git\npip install git+https://github.com/pytorch/botorch.git\npip install -e \".[unittest]\"\n"
            },
            {
                "id": 4,
                "name": "Validate Sphinx",
                "run": "python scripts/validate_sphinx.py -p \"${pwd}\"\n"
            },
            {
                "id": 5,
                "name": "Run Sphinx",
                "run": "# warnings no longer treated as errors.\nsphinx-build -T --keep-going sphinx/source sphinx/build\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "# use latest BoTorch\npip install git+https://github.com/cornellius-gp/gpytorch.git\npip install git+https://github.com/pytorch/botorch.git\npip install -e \".[tutorial]\"\n"
            },
            {
                "id": 4,
                "name": "Publish latest website",
                "run": "bash scripts/publish_site.sh -d\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Fetch all history for all tags and branches",
                "run": "git fetch --prune --unshallow"
            },
            {
                "id": 3,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "# use latest BoTorch\npip install git+https://github.com/cornellius-gp/gpytorch.git\npip install git+https://github.com/pytorch/botorch.git\npip install -e \".[dev,mysql,notebook]\"\npip install wheel\n"
            },
            {
                "id": 5,
                "name": "Build wheel",
                "run": "python setup.py sdist bdist_wheel\n"
            },
            {
                "id": 6,
                "name": "Deploy to Test PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "# use stable Botorch\npip install -e \".[tutorial]\"\n"
            },
            {
                "id": 4,
                "name": "Publish latest website",
                "run": "bash scripts/publish_site.sh -d -v ${{ github.event.release.tag_name }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "# use stable Botorch\npip install -e \".[dev,mysql,notebook]\"\npip install wheel\n"
            },
            {
                "id": 4,
                "name": "Fetch all history for all tags and branches",
                "run": "git fetch --prune --unshallow"
            },
            {
                "id": 5,
                "name": "Build wheel",
                "run": "python setup.py sdist bdist_wheel\n"
            },
            {
                "id": 6,
                "name": "Deploy to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies with pinned BoTorch (minimal dependencies ${{ inputs.minimal_dependencies }})",
                "run": "# The brackets returns '.[unittest_minimal]' if using minimal dependencies and '.[unittest]'\n# otherwise. This saves us from needing 4 install dependencies blocks by supporting two\n# different installation options in one line.\npip install -e ${{ ((inputs.minimal_dependencies) && '.[unittest_minimal]') || '.[unittest]' }}\n"
            },
            {
                "id": 4,
                "name": "Install dependencies with latest BoTorch (minimal dependencies ${{ inputs.minimal_dependencies }})",
                "run": "pip install git+https://github.com/cornellius-gp/gpytorch.git\npip install git+https://github.com/pytorch/botorch.git\npip install -e ${{ ((inputs.minimal_dependencies) && '.[unittest_minimal]') || '.[unittest]' }}\n"
            },
            {
                "id": 5,
                "name": "Import Ax",
                "run": "python scripts/import_ax.py\n"
            },
            {
                "id": 6,
                "name": "Tests and coverage",
                "run": "pytest -ra --cov=ax\n"
            },
            {
                "id": 7,
                "name": "Upload coverage",
                "run": "codecov/codecov-action@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies with pinned BoTorch",
                "run": "pip install -e \".[tutorial]\"\n"
            },
            {
                "id": 4,
                "name": "Install dependencies with latest BoTorch",
                "run": "pip install git+https://github.com/cornellius-gp/gpytorch.git\npip install git+https://github.com/pytorch/botorch.git\npip install -e \".[tutorial]\"\n"
            },
            {
                "id": 5,
                "name": "Build tutorials with smoke test",
                "run": "python scripts/make_tutorials.py -w $(pwd) -e -s\n"
            },
            {
                "id": 6,
                "name": "Build tutorials without smoke test",
                "run": "python scripts/make_tutorials.py -w $(pwd) -e\n"
            }
        ],
        "facebook/ktfmt": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build ktfmt",
                "run": "mvn -B install --file pom.xml"
            },
            {
                "id": 4,
                "name": "Build ktfmt_idea_plugin",
                "run": "pushd ktfmt_idea_plugin\n./gradlew build\npopd\n"
            },
            {
                "id": 5,
                "name": "Build the Online Formatter",
                "run": "pushd online_formatter\n./gradlew build\npopd\n"
            }
        ],
        "facebook/ristretto255-js": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn lint"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "yarn build"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "yarn test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm publish"
            }
        ],
        "facebook/CacheLib": [
            {
                "id": 1,
                "name": "Show Head Commit",
                "run": "echo \"$CONTENT\""
            },
            {
                "id": 2,
                "name": "update packages",
                "run": "dnf update -y"
            },
            {
                "id": 3,
                "name": "install sudo,git",
                "run": "dnf install -y sudo git cmake gcc procps"
            },
            {
                "id": 4,
                "name": "System Information",
                "run": "echo === uname ===\nuname -a\necho === /etc/os-release ===\ncat /etc/os-release\necho === /etc/centos-release ===\ncat /etc/centos-release\necho === df -hl ===\ndf -hl\necho === nproc ===\nnproc || true\necho === free -h ===\nfree -h\necho === top ===\ntop -b -n1 -1 -Eg || timeout 1 top -b -n1\necho === env ===\nenv\necho === gcc -v ===\ngcc -v\n"
            },
            {
                "id": 5,
                "name": "checkout sources",
                "run": "actions/checkout@v3"
            },
            {
                "id": 6,
                "name": "Add workspace as a safe directory",
                "run": "git config --system --add safe.directory $GITHUB_WORKSPACE"
            },
            {
                "id": 7,
                "name": "Install Prerequisites",
                "run": "./contrib/build.sh -S -B"
            },
            {
                "id": 8,
                "name": "Test: update-submodules",
                "run": "./contrib/update-submodules.sh"
            },
            {
                "id": 9,
                "name": "Install dependency: zstd",
                "run": "./contrib/build-package.sh -j -v -i zstd"
            },
            {
                "id": 10,
                "name": "Install dependency: googleflags",
                "run": "./contrib/build-package.sh -j -v -i googleflags"
            },
            {
                "id": 11,
                "name": "Install dependency: googlelog",
                "run": "./contrib/build-package.sh -j -v -i googlelog"
            },
            {
                "id": 12,
                "name": "Install dependency: googletest",
                "run": "./contrib/build-package.sh -j -v -i googletest"
            },
            {
                "id": 13,
                "name": "Install dependency: sparsemap",
                "run": "./contrib/build-package.sh -j -v -i sparsemap"
            },
            {
                "id": 14,
                "name": "Install dependency: fmt",
                "run": "./contrib/build-package.sh -j -v -i fmt"
            },
            {
                "id": 15,
                "name": "Install dependency: folly",
                "run": "./contrib/build-package.sh -j -v -i folly"
            },
            {
                "id": 16,
                "name": "Install dependency: fizz",
                "run": "./contrib/build-package.sh -j -v -i fizz"
            },
            {
                "id": 17,
                "name": "Install dependency: wangle",
                "run": "./contrib/build-package.sh -j -v -i wangle"
            },
            {
                "id": 18,
                "name": "Install dependency: mvfst",
                "run": "./contrib/build-package.sh -j -v -i mvfst"
            },
            {
                "id": 19,
                "name": "Install dependency: fbthrift",
                "run": "./contrib/build-package.sh -j -v -i fbthrift"
            },
            {
                "id": 20,
                "name": "build CacheLib",
                "run": "./contrib/build-package.sh -j -v -i -d cachelib"
            },
            {
                "id": 21,
                "name": "run cachebench",
                "run": "./opt/cachelib/bin/cachebench --json_test_config ./opt/cachelib/test_configs/simple_test.json"
            },
            {
                "id": 22,
                "name": "Step 22",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Show Head Commit",
                "run": "echo \"$CONTENT\""
            },
            {
                "id": 2,
                "name": "update packages",
                "run": "dnf update -y"
            },
            {
                "id": 3,
                "name": "install sudo,git",
                "run": "dnf install -y sudo git cmake gcc procps"
            },
            {
                "id": 4,
                "name": "System Information",
                "run": "echo === uname ===\nuname -a\necho === /etc/os-release ===\ncat /etc/os-release\necho === df -hl ===\ndf -hl\necho === nproc ===\nnproc || true\necho === free -h ===\nfree -h\necho === top ===\ntop -b -n1 -1 -Eg || timeout 1 top -b -n1\necho === env ===\nenv\necho === gcc -v ===\ngcc -v\n"
            },
            {
                "id": 5,
                "name": "checkout sources",
                "run": "actions/checkout@v3"
            },
            {
                "id": 6,
                "name": "Add workspace as a safe directory",
                "run": "git config --system --add safe.directory $GITHUB_WORKSPACE"
            },
            {
                "id": 7,
                "name": "Install Prerequisites",
                "run": "./contrib/build.sh -S -B"
            },
            {
                "id": 8,
                "name": "Test: update-submodules",
                "run": "./contrib/update-submodules.sh"
            },
            {
                "id": 9,
                "name": "Install dependency: zstd",
                "run": "./contrib/build-package.sh -j -v -i zstd"
            },
            {
                "id": 10,
                "name": "Install dependency: googleflags",
                "run": "./contrib/build-package.sh -j -v -i googleflags"
            },
            {
                "id": 11,
                "name": "Install dependency: googlelog",
                "run": "./contrib/build-package.sh -j -v -i googlelog"
            },
            {
                "id": 12,
                "name": "Install dependency: googletest",
                "run": "./contrib/build-package.sh -j -v -i googletest"
            },
            {
                "id": 13,
                "name": "Install dependency: sparsemap",
                "run": "./contrib/build-package.sh -j -v -i sparsemap"
            },
            {
                "id": 14,
                "name": "Install dependency: fmt",
                "run": "./contrib/build-package.sh -j -v -i fmt"
            },
            {
                "id": 15,
                "name": "Install dependency: folly",
                "run": "# see: https://aur.archlinux.org/packages/folly#comment-862543\nsed -i '$aset(LIBDWARF_INCLUDE_DIRS \"/usr/include/libdwarf-0\")' cachelib/external/folly/CMake/FindLibDwarf.cmake\n./contrib/build-package.sh -S -j -v -i folly\n"
            },
            {
                "id": 16,
                "name": "Install dependency: fizz",
                "run": "./contrib/build-package.sh -j -v -i fizz"
            },
            {
                "id": 17,
                "name": "Install dependency: wangle",
                "run": "./contrib/build-package.sh -j -v -i wangle"
            },
            {
                "id": 18,
                "name": "Install dependency: mvfst",
                "run": "./contrib/build-package.sh -j -v -i mvfst"
            },
            {
                "id": 19,
                "name": "Install dependency: fbthrift",
                "run": "./contrib/build-package.sh -j -v -i fbthrift"
            },
            {
                "id": 20,
                "name": "build CacheLib",
                "run": "./contrib/build-package.sh -j -v -i -d cachelib"
            },
            {
                "id": 21,
                "name": "run cachebench",
                "run": "./opt/cachelib/bin/cachebench --json_test_config ./opt/cachelib/test_configs/simple_test.json"
            },
            {
                "id": 22,
                "name": "Step 22",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Show Head Commit",
                "run": "echo \"$CONTENT\""
            },
            {
                "id": 2,
                "name": "update packages",
                "run": "sudo apt-get update"
            },
            {
                "id": 3,
                "name": "install sudo,git",
                "run": "sudo apt-get install -y git procps"
            },
            {
                "id": 4,
                "name": "System Information",
                "run": "echo === uname ===\nuname -a\necho === /etc/os-release ===\ncat /etc/os-release\necho === df -hl ===\ndf -hl\necho === nproc ===\nnproc || true\necho === free -h ===\nfree -h\necho === top ===\ntop -b -n1 -1 -Eg || timeout 1 top -b -n1\necho === env ===\nenv\necho === cc -v ===\ncc -v\necho === g++ -v ===\ng++ -v\n"
            },
            {
                "id": 5,
                "name": "checkout sources",
                "run": "actions/checkout@v3"
            },
            {
                "id": 6,
                "name": "Add workspace as a safe directory",
                "run": "git config --global --add safe.directory $GITHUB_WORKSPACE"
            },
            {
                "id": 7,
                "name": "Install Prerequisites",
                "run": "./contrib/build.sh -S -B"
            },
            {
                "id": 8,
                "name": "Test: update-submodules",
                "run": "./contrib/update-submodules.sh"
            },
            {
                "id": 9,
                "name": "Install dependency: zstd",
                "run": "./contrib/build-package.sh -j -v -i zstd"
            },
            {
                "id": 10,
                "name": "Install dependency: googleflags",
                "run": "./contrib/build-package.sh -j -v -i googleflags"
            },
            {
                "id": 11,
                "name": "Install dependency: googlelog",
                "run": "./contrib/build-package.sh -j -v -i googlelog"
            },
            {
                "id": 12,
                "name": "Install dependency: googletest",
                "run": "./contrib/build-package.sh -j -v -i googletest"
            },
            {
                "id": 13,
                "name": "Install dependency: sparsemap",
                "run": "./contrib/build-package.sh -j -v -i sparsemap"
            },
            {
                "id": 14,
                "name": "Install dependency: fmt",
                "run": "./contrib/build-package.sh -j -v -i fmt"
            },
            {
                "id": 15,
                "name": "Install dependency: folly",
                "run": "./contrib/build-package.sh -j -v -i folly"
            },
            {
                "id": 16,
                "name": "Install dependency: fizz",
                "run": "./contrib/build-package.sh -j -v -i fizz"
            },
            {
                "id": 17,
                "name": "Install dependency: wangle",
                "run": "./contrib/build-package.sh -j -v -i wangle"
            },
            {
                "id": 18,
                "name": "Install dependency: mvfst",
                "run": "./contrib/build-package.sh -j -v -i mvfst"
            },
            {
                "id": 19,
                "name": "Install dependency: fbthrift",
                "run": "./contrib/build-package.sh -j -v -i fbthrift"
            },
            {
                "id": 20,
                "name": "build CacheLib",
                "run": "./contrib/build-package.sh -j -v -i -d -t cachelib"
            },
            {
                "id": 21,
                "name": "run cachebench",
                "run": "./opt/cachelib/bin/cachebench --json_test_config ./opt/cachelib/test_configs/simple_test.json"
            },
            {
                "id": 22,
                "name": "Step 22",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Run clang-format style check for C/C++ programs.",
                "run": "jidicula/clang-format-action@v4.6.2"
            }
        ],
        "facebook/usort": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set Up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install",
                "run": "python -VV\npython -m pip install -U pip\npython -m pip install -U .[dev]\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "make test"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "make lint"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set Up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Check backwards compatibility",
                "run": "python -m pip install -U pip packaging\nmake backcompat\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set Up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install",
                "run": "python -VV\npython -m pip install -U .[docs]\n"
            },
            {
                "id": 4,
                "name": "Build sphinx docs",
                "run": "make html"
            }
        ],
        "facebook/opaque-ke": [
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Install ${{ matrix.toolchain }} toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Run cargo test",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 4,
                "name": "Run cargo test with std",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "hecrj/setup-rust-action@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo install cross"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cross test --verbose --target=${{ matrix.target }} --no-default-features ${{ matrix.backend_feature }}"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cross test --verbose --target=${{ matrix.target }} --no-default-features --features std ${{ matrix.backend_feature }}"
            },
            {
                "id": 1,
                "name": "install expect",
                "run": "sudo apt-get install expect"
            },
            {
                "id": 2,
                "name": "Checkout sources",
                "run": "actions/checkout@main"
            },
            {
                "id": 3,
                "name": "install rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "Run expect (which then runs cargo run)",
                "run": "expect -f scripts/simple_login.exp"
            },
            {
                "id": 1,
                "name": "install expect",
                "run": "sudo apt-get install expect"
            },
            {
                "id": 2,
                "name": "Checkout sources",
                "run": "actions/checkout@main"
            },
            {
                "id": 3,
                "name": "install rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "Run expect (which then runs cargo run)",
                "run": "expect -f scripts/digital_locker.exp"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "hecrj/setup-rust-action@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup target add ${{ matrix.target }}"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo build --verbose --target=${{ matrix.target }} --no-default-features --features ${{ matrix.frontend_feature }},${{ matrix.backend_feature }}"
            },
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Install stable toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Run cargo bench --no-run",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Install stable toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Run cargo clippy",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 4,
                "name": "Run cargo doc",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Install nightly toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Run cargo fmt",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 2,
                "name": "Install Taplo",
                "run": "cargo install taplo-cli --locked"
            },
            {
                "id": 3,
                "name": "Checkout sources",
                "run": "actions/checkout@main"
            },
            {
                "id": 4,
                "name": "Run Taplo",
                "run": "taplo fmt --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "EmbarkStudios/cargo-deny-action@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "hecrj/setup-rust-action@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@main"
            },
            {
                "id": 3,
                "name": "Login to crates.io",
                "run": "cargo login $CRATES_IO_TOKEN"
            },
            {
                "id": 4,
                "name": "Dry run publish opaque-ke",
                "run": "cargo publish --dry-run --manifest-path Cargo.toml"
            },
            {
                "id": 5,
                "name": "Publish opaque-ke",
                "run": "cargo publish --manifest-path Cargo.toml"
            }
        ],
        "facebook/mariana-trench": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "brew install meson"
            },
            {
                "id": 3,
                "name": "Fetch Redex",
                "run": "git clone https://github.com/facebook/redex.git"
            },
            {
                "id": 4,
                "name": "Build static binary",
                "run": "./scripts/build_static_binary.py --jobs=$(sysctl -n hw.ncpu)"
            },
            {
                "id": 5,
                "name": "Build pypi package",
                "run": "./scripts/setup.py \\\n  --version \"${{ github.event.inputs.version }}\" \\\n  --binary mariana-trench-binary \\\n  --pyredex redex/pyredex \\\n  build\n"
            },
            {
                "id": 6,
                "name": "Log the output directory",
                "run": "ls -lisah dist"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "sudo apt-get install meson"
            },
            {
                "id": 3,
                "name": "Fetch Redex",
                "run": "git clone https://github.com/facebook/redex.git"
            },
            {
                "id": 4,
                "name": "Build static binary",
                "run": "./scripts/build_static_binary.py --jobs=$(nproc)"
            },
            {
                "id": 5,
                "name": "Build pypi package",
                "run": "./scripts/setup.py \\\n  --version \"${{ github.event.inputs.version }}\" \\\n  --binary mariana-trench-binary \\\n  --pyredex redex/pyredex \\\n  build\n"
            },
            {
                "id": 6,
                "name": "Log the output directory",
                "run": "ls -lisah dist"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Make a 'dist' folder",
                "run": "mkdir dist"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 5,
                "name": "Publish distribution to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Homebrew/actions/setup-homebrew@master"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "brew install cmake zlib boost googletest jsoncpp re2"
            },
            {
                "id": 4,
                "name": "Install Redex",
                "run": "git clone https://github.com/facebook/redex.git\ncd redex\nmkdir build\ncd build\ncmake -DCMAKE_INSTALL_PREFIX=\"../install\" ..\nmake -j$(sysctl -n hw.ncpu)\nmake install\ncd ../..\n"
            },
            {
                "id": 5,
                "name": "Install fmt",
                "run": "git clone https://github.com/fmtlib/fmt.git\ncd fmt\ngit checkout 9.1.0\nmkdir build\ncd build\ncmake -DCMAKE_INSTALL_PREFIX=\"../install\" ..\nmake -j$(sysctl -n hw.ncpu)\nmake install\ncd ../..\n"
            },
            {
                "id": 6,
                "name": "Build and Test Mariana Trench",
                "run": "mkdir build\ncd build\ncmake -DREDEX_ROOT=\"../redex/install\" -Dfmt_ROOT=\"../fmt/install\" -DFMT_DEPRECATED_OSTREAM=ON -DEXCLUDE_INTEGRATION_TESTS=\"check_cast_types\" -DCMAKE_INSTALL_PREFIX=\"../install\" ..\nmake -j$(sysctl -n hw.ncpu)\nmake install\nmake check -j$(sysctl -n hw.ncpu)\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Homebrew/actions/setup-homebrew@master"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "brew install cmake zlib boost googletest jsoncpp re2 git\nsudo apt update\nsudo apt install default-jre default-jdk\n"
            },
            {
                "id": 4,
                "name": "Install fmt",
                "run": "git clone https://github.com/fmtlib/fmt.git\ncd fmt\ngit checkout 9.1.0\nmkdir build\ncd build\ncmake -DCMAKE_INSTALL_PREFIX=\"../install\" ..\nmake -j$(nproc)\nmake install\ncd ../..\n"
            },
            {
                "id": 5,
                "name": "Install Redex and build and test Mariana Trench",
                "run": "export CMAKE_PREFIX_PATH=/home/linuxbrew/.linuxbrew/opt/jsoncpp:/home/linuxbrew/.linuxbrew/opt/zlib\ngit clone https://github.com/facebook/redex.git\ncd redex\nmkdir build\ncd build\ncmake -DCMAKE_INSTALL_PREFIX=\"../install\" ..\nmake -j$(nproc)\nmake install\ncd ../..\nmkdir build\ncd build\ncmake -DREDEX_ROOT=\"../redex/install\" -Dfmt_ROOT=\"../fmt/install\" -DFMT_DEPRECATED_OSTREAM=ON -DEXCLUDE_INTEGRATION_TESTS=\"check_cast_types\" -DCMAKE_INSTALL_PREFIX=\"../install\" ..\nmake -j$(nproc)\nmake install\nmake check -j$(nproc)\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build the Website",
                "run": "cd documentation/website\nyarn\nyarn build\n"
            },
            {
                "id": 3,
                "name": "Get output time",
                "run": "echo \"The time was ${{ steps.build.outputs.time }}\""
            },
            {
                "id": 4,
                "name": "Deploy",
                "run": "JamesIves/github-pages-deploy-action@releases/v3"
            }
        ],
        "facebook/lexical": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "fkirc/skip-duplicate-actions@v5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm run ci-check"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "npm run build"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "npm run build-www"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Install React ${{ matrix.override-react-version }}",
                "run": "node ./scripts/override-react.js --version=${{ matrix.override-react-version }}\ngrep version node_modules/{react,react-dom}/package.json\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "npm run test-unit"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ inputs.node-version }}",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install required ubuntu-latest packages",
                "run": "sudo apt-get update\nsudo apt-get install xvfb\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Install React ${{ inputs.override-react-version }}",
                "run": "node ./scripts/override-react.js --version=${{ inputs.override-react-version }}\ngrep version node_modules/{react,react-dom}/package.json\n"
            },
            {
                "id": 6,
                "name": "Restore playwright from cache",
                "run": "actions/cache/restore@v4"
            },
            {
                "id": 7,
                "name": "Install playwright",
                "run": "npx playwright install"
            },
            {
                "id": 8,
                "name": "Save playwright to cache",
                "run": "actions/cache/save@v4"
            },
            {
                "id": 9,
                "name": "Run tests",
                "run": "npm run ${{ env.test_script }}"
            },
            {
                "id": 10,
                "name": "Upload Artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "git config user.name \"Lexical GitHub Actions Bot\"\ngit config user.email \"<>\"\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pozetroninc/github-action-get-latest-release@master"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "npm run increment-version"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm run test-integration"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm run prepare-release"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "node ./scripts/npm/release.js --non-interactive $DRY_RUN_ARG --channel='${{ inputs.channel }}'"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Configure Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Zip & submit to stores",
                "run": "npm run publish-extension"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "andresz1/size-limit-action@v1"
            }
        ],
        "facebook/sapp": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install dependencies and run Jest",
                "run": "cd sapp/ui/frontend\nnpm install\nnpm run-script ui-test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install black",
                "run": "pip install black==24.2.0"
            },
            {
                "id": 4,
                "name": "Run black",
                "run": "black --exclude 'stubs\\/' --check --diff ."
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install flake8",
                "run": "pip install flake8"
            },
            {
                "id": 4,
                "name": "Run flake8",
                "run": "flake8"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install packages and run ESLint",
                "run": "cd sapp/ui/frontend\nnpm install\nnpm install -g eslint\nnpm run lint\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "python -m pip install --upgrade pip\npython -m pip install -r requirements.txt\npython -m pip install cython\npython -m pip install graphql-core typing_inspect\nVERSION=$(grep \"version\" .pyre_configuration | sed -n -e 's/.*\\(0\\.0\\.[0-9]*\\).*/\\1/p')\npython -m pip install pyre-check-nightly==$VERSION\n"
            },
            {
                "id": 4,
                "name": "Run Pyre",
                "run": "pyre check\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "python -m pip install --upgrade pip\npip install -r requirements.txt\npip install -r requirements-dev.txt\n"
            },
            {
                "id": 4,
                "name": "Run Tests",
                "run": "./scripts/run-tests.sh\n"
            }
        ],
        "facebook/starlark-rust": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo clippy"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo build"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo test"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo bench"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "EmbarkStudios/cargo-deny-action@v1"
            }
        ],
        "facebook/OpenBIC": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Dependencies",
                "run": "sudo apt-get update\n\nsudo apt-get install --no-install-recommends \\\nninja-build \\\ngperf \\\nccache \\\ndfu-util \\\ndevice-tree-compiler \\\ngcc-multilib \\\ng++-multilib \\\nlibsdl2-dev \\\n"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 4,
                "name": "Install requirements",
                "run": "pip install --user -U west\npip install pyelftools\n"
            },
            {
                "id": 5,
                "name": "Init West Project",
                "run": "west init --local ${{ github.event.repository.name }}\n"
            },
            {
                "id": 6,
                "name": "Try Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 7,
                "name": "Cache SDK Toolchain",
                "run": "actions/cache@v2"
            },
            {
                "id": 8,
                "name": "Get SDK Toolchain",
                "run": "wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.12.4/zephyr-sdk-0.12.4-x86_64-linux-setup.run\n\nchmod +x zephyr-sdk-0.12.4-x86_64-linux-setup.run\n\n./zephyr-sdk-0.12.4-x86_64-linux-setup.run --quiet -- -d /home/runner/zephyr-sdk-0.12.4\n\nexport ZEPHYR_TOOLCHAIN_VARIANT=zephyr\nexport ZEPHYR_SDK_INSTALL_DIR=/home/runner/zephyr-sdk-0.12.4\n"
            },
            {
                "id": 9,
                "name": "Update West Project",
                "run": "cd OpenBIC \nwest update\n"
            },
            {
                "id": 10,
                "name": "Apply Kernel Patches",
                "run": "${{ github.event.repository.name }}/scripts/build/apply_patches.py --source=\"${{ github.event.repository.name }}/fix_patch/\" --destination=\"zephyr\"\n"
            },
            {
                "id": 11,
                "name": "Build Platform",
                "run": "cd ${{ github.event.repository.name }} \ntouch meta-facebook/${{ matrix.platform }}/CMakeLists.txt\nwest build -p auto -b ast1030_evb meta-facebook/${{ matrix.platform }}/\n"
            },
            {
                "id": 12,
                "name": "Get Build Status",
                "run": "ret=\"$OUTCOME\"\necho \"$ret\"\nif [ \"$ret\" = \"success\" ]; then\n  echo \"badge_message=PASS\" >> $GITHUB_ENV\n  echo \"badge_color=green\" >> $GITHUB_ENV\n  echo \"build_return_code=0\" >> $GITHUB_ENV\nelse\n  echo \"badge_message=FAIL\" >> $GITHUB_ENV\n  echo \"badge_color=red\" >> $GITHUB_ENV\n  echo \"build_return_code=1\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 13,
                "name": "Update Build Badges",
                "run": "schneegans/dynamic-badges-action@v1.4.0"
            },
            {
                "id": 14,
                "name": "Check Build Failure",
                "run": "exit 1\n"
            },
            {
                "id": 1,
                "name": "Get PR File List",
                "run": "URL=\"https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files\"\ncurl -s -X GET -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL | jq -r '.[] | .filename' > git_diff.log\ncat git_diff.log \n"
            },
            {
                "id": 2,
                "name": "Check for C/CPP Sources",
                "run": "CPP_FILE_LIST=\"/tmp/cppcheck_file_list.log\"\n\n# Only keep the source files to check or CPPCheck gets confused.\nsed '/\\(\\.c$\\|\\.cpp$\\|\\.c$\\|\\.cc$\\|\\.cu$\\|\\.cxx$\\|\\.h$\\|\\.hh$\\|\\.hpp$\\|\\.hxx$\\|\\.tcc$\\)/!d' git_diff.log > $CPP_FILE_LIST\n\nif [ -s $CPP_FILE_LIST ]; then\n  echo \"C/C++ source files kept:\"\n  cat $CPP_FILE_LIST\nfi\n\nif [ -s $CPP_FILE_LIST ]; then\n  echo \"contains_c_source=true\" >> $GITHUB_ENV\nelse\n  echo \"contains_c_source=false\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 3,
                "name": "Checkout Repo",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Setup Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 5,
                "name": "Install CPPCheck",
                "run": "sudo apt-get install -y cppcheck"
            },
            {
                "id": 6,
                "name": "Run CPPCheck on Modified Source Files",
                "run": "# These files specify the config for cppcheck and a list of errors to suppress\nCPPCHECK_CONFIG=scripts/linters/cppcheck/cppcheck.cfg\nCPPCHECK_SUPPRESSED=scripts/linters/cppcheck/cppcheck-suppressions.txt\n\necho \"Files to check:\"\ncat /tmp/cppcheck_file_list.log\n\noptions=( \"-j2\"\n  \"--force\"\n  \"--inconclusive\"\n  \"--enable=performance,style,portability,information\"\n  \"--library=scripts/linters/cppcheck/cppcheck.cfg\"\n  \"--suppressions-list=scripts/linters/cppcheck/cppcheck-suppressions.txt\"\n  \"--file-list=/tmp/cppcheck_file_list.log\"\n  \"--template={file}:{line}:{column}:{message}\"\n  \"--output-file=/tmp/cppcheck.log\"\n  \"--report-progress\")\n\ncppcheck \"${options[@]}\"\n\nif [ -s /tmp/cppcheck.log ]; then\n  echo \"Errors Found:\"\n  cat /tmp/cppcheck.log\nfi\n"
            },
            {
                "id": 7,
                "name": "Upload CPPCheck error log",
                "run": "actions/upload-artifact@master"
            },
            {
                "id": 8,
                "name": "Check for cppcheck output",
                "run": "if [ -s /tmp/cppcheck.log ]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Checkout Repo",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Get PR File List",
                "run": "URL=\"https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files\"\ncurl -s -X GET -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL | jq -r '.[] | .filename' > /tmp/change_set.log\ncat /tmp/change_set.log \n"
            },
            {
                "id": 3,
                "name": "Check for C/CPP Sources",
                "run": "CLANG_FORMAT_FILE_LIST=\"/tmp/clang_format_file_list.log\"\n\n# Only keep the source files to check or clang-format starts checking everything.\nsed '/\\(\\.c$\\|\\.cpp$\\|\\.c$\\|\\.cc$\\|\\.cu$\\|\\.cxx$\\|\\.h$\\|\\.hh$\\|\\.hpp$\\|\\.hxx$\\|\\.tcc$\\)/!d' /tmp/change_set.log > $CLANG_FORMAT_FILE_LIST\n\nif [ -s $CLANG_FORMAT_FILE_LIST ]; then\n  echo \"C/C++ source files kept for clang-format:\"\n  cat $CLANG_FORMAT_FILE_LIST\nfi\n\nif [ -s $CLANG_FORMAT_FILE_LIST ]; then\n  echo \"contains_c_source=true\" >> $GITHUB_ENV\n  echo \"contains_clang_errors=false\" >> $GITHUB_ENV\nelse\n  echo \"contains_c_source=false\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 4,
                "name": "Install Clang-Format",
                "run": "sudo apt-get install -y clang-format"
            },
            {
                "id": 5,
                "name": "Run clang-format on changed fileset.",
                "run": "echo \"Files to check:\"\ncat /tmp/clang_format_file_list.log \n\nFILE_PATHS=$(cat /tmp/clang_format_file_list.log)\nfor FILE_PATH in $FILE_PATHS\ndo\n  \n  options=( \n    \"--style=file\"\n    \"--dry-run\"\n    \"--Werror\")\n \n  # Clang format outputs to stderr... why do you do this clang-format \n  if ! clang-format \"${options[@]}\" $FILE_PATH &> /dev/null ; then\n    echo -e \"\\u001b[31;1m$FILE_PATH has clang-format errors!\\u001b[0m\"\n    echo $FILE_PATH >> /tmp/clang-format.log\n    echo \"contains_clang_errors=true\" >> $GITHUB_ENV\n  fi\n\ndone\n"
            },
            {
                "id": 6,
                "name": "Check for clang-format output",
                "run": "if [ -s /tmp/clang-format.log ]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Checkout Repo",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "reviewdog/action-setup@v1"
            },
            {
                "id": 3,
                "name": "Download all artifacts",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 4,
                "name": "Run reviewdog",
                "run": "CPP_FILE=/tmp/artifacts/cppcheck-output/cppcheck.log\nif test -f \"$CPP_FILE\"; then\n  cat \"$CPP_FILE\" | reviewdog -efm=\"%f:%l:%c:%m\" -filter-mode=nofilter -reporter=github-pr-check\nfi\n"
            },
            {
                "id": 1,
                "name": "Checkout Repo \ud83d\udece\ufe0f",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Generate Docs \ud83d\udd27",
                "run": "mattnotmitt/doxygen-action@v1.9.2"
            },
            {
                "id": 3,
                "name": "Deploy Docs \ud83d\ude80",
                "run": "JamesIves/github-pages-deploy-action@v4.3.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "print latest_commit",
                "run": "echo ${{ github.sha }}"
            },
            {
                "id": 3,
                "name": "check latest commit is less than a day",
                "run": "test -z $(git rev-list  --after=\"24 hours\"  ${{ github.sha }}) && echo \"should_run=false\" >> $GITHUB_OUTPUT"
            }
        ],
        "facebook/winterfell": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Clippy",
                "run": "rustup update --no-self-update nightly\nrustup +nightly component add clippy\n# Specifically, don't enable `async` feature in winter-prover crate\ncargo +nightly clippy --workspace --all-targets --features std,concurrent -- -D clippy::all -D warnings\n"
            },
            {
                "id": 3,
                "name": "Rustfmt",
                "run": "rustup +nightly component add rustfmt\ncargo +nightly fmt --all --check\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Perform checks",
                "run": "rustup update --no-self-update stable\ncargo +stable install cargo-hack --locked\nRUSTFLAGS=-Dwarnings cargo +stable hack --no-private --feature-powerset --keep-going check --rust-version --verbose --all-targets --workspace --exclude winter-prover --exclude winterfell\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Perform check",
                "run": "rustup update --no-self-update stable\ncargo +stable install cargo-hack --locked\nRUSTFLAGS=-Dwarnings cargo +stable hack --package winter-prover --package winterfell --no-private --feature-powerset --keep-going check --rust-version --verbose\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Run test",
                "run": "rustup update --no-self-update ${{ matrix.toolchain }}\ncargo +${{ matrix.toolchain }} test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "Build for no-std",
                "run": "rustup update --no-self-update ${{ matrix.toolchain }}\nrustup +${{ matrix.toolchain }} target add wasm32-unknown-unknown\ncargo +${{ matrix.toolchain }} build --verbose --no-default-features --target wasm32-unknown-unknown\n"
            }
        ]
    },
    "python": {
        "python/pythondotorg": [
            {
                "id": 1,
                "name": "Check out repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install platform dependencies",
                "run": "sudo apt -y update\nsudo apt -y install --no-install-recommends \\\n    texlive-latex-base \\\n    texlive-latex-recommended \\\n    texlive-plain-generic \\\n    lmodern\n"
            },
            {
                "id": 3,
                "name": "Install pandoc",
                "run": "wget https://github.com/jgm/pandoc/releases/download/2.17.1.1/pandoc-2.17.1.1-1-amd64.deb\nsudo dpkg -i pandoc-2.17.1.1-1-amd64.deb\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 5,
                "name": "Cache Python dependencies",
                "run": "actions/cache@v4"
            },
            {
                "id": 6,
                "name": "Install Python dependencies",
                "run": "pip install -U pip setuptools wheel\npip install -r dev-requirements.txt\n"
            },
            {
                "id": 7,
                "name": "Check for ungenerated database migrations",
                "run": "python manage.py makemigrations --check --dry-run\n"
            },
            {
                "id": 8,
                "name": "Run Tests",
                "run": "python -Wd -m coverage run manage.py test -v2\n"
            },
            {
                "id": 9,
                "name": "Coverage",
                "run": "coverage report -m --fail-under=75\n"
            }
        ],
        "python/mypy": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Trigger script",
                "run": "./misc/trigger_wheel_build.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install tox",
                "run": "pip install --upgrade 'setuptools!=50' tox==4.11.0"
            },
            {
                "id": 4,
                "name": "Setup tox environment",
                "run": "tox run -e ${{ env.TOXENV }} --notest"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "tox run -e ${{ env.TOXENV }} --skip-pkg-install"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install -U pip\npip install git+https://github.com/hauntsaninja/mypy_primer.git\n"
            },
            {
                "id": 4,
                "name": "Run mypy_primer",
                "run": "cd mypy_to_test\necho \"new commit\"\ngit rev-list --format=%s --max-count=1 $GITHUB_SHA\n\nMERGE_BASE=$(git merge-base $GITHUB_SHA origin/$GITHUB_BASE_REF)\ngit checkout -b base_commit $MERGE_BASE\necho \"base commit\"\ngit rev-list --format=%s --max-count=1 base_commit\n\necho ''\ncd ..\n# fail action if exit code isn't zero or one\n(\n  mypy_primer \\\n  --repo mypy_to_test \\\n  --new $GITHUB_SHA --old base_commit \\\n  --num-shards 5 --shard-index ${{ matrix.shard-index }} \\\n  --debug \\\n  --additional-flags=\"--debug-serialize\" \\\n  --output concise \\\n  | tee diff_${{ matrix.shard-index }}.txt\n) || [ $? -eq 1 ]\n"
            },
            {
                "id": 5,
                "name": "Upload mypy_primer diff",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 6,
                "name": "Save PR number",
                "run": "echo ${{ github.event.pull_request.number }} | tee pr_number.txt\n"
            },
            {
                "id": 7,
                "name": "Upload PR number",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Download diffs",
                "run": "actions/github-script@v6"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "unzip diff.zip"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cat diff_*.txt | tee fulldiff.txt\n"
            },
            {
                "id": 4,
                "name": "Post comment",
                "run": "actions/github-script@v7"
            },
            {
                "id": 5,
                "name": "Hide old comments",
                "run": "kanga333/comment-hider@c12bb20b48aeb8fc098e35967de8d4f8018fffdf"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "git config",
                "run": "git config --global user.name mypybot\ngit config --global user.email '<>'\n"
            },
            {
                "id": 4,
                "name": "Sync typeshed",
                "run": "python -m pip install requests==2.28.1\nGITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} python misc/sync-typeshed.py --make-pr\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Debug build",
                "run": "PYTHONVERSION=${{ matrix.python }}\nPYTHONDIR=~/python-debug/python-$PYTHONVERSION\nVENV=$PYTHONDIR/env\n./misc/build-debug-python.sh $PYTHONVERSION $PYTHONDIR $VENV\nsource $VENV/bin/activate\n"
            },
            {
                "id": 4,
                "name": "Install tox",
                "run": "pip install setuptools==68.2.2 tox==4.11.0"
            },
            {
                "id": 5,
                "name": "Compiled with mypyc",
                "run": "pip install -r test-requirements.txt\nCC=clang MYPYC_OPT_LEVEL=0 MYPY_USE_MYPYC=1 pip install -e .\n"
            },
            {
                "id": 6,
                "name": "Setup tox environment",
                "run": "tox run -e ${{ matrix.toxenv }} --notest\npython -c 'import os; print(\"os.cpu_count\", os.cpu_count(), \"os.sched_getaffinity\", len(getattr(os, \"sched_getaffinity\", lambda *args: [])(0)))'\n"
            },
            {
                "id": 7,
                "name": "Test",
                "run": "tox run -e ${{ matrix.toxenv }} --skip-pkg-install -- ${{ matrix.tox_extra_args }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install 32-bit build dependencies",
                "run": "sudo dpkg --add-architecture i386 && \\\nsudo apt-get update && sudo apt-get install -y \\\n  zlib1g-dev:i386 \\\n  libgcc-s1:i386 \\\n  g++-i686-linux-gnu \\\n  gcc-i686-linux-gnu \\\n  libffi-dev:i386 \\\n  libssl-dev:i386 \\\n  libbz2-dev:i386 \\\n  libncurses-dev:i386 \\\n  libreadline-dev:i386 \\\n  libsqlite3-dev:i386 \\\n  liblzma-dev:i386 \\\n  uuid-dev:i386\n"
            },
            {
                "id": 3,
                "name": "Compile, install, and activate 32-bit Python",
                "run": "gabrielfalcao/pyenv-action@v13"
            },
            {
                "id": 4,
                "name": "Install tox",
                "run": "pip install setuptools==68.2.2 tox==4.11.0"
            },
            {
                "id": 5,
                "name": "Setup tox environment",
                "run": "tox run -e py --notest"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "tox run -e py --skip-pkg-install -- -n 4 mypyc/test/"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup \ud83d\udc0d 3.8",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Test stubgenc",
                "run": "misc/test-stubgenc.sh"
            }
        ],
        "python/peps": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "readthedocs/actions/preview@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python 3",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Run pre-commit hooks",
                "run": "pre-commit/action@v3.0.1"
            },
            {
                "id": 4,
                "name": "Check spelling",
                "run": "pre-commit/action@v3.0.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python 3",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Run check-peps",
                "run": "python check-peps.py --detailed"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Update pip",
                "run": "python -m pip install --upgrade pip\n"
            },
            {
                "id": 4,
                "name": "Render PEPs",
                "run": "make dirhtml JOBS=$(nproc)"
            },
            {
                "id": 5,
                "name": "Clean up files",
                "run": "rm -r build/.doctrees/"
            },
            {
                "id": 6,
                "name": "Deploy to GitHub pages",
                "run": "JamesIves/github-pages-deploy-action@v4"
            },
            {
                "id": 7,
                "name": "Purge CDN cache",
                "run": "curl -H \"Accept: application/json\" -H \"Fastly-Key: $FASTLY_TOKEN\" -X POST \"https://api.fastly.com/service/$FASTLY_SERVICE_ID/purge_all\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install -U pip\npython -m pip install -U wheel\npython -m pip install -U tox\n"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "tox -e py -- -v --cov-report term\n"
            },
            {
                "id": 5,
                "name": "Upload coverage",
                "run": "codecov/codecov-action@v4"
            }
        ],
        "python/psf-salt": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install tox and any other packages",
                "run": "pip install tox"
            },
            {
                "id": 4,
                "name": "Run Linter",
                "run": "tox -e lint"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Update salt-server-list.rst",
                "run": "wget --quiet -O docs/salt-server-list.rst https://salt-public.psf.io/salt-server-list.rst\n"
            },
            {
                "id": 3,
                "name": "Create Pull Request",
                "run": "peter-evans/create-pull-request@v5"
            }
        ],
        "python/typing": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install --upgrade pip\npip install -r docs/requirements.txt\n"
            },
            {
                "id": 4,
                "name": "Build the documentation",
                "run": "make -C docs html"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python 3",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install --upgrade pip\npip install -r test-requirements.txt\n"
            },
            {
                "id": 4,
                "name": "Lint implementation",
                "run": "flake8"
            }
        ],
        "python/typeshed": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install -r requirements-tests.txt"
            },
            {
                "id": 4,
                "name": "Install mypy from git",
                "run": "pip install git+https://github.com/python/mypy@e8a26308d5d06925cf769b62f41ef2e4bc546ada"
            },
            {
                "id": 5,
                "name": "Run stubtest",
                "run": "python tests/stubtest_stdlib.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install -r requirements-tests.txt"
            },
            {
                "id": 4,
                "name": "Run stubtest",
                "run": "PACKAGES=$(python tests/get_stubtest_system_requirements.py)\n\nif [ \"${{ runner.os }}\" = \"Linux\" ]; then\n  if [ -n \"$PACKAGES\" ]; then\n    sudo apt-get update && sudo apt-get install -y $PACKAGES\n  fi\n\n  PYTHON_EXECUTABLE=\"xvfb-run python\"\nelse\n  if [ \"${{ runner.os }}\" = \"macOS\" ] && [ -n \"$PACKAGES\" ]; then\n    brew install $PACKAGES\n  fi\n\n  if [ \"${{ runner.os }}\" = \"Windows\" ] && [ -n \"$PACKAGES\" ]; then\n    choco install -y $PACKAGES\n  fi\n\n  PYTHON_EXECUTABLE=\"python\"\nfi\n\n$PYTHON_EXECUTABLE tests/stubtest_third_party.py --specified-platforms-only --num-shards 4 --shard-index ${{ matrix.shard-index }}\n"
            },
            {
                "id": 1,
                "name": "Checkout typeshed",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout stub_uploader",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install uv",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "cd stub_uploader\nuv pip install -r requirements.txt --system\npython -m pytest tests\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v7"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "uv pip install -r requirements-tests.txt --system"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "python ./tests/typecheck_typeshed.py --platform=${{ matrix.platform }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "uv pip install -r requirements-tests.txt --system"
            },
            {
                "id": 5,
                "name": "Run pyright on typeshed",
                "run": "jakebailey/pyright-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 4,
                "name": "Git config",
                "run": "git config --global user.name stubsabot\ngit config --global user.email '<>'\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "uv pip install -r requirements-tests.txt --system"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "python scripts/stubsabot.py --action-level local"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install git+https://github.com/hauntsaninja/mypy_primer.git"
            },
            {
                "id": 4,
                "name": "Run mypy_primer",
                "run": "cd typeshed_to_test\nMYPY_VERSION=$(grep mypy== requirements-tests.txt | cut -d = -f 3)\necho \"new commit\"\ngit rev-list --format=%s --max-count=1 $GITHUB_SHA\ngit checkout -b upstream_main origin/main\necho \"base commit\"\ngit rev-list --format=%s --max-count=1 upstream_main\necho ''\ncd ..\n# fail action if exit code isn't zero or one\n(\n  mypy_primer \\\n  --new v${MYPY_VERSION} --old v${MYPY_VERSION} \\\n  --custom-typeshed-repo typeshed_to_test \\\n  --new-typeshed $GITHUB_SHA --old-typeshed upstream_main \\\n  --num-shards 4 --shard-index ${{ matrix.shard-index }} \\\n  --debug \\\n  --output concise \\\n  | tee diff_${{ matrix.shard-index }}.txt\n) || [ $? -eq 1 ]\n"
            },
            {
                "id": 5,
                "name": "Upload mypy_primer diff",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 6,
                "name": "Save PR number",
                "run": "echo ${{ github.event.pull_request.number }} | tee pr_number.txt\n"
            },
            {
                "id": 7,
                "name": "Upload PR number",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Download diffs",
                "run": "actions/github-script@v7"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "for file in *.zip; do unzip $file; done"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cat diff_*.txt | tee fulldiff.txt\n"
            },
            {
                "id": 4,
                "name": "Post comment",
                "run": "actions/github-script@v7"
            },
            {
                "id": 5,
                "name": "Hide old comments",
                "run": "kanga333/comment-hider@c12bb20b48aeb8fc098e35967de8d4f8018fffdf"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 4,
                "name": "git config",
                "run": "git config --global user.name stubsabot\ngit config --global user.email '<>'\n"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "uv pip install -r requirements-tests.txt --system"
            },
            {
                "id": 6,
                "name": "Run stubsabot",
                "run": "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} python scripts/stubsabot.py --action-level everything"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v7"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install -r requirements-tests.txt"
            },
            {
                "id": 4,
                "name": "Install mypy from git",
                "run": "pip install git+https://github.com/python/mypy@e8a26308d5d06925cf769b62f41ef2e4bc546ada"
            },
            {
                "id": 5,
                "name": "Run stubtest",
                "run": "python tests/stubtest_stdlib.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install -r requirements-tests.txt"
            },
            {
                "id": 4,
                "name": "Run stubtest",
                "run": "# This only runs stubtest on changed stubs, because it is much faster.\n# Use the daily.yml workflow to run stubtest on all third party stubs.\nfunction find_stubs {\n  git diff --name-only origin/${{ github.base_ref }} HEAD | \\\n  egrep ^stubs/ | cut -d \"/\" -f 2 | sort -u | \\\n  (while read stub; do [ -d \"stubs/$stub\" ] && echo \"$stub\" || true; done)\n}\nSTUBS=$(find_stubs || echo '')\n\nif [ -n \"$STUBS\" ]; then\n  echo \"Testing $STUBS...\"\n  PACKAGES=$(python tests/get_stubtest_system_requirements.py $STUBS)\n\n  if [ \"${{ runner.os }}\" = \"Linux\" ]; then\n    if [ -n \"$PACKAGES\" ]; then\n      echo \"Installing apt packages: $PACKAGES\"\n      sudo apt-get update && sudo apt-get install -y $PACKAGES\n    fi\n\n    PYTHON_EXECUTABLE=\"xvfb-run python\"\n  else\n    if [ \"${{ runner.os }}\" = \"macOS\" ] && [ -n \"$PACKAGES\" ]; then\n      echo \"Installing Homebrew packages: $PACKAGES\"\n      brew install $PACKAGES\n    fi\n\n    if [ \"${{ runner.os }}\" = \"Windows\" ] && [ -n \"$PACKAGES\" ]; then\n      echo \"Installing Chocolatey packages: $PACKAGES\"\n      choco install -y $PACKAGES\n    fi\n\n    PYTHON_EXECUTABLE=\"python\"\n  fi\n\n  $PYTHON_EXECUTABLE tests/stubtest_third_party.py --specified-platforms-only $STUBS\nelse\n  echo \"Nothing to test\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "uv pip install -r requirements-tests.txt --system"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "python ./tests/check_typeshed_structure.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install uv",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "uv pip install -r requirements-tests.txt --system"
            },
            {
                "id": 5,
                "name": "Install external dependencies for 3rd-party stubs",
                "run": "DEPENDENCIES=$(python tests/get_external_stub_requirements.py)\nif [ -n \"$DEPENDENCIES\" ]; then\n  echo \"Installing packages: $DEPENDENCIES\"\n  uv pip install $DEPENDENCIES --system\nfi\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "uv pip freeze"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "./tests/pytype_test.py --print-stderr"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "uv pip install -r requirements-tests.txt --system"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "python ./tests/mypy_test.py --platform=${{ matrix.platform }} --python-version=${{ matrix.python-version }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "uv pip install -r requirements-tests.txt --system"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "python ./tests/mypy_test.py --platform=${{ matrix.platform }} --python-version=3.13"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "uv pip install -r requirements-tests.txt --system"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "python ./tests/regr_test.py --all --verbosity QUIET"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install uv",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 4,
                "name": "Install typeshed test-suite requirements",
                "run": "uv pip install -r requirements-tests.txt --system"
            },
            {
                "id": 5,
                "name": "Create an isolated venv for testing",
                "run": "uv venv .venv"
            },
            {
                "id": 6,
                "name": "Install 3rd-party stub dependencies",
                "run": "DEPENDENCIES=$(python tests/get_external_stub_requirements.py)\nif [ -n \"$DEPENDENCIES\" ]; then\n  source .venv/bin/activate\n  echo \"Installing packages: $DEPENDENCIES\"\n  uv pip install $DEPENDENCIES\nfi\n"
            },
            {
                "id": 7,
                "name": "Activate the isolated venv for the rest of the job",
                "run": "echo \"$PWD/.venv/bin\" >> $GITHUB_PATH"
            },
            {
                "id": 8,
                "name": "List 3rd-party stub dependencies installed",
                "run": "uv pip freeze"
            },
            {
                "id": 9,
                "name": "Run pyright with basic settings on all the stubs",
                "run": "jakebailey/pyright-action@v2"
            },
            {
                "id": 10,
                "name": "Run pyright with stricter settings on some of the stubs",
                "run": "jakebailey/pyright-action@v2"
            },
            {
                "id": 11,
                "name": "Run pyright on the test cases",
                "run": "jakebailey/pyright-action@v2"
            },
            {
                "id": 1,
                "name": "Checkout typeshed",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout stub_uploader",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install uv",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "cd stub_uploader\nuv pip install -r requirements.txt --system\npython -m pytest tests\n"
            }
        ],
        "python/typed_ast": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Build wheels",
                "run": "pypa/cibuildwheel@v2.10.2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Build wheels",
                "run": "pypa/cibuildwheel@v2.10.2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Run check-manifest",
                "run": "pip install check-manifest\ncheck-manifest -v\n"
            },
            {
                "id": 4,
                "name": "Build sdist and wheel",
                "run": "pip install --upgrade setuptools pip wheel\npython setup.py sdist\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v3"
            }
        ],
        "python/the-knights-who-say-ni": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install test deps",
                "run": "python3 -m pip install -U pip\npython3 -m pip install -U wheel\npython3 -m pip install -U coverage mypy\n"
            },
            {
                "id": 4,
                "name": "Install project deps",
                "run": "python3 -m pip install -r requirements.txt"
            },
            {
                "id": 5,
                "name": "Run mypy",
                "run": "python3 -m mypy ni/*.py"
            },
            {
                "id": 6,
                "name": "Run tests",
                "run": "python3 -m coverage run --branch -m unittest discover -t . -s ni/test/\npython3 -m coverage xml -o ./coverage.xml\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "codecov/codecov-action@v2"
            }
        ],
        "python/devguide": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Build docs",
                "run": "make html"
            },
            {
                "id": 4,
                "name": "Link check",
                "run": "make linkcheck"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "readthedocs/actions/preview@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v3.0.0"
            }
        ],
        "python/pyperformance": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Set up Python ${{ matrix.python }} using deadsnakes",
                "run": "deadsnakes/action@v3.1.0"
            },
            {
                "id": 4,
                "name": "Install",
                "run": "python -m pip install --upgrade pip setuptools\npython -m pip install -e .\n"
            },
            {
                "id": 5,
                "name": "Display Python version",
                "run": "python -VV\npython -c 'import sysconfig; print(\"Free threading?\", \"Yes\" if sysconfig.get_config_var(\"Py_GIL_DISABLED\") else \"No\")'\n"
            },
            {
                "id": 6,
                "name": "Run Tests",
                "run": "python -u -m pyperformance.tests"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pip install -e .[dev]"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pip freeze --all"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "mypy"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade build\n"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "python -m build\n"
            },
            {
                "id": 5,
                "name": "Publish distribution \ud83d\udce6 to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            }
        ],
        "python/release-tools": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v3.0.1"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python3 -m pip install -U pip\npython3 -m pip install -U tox\n"
            },
            {
                "id": 5,
                "name": "Mypy",
                "run": "tox -e mypy"
            },
            {
                "id": 6,
                "name": "Run PSScriptAnalyzer on PowerShell scripts",
                "run": "Invoke-ScriptAnalyzer -Path . -Recurse -Severity ParseError,Error -EnableExit\n"
            },
            {
                "id": 1,
                "name": "Workflow run information",
                "run": "echo \"git_remote: $GIT_REMOTE\"\necho \"git_commit: $GIT_COMMIT\"\necho \"cpython_release: $CPYTHON_RELEASE\"\n"
            },
            {
                "id": 2,
                "name": "Checkout ${{ env.GIT_REMOTE }}/cpython",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 3,
                "name": "Verify CPython commit matches tag",
                "run": "if [[ \"$GIT_COMMIT\" != \"$(cd cpython && git rev-parse HEAD)\" ]]; then\n  echo \"expected git commit ('$GIT_COMMIT') didn't match tagged commit ('$(git rev-parse HEAD)')\"\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Checkout python/release-tools",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Checkout ${{ env.GIT_REMOTE }}/cpython",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 4,
                "name": "Install source dependencies",
                "run": "python -m pip install --no-deps \\\n  -r requirements.txt\n"
            },
            {
                "id": 5,
                "name": "Build Python release artifacts",
                "run": "cd cpython\npython ../release.py --export \"$CPYTHON_RELEASE\" --skip-docs\n"
            },
            {
                "id": 6,
                "name": "Upload the source artifacts",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Checkout ${{ env.GIT_REMOTE }}/cpython",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Install docs dependencies",
                "run": "python -m pip install \\\n  -r Doc/requirements.txt\n\nsudo apt-get update\nsudo apt-get install --yes --no-install-recommends \\\n  latexmk texlive-xetex xindy texinfo texlive-latex-base \\\n  texlive-fonts-recommended texlive-fonts-extra \\\n  texlive-full\n"
            },
            {
                "id": 4,
                "name": "Build docs",
                "run": "cd Doc\nSPHINXOPTS=\"-j10\" make dist\n"
            },
            {
                "id": 5,
                "name": "Upload the docs artifacts",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Download the source artifacts",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 2,
                "name": "Test Python source tarballs",
                "run": "mkdir -p ./tmp/installation/\ncp \"Python-$CPYTHON_RELEASE.tgz\" ./tmp/\ncd tmp/\ntar xvf \"Python-$CPYTHON_RELEASE.tgz\"\ncd \"Python-$CPYTHON_RELEASE\"\n\n./configure \"--prefix=$(realpath '../installation/')\"\nmake -j\nmake install -j\n\ncd ../installation\n./bin/python3 -m test -uall\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "python -m pip install tox\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "tox -e py\n"
            },
            {
                "id": 5,
                "name": "Upload coverage",
                "run": "codecov/codecov-action@v4"
            }
        ],
        "python/core-workflow": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v3.0.0"
            }
        ],
        "python/buildmaster-config": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Check configuration",
                "run": "make check PIP=pip BUILDBOT=buildbot"
            }
        ],
        "python/cpython": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v7"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Check for source changes",
                "run": "if [ -z \"$GITHUB_BASE_REF\" ]; then\n  echo \"run_tests=true\" >> $GITHUB_OUTPUT\nelse\n  git fetch origin $GITHUB_BASE_REF --depth=1\n  # git diff \"origin/$GITHUB_BASE_REF...\" (3 dots) may be more\n  # reliable than git diff \"origin/$GITHUB_BASE_REF..\" (2 dots),\n  # but it requires to download more commits (this job uses\n  # \"git fetch --depth=1\").\n  #\n  # git diff \"origin/$GITHUB_BASE_REF...\" (3 dots) works with Git\n  # 2.26, but Git 2.28 is stricter and fails with \"no merge base\".\n  #\n  # git diff \"origin/$GITHUB_BASE_REF..\" (2 dots) should be enough on\n  # GitHub, since GitHub starts by merging origin/$GITHUB_BASE_REF\n  # into the PR branch anyway.\n  #\n  # https://github.com/python/core-workflow/issues/373\n  git diff --name-only origin/$GITHUB_BASE_REF.. | grep -qvE '(\\.rst$|^Doc|^Misc|^\\.pre-commit-config\\.yaml$|\\.ruff\\.toml$|\\.md$|mypy\\.ini$)' && echo \"run_tests=true\" >> $GITHUB_OUTPUT || true\nfi\n\n# Check if we should run hypothesis tests\nGIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}\necho $GIT_BRANCH\nif $(echo \"$GIT_BRANCH\" | grep -q -w '3\\.\\(8\\|9\\|10\\|11\\)'); then\n  echo \"Branch too old for hypothesis tests\"\n  echo \"run_hypothesis=false\" >> $GITHUB_OUTPUT\nelse\n  echo \"Run hypothesis tests\"\n  echo \"run_hypothesis=true\" >> $GITHUB_OUTPUT\nfi\n\n# oss-fuzz maintains a configuration for fuzzing the main branch of\n# CPython, so CIFuzz should be run only for code that is likely to be\n# merged into the main branch; compatibility with older branches may\n# be broken.\nFUZZ_RELEVANT_FILES='(\\.c$|\\.h$|\\.cpp$|^configure$|^\\.github/workflows/build\\.yml$|^Modules/_xxtestfuzz)'\nif [ \"$GITHUB_BASE_REF\" = \"main\" ] && [ \"$(git diff --name-only origin/$GITHUB_BASE_REF.. | grep -qE $FUZZ_RELEVANT_FILES; echo $?)\" -eq 0 ]; then\n  # The tests are pretty slow so they are executed only for PRs\n  # changing relevant files.\n  echo \"Run CIFuzz tests\"\n  echo \"run_cifuzz=true\" >> $GITHUB_OUTPUT\nelse\n  echo \"Branch too old for CIFuzz tests; or no C files were changed\"\n  echo \"run_cifuzz=false\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 3,
                "name": "Compute hash for config cache key",
                "run": "echo \"hash=${{ hashFiles('configure', 'configure.ac', '.github/workflows/build.yml') }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Get a list of the changed documentation-related files",
                "run": "Ana06/get-changed-files@v2.3.0"
            },
            {
                "id": 5,
                "name": "Check for docs changes",
                "run": "echo \"run-docs=true\" >> \"${GITHUB_OUTPUT}\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Runner image version",
                "run": "echo \"IMAGE_VERSION=${ImageVersion}\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Restore config.cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Install Dependencies",
                "run": "sudo ./.github/workflows/posix-deps-apt.sh"
            },
            {
                "id": 6,
                "name": "Add ccache to PATH",
                "run": "echo \"PATH=/usr/lib/ccache:$PATH\" >> $GITHUB_ENV"
            },
            {
                "id": 7,
                "name": "Configure ccache action",
                "run": "hendrikmuhs/ccache-action@v1.2"
            },
            {
                "id": 8,
                "name": "Check Autoconf and aclocal versions",
                "run": "grep \"Generated by GNU Autoconf 2.71\" configure\ngrep \"aclocal 1.16.5\" aclocal.m4\ngrep -q \"runstatedir\" configure\ngrep -q \"PKG_PROG_PKG_CONFIG\" aclocal.m4\n"
            },
            {
                "id": 9,
                "name": "Configure CPython",
                "run": "# Build Python with the libpython dynamic library\n./configure --config-cache --with-pydebug --enable-shared\n"
            },
            {
                "id": 10,
                "name": "Regenerate autoconf files",
                "run": "autoreconf -ivf -Werror"
            },
            {
                "id": 11,
                "name": "Build CPython",
                "run": "make -j4 regen-all\nmake regen-stdlib-module-names regen-sbom\n"
            },
            {
                "id": 12,
                "name": "Check for changes",
                "run": "git add -u\nchanges=$(git status --porcelain)\n# Check for changes in regenerated files\nif test -n \"$changes\"; then\n  echo \"Generated files not up to date.\"\n  echo \"Perhaps you forgot to run make regen-all or build.bat --regen. ;)\"\n  echo \"configure files must be regenerated with a specific version of autoconf.\"\n  echo \"$changes\"\n  echo \"\"\n  git diff --staged || true\n  exit 1\nfi\n"
            },
            {
                "id": 13,
                "name": "Check exported libpython symbols",
                "run": "make smelly"
            },
            {
                "id": 14,
                "name": "Check limited ABI symbols",
                "run": "make check-limited-abi"
            },
            {
                "id": 15,
                "name": "Check for unsupported C global variables",
                "run": "make check-c-globals"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Runner image version",
                "run": "echo \"IMAGE_VERSION=${ImageVersion}\" >> $GITHUB_ENV"
            },
            {
                "id": 3,
                "name": "Restore config.cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Register gcc problem matcher",
                "run": "echo \"::add-matcher::.github/problem-matchers/gcc.json\""
            },
            {
                "id": 5,
                "name": "Install Dependencies",
                "run": "sudo ./.github/workflows/posix-deps-apt.sh"
            },
            {
                "id": 6,
                "name": "Configure OpenSSL env vars",
                "run": "echo \"MULTISSL_DIR=${GITHUB_WORKSPACE}/multissl\" >> $GITHUB_ENV\necho \"OPENSSL_DIR=${GITHUB_WORKSPACE}/multissl/openssl/${OPENSSL_VER}\" >> $GITHUB_ENV\necho \"LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/multissl/openssl/${OPENSSL_VER}/lib\" >> $GITHUB_ENV\n"
            },
            {
                "id": 7,
                "name": "Restore OpenSSL build",
                "run": "actions/cache@v4"
            },
            {
                "id": 8,
                "name": "Install OpenSSL",
                "run": "python3 Tools/ssl/multissltests.py --steps=library --base-directory $MULTISSL_DIR --openssl $OPENSSL_VER --system Linux"
            },
            {
                "id": 9,
                "name": "Add ccache to PATH",
                "run": "echo \"PATH=/usr/lib/ccache:$PATH\" >> $GITHUB_ENV\n"
            },
            {
                "id": 10,
                "name": "Configure ccache action",
                "run": "hendrikmuhs/ccache-action@v1.2"
            },
            {
                "id": 11,
                "name": "Configure CPython",
                "run": "./configure --config-cache --with-pydebug --with-openssl=$OPENSSL_DIR"
            },
            {
                "id": 12,
                "name": "Build CPython",
                "run": "make -j4"
            },
            {
                "id": 13,
                "name": "Display build info",
                "run": "make pythoninfo"
            },
            {
                "id": 14,
                "name": "SSL tests",
                "run": "./python Lib/test/ssltests.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Register gcc problem matcher",
                "run": "echo \"::add-matcher::.github/problem-matchers/gcc.json\""
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "sudo ./.github/workflows/posix-deps-apt.sh"
            },
            {
                "id": 4,
                "name": "Configure OpenSSL env vars",
                "run": "echo \"MULTISSL_DIR=${GITHUB_WORKSPACE}/multissl\" >> $GITHUB_ENV\necho \"OPENSSL_DIR=${GITHUB_WORKSPACE}/multissl/openssl/${OPENSSL_VER}\" >> $GITHUB_ENV\necho \"LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/multissl/openssl/${OPENSSL_VER}/lib\" >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "Restore OpenSSL build",
                "run": "actions/cache@v4"
            },
            {
                "id": 6,
                "name": "Install OpenSSL",
                "run": "python3 Tools/ssl/multissltests.py --steps=library --base-directory $MULTISSL_DIR --openssl $OPENSSL_VER --system Linux"
            },
            {
                "id": 7,
                "name": "Add ccache to PATH",
                "run": "echo \"PATH=/usr/lib/ccache:$PATH\" >> $GITHUB_ENV\n"
            },
            {
                "id": 8,
                "name": "Configure ccache action",
                "run": "hendrikmuhs/ccache-action@v1.2"
            },
            {
                "id": 9,
                "name": "Setup directory envs for out-of-tree builds",
                "run": "echo \"CPYTHON_RO_SRCDIR=$(realpath -m ${GITHUB_WORKSPACE}/../cpython-ro-srcdir)\" >> $GITHUB_ENV\necho \"CPYTHON_BUILDDIR=$(realpath -m ${GITHUB_WORKSPACE}/../cpython-builddir)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 10,
                "name": "Create directories for read-only out-of-tree builds",
                "run": "mkdir -p $CPYTHON_RO_SRCDIR $CPYTHON_BUILDDIR"
            },
            {
                "id": 11,
                "name": "Bind mount sources read-only",
                "run": "sudo mount --bind -o ro $GITHUB_WORKSPACE $CPYTHON_RO_SRCDIR"
            },
            {
                "id": 12,
                "name": "Runner image version",
                "run": "echo \"IMAGE_VERSION=${ImageVersion}\" >> $GITHUB_ENV"
            },
            {
                "id": 13,
                "name": "Restore config.cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 14,
                "name": "Configure CPython out-of-tree",
                "run": "../cpython-ro-srcdir/configure \\\n  --config-cache \\\n  --with-pydebug \\\n  --with-openssl=$OPENSSL_DIR\n"
            },
            {
                "id": 15,
                "name": "Build CPython out-of-tree",
                "run": "make -j4"
            },
            {
                "id": 16,
                "name": "Display build info",
                "run": "make pythoninfo"
            },
            {
                "id": 17,
                "name": "Remount sources writable for tests",
                "run": "sudo mount $CPYTHON_RO_SRCDIR -oremount,rw"
            },
            {
                "id": 18,
                "name": "Setup directory envs for out-of-tree builds",
                "run": "echo \"CPYTHON_BUILDDIR=$(realpath -m ${GITHUB_WORKSPACE}/../cpython-builddir)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 19,
                "name": "Create hypothesis venv",
                "run": "VENV_LOC=$(realpath -m .)/hypovenv\nVENV_PYTHON=$VENV_LOC/bin/python\necho \"HYPOVENV=${VENV_LOC}\" >> $GITHUB_ENV\necho \"VENV_PYTHON=${VENV_PYTHON}\" >> $GITHUB_ENV\n./python -m venv $VENV_LOC && $VENV_PYTHON -m pip install -r ${GITHUB_WORKSPACE}/Tools/requirements-hypothesis.txt\n"
            },
            {
                "id": 20,
                "name": "Restore Hypothesis database",
                "run": "actions/cache@v4"
            },
            {
                "id": 21,
                "name": "Run tests",
                "run": "# Most of the excluded tests are slow test suites with no property tests\n#\n# (GH-104097) test_sysconfig is skipped because it has tests that are\n# failing when executed from inside a virtual environment.\n${{ env.VENV_PYTHON }} -m test \\\n  -W \\\n  -o \\\n  -j4 \\\n  -x test_asyncio \\\n  -x test_multiprocessing_fork \\\n  -x test_multiprocessing_forkserver \\\n  -x test_multiprocessing_spawn \\\n  -x test_concurrent_futures \\\n  -x test_socket \\\n  -x test_subprocess \\\n  -x test_signal \\\n  -x test_sysconfig\n"
            },
            {
                "id": 22,
                "name": "Step 22",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Runner image version",
                "run": "echo \"IMAGE_VERSION=${ImageVersion}\" >> $GITHUB_ENV"
            },
            {
                "id": 3,
                "name": "Restore config.cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Register gcc problem matcher",
                "run": "echo \"::add-matcher::.github/problem-matchers/gcc.json\""
            },
            {
                "id": 5,
                "name": "Install Dependencies",
                "run": "sudo ./.github/workflows/posix-deps-apt.sh"
            },
            {
                "id": 6,
                "name": "Set up GCC-10 for ASAN",
                "run": "egor-tensin/setup-gcc@v1"
            },
            {
                "id": 7,
                "name": "Configure OpenSSL env vars",
                "run": "echo \"MULTISSL_DIR=${GITHUB_WORKSPACE}/multissl\" >> $GITHUB_ENV\necho \"OPENSSL_DIR=${GITHUB_WORKSPACE}/multissl/openssl/${OPENSSL_VER}\" >> $GITHUB_ENV\necho \"LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/multissl/openssl/${OPENSSL_VER}/lib\" >> $GITHUB_ENV\n"
            },
            {
                "id": 8,
                "name": "Restore OpenSSL build",
                "run": "actions/cache@v4"
            },
            {
                "id": 9,
                "name": "Install OpenSSL",
                "run": "python3 Tools/ssl/multissltests.py --steps=library --base-directory $MULTISSL_DIR --openssl $OPENSSL_VER --system Linux"
            },
            {
                "id": 10,
                "name": "Add ccache to PATH",
                "run": "echo \"PATH=/usr/lib/ccache:$PATH\" >> $GITHUB_ENV\n"
            },
            {
                "id": 11,
                "name": "Configure ccache action",
                "run": "hendrikmuhs/ccache-action@v1.2"
            },
            {
                "id": 12,
                "name": "Configure CPython",
                "run": "./configure --config-cache --with-address-sanitizer --without-pymalloc"
            },
            {
                "id": 13,
                "name": "Build CPython",
                "run": "make -j4"
            },
            {
                "id": 14,
                "name": "Display build info",
                "run": "make pythoninfo"
            },
            {
                "id": 15,
                "name": "Tests",
                "run": "xvfb-run make test"
            },
            {
                "id": 1,
                "name": "Build fuzzers (${{ matrix.sanitizer }})",
                "run": "google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master"
            },
            {
                "id": 2,
                "name": "Run fuzzers (${{ matrix.sanitizer }})",
                "run": "google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master"
            },
            {
                "id": 3,
                "name": "Upload crash",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 4,
                "name": "Upload SARIF",
                "run": "github/codeql-action/upload-sarif@v3"
            },
            {
                "id": 1,
                "name": "Check whether the needed jobs succeeded or failed",
                "run": "re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build CPython installer",
                "run": ".\\Tools\\msi\\build.bat --doc -${{ matrix.type }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "readthedocs/actions/preview@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build tier two interpreter",
                "run": "./configure --enable-experimental-jit=interpreter --with-pydebug\nmake all --jobs 4\n"
            },
            {
                "id": 3,
                "name": "Test tier two interpreter",
                "run": "./python -m test --multiprocess 0 --timeout 4500 --verbose2 --verbose3\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Native Windows",
                "run": "choco upgrade llvm -y\nchoco install llvm --allow-downgrade --no-progress --version ${{ matrix.llvm }}\n./PCbuild/build.bat --experimental-jit ${{ matrix.debug && '-d' || '--pgo' }} -p ${{ matrix.architecture }}\n./PCbuild/rt.bat ${{ matrix.debug && '-d' || '' }} -p ${{ matrix.architecture }} -q --multiprocess 0 --timeout 4500 --verbose2 --verbose3\n"
            },
            {
                "id": 4,
                "name": "Emulated Windows",
                "run": "choco upgrade llvm -y\nchoco install llvm --allow-downgrade --no-progress --version ${{ matrix.llvm }}\n./PCbuild/build.bat --experimental-jit ${{ matrix.debug && '-d' || '' }} -p ${{ matrix.architecture }}\n"
            },
            {
                "id": 5,
                "name": "Native macOS",
                "run": "brew update\nbrew install llvm@${{ matrix.llvm }}\nSDKROOT=\"$(xcrun --show-sdk-path)\" \\\n  ./configure --enable-experimental-jit ${{ matrix.debug && '--with-pydebug' || '--enable-optimizations --with-lto' }}\nmake all --jobs 4\n./python.exe -m test --multiprocess 0 --timeout 4500 --verbose2 --verbose3\n"
            },
            {
                "id": 6,
                "name": "Native Linux",
                "run": "sudo bash -c \"$(wget -O - https://apt.llvm.org/llvm.sh)\" ./llvm.sh ${{ matrix.llvm }}\nexport PATH=\"$(llvm-config-${{ matrix.llvm }} --bindir):$PATH\"\n./configure --enable-experimental-jit ${{ matrix.debug && '--with-pydebug' || '--enable-optimizations' }}\nmake all --jobs 4\n./python -m test --multiprocess 0 --timeout 4500 --verbose2 --verbose3\n"
            },
            {
                "id": 7,
                "name": "Emulated Linux",
                "run": "sudo bash -c \"$(wget -O - https://apt.llvm.org/llvm.sh)\" ./llvm.sh ${{ matrix.llvm }}\nexport PATH=\"$(llvm-config-${{ matrix.llvm }} --bindir):$PATH\"\n./configure --prefix=\"$(pwd)/../build\"\nmake install --jobs 4\nmake clean --jobs 4\nexport HOST=${{ matrix.architecture }}-linux-gnu\nsudo apt install --yes \"gcc-$HOST\" qemu-user\n${{ !matrix.debug && matrix.compiler == 'clang' && './configure --enable-optimizations' || '' }}\n${{ !matrix.debug && matrix.compiler == 'clang' && 'make profile-run-stamp --jobs 4' || '' }}\nexport QEMU_LD_PREFIX=\"/usr/$HOST\"\nCC=\"${{ matrix.compiler == 'clang' && 'clang --target=$HOST' || '$HOST-gcc' }}\" \\\n  CPP=\"$CC --preprocess\" \\\n  HOSTRUNNER=qemu-${{ matrix.architecture }} \\\n  ./configure --enable-experimental-jit ${{ matrix.debug && '--with-pydebug' || '--enable-optimizations ' }} --build=x86_64-linux-gnu --host=\"$HOST\" --with-build-python=../build/bin/python3 --with-pkg-config=no ac_cv_buggy_getaddrinfo=no ac_cv_file__dev_ptc=no ac_cv_file__dev_ptmx=yes\nmake all --jobs 4\n./python -m test --ignorefile=Tools/jit/ignore-tests-emulated-linux.txt --multiprocess 0 --timeout 4500 --verbose2 --verbose3\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Build with JIT enabled and GIL disabled",
                "run": "sudo bash -c \"$(wget -O - https://apt.llvm.org/llvm.sh)\" ./llvm.sh 18\nexport PATH=\"$(llvm-config-18 --bindir):$PATH\"\n./configure --enable-experimental-jit --with-pydebug --disable-gil\nmake all --jobs 4\n"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "./python -m test --multiprocess 0 --timeout 4500 --verbose2 --verbose3\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v3.0.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pip install -r Tools/requirements-dev.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "mypy --config-file ${{ matrix.target }}/mypy.ini"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "npm install mailgun.js form-data"
            },
            {
                "id": 3,
                "name": "Send notification",
                "run": "actions/github-script@v7"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/add-to-project@v1.0.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "mheap/github-action-required-labels@v5"
            },
            {
                "id": 1,
                "name": "Check out latest PR branch commit",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Fetch commits to get branch diff",
                "run": "# Fetch enough history to find a common ancestor commit (aka merge-base):\ngit fetch origin ${{ env.refspec_pr }} --depth=$(( ${{ github.event.pull_request.commits }} + 1 )) \\\n  --no-tags --prune --no-recurse-submodules\n\n# This should get the oldest commit in the local fetched history (which may not be the commit the PR branched from):\nCOMMON_ANCESTOR=$( git rev-list --first-parent --max-parents=0 --max-count=1 ${{ env.branch_pr }} )\nDATE=$( git log --date=iso8601 --format=%cd \"${COMMON_ANCESTOR}\" )\n\n# Get all commits since that commit date from the base branch (eg: master or main):\ngit fetch origin ${{ env.refspec_base }} --shallow-since=\"${DATE}\" \\\n  --no-tags --prune --no-recurse-submodules\n"
            },
            {
                "id": 3,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install build dependencies",
                "run": "make -C Doc/ venv"
            },
            {
                "id": 5,
                "name": "Build HTML documentation",
                "run": "set -Eeuo pipefail\n# Build docs with the '-n' (nit-picky) option; write warnings to file\nmake -C Doc/ PYTHON=../python SPHINXOPTS=\"-q -n -W --keep-going -w sphinx-warnings.txt\" html\n"
            },
            {
                "id": 6,
                "name": "Check warnings",
                "run": "python Doc/tools/check-warnings.py \\\n  --annotate-diff '${{ env.branch_base }}' '${{ env.branch_pr }}' \\\n  --fail-if-regression \\\n  --fail-if-improved \\\n  --fail-if-new-news-nit\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install build dependencies",
                "run": "make -C Doc/ venv REQUIREMENTS=\"requirements-oldest-sphinx.txt\""
            },
            {
                "id": 4,
                "name": "Build HTML documentation",
                "run": "make -C Doc/ SPHINXOPTS=\"-q\" SPHINXERRORHANDLING=\"-W --keep-going\" html"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "sudo ./.github/workflows/posix-deps-apt.sh && sudo apt-get install wamerican"
            },
            {
                "id": 4,
                "name": "Configure CPython",
                "run": "./configure --with-pydebug"
            },
            {
                "id": 5,
                "name": "Build CPython",
                "run": "make -j4"
            },
            {
                "id": 6,
                "name": "Install build dependencies",
                "run": "make -C Doc/ PYTHON=../python venv"
            },
            {
                "id": 7,
                "name": "Run documentation doctest",
                "run": "xvfb-run make -C Doc/ PYTHON=../python SPHINXERRORHANDLING=\"-W --keep-going\" doctest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Runner image version",
                "run": "echo \"IMAGE_VERSION=${ImageVersion}\" >> $GITHUB_ENV"
            },
            {
                "id": 3,
                "name": "Restore config.cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Install Homebrew dependencies",
                "run": "brew install pkg-config openssl@3.0 xz gdbm tcl-tk"
            },
            {
                "id": 5,
                "name": "Configure CPython",
                "run": "GDBM_CFLAGS=\"-I$(brew --prefix gdbm)/include\" \\\nGDBM_LIBS=\"-L$(brew --prefix gdbm)/lib -lgdbm\" \\\n./configure \\\n  --config-cache \\\n  --with-pydebug \\\n  ${{ inputs.free-threading && '--disable-gil' || '' }} \\\n  --prefix=/opt/python-dev \\\n  --with-openssl=\"$(brew --prefix openssl@3.0)\"\n"
            },
            {
                "id": 6,
                "name": "Build CPython",
                "run": "make -j8"
            },
            {
                "id": 7,
                "name": "Display build info",
                "run": "make pythoninfo"
            },
            {
                "id": 8,
                "name": "Tests",
                "run": "make test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Runner image version",
                "run": "echo \"IMAGE_VERSION=${ImageVersion}\" >> $GITHUB_ENV"
            },
            {
                "id": 3,
                "name": "Restore config.cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "sudo ./.github/workflows/posix-deps-apt.sh\n# Install clang-18\nwget https://apt.llvm.org/llvm.sh\nchmod +x llvm.sh\nsudo ./llvm.sh 18\nsudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100\nsudo update-alternatives --set clang /usr/bin/clang-18\nsudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100\nsudo update-alternatives --set clang++ /usr/bin/clang++-18\n# Reduce ASLR to avoid TSAN crashing\nsudo sysctl -w vm.mmap_rnd_bits=28\n"
            },
            {
                "id": 5,
                "name": "TSAN Option Setup",
                "run": "echo \"TSAN_OPTIONS=log_path=${GITHUB_WORKSPACE}/tsan_log suppressions=${GITHUB_WORKSPACE}/${{ inputs.suppressions_path }} handle_segv=0\" >> $GITHUB_ENV\necho \"CC=clang\" >> $GITHUB_ENV\necho \"CXX=clang++\" >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "Add ccache to PATH",
                "run": "echo \"PATH=/usr/lib/ccache:$PATH\" >> $GITHUB_ENV\n"
            },
            {
                "id": 7,
                "name": "Configure ccache action",
                "run": "hendrikmuhs/ccache-action@v1.2"
            },
            {
                "id": 8,
                "name": "Configure CPython",
                "run": "${{ inputs.options }}"
            },
            {
                "id": 9,
                "name": "Build CPython",
                "run": "make -j4"
            },
            {
                "id": 10,
                "name": "Display build info",
                "run": "make pythoninfo"
            },
            {
                "id": 11,
                "name": "Tests",
                "run": "./python -m test --tsan -j4"
            },
            {
                "id": 12,
                "name": "Display TSAN logs",
                "run": "find ${GITHUB_WORKSPACE} -name 'tsan_log.*' | xargs head -n 1000"
            },
            {
                "id": 13,
                "name": "Archive TSAN logs",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Register gcc problem matcher",
                "run": "echo \"::add-matcher::.github/problem-matchers/gcc.json\""
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "sudo ./.github/workflows/posix-deps-apt.sh"
            },
            {
                "id": 4,
                "name": "Configure OpenSSL env vars",
                "run": "echo \"MULTISSL_DIR=${GITHUB_WORKSPACE}/multissl\" >> $GITHUB_ENV\necho \"OPENSSL_DIR=${GITHUB_WORKSPACE}/multissl/openssl/${OPENSSL_VER}\" >> $GITHUB_ENV\necho \"LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/multissl/openssl/${OPENSSL_VER}/lib\" >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "Restore OpenSSL build",
                "run": "actions/cache@v4"
            },
            {
                "id": 6,
                "name": "Install OpenSSL",
                "run": "python3 Tools/ssl/multissltests.py --steps=library --base-directory $MULTISSL_DIR --openssl $OPENSSL_VER --system Linux"
            },
            {
                "id": 7,
                "name": "Add ccache to PATH",
                "run": "echo \"PATH=/usr/lib/ccache:$PATH\" >> $GITHUB_ENV\n"
            },
            {
                "id": 8,
                "name": "Configure ccache action",
                "run": "hendrikmuhs/ccache-action@v1.2"
            },
            {
                "id": 9,
                "name": "Setup directory envs for out-of-tree builds",
                "run": "echo \"CPYTHON_RO_SRCDIR=$(realpath -m ${GITHUB_WORKSPACE}/../cpython-ro-srcdir)\" >> $GITHUB_ENV\necho \"CPYTHON_BUILDDIR=$(realpath -m ${GITHUB_WORKSPACE}/../cpython-builddir)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 10,
                "name": "Create directories for read-only out-of-tree builds",
                "run": "mkdir -p $CPYTHON_RO_SRCDIR $CPYTHON_BUILDDIR"
            },
            {
                "id": 11,
                "name": "Bind mount sources read-only",
                "run": "sudo mount --bind -o ro $GITHUB_WORKSPACE $CPYTHON_RO_SRCDIR"
            },
            {
                "id": 12,
                "name": "Runner image version",
                "run": "echo \"IMAGE_VERSION=${ImageVersion}\" >> $GITHUB_ENV"
            },
            {
                "id": 13,
                "name": "Restore config.cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 14,
                "name": "Configure CPython out-of-tree",
                "run": "${{ inputs.options }}"
            },
            {
                "id": 15,
                "name": "Build CPython out-of-tree",
                "run": "make -j4"
            },
            {
                "id": 16,
                "name": "Display build info",
                "run": "make pythoninfo"
            },
            {
                "id": 17,
                "name": "Remount sources writable for tests",
                "run": "sudo mount $CPYTHON_RO_SRCDIR -oremount,rw"
            },
            {
                "id": 18,
                "name": "Tests",
                "run": "xvfb-run make test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install wasmtime",
                "run": "jcbhmr/setup-wasmtime@v2"
            },
            {
                "id": 3,
                "name": "Restore WASI SDK",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Install WASI SDK",
                "run": "mkdir ${{ env.WASI_SDK_PATH }} && \\\ncurl -s -S --location https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${{ env.WASI_SDK_VERSION }}/wasi-sdk-${{ env.WASI_SDK_VERSION }}.0-linux.tar.gz | \\\ntar --strip-components 1 --directory ${{ env.WASI_SDK_PATH }} --extract --gunzip\n"
            },
            {
                "id": 5,
                "name": "Configure ccache action",
                "run": "hendrikmuhs/ccache-action@v1.2"
            },
            {
                "id": 6,
                "name": "Add ccache to PATH",
                "run": "echo \"PATH=/usr/lib/ccache:$PATH\" >> $GITHUB_ENV"
            },
            {
                "id": 7,
                "name": "Install Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 8,
                "name": "Restore Python build config.cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 9,
                "name": "Configure build Python",
                "run": "python3 Tools/wasm/wasi.py configure-build-python -- --config-cache --with-pydebug"
            },
            {
                "id": 10,
                "name": "Make build Python",
                "run": "python3 Tools/wasm/wasi.py make-build-python"
            },
            {
                "id": 11,
                "name": "Restore host config.cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 12,
                "name": "Configure host",
                "run": "python3 Tools/wasm/wasi.py configure-host -- --config-cache"
            },
            {
                "id": 13,
                "name": "Make host",
                "run": "python3 Tools/wasm/wasi.py make-host"
            },
            {
                "id": 14,
                "name": "Display build info",
                "run": "make --directory ${{ env.CROSS_BUILD_WASI }} pythoninfo"
            },
            {
                "id": 15,
                "name": "Test",
                "run": "make --directory ${{ env.CROSS_BUILD_WASI }} test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build CPython",
                "run": ".\\PCbuild\\build.bat -e -d -v -p Win32 ${{ inputs.free-threading && '--disable-gil' || '' }}"
            },
            {
                "id": 3,
                "name": "Display build info",
                "run": ".\\python.bat -m test.pythoninfo"
            },
            {
                "id": 4,
                "name": "Tests",
                "run": ".\\PCbuild\\rt.bat -p Win32 -d -q --fast-ci ${{ inputs.free-threading && '--disable-gil' || '' }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Register MSVC problem matcher",
                "run": "echo \"::add-matcher::.github/problem-matchers/msvc.json\""
            },
            {
                "id": 3,
                "name": "Build CPython",
                "run": ".\\PCbuild\\build.bat -e -d -v -p x64 ${{ inputs.free-threading && '--disable-gil' || '' }}"
            },
            {
                "id": 4,
                "name": "Display build info",
                "run": ".\\python.bat -m test.pythoninfo"
            },
            {
                "id": 5,
                "name": "Tests",
                "run": ".\\PCbuild\\rt.bat -p x64 -d -q --fast-ci ${{ inputs.free-threading && '--disable-gil' || '' }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Register MSVC problem matcher",
                "run": "echo \"::add-matcher::.github/problem-matchers/msvc.json\""
            },
            {
                "id": 3,
                "name": "Build CPython",
                "run": ".\\PCbuild\\build.bat -e -d -v -p arm64 ${{ inputs.free-threading && '--disable-gil' || '' }}"
            },
            {
                "id": 1,
                "name": "Check PRs",
                "run": "actions/stale@v9"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Compare checksum of bundled wheels to the ones published on PyPI",
                "run": "./Tools/build/verify_ensurepip_wheels.py"
            }
        ],
        "python/bedevere": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install tox",
                "run": "python -m pip install tox\n"
            },
            {
                "id": 4,
                "name": "Run Tests",
                "run": "tox -e py"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "codecov/codecov-action@v4"
            }
        ],
        "python/python-docs-theme": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "readthedocs/actions/preview@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v3.0.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "hynek/build-and-inspect-python-package@v2"
            },
            {
                "id": 1,
                "name": "Download packages built by build-and-inspect-python-package",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Upload package to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Clone docsbuild scripts",
                "run": "git clone https://github.com/python/docsbuild-scripts/\n"
            },
            {
                "id": 4,
                "name": "Set up requirements",
                "run": "python -m pip install --upgrade pip\npython -m pip install -r docsbuild-scripts/requirements.txt\n"
            },
            {
                "id": 5,
                "name": "Build documentation",
                "run": "python ./docsbuild-scripts/build_docs.py --quick --build-root ./build_root --www-root ./www --log-directory ./logs --group \"$(id -g)\" --skip-cache-invalidation --theme \"$(pwd)\" --language en --branch ${{ matrix.branch }}\n"
            },
            {
                "id": 6,
                "name": "Show logs",
                "run": "cat ./logs/docsbuild.log\n"
            },
            {
                "id": 7,
                "name": "Upload",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "python/python-docs-ja": [
            {
                "id": 1,
                "name": "Prepare environment variables",
                "run": "ref=${GITHUB_REF#refs/pull/}\npr_num=${ref%/merge}\n\necho \"::set-env name=PR_NUM::${pr_num}\"\necho \"::set-env name=PR_BUILD_ID::${GITHUB_BASE_REF}/${pr_num}\"\necho \"::set-env name=DOCS_BASE_DIR::build/html\"\necho \"::set-env name=DOCS_OUTPUT_DIR::build/html/${GITHUB_BASE_REF}/${pr_num}\"\n"
            },
            {
                "id": 2,
                "name": "Checkout GitHub Pages",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Delete docs",
                "run": "cd ${GITHUB_WORKSPACE}/${DOCS_BASE_DIR}\npwd\ngit rm -r ${GITHUB_WORKSPACE}/${DOCS_OUTPUT_DIR}\ngit config --local user.name \"Autobuild bot on GitHub Actions\"\ngit config --local user.email \"githubaction-build-bot@example.com\"\npwd\ngit add .\n# if [ $(git status -s | wc -l) -eq 0 ]; then echo \"nothing to commit\"; exit 0; fi\ngit commit -m \"Delete docs, branch: ${GITHUB_BASE_REF} pr_num: ${PR_NUM}\"\ngit push --quiet \"https://${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git\" gh-pages:gh-pages\n"
            },
            {
                "id": 1,
                "name": "Prepare environment variables",
                "run": "ref=${GITHUB_REF#refs/pull/}\npr_num=${ref%/merge}\n\necho \"::set-env name=PR_BUILD_ID::${GITHUB_BASE_REF}/${pr_num}\"\necho \"::set-env name=DOCS_BASE_DIR::build/html\"\necho \"::set-env name=DOCS_OUTPUT_DIR::build/html/${GITHUB_BASE_REF}/${pr_num}\"\n  \n"
            },
            {
                "id": 2,
                "name": "Checkout cpython repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Checkout PR branch",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Checkout GitHub Pages",
                "run": "actions/checkout@v2"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "sudo apt-get update\nsudo apt-get install -y --no-install-recommends python3-venv\n"
            },
            {
                "id": 6,
                "name": "Build docs",
                "run": "cd cpython/Doc\nmake venv\nrm -rf ${DOCS_OUTPUT_DIR}\nmake build ALLSPHINXOPTS=\"-b html -D language=ja -D gettext_compact=0 -E -d build/doctrees . ${GITHUB_WORKSPACE}/${DOCS_OUTPUT_DIR}\"\nls -l ${GITHUB_WORKSPACE}/${DOCS_OUTPUT_DIR}\n"
            },
            {
                "id": 7,
                "name": "Publish docs",
                "run": "cd ${GITHUB_WORKSPACE}/${DOCS_BASE_DIR}\ngit config --local user.name \"Autobuild bot on GitHub Actions\"\ngit config --local user.email \"githubaction-build-bot@example.com\"\ngit add .\nif [ $(git status -s | wc -l) -eq 0 ]; then echo \"nothing to commit\"; exit 0; fi\ngit commit -m 'update html'\ngit push --quiet \"https://${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git\" gh-pages:gh-pages\n"
            },
            {
                "id": 8,
                "name": "Notify the URL of the built docs",
                "run": "thollander/actions-comment-pull-request@master"
            },
            {
                "id": 1,
                "name": "Check out ${{ github.repository }}",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Check out CPython",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Set up Python 3.11",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Install Transifex CLI",
                "run": "curl -o- https://raw.githubusercontent.com/transifex/cli/master/install.sh | bash\n"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "sudo apt update -y && sudo apt install gettext -y\npip3 install --upgrade pip\npip3 install -r requirements.txt -r cpython/Doc/requirements.txt\n"
            },
            {
                "id": 6,
                "name": "Update translations",
                "run": "sh scripts/update.sh\n"
            },
            {
                "id": 7,
                "name": "Wrap catalog message files",
                "run": "powrap --modified\n"
            },
            {
                "id": 8,
                "name": "Commit and push changes",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit status\ngit add -A\ngit diff-index --quiet HEAD || ( git commit -m \"Update translations from Transifex\" && git push )\n"
            },
            {
                "id": 1,
                "name": "Get current branch name",
                "run": "echo \"CURRENT_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)\" >> $GITHUB_ENV"
            },
            {
                "id": 2,
                "name": "Check out source branch (${{ env.CURRENT_BRANCH }})",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Check out target branch (${{ matrix.branch }})",
                "run": "actions/checkout@v3"
            },
            {
                "id": 4,
                "name": "Set up Python 3.11",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "sudo apt update -y && sudo apt install gettext -y\npip3 install pomerge powrap\n"
            },
            {
                "id": 6,
                "name": "Merge overwriting on stable release branch",
                "run": "pomerge --from ${{ env.CURRENT_BRANCH }}/**/*.po --to ${{ matrix.branch }}/**/*.po\n"
            },
            {
                "id": 7,
                "name": "Merge without overwriting on EOL or security-fix release branch",
                "run": "pomerge --no-overwrite --from ${{ env.CURRENT_BRANCH }}/**/*.po --to ${{ matrix.branch }}/**/*.po\n"
            },
            {
                "id": 8,
                "name": "Wrap catalog message files",
                "run": "powrap --modified -C ${{ matrix.branch }}\n"
            },
            {
                "id": 9,
                "name": "Commit and push changes",
                "run": "cd ${{ matrix.branch }}\ngit config user.name github-actions\ngit config user.email github-actions@github.com\ngit status\ngit add -A\ngit diff-index --quiet HEAD || ( git commit -m \"Merge ${{ env.CURRENT_BRANCH }} into ${{ matrix.branch }}\" && git push )\n"
            }
        ],
        "python/python-docs-pt-br": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.7"
            },
            {
                "id": 2,
                "name": "Set up Python 3",
                "run": "actions/setup-python@v5.1.0"
            },
            {
                "id": 3,
                "name": "Make sure the repository is up to date",
                "run": "git pull --rebase"
            },
            {
                "id": 4,
                "name": "Add problem matcher",
                "run": "sphinx-doc/github-problem-matcher@v1.1"
            },
            {
                "id": 5,
                "name": "Build docs",
                "run": "make build\n"
            },
            {
                "id": 6,
                "name": "Upload artifact - docs",
                "run": "actions/upload-artifact@v4.3.3"
            },
            {
                "id": 7,
                "name": "Upload artifact - log files",
                "run": "actions/upload-artifact@v4.3.3"
            },
            {
                "id": 8,
                "name": "Prepare notification (only on error)",
                "run": ".github/scripts/prepmsg.sh logs/build/err*.txt logs/notify.txt"
            },
            {
                "id": 9,
                "name": "Notify via Telegram",
                "run": "appleboy/telegram-action@v0.1.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.7"
            },
            {
                "id": 2,
                "name": "Set up Python 3",
                "run": "actions/setup-python@v5.1.0"
            },
            {
                "id": 3,
                "name": "Make sure the repository is up to date",
                "run": "git pull --rebase"
            },
            {
                "id": 4,
                "name": "Add problem matcher",
                "run": "rffontenelle/sphinx-lint-problem-matcher@v1.0.0"
            },
            {
                "id": 5,
                "name": "Run sphinx-lint",
                "run": "make lint\n"
            },
            {
                "id": 6,
                "name": "Upload artifact - log files",
                "run": "actions/upload-artifact@v4.3.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.7"
            },
            {
                "id": 2,
                "name": "Set up Python 3",
                "run": "actions/setup-python@v5.1.0"
            },
            {
                "id": 3,
                "name": "Make sure the repository is up to date",
                "run": "git pull --rebase"
            },
            {
                "id": 4,
                "name": "Install Hunspell",
                "run": "sudo apt install hunspell hunspell-pt-br -y"
            },
            {
                "id": 5,
                "name": "Run pospell",
                "run": "make spell"
            },
            {
                "id": 6,
                "name": "Upload artifact - log files",
                "run": "actions/upload-artifact@v4.3.3"
            },
            {
                "id": 1,
                "name": "Check out ${{ github.repository }}",
                "run": "actions/checkout@v4.1.7"
            },
            {
                "id": 2,
                "name": "Set up Python 3",
                "run": "actions/setup-python@v5.1.0"
            },
            {
                "id": 3,
                "name": "Make sure the repository is up to date",
                "run": "git pull --rebase"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "sudo apt update -y && sudo apt install gettext -y\npip3 install --upgrade pip\npip3 install -r requirements.txt\n"
            },
            {
                "id": 5,
                "name": "Generate compendium from PO files",
                "run": "pocompendium --correct compendium.po *.po **/*.po\npowrap compendium.po\n"
            },
            {
                "id": 6,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@v4.3.3"
            },
            {
                "id": 1,
                "name": "Check out ${{ github.repository }}",
                "run": "actions/checkout@v4.1.7"
            },
            {
                "id": 2,
                "name": "Set up Python 3",
                "run": "actions/setup-python@v5.1.0"
            },
            {
                "id": 3,
                "name": "Generate POT files",
                "run": "make pot"
            },
            {
                "id": 4,
                "name": "List obsolete PO files, if any",
                "run": "python3 .github/scripts/list-obsolete.py"
            },
            {
                "id": 1,
                "name": "Check out ${{ github.repository }}",
                "run": "actions/checkout@v4.1.7"
            },
            {
                "id": 2,
                "name": "Get branch name on push or schedule",
                "run": "echo \"BRANCH=${GITHUB_REF_NAME}\" >>$GITHUB_ENV"
            },
            {
                "id": 3,
                "name": "Get branch name on pull",
                "run": "echo \"BRANCH=${GITHUB_BASE_REF}\" >>$GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Get branch name on manual run",
                "run": "echo \"BRANCH=${{ github.event.inputs.BRANCH }}\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Check out CPython",
                "run": "actions/checkout@v4.1.7"
            },
            {
                "id": 6,
                "name": "Set up Python 3",
                "run": "actions/setup-python@v5.1.0"
            },
            {
                "id": 7,
                "name": "Install dependencies",
                "run": "sudo apt update -y && sudo apt install gettext tree -y"
            },
            {
                "id": 8,
                "name": "Pull translations",
                "run": "make tx-config TX_CLI_DIR=/usr/local/bin\nif [ \"${{ github.event_name }}\" != 'pull_request' ]; then\n  make pull -o tx-config TX_CLI_DIR=/usr/local/bin\nfi\n"
            },
            {
                "id": 9,
                "name": "Upload artifact - po files",
                "run": "actions/upload-artifact@v4.3.3"
            },
            {
                "id": 10,
                "name": "Upload artifact - log files",
                "run": "actions/upload-artifact@v4.3.3"
            },
            {
                "id": 1,
                "name": "Check out ${{ github.repository }}",
                "run": "actions/checkout@v4.1.7"
            },
            {
                "id": 2,
                "name": "Download PO files",
                "run": "actions/download-artifact@v4.1.7"
            },
            {
                "id": 3,
                "name": "Changed files",
                "run": "git diff -I'^\"POT-Creation-Date: ' --numstat *.po **/*.po | cut -f3\ngit ls-files -o --exclude-standard *.po **/*.po\n"
            },
            {
                "id": 4,
                "name": "Commit and push changes",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\nmake push\n"
            },
            {
                "id": 1,
                "name": "Get branch name on push or schedule",
                "run": "echo \"CURRENT_BRANCH=${GITHUB_REF_NAME}\" >>$GITHUB_ENV"
            },
            {
                "id": 2,
                "name": "Get branch name on pull",
                "run": "echo \"CURRENT_BRANCH=${GITHUB_BASE_REF}\" >>$GITHUB_ENV"
            },
            {
                "id": 3,
                "name": "Get branch name on manual run",
                "run": "echo \"CURRENT_BRANCH=${{ github.event.inputs.BRANCH }}\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Check out source branch (${{ env.CURRENT_BRANCH }})",
                "run": "actions/checkout@v4.1.7"
            },
            {
                "id": 5,
                "name": "Check out target branch (${{ matrix.branch }})",
                "run": "actions/checkout@v4.1.7"
            },
            {
                "id": 6,
                "name": "Set up Python 3",
                "run": "actions/setup-python@v5.1.0"
            },
            {
                "id": 7,
                "name": "Install dependencies",
                "run": "sudo apt update -y && sudo apt install gettext -y\npip3 install pomerge powrap\n"
            },
            {
                "id": 8,
                "name": "Merge overwriting on stable release branch",
                "run": "pomerge --from ${{ env.CURRENT_BRANCH }}/**/*.po --to ${{ matrix.branch }}/**/*.po\n"
            },
            {
                "id": 9,
                "name": "Merge without overwriting on EOL or security-fix release branch",
                "run": "pomerge --no-overwrite --from ${{ env.CURRENT_BRANCH }}/**/*.po --to ${{ matrix.branch }}/**/*.po\n"
            },
            {
                "id": 10,
                "name": "Wrap catalog message files",
                "run": "powrap --modified -C ${{ matrix.branch }}\n"
            },
            {
                "id": 11,
                "name": "Commit and push changes",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit diff -I'^\"POT-Creation-Date: ' --numstat *.po **/*.po | cut -f3 | xargs -r git add\ngit add $(git ls-files -o --exclude-standard *.po **/*.po) .tx/config\ngit diff-index --cached --quiet HEAD || git commit -m \"Merge ${{ env.CURRENT_BRANCH }} into ${{ matrix.branch }}\"\n"
            }
        ],
        "python/miss-islington": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install tox",
                "run": "python -m pip install tox\n"
            },
            {
                "id": 4,
                "name": "Run Tests",
                "run": "tox"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "codecov/codecov-action@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v3.0.1"
            }
        ],
        "python/python-docs-zh-tw": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Dependencies",
                "run": "sudo apt-get install gettext"
            },
            {
                "id": 3,
                "name": "Validate",
                "run": "VERSION=${{ github.event.repository.default_branch }} MODE=dummy make all"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Dependencies",
                "run": "sudo apt-get install gettext"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "make all"
            },
            {
                "id": 4,
                "name": "Deploy to gh page",
                "run": "JamesIves/github-pages-deploy-action@3.7.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Get the changes on branch (if exists)",
                "run": "git fetch origin ${{ env.BRANCH }}:${{ env.BRANCH }}\ngit reset --hard ${{ env.BRANCH }}\n"
            },
            {
                "id": 3,
                "name": "Set env",
                "run": "echo \"LATEST_COMMIT_ID=$(git ls-remote https://github.com/python/CPython.git $VERSION | head -c 8)\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "sudo apt-get install gettext"
            },
            {
                "id": 5,
                "name": "Sync with CPython",
                "run": "make clone && make merge && make rm_cpython"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "tibdex/github-app-token@v1"
            },
            {
                "id": 7,
                "name": "Create Pull Request",
                "run": "peter-evans/create-pull-request@v3"
            },
            {
                "id": 8,
                "name": "Check outputs",
                "run": "echo \"Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}\"\necho \"Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install poetry",
                "run": "abatilo/actions-poetry@v2"
            },
            {
                "id": 3,
                "name": "Execute Check Process",
                "run": "chmod +x .scripts/summarize_progress.sh \n.scripts/summarize_progress.sh\n"
            },
            {
                "id": 4,
                "name": "Checkout wiki code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 5,
                "name": "Copy content",
                "run": "cp .scripts/summarize_progress/result.md markdown/\u5404\u6a94\u6848\u7ffb\u8b6f\u9032\u5ea6\u6e05\u55ae.md\n"
            },
            {
                "id": 6,
                "name": "Commit wiki code",
                "run": "stefanzweifel/git-auto-commit-action@v5"
            }
        ],
        "python/blurb_it": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python3 -m pip install -U coverage tox\n"
            },
            {
                "id": 4,
                "name": "Tests",
                "run": "tox -e py\n"
            },
            {
                "id": 5,
                "name": "Upload coverage",
                "run": "codecov/codecov-action@v3.1.5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v3.0.1"
            }
        ],
        "python/python-docs-zh-cn": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout CPython",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/cache/restore@v4"
            },
            {
                "id": 4,
                "name": "Checkout Current Branch",
                "run": "actions/checkout@v4"
            },
            {
                "id": 5,
                "name": "prepare",
                "run": ".github/scripts/prepare.sh"
            },
            {
                "id": 6,
                "name": "update",
                "run": ".github/scripts/update.sh"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/cache/restore@v4"
            },
            {
                "id": 8,
                "name": "build",
                "run": ".github/scripts/build.sh"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/cache/save@v4"
            },
            {
                "id": 10,
                "name": "stat",
                "run": "python .github/scripts/tx_stat.py > ./docs/.stat.json"
            },
            {
                "id": 11,
                "name": "commit",
                "run": ".github/scripts/commit.sh"
            }
        ],
        "python/mypy_extensions": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install tox\n"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "tox -e lint"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install tox\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "tox -e py"
            }
        ],
        "python/steering-council": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Check README is up-to-date",
                "run": "make check\n"
            }
        ],
        "python/python-docs-es": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Preparar Python v3.11",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Configura dpkg/apt para ejecutarse de manera eficiente",
                "run": "abbbi/github-actions-tune@v1"
            },
            {
                "id": 4,
                "name": "Deshabilita triggers de postgresql-common",
                "run": "sudo sed -i '/postgresql-common/d' /var/lib/dpkg/triggers/File"
            },
            {
                "id": 5,
                "name": "Instalar dependencias de sistema",
                "run": "sudo apt-get update\nsudo apt-get install -y hunspell hunspell-es gettext language-pack-es locales-all\n"
            },
            {
                "id": 6,
                "name": "Instalar dependencias de Python",
                "run": "python -m pip install -r requirements.txt\n"
            },
            {
                "id": 7,
                "name": "Listar paquetes y versiones",
                "run": "pip list\npospell --version\npowrap --version\n"
            },
            {
                "id": 8,
                "name": "Obtiene la lista de archivos .po con cambios (s\u00f3lo en PRs)",
                "run": "tj-actions/changed-files@v44"
            },
            {
                "id": 9,
                "name": "Calcula lista de archivos .po a revisar",
                "run": "echo \"po_files_to_check=$PO_FILES_TO_CHECK\" >> $GITHUB_OUTPUT\necho \"any_po_files_to_check=`test -n \\\"$PO_FILES_TO_CHECK\\\" && echo true || echo false`\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 10,
                "name": "Muestra outputs de steps anteriores para debugueo",
                "run": "echo \"steps.changed-po-files=$PO_FILES_TO_CHECK\"\necho \"steps.po-files-to-change.$CHANGED_PO_FILES\"\n"
            },
            {
                "id": 11,
                "name": "TRANSLATORS",
                "run": "diff -Naur TRANSLATORS <(LANG=es python scripts/sort.py < TRANSLATORS)\n"
            },
            {
                "id": 12,
                "name": "Powrap",
                "run": "powrap --check --quiet ${{ steps.po-files-to-check.outputs.po_files_to_check }}"
            },
            {
                "id": 13,
                "name": "Sphinx lint",
                "run": "sphinx-lint ${{ steps.po-files-to-check.outputs.po_files_to_check }}"
            },
            {
                "id": 14,
                "name": "Pospell",
                "run": "python scripts/check_spell.py ${{ steps.po-files-to-check.outputs.po_files_to_check }}"
            },
            {
                "id": 15,
                "name": "Construir documentaci\u00f3n",
                "run": "# FIXME: Relative paths for includes in 'cpython'\nsed -i -e 's|.. include:: ../includes/wasm-notavail.rst|.. include:: ../../../../includes/wasm-notavail.rst|g' cpython/Doc/**/*.rst\nsed -i -e 's|.. include:: ../distutils/_setuptools_disclaimer.rst|.. include:: ../../../../distutils/_setuptools_disclaimer.rst|g' cpython/Doc/**/*.rst\nsed -i -e 's|.. include:: ./_setuptools_disclaimer.rst|.. include:: ../../../_setuptools_disclaimer.rst|g' cpython/Doc/**/*.rst\nsed -i -e 's|.. include:: token-list.inc|.. include:: ../../../token-list.inc|g' cpython/Doc/**/*.rst\nsed -i -e 's|.. include:: ../../using/venv-create.inc|.. include:: ../using/venv-create.inc|g' cpython/Doc/**/*.rst\nsed -i -e 's|.. include:: ../../../using/venv-create.inc|.. include:: ../../using/venv-create.inc|g' cpython/Doc/**/*.rst\nsed -i -e 's|.. include:: /using/venv-create.inc|.. include:: ../../../../using/venv-create.inc|g' cpython/Doc/**/*.rst\n# Normal build\nPYTHONWARNINGS=ignore::FutureWarning,ignore::RuntimeWarning sphinx-build -j auto -W --keep-going -b html -d cpython/Doc/_build/doctree -D language=es . cpython/Doc/_build/html\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Preparar Python v3.11",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Instalar dependencias",
                "run": "python -m pip install -r base-branch/requirements.txt\n"
            },
            {
                "id": 5,
                "name": "Obtiene lista de archivos con cambios",
                "run": "tj-actions/changed-files@v44"
            },
            {
                "id": 6,
                "name": "Calcular entradas faltantes",
                "run": "{\n  echo 'comment<<EOF'\n  python base-branch/scripts/list_missing_entries.py --github $CHANGED_PO_FILES\n  echo EOF\n} >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 1,
                "name": "Agregar comentario con entradas faltantes",
                "run": "thollander/actions-comment-pull-request@v2"
            }
        ],
        "python/cherry-picker": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "hynek/build-and-inspect-python-package@v2"
            },
            {
                "id": 1,
                "name": "Download packages built by build-and-inspect-python-package",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Publish to Test PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 1,
                "name": "Download packages built by build-and-inspect-python-package",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 2,
                "name": "Publish to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v3.0.1"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip wheel\n# TODO: remove setuptools installation when safety==2.4.0 is released\npython -m pip install --upgrade safety setuptools\npython -m pip install --editable .\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "safety check --ignore 62044"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install tox",
                "run": "python -m pip install tox\n"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "tox -e py"
            },
            {
                "id": 5,
                "name": "Upload coverage",
                "run": "codecov/codecov-action@v4"
            }
        ],
        "python/python-docs-pl": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@master"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pip install gitpython matplotlib"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@master"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "python update_switcher_chart.py"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "git config --local user.email github-actions@github.com"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "git config --local user.name \"GitHub Action's update-chart job\""
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "git add ."
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "git commit -m 'Update language switcher progress chart' || return 0"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "ad-m/github-push-action@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "styfle/cancel-workflow-action@main"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@master"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "sudo apt-get install -y gettext"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pip install requests cogapp polib transifex-python sphinx-intl blurb"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "curl -o- https://raw.githubusercontent.com/transifex/cli/master/install.sh | bash"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/checkout@master"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "./manage_translation.py recreate_tx_config"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "./manage_translation.py fetch"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "python -Werror -m cogapp -rP README.md"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "git config --local user.email github-actions@github.com"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "git config --local user.name \"GitHub Action's update-translation job\""
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "! git diff -I'^\"POT-Creation-Date: ' -I'^\"Language-Team: ' -I'^# Copyright (C) 2001-' --exit-code && echo \"SIGNIFICANT_CHANGES=1\" >> $GITHUB_ENV || exit 0\n"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "git add ."
            },
            {
                "id": 14,
                "name": "Step 14",
                "run": "git commit -m 'Update translation from Transifex' || true"
            },
            {
                "id": 15,
                "name": "Step 15",
                "run": "ad-m/github-push-action@master"
            },
            {
                "id": 16,
                "name": "Step 16",
                "run": "peter-evans/repository-dispatch@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@master"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pip install sphinx-lint"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@master"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "sphinx-lint"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@master"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@master"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "make venv"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@master"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "git pull"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "make -e SPHINXOPTS=\"-D language='pl' -D gettext_compact=0 -W --keep-going\" ${{ matrix.format }}"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@master"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "sudo apt-get update"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "sudo apt-get install -y latexmk texlive-xetex fonts-freefont-otf xindy"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "make"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@master"
            }
        ],
        "python/tzdata": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install -U tox\n"
            },
            {
                "id": 4,
                "name": "Create tox environments",
                "run": "tox -p -e py,build,release --notest\n"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "tox -e py\n"
            },
            {
                "id": 6,
                "name": "Build package",
                "run": "tox -e build\n"
            },
            {
                "id": 7,
                "name": "Publish package",
                "run": "if [[ \"$GITHUB_EVENT_NAME\" == \"push\" ]]; then\n  export TWINE_REPOSITORY_URL=\"https://test.pypi.org/legacy/\"\n  export TWINE_PASSWORD=\"${{ secrets.TEST_PYPI_UPLOAD_TOKEN }}\"\nelif [[ \"$GITHUB_EVENT_NAME\" == \"release\" ]]; then\n  export TWINE_REPOSITORY=\"pypi\"\n  export TWINE_PASSWORD=\"${{ secrets.PYPI_UPLOAD_TOKEN }}\"\nelse\n  echo \"Unknown event name: ${GITHUB_EVENT_NAME}\"\n  exit 1\nfi\n\ntox -e release\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "sudo apt-get install python-is-python2\ncurl -sSL https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py\npython get-pip.py\n"
            },
            {
                "id": 3,
                "name": "${{ matrix.python-version }} - ${{ matrix.os }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npython -m pip install --upgrade tox\n"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "tox\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "${{ matrix.toxenv }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install tox",
                "run": "python -m pip install --upgrade pip\npython -m pip install --upgrade tox\n"
            },
            {
                "id": 4,
                "name": "Run action",
                "run": "if [[ $TOXENV == \"docs\" ]]; then\n  tox -- -j auto -bhtml -W -n -a --keep-going\nelse\n  tox\nfi\n"
            }
        ],
        "python/pythoncapi-compat": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install setuptools",
                "run": "python -m pip install setuptools"
            },
            {
                "id": 4,
                "name": "Display the Python version",
                "run": "python -VV"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "python runtests.py --current --verbose"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Python 2.7",
                "run": "sudo apt-get update\nsudo apt-get -yq install python2.7 python2.7-dev\n"
            },
            {
                "id": 3,
                "name": "Display the Python version",
                "run": "python2.7 -VV"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "python2.7 runtests.py --current --verbose"
            }
        ],
        "python/importlib_resources": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install tox",
                "run": "python -m pip install tox"
            },
            {
                "id": 4,
                "name": "Run",
                "run": "tox"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install tox",
                "run": "python -m pip install tox"
            },
            {
                "id": 4,
                "name": "Eval ${{ matrix.job }}",
                "run": "tox -e ${{ matrix.job }}"
            },
            {
                "id": 1,
                "name": "Decide whether the needed jobs succeeded or failed",
                "run": "re-actors/alls-green@release/v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install tox",
                "run": "python -m pip install tox"
            },
            {
                "id": 4,
                "name": "Run",
                "run": "tox -e release"
            }
        ],
        "python/importlib_metadata": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install tox",
                "run": "python -m pip install tox"
            },
            {
                "id": 4,
                "name": "Run",
                "run": "tox"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install tox",
                "run": "python -m pip install tox"
            },
            {
                "id": 4,
                "name": "Eval ${{ matrix.job }}",
                "run": "tox -e ${{ matrix.job }}"
            },
            {
                "id": 1,
                "name": "Decide whether the needed jobs succeeded or failed",
                "run": "re-actors/alls-green@release/v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install tox",
                "run": "python -m pip install tox"
            },
            {
                "id": 4,
                "name": "Run",
                "run": "tox -e release"
            }
        ],
        "python/docs-community": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "readthedocs/actions/preview@v1"
            }
        ],
        "python/python-docs-tr": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "lots0logs/gh-action-get-changed-files@2.2.2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install ${{ matrix.tool.package }}",
                "run": "if [ -n \"${{ matrix.tool.apt_dependencies }}\" ]; then\n    sudo apt-get update && sudo apt-get install -y ${{ matrix.tool.apt_dependencies }}\nfi\nif [ -n \"${{ matrix.tool.package }}\" ]; then\n    pip install ${{ matrix.tool.package }}\nfi\n"
            },
            {
                "id": 5,
                "name": "Run ${{ matrix.tool.package }}",
                "run": "CHANGED_PO_FILES=$(printf \"%s %s\\n\" \"$ADDED_FILES\" \"$MODIFIED_FILES\" | tr ' ' '\\n' | grep '.po$'; true)\npwd\ntree -L 2\nif [ -n \"$CHANGED_PO_FILES\" ]\nthen\n  echo \"Running on:\" $CHANGED_PO_FILES\n  ${{ matrix.tool.command }}\nelse\n  echo \"No changed po files, nothing to check.\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Prepare environment",
                "run": "pwd\ntree -L 2\ngit clone https://github.com/python/cpython.git venv/cpython/\npip install -r venv/cpython/Doc/requirements.txt\n"
            },
            {
                "id": 4,
                "name": "Make",
                "run": "make"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install pre-commit",
                "run": "pip install pre-commit"
            },
            {
                "id": 4,
                "name": "Cache pre-commit tools",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Run pre-commit",
                "run": "pre-commit run --all-files --show-diff-on-failure"
            },
            {
                "id": 6,
                "name": "Run pre-commit-ci-lite",
                "run": "pre-commit-ci/lite-action@v1.0.2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Clone CPython Repo",
                "run": "git clone https://github.com/python/cpython venv/cpython"
            },
            {
                "id": 3,
                "name": "Set Up Python 3.12",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pip install tqdm poutils -r venv/cpython/Doc/requirements.txt && sudo apt install gettext -y"
            },
            {
                "id": 5,
                "name": "Run merge.py",
                "run": "python merge.py ${GITHUB_REF##*/}"
            },
            {
                "id": 6,
                "name": "Commit changes",
                "run": "git config --local user.email \"python.docs.tr@gmail.com\"\ngit config --local user.name \"python-docs-turkish\"\ngit commit -m \"Get changes from CPython Doc for ${{ github.ref_name }}\"\n"
            },
            {
                "id": 7,
                "name": "Create Pull Request",
                "run": "peter-evans/create-pull-request@v6.0.5"
            },
            {
                "id": 1,
                "name": "Checkout repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set Up Python 3.12",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install poutils && sudo apt install -y gettext"
            },
            {
                "id": 4,
                "name": "Wrap",
                "run": "powrap *.po */*.po"
            },
            {
                "id": 5,
                "name": "Create Pull Request",
                "run": "peter-evans/create-pull-request@v6.0.5"
            }
        ],
        "python/typing_extensions": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Test typing_extensions",
                "run": "# Be wary of running `pip install` here, since it becomes easy for us to\n# accidentally pick up typing_extensions as installed by a dependency\ncd src\npython -m unittest test_typing_extensions.py\n"
            },
            {
                "id": 4,
                "name": "Test CPython typing test suite",
                "run": "cd src\n# Run the typing test suite from CPython with typing_extensions installed,\n# because we monkeypatch typing under some circumstances.\npython -c 'import typing_extensions; import test.__main__' test_typing -v\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install -r test-requirements.txt"
            },
            {
                "id": 4,
                "name": "Lint implementation",
                "run": "ruff check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v7"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Check package metadata",
                "run": "python scripts/check_package.py ${{ github.ref }}"
            },
            {
                "id": 4,
                "name": "Install pypa/build",
                "run": "# Be wary of running `pip install` here, since it becomes easy for us to\n# accidentally pick up typing_extensions as installed by a dependency\npython -m pip install --upgrade build\npython -m pip list\n"
            },
            {
                "id": 5,
                "name": "Build a binary wheel and a source tarball",
                "run": "python -m build"
            },
            {
                "id": 6,
                "name": "Store the distribution packages",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Download all the dists",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "Install wheel",
                "run": "export path_to_file=$(find dist -type f -name \"typing_extensions-*.whl\")\necho \"::notice::Installing wheel: $path_to_file\"\npython -m pip install --user $path_to_file\npython -m pip list\n"
            },
            {
                "id": 5,
                "name": "Run typing_extensions tests against installed package",
                "run": "rm src/typing_extensions.py && python src/test_typing_extensions.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Download all the dists",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "Unpack and test source distribution",
                "run": "export path_to_file=$(find dist -type f -name \"typing_extensions-*.tar.gz\")\necho \"::notice::Unpacking source distribution: $path_to_file\"\ntar xzf $path_to_file -C dist/\ncd ${path_to_file%.tar.gz}/src\npython test_typing_extensions.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Download all the dists",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "Install source distribution",
                "run": "export path_to_file=$(find dist -type f -name \"typing_extensions-*.tar.gz\")\necho \"::notice::Installing source distribution: $path_to_file\"\npython -m pip install --user $path_to_file\npython -m pip list\n"
            },
            {
                "id": 5,
                "name": "Run typing_extensions tests against installed package",
                "run": "rm src/typing_extensions.py && python src/test_typing_extensions.py"
            },
            {
                "id": 1,
                "name": "Download all the dists",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Ensure exactly one sdist and one wheel have been downloaded",
                "run": "test $(ls dist/*.tar.gz | wc -l) = 1 && test $(ls dist/*.whl | wc -l) = 1"
            },
            {
                "id": 3,
                "name": "Publish distribution to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 1,
                "name": "Checkout pydantic",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Edit pydantic pyproject.toml",
                "run": "sed -i 's/^requires-python = .*/requires-python = \">=3.8\"/' pyproject.toml"
            },
            {
                "id": 3,
                "name": "Checkout typing_extensions",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Setup pdm for pydantic tests",
                "run": "pdm-project/setup-pdm@v4"
            },
            {
                "id": 5,
                "name": "Add local version of typing_extensions as a dependency",
                "run": "pdm add ./typing-extensions-latest"
            },
            {
                "id": 6,
                "name": "Install pydantic test dependencies",
                "run": "pdm install -G testing -G email"
            },
            {
                "id": 7,
                "name": "List installed dependencies",
                "run": "pdm list -vv"
            },
            {
                "id": 8,
                "name": "Run pydantic tests",
                "run": "pdm run pytest"
            },
            {
                "id": 1,
                "name": "Checkout typing_inspect",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout typing_extensions",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install uv",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 5,
                "name": "Install typing_inspect test dependencies",
                "run": "cd typing_inspect\nuv pip install --system -r test-requirements.txt --exclude-newer $(git show -s --date=format:'%Y-%m-%dT%H:%M:%SZ' --format=%cd HEAD)\n"
            },
            {
                "id": 6,
                "name": "Install typing_extensions latest",
                "run": "uv pip install --system \"typing-extensions @ ./typing-extensions-latest\""
            },
            {
                "id": 7,
                "name": "List all installed dependencies",
                "run": "uv pip freeze"
            },
            {
                "id": 8,
                "name": "Run typing_inspect tests",
                "run": "cd typing_inspect\npytest\n"
            },
            {
                "id": 1,
                "name": "Check out pyanalyze",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout typing_extensions",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install uv",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 5,
                "name": "Install pyanalyze test requirements",
                "run": "cd pyanalyze\nuv pip install --system 'pyanalyze[tests] @ .' --exclude-newer $(git show -s --date=format:'%Y-%m-%dT%H:%M:%SZ' --format=%cd HEAD)\n"
            },
            {
                "id": 6,
                "name": "Install typing_extensions latest",
                "run": "uv pip install --system \"typing-extensions @ ./typing-extensions-latest\""
            },
            {
                "id": 7,
                "name": "List all installed dependencies",
                "run": "uv pip freeze"
            },
            {
                "id": 8,
                "name": "Run pyanalyze tests",
                "run": "cd pyanalyze\npytest pyanalyze/\n"
            },
            {
                "id": 1,
                "name": "Check out typeguard",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout typing_extensions",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install uv",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 5,
                "name": "Install typeguard test requirements",
                "run": "cd typeguard\nuv pip install --system \"typeguard[test] @ .\"  --exclude-newer $(git show -s --date=format:'%Y-%m-%dT%H:%M:%SZ' --format=%cd HEAD)\n"
            },
            {
                "id": 6,
                "name": "Install typing_extensions latest",
                "run": "uv pip install --system \"typing-extensions @ ./typing-extensions-latest\""
            },
            {
                "id": 7,
                "name": "List all installed dependencies",
                "run": "uv pip freeze"
            },
            {
                "id": 8,
                "name": "Run typeguard tests",
                "run": "cd typeguard\npytest\n"
            },
            {
                "id": 1,
                "name": "Check out typed-argument-parser",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout typing_extensions",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install uv",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 5,
                "name": "Configure git for typed-argument-parser tests",
                "run": "git config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n"
            },
            {
                "id": 6,
                "name": "Install typed-argument-parser test requirements",
                "run": "cd typed-argument-parser\nuv pip install --system \"typed-argument-parser @ .\"  --exclude-newer $(git show -s --date=format:'%Y-%m-%dT%H:%M:%SZ' --format=%cd HEAD)\nuv pip install --system pytest  --exclude-newer $(git show -s --date=format:'%Y-%m-%dT%H:%M:%SZ' --format=%cd HEAD)\n"
            },
            {
                "id": 7,
                "name": "Install typing_extensions latest",
                "run": "uv pip install --system \"typing-extensions @ ./typing-extensions-latest\""
            },
            {
                "id": 8,
                "name": "List all installed dependencies",
                "run": "uv pip freeze"
            },
            {
                "id": 9,
                "name": "Run typed-argument-parser tests",
                "run": "cd typed-argument-parser\npytest\n"
            },
            {
                "id": 1,
                "name": "Checkout mypy for stubtest and mypyc tests",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout typing_extensions",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install uv",
                "run": "curl -LsSf https://astral.sh/uv/install.sh | sh"
            },
            {
                "id": 5,
                "name": "Install mypy test requirements",
                "run": "cd mypy\nuv pip install --system -r test-requirements.txt  --exclude-newer $(git show -s --date=format:'%Y-%m-%dT%H:%M:%SZ' --format=%cd HEAD)\nuv pip install --system -e .\n"
            },
            {
                "id": 6,
                "name": "Install typing_extensions latest",
                "run": "uv pip install --system \"typing-extensions @ ./typing-extensions-latest\""
            },
            {
                "id": 7,
                "name": "List all installed dependencies",
                "run": "uv pip freeze"
            },
            {
                "id": 8,
                "name": "Run stubtest & mypyc tests",
                "run": "cd mypy\npytest -n 2 ./mypy/test/teststubtest.py ./mypyc/test/test_run.py ./mypyc/test/test_external.py\n"
            },
            {
                "id": 1,
                "name": "Checkout cattrs",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout typing_extensions",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Install pdm for cattrs",
                "run": "pip install pdm"
            },
            {
                "id": 5,
                "name": "Add latest typing-extensions as a dependency",
                "run": "pdm remove typing-extensions\npdm add --dev ./typing-extensions-latest\n"
            },
            {
                "id": 6,
                "name": "Install cattrs test dependencies",
                "run": "pdm install --dev -G :all"
            },
            {
                "id": 7,
                "name": "List all installed dependencies",
                "run": "pdm list -vv"
            },
            {
                "id": 8,
                "name": "Run cattrs tests",
                "run": "pdm run pytest tests"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v7"
            }
        ],
        "python/python-docs-uk": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "styfle/cancel-workflow-action@main"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@master"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "curl -o- https://raw.githubusercontent.com/transifex/cli/master/install.sh | bash"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pip install transifex-python"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/checkout@master"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": ".github/scripts/manage_translation.py recreate_config"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": ".github/scripts/manage_translation.py fetch_translations"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "git config --local user.email github-actions@github.com"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "git config --local user.name \"GitHub Action's update-translation job\""
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "git add ."
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "git commit -m 'Update translation from Transifex' || true"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "ad-m/github-push-action@master"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "peter-evans/repository-dispatch@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@master"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@master"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "make venv"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@master"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "git pull"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "make -e SPHINXOPTS=\"-D language='uk' -D gettext_compact=0\" SPHINXERRORHANDLING=\"\" ${{ matrix.format }}"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@master"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "sudo apt-get update"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "sudo apt-get install -y latexmk texlive-xetex fonts-freefont-otf xindy"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "make -i"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@master"
            }
        ],
        "python/blurb": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v3.0.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "hynek/build-and-inspect-python-package@v2"
            },
            {
                "id": 1,
                "name": "Download packages built by build-and-inspect-python-package",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Publish to Test PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 1,
                "name": "Download packages built by build-and-inspect-python-package",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Publish to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python --version\npython -m pip install -U pip\npython -m pip install -U tox\n"
            },
            {
                "id": 4,
                "name": "Tox tests",
                "run": "tox -e py\n"
            },
            {
                "id": 5,
                "name": "Upload coverage",
                "run": "codecov/codecov-action@v4"
            }
        ]
    },
    "ReVanced": {
        "ReVanced/revanced-integrations": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 3,
                "name": "Setup Java",
                "run": "echo \"JAVA_HOME=$JAVA_HOME_17_X64\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "./gradlew build --no-daemon"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Open pull request",
                "run": "repo-sync/pull-request@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 3,
                "name": "Setup Java",
                "run": "echo \"JAVA_HOME=$JAVA_HOME_17_X64\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "./gradlew build clean"
            },
            {
                "id": 5,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 6,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 7,
                "name": "Import GPG key",
                "run": "crazy-max/ghaction-import-gpg@v6"
            },
            {
                "id": 8,
                "name": "Release",
                "run": "npm exec semantic-release"
            }
        ],
        "ReVanced/revanced-patcher": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew build --no-daemon"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Open pull request",
                "run": "repo-sync/pull-request@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew build clean"
            },
            {
                "id": 4,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 6,
                "name": "Import GPG key",
                "run": "crazy-max/ghaction-import-gpg@v6"
            },
            {
                "id": 7,
                "name": "Release",
                "run": "npm exec semantic-release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "peter-evans/repository-dispatch@v2"
            }
        ],
        "ReVanced/revanced-manager": [
            {
                "id": 1,
                "name": "Setup pull request",
                "run": "gh repo clone \"${{ github.repository }}\"\ncd revanced-manager\ngh repo set-default \"${{ github.repository }}\"\ngh pr checkout \"${{ inputs.pr-number }}\"\n\necho \"COMMIT_HASH=$(git rev-parse --short HEAD)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 4,
                "name": "Setup Java",
                "run": "echo \"JAVA_HOME=$JAVA_HOME_17_X64\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Set up Flutter",
                "run": "subosito/flutter-action@v2"
            },
            {
                "id": 6,
                "name": "Get dependencies",
                "run": "flutter pub get"
            },
            {
                "id": 7,
                "name": "Generate translations",
                "run": "dart run slang"
            },
            {
                "id": 8,
                "name": "Generate code files",
                "run": "dart run build_runner build --delete-conflicting-outputs"
            },
            {
                "id": 9,
                "name": "Build",
                "run": "flutter build apk --\"${{ inputs.app-flavour }}\";\n"
            },
            {
                "id": 10,
                "name": "Prepare comment",
                "run": "if [[ \"${{ steps.flutter-build.outcome }}\" == \"success\" ]]; then\n  echo \"MESSAGE=\u2705 Succeeded build on ${{ env.COMMIT_HASH }}.\" >> $GITHUB_ENV\nelse\n  echo \"MESSAGE=\ud83d\udeab Failed build on ${{ env.COMMIT_HASH }}.\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 11,
                "name": "Comment on pull request #${{ inputs.pr-number }}",
                "run": "thollander/actions-comment-pull-request@v2"
            },
            {
                "id": 12,
                "name": "Upload",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Open pull request",
                "run": "repo-sync/pull-request@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Java",
                "run": "echo \"JAVA_HOME=$JAVA_HOME_17_X64\" >> $GITHUB_ENV"
            },
            {
                "id": 3,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Set up Flutter",
                "run": "subosito/flutter-action@v2"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 6,
                "name": "Get dependencies",
                "run": "flutter pub get"
            },
            {
                "id": 7,
                "name": "Generate translations",
                "run": "dart run slang"
            },
            {
                "id": 8,
                "name": "Generate code files",
                "run": "dart run build_runner build --delete-conflicting-outputs"
            },
            {
                "id": 9,
                "name": "Release",
                "run": "echo \"${{ secrets.SIGNING_KEYSTORE }}\" | base64 --decode > android/app/keystore.jks\nnpx semantic-release\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Dart",
                "run": "dart-lang/setup-dart@v1"
            },
            {
                "id": 3,
                "name": "Sync translations from Crowdin",
                "run": "crowdin/github-action@v1"
            },
            {
                "id": 4,
                "name": "Remove empty values from JSON",
                "run": "cd assets/i18n\nsudo chmod 777 *.json\ndart nuke.dart >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 5,
                "name": "Commit translations",
                "run": "git config user.name revanced-bot\ngit config user.email github@revanced.app\nsudo chown -R $USER:$USER .git\ngit add assets/i18n/*.json\ngit commit -m \"chore: Remove empty values from JSON\" assets/i18n/*.json\ngit push origin HEAD:feat/translations\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "peter-evans/repository-dispatch@v3"
            }
        ],
        "ReVanced/revanced-patches-template": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Open pull request",
                "run": "repo-sync/pull-request@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew build clean"
            },
            {
                "id": 4,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 6,
                "name": "Import GPG key",
                "run": "crazy-max/ghaction-import-gpg@v6"
            },
            {
                "id": 7,
                "name": "Release",
                "run": "npm exec semantic-release"
            }
        ],
        "ReVanced/revanced-cli": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew build --no-daemon"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Open pull request",
                "run": "repo-sync/pull-request@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew build clean"
            },
            {
                "id": 4,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 6,
                "name": "Import GPG key",
                "run": "crazy-max/ghaction-import-gpg@v6"
            },
            {
                "id": 7,
                "name": "Release",
                "run": "npm exec semantic-release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "peter-evans/repository-dispatch@v3"
            }
        ],
        "ReVanced/aapt2": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "nttld/setup-ndk@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./build.sh ${{ matrix.target_arch }}"
            },
            {
                "id": 4,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v3"
            }
        ],
        "ReVanced/revanced-discord-bot": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Rust toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Setup Rust Cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 5,
                "name": "Setup QEMU",
                "run": "docker/setup-qemu-action@v3"
            },
            {
                "id": 6,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 7,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 8,
                "name": "Build Image and Push",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Setup Rust toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "Set up cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "cargo clippy",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 6,
                "name": "cargo build",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 7,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 8,
                "name": "Setup semantic-release",
                "run": "npm install -g semantic-release @semantic-release/git @semantic-release/changelog -D"
            },
            {
                "id": 9,
                "name": "Release",
                "run": "npx semantic-release"
            }
        ],
        "ReVanced/revanced-website": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "npm i\nnpm run build\n"
            },
            {
                "id": 3,
                "name": "Publish to Cloudflare Pages",
                "run": "cloudflare/pages-action@v1"
            },
            {
                "id": 4,
                "name": "Comment deployment URL",
                "run": "thollander/actions-comment-pull-request@v2"
            }
        ],
        "ReVanced/revanced-manager-compose-old": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew assembleDebug"
            },
            {
                "id": 4,
                "name": "Store generated APK file",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew assembleRelease"
            },
            {
                "id": 4,
                "name": "Sign APK",
                "run": "r0adkll/sign-android-release@v1"
            },
            {
                "id": 5,
                "name": "Upload APK",
                "run": "actions/upload-artifact@v2"
            }
        ],
        "ReVanced/revanced-releases-api": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\nif [ -f requirements.txt ];\nthen pip install -r requirements.txt;\nfi\necho \"CODEQL_PYTHON=$(which python)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 5,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 6,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Security Checks (PyCharm Security)",
                "run": "tonybaloney/pycharm-security@master"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 5,
                "name": "Build Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and push Spheron Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Security Checks (PyCharm Security)",
                "run": "tonybaloney/pycharm-security@master"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 5,
                "name": "Build Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and push Spheron Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 6,
                "name": "Build and push main Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and push Spheron Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install mypy",
                "run": "pip install mypy"
            },
            {
                "id": 4,
                "name": "Run mypy",
                "run": "sasanquaneuf/mypy-github-action@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Security Checks (PyCharm Security)",
                "run": "tonybaloney/pycharm-security@master"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 5,
                "name": "Build Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build and push Spheron Docker image",
                "run": "docker/build-push-action@v3"
            }
        ],
        "ReVanced/revanced-cdn-action": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            }
        ],
        "ReVanced/revanced-documentation": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Update submodule",
                "run": "git submodule update --init --recursive --remote repositories/${{ github.event.client_payload.repo }}"
            },
            {
                "id": 3,
                "name": "Commit changes",
                "run": "EndBug/add-and-commit@v9"
            }
        ],
        "ReVanced/revanced-helper": [
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup QEMU",
                "run": "docker/setup-qemu-action@v3"
            },
            {
                "id": 3,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 4,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v3"
            },
            {
                "id": 5,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v5"
            },
            {
                "id": 6,
                "name": "Build and push main Docker image",
                "run": "docker/build-push-action@v5"
            }
        ],
        "ReVanced/smali": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gradle/gradle-build-action@v2"
            }
        ],
        "ReVanced/Apktool": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Verify Executable",
                "run": "${{ env.BINARY_PATH }}/macosx/${{ matrix.file }} version"
            },
            {
                "id": 3,
                "name": "Output Static",
                "run": "otool -L ${{ env.BINARY_PATH }}/macosx/${{ matrix.file }} || true"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Verify Executable",
                "run": "${{ env.BINARY_PATH }}/linux/${{ matrix.file }} version"
            },
            {
                "id": 3,
                "name": "Output Static",
                "run": "ldd ${{ env.BINARY_PATH }}/linux/${{ matrix.file }} || true"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Verify Executable",
                "run": "${{ env.BINARY_PATH }}/windows/${{ matrix.file }} version"
            },
            {
                "id": 3,
                "name": "Output Static",
                "run": "ldd ${{ env.BINARY_PATH }}/windows/${{ matrix.file }} || true"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Build and test",
                "run": "gradle/gradle-build-action@v2.10.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "gradle/gradle-build-action@v2.10.0"
            },
            {
                "id": 4,
                "name": "Upload",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "gradle/wrapper-validation-action@v1.1.0"
            }
        ],
        "ReVanced/revanced-manager-compose": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew assembleRelease --no-daemon"
            },
            {
                "id": 4,
                "name": "Sign APK",
                "run": "r0adkll/sign-android-release@v1"
            },
            {
                "id": 5,
                "name": "Upload APK",
                "run": "actions/upload-artifact@v3"
            }
        ],
        "ReVanced/revanced-polling-api": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Security Checks (PyCharm Security)",
                "run": "tonybaloney/pycharm-security@master"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 5,
                "name": "Build Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 6,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            }
        ],
        "ReVanced/revanced-static-api": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Python, Poetry and Dependencies",
                "run": "packetcoders/action-setup-cache-python-poetry@main"
            },
            {
                "id": 3,
                "name": "Write config file",
                "run": "echo \"${{ vars.CONFIG }}\" > config.json"
            },
            {
                "id": 4,
                "name": "Check if a deployment exists",
                "run": "if git ls-remote --exit-code --heads origin ${{ inputs.output-branch }}; then\n  echo \"::set-output name=deployment-exists::true\"\nelse\n  echo \"::set-output name=deployment-exists::false\"\nfi\n"
            },
            {
                "id": 5,
                "name": "Restore deployment if it exists",
                "run": "git config user.name revanced-bot\ngit config user.email github@revanced.app\ngit subtree add --prefix=static/ origin/${{ inputs.output-branch }} --squash\n"
            },
            {
                "id": 6,
                "name": "Update static files",
                "run": "poetry install\npoetry run python main.py\n"
            },
            {
                "id": 7,
                "name": "Commit changes",
                "run": "EndBug/add-and-commit@v9"
            },
            {
                "id": 8,
                "name": "Deploy",
                "run": "s0/git-publish-subdir-action@develop"
            }
        ],
        "ReVanced/revanced-api": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install project dependencies",
                "run": "python -m pip install --upgrade pip\nif [ -f requirements.txt ];\nthen pip install -r requirements.txt;\nfi\n"
            },
            {
                "id": 4,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 5,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v3"
            },
            {
                "id": 6,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Security Checks (PyCharm Security)",
                "run": "tonybaloney/pycharm-security@master"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup QEMU",
                "run": "docker/setup-qemu-action@v3"
            },
            {
                "id": 3,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 4,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v5"
            },
            {
                "id": 5,
                "name": "Build Docker image",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup QEMU",
                "run": "docker/setup-qemu-action@v3"
            },
            {
                "id": 3,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 4,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v3"
            },
            {
                "id": 5,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v5"
            },
            {
                "id": 6,
                "name": "Build and push main Docker image",
                "run": "docker/build-push-action@v5"
            }
        ],
        "ReVanced/GmsCore": [
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Java",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Gradle Wrapper validation",
                "run": "gradle/wrapper-validation-action@v2"
            },
            {
                "id": 4,
                "name": "Setup Gradle",
                "run": "gradle/actions/setup-gradle@v3"
            },
            {
                "id": 5,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 6,
                "name": "Setup matchers",
                "run": "# Setting up matchers...\n\nmatchers_dir='${{ github.workspace }}/.github/matchers'\nmatcher_list()\n{\n  echo 'gradle-build-matcher.json'\n  echo 'gradle-build-kotlin-error-matcher.json'\n}\n\nmatcher_list | while IFS='' read -r NAME; do\n  if test -f \"${matchers_dir:?}/${NAME:?}\"; then\n    echo \"::add-matcher::${matchers_dir:?}/${NAME:?}\"\n    echo \"Matcher configured: ${NAME:?}\"\n  fi\ndone\n"
            },
            {
                "id": 7,
                "name": "Execute Gradle assemble",
                "run": "./gradlew --no-daemon assemble"
            },
            {
                "id": 8,
                "name": "Execute Gradle check",
                "run": "./gradlew --no-daemon check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 3,
                "name": "Setup Java",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "./gradlew --no-daemon :play-services-core:assembleMapboxDefault :play-services-core:assembleMapboxHuawei"
            },
            {
                "id": 5,
                "name": "Move",
                "run": "mkdir play-services-core/build/outputs/apk/releases\nmv \\\n  play-services-core/build/outputs/apk/mapboxDefault/release/*.apk \\\n  play-services-core/build/outputs/apk/mapboxHuawei/release/*.apk \\\n  play-services-core/build/outputs/apk/releases\n"
            },
            {
                "id": 6,
                "name": "Sign",
                "run": "ilharp/sign-android-release@v1"
            },
            {
                "id": 7,
                "name": "Split",
                "run": "jungwinter/split@v2"
            },
            {
                "id": 8,
                "name": "Release",
                "run": "ncipollo/release-action@v1"
            }
        ],
        "ReVanced/revanced-library": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew build --no-daemon"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Open pull request",
                "run": "repo-sync/pull-request@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew build clean"
            },
            {
                "id": 4,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 6,
                "name": "Import GPG key",
                "run": "crazy-max/ghaction-import-gpg@v6"
            },
            {
                "id": 7,
                "name": "Release",
                "run": "npm exec semantic-release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "peter-evans/repository-dispatch@v3"
            }
        ],
        "ReVanced/revanced-patches": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew build --no-daemon"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Open pull request",
                "run": "repo-sync/pull-request@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Pull strings",
                "run": "crowdin/github-action@v1"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Push strings",
                "run": "crowdin/github-action@v1"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Gradle",
                "run": "burrunan/gradle-cache-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew generateMeta clean"
            },
            {
                "id": 4,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 6,
                "name": "Import GPG key",
                "run": "crazy-max/ghaction-import-gpg@v6"
            },
            {
                "id": 7,
                "name": "Release",
                "run": "npm exec semantic-release"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Update Gradle Wrapper",
                "run": "gradle-update/update-gradle-wrapper-action@v1"
            }
        ],
        "ReVanced/revanced-app-metadata-api": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Security Checks (PyCharm Security)",
                "run": "tonybaloney/pycharm-security@master"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup QEMU",
                "run": "docker/setup-qemu-action@v3"
            },
            {
                "id": 3,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 4,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v5"
            },
            {
                "id": 5,
                "name": "Build Docker image",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 1,
                "name": "Checkout Dockerfile",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup QEMU",
                "run": "docker/setup-qemu-action@v3"
            },
            {
                "id": 3,
                "name": "Setup Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 4,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v3"
            },
            {
                "id": 5,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v5"
            },
            {
                "id": 6,
                "name": "Build and push main Docker image",
                "run": "docker/build-push-action@v5"
            }
        ]
    },
    "flutter": {
        "flutter/flutter": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "./bin/flutter test --coverage",
                "run": "pushd packages/flutter;../../bin/flutter test --coverage -j 1;popd"
            },
            {
                "id": 3,
                "name": "upload coverage",
                "run": "codecov/codecov-action@125fc84a9a348dbcf27191600683ec096ec9021c"
            },
            {
                "id": 1,
                "name": "Get Release Channel",
                "run": "echo \"CHANNEL=$(echo ${{ github.event.label.name }} | cut -d ':' -f 2 | xargs)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Get Release Candidate Branch",
                "run": "RELEASE_BRANCH=$(curl https://raw.githubusercontent.com/flutter/flutter/$CHANNEL/bin/internal/release-candidate-branch.version)\necho \"RELEASE_BRANCH=$(echo $RELEASE_BRANCH | tr -d '\\n')\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Get Cherry Pick PR",
                "run": "echo \"COMMIT_SHA=$(echo ${{ github.event.pull_request.merge_commit_sha }})\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Checkout Flutter Repo",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 5,
                "name": "Attempt CP",
                "run": "git config user.name \"GitHub Actions Bot\"\ngit config user.email \"<>\"\ngit remote add upstream https://github.com/flutter/flutter.git\ngit fetch upstream $RELEASE_BRANCH\ngit fetch upstream master\ngit checkout -b cp-${CHANNEL}-${COMMIT_SHA} --track upstream/$RELEASE_BRANCH\ngit cherry-pick $COMMIT_SHA\n"
            },
            {
                "id": 6,
                "name": "Get CP Template",
                "run": "curl -o PULL_REQUEST_CP_TEMPLATE.md https://raw.githubusercontent.com/flutter/flutter/main/.github/PR_TEMPLATE/PULL_REQUEST_CP_TEMPLATE.md\n"
            },
            {
                "id": 7,
                "name": "Create PR on CP success",
                "run": "git push https://${{ env.GITHUB_TOKEN }}@github.com/flutteractionsbot/flutter cp-${CHANNEL}-${COMMIT_SHA}\n{\n  echo 'PR_URL<<EOF'\n  gh pr create --title \"[CP-${CHANNEL}]${PR_TITLE}\" --body-file ../PULL_REQUEST_CP_TEMPLATE.md --base ${RELEASE_BRANCH} --label \"cp: review\" --repo flutter/flutter --head flutteractionsbot:cp-${CHANNEL}-${COMMIT_SHA}\n  echo EOF\n} >> \"$GITHUB_ENV\"\n"
            },
            {
                "id": 8,
                "name": "Leave Comment on CP success",
                "run": "echo $PR_URL\nNEW_PR_NUMBER=\"${PR_URL##*/}\"\nSUCCESS_MSG=\" @${{ github.actor }} please fill out the PR description above, afterwards the release team will review this request.\"\ngh pr comment $NEW_PR_NUMBER -R flutter/flutter -b \"${SUCCESS_MSG}\"\n"
            },
            {
                "id": 9,
                "name": "Leave Comment on CP failure",
                "run": "FAILURE_MSG=\"Failed to create CP due to merge conflicts.<br>\"\nFAILURE_MSG+=\"You will need to create the PR manually. See [the cherrypick wiki](https://github.com/flutter/flutter/blob/main/docs/releases/Flutter-Cherrypick-Process.md) for more info.\"\ngh pr comment ${{ github.event.pull_request.number }} -R flutter/flutter -b \"${FAILURE_MSG}\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/labeler@8558fd74291d67161a8a78ce36a881fa63b766a9"
            },
            {
                "id": 1,
                "name": "Checkout Flutter Repo",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Write a random file",
                "run": "cd flutter\ntouch empty.json\n"
            },
            {
                "id": 3,
                "name": "Create Pull Request",
                "run": "peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c"
            },
            {
                "id": 1,
                "name": "Mirror action step",
                "run": "google/mirror-branch-action@30c52ee21f5d3bd7fb28b95501c11aae7f17eebb"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            }
        ],
        "flutter/engine": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/labeler@ac9175f8a1f3625fd0d4fb234536d26811351594"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@cdcdbb579706841c47f7063dda365e292e5cad7a"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "setup python",
                "run": "actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236"
            },
            {
                "id": 3,
                "name": "extract and flatten deps",
                "run": "python ci/deps_parser.py"
            },
            {
                "id": 4,
                "name": "scan deps for vulnerabilities",
                "run": "python ci/scan_flattened_deps.py"
            },
            {
                "id": 5,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32"
            },
            {
                "id": 6,
                "name": "Upload to security tab",
                "run": "github/codeql-action/upload-sarif@cdcdbb579706841c47f7063dda365e292e5cad7a"
            }
        ],
        "flutter/flutter-intellij": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            }
        ],
        "flutter/buildroot": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            }
        ],
        "flutter/plugins": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/labeler@9794b1493b6f1fa7b006c5f8635a19c76c98be95"
            },
            {
                "id": 1,
                "name": "Install Flutter",
                "run": "cd $HOME\ngit clone https://github.com/flutter/flutter.git --depth 1 -b stable _flutter\necho \"$HOME/_flutter/bin\" >> $GITHUB_PATH\ncd $GITHUB_WORKSPACE\n"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f"
            },
            {
                "id": 3,
                "name": "Set up tools",
                "run": "dart pub get"
            },
            {
                "id": 4,
                "name": "Wait on all tests",
                "run": "lewagon/wait-on-check-action@5e937358caba2c7876a2ee06e4a48d0664fe4967"
            },
            {
                "id": 5,
                "name": "run release",
                "run": "git config --global user.name ${{ secrets.USER_NAME }}\ngit config --global user.email ${{ secrets.USER_EMAIL }}\ndart ./script/tool/lib/src/main.dart publish-plugin --all-changed --base-sha=HEAD~ --skip-confirmation --remote=origin\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@c1aec4ac820532bab364f02a81873c555a0ba3a1"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@f5d822707ee6e8fb81b04a5c0040b736da22e587"
            }
        ],
        "flutter/packages": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/labeler@9fd24f1f9d6ceb64ba34d181b329ee72f99978a0"
            },
            {
                "id": 1,
                "name": "Install Flutter",
                "run": "cd $HOME\ngit clone https://github.com/flutter/flutter.git --depth 1 -b stable _flutter\necho \"$HOME/_flutter/bin\" >> $GITHUB_PATH\ncd $GITHUB_WORKSPACE\n"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b"
            },
            {
                "id": 3,
                "name": "Set up tools",
                "run": "dart pub global activate flutter_plugin_tools 0.8.5"
            },
            {
                "id": 4,
                "name": "Wait on all tests",
                "run": "lewagon/wait-on-check-action@752bfae19aef55dab12a00bc36d48acc46b77e9d"
            },
            {
                "id": 5,
                "name": "run release",
                "run": "git config --global user.name ${{ secrets.USER_NAME }}\ngit config --global user.email ${{ secrets.USER_EMAIL }}\ndart pub global run flutter_plugin_tools publish-plugin --all-changed --base-sha=HEAD~ --skip-confirmation --remote=origin\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@5c8bc69dc88b65c66584e07611df79d3579b0377"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@a3a6c128d771b6b9bdebb1c9d0583ebd2728a108"
            }
        ],
        "flutter/goldens": [
            {
                "id": 1,
                "name": "Mirror action step",
                "run": "google/mirror-branch-action@c6b07e441a7ffc5ae15860c1d0a8107a3a151db8"
            }
        ],
        "flutter/samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./tool/flutter_ci_script_stable.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./tool/android_ci_script.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./tool/ios_ci_script.sh"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 3,
                "name": "Init scripts",
                "run": "dart pub get"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "dart run _tool/build_ci.dart"
            },
            {
                "id": 5,
                "name": "Deploy",
                "run": "peaceiris/actions-gh-pages@373f7f263a76c20808c831209c920827a82a2847"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./tool/flutter_ci_script_${{ matrix.flutter_version }}.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./tool/android_ci_script.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./tool/ios_ci_script.sh"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@80e868c13c90f172d68d1f4501dee99e2479f7af"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@29b1f65c5e92e24fe6b6647da1eaabe529cec70f"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 3,
                "name": "Init scripts",
                "run": "dart pub get"
            },
            {
                "id": 4,
                "name": "Verify packages",
                "run": "dart run _tool/verify_packages.dart"
            }
        ],
        "flutter/devtools": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@cdcdbb579706841c47f7063dda365e292e5cad7a"
            }
        ],
        "flutter/platform_tests": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            }
        ],
        "flutter/tests": [
            {
                "id": 1,
                "name": "Mirror action step",
                "run": "google/mirror-branch-action@30c52ee21f5d3bd7fb28b95501c11aae7f17eebb"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "${{ matrix.name }}",
                "run": "scripts/verify_tests_on_main.sh --shards 3 --shard-index ${{ matrix.shard-index }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "skp_generator",
                "run": "(cd skp_generator && ./build.sh)"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "${{ matrix.name }}",
                "run": "scripts\\verify_tests_on_main.bat --shards 5 --shard-index ${{ matrix.shard-index }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "${{ matrix.name }}",
                "run": "scripts/verify_tests_on_main.sh --shards 2 --shard-index ${{ matrix.shard-index }}"
            }
        ],
        "flutter/gallery": [
            {
                "id": 1,
                "name": "Set up JDK 11",
                "run": "actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2"
            },
            {
                "id": 2,
                "name": "Clone Flutter repository with master channel",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "flutter config --enable-macos-desktop"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "flutter doctor -v"
            },
            {
                "id": 5,
                "name": "Checkout gallery code",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "flutter pub get"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "flutter build ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Clone Flutter repository with master channel",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "flutter doctor -v"
            },
            {
                "id": 3,
                "name": "Checkout gallery code",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "flutter pub get"
            },
            {
                "id": 5,
                "name": "Setup Fastlane",
                "run": "ruby/setup-ruby@8a45918450651f5e4784b6031db26f4b9f76b251"
            },
            {
                "id": 6,
                "name": "Configure Keystore",
                "run": "echo \"$PLAY_STORE_UPLOAD_KEY\" | base64 --decode > app/upload-keystore.jks\necho \"storeFile=upload-keystore.jks\" >> key.properties\necho \"keyAlias=$KEYSTORE_KEY_ALIAS\" >> key.properties\necho \"storePassword=$KEYSTORE_STORE_PASSWORD\" >> key.properties\necho \"keyPassword=$KEYSTORE_KEY_PASSWORD\" >> key.properties\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "bundle exec fastlane ${{ github.event.inputs.lane || 'beta' }}"
            },
            {
                "id": 1,
                "name": "Clone Flutter repository with master channel",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "flutter doctor -v"
            },
            {
                "id": 3,
                "name": "Install web dependencies",
                "run": "actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm install -g firebase-tools@11.0.1"
            },
            {
                "id": 5,
                "name": "Checkout gallery code",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "flutter pub get"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "flutter build -v web --release"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "firebase deploy --only hosting:${{ github.event.inputs.environment || 'staging' }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dart-lang/setup-dart@d6a63dab3335f427404425de0fbfed4686d93c4f"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "microsoft/setup-msstore-cli@3b2ec9136230357ce9abc02b9d056626fb248d3f"
            },
            {
                "id": 5,
                "name": "Configure MS CLI",
                "run": "msstore reconfigure --tenantId ${{ secrets.AZURE_AD_TENANT_ID }} --clientId ${{ secrets.AZURE_AD_CLIENT_ID }} --clientSecret ${{ secrets.AZURE_AD_CLIENT_SECRET }} --sellerId ${{ secrets.SELLER_ID }}"
            },
            {
                "id": 6,
                "name": "Install dependencies",
                "run": "flutter pub get"
            },
            {
                "id": 7,
                "name": "Create MSIX package",
                "run": "msstore package"
            },
            {
                "id": 8,
                "name": "Publish MSIX to the Microsoft Store",
                "run": "msstore publish -v"
            },
            {
                "id": 1,
                "name": "Draft release with release notes",
                "run": "softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844"
            },
            {
                "id": 1,
                "name": "Clone Flutter repository with master channel",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 2,
                "name": "Install Linux dependencies",
                "run": "sudo apt-get update\nsudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev\n"
            },
            {
                "id": 3,
                "name": "Install Android dependencies",
                "run": "actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2"
            },
            {
                "id": 4,
                "name": "Enable desktop support",
                "run": "flutter config --enable-linux-desktop\nflutter config --enable-macos-desktop\nflutter config --enable-windows-desktop\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "flutter doctor -v"
            },
            {
                "id": 6,
                "name": "Checkout gallery code",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "flutter create ."
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "flutter pub get"
            },
            {
                "id": 9,
                "name": "Configure Keystore for Android",
                "run": "echo \"$PLAY_STORE_UPLOAD_KEY\" | base64 --decode > app/upload-keystore.jks\necho \"storeFile=upload-keystore.jks\" >> key.properties\necho \"keyAlias=$KEYSTORE_KEY_ALIAS\" >> key.properties\necho \"storePassword=$KEYSTORE_STORE_PASSWORD\" >> key.properties\necho \"keyPassword=$KEYSTORE_KEY_PASSWORD\" >> key.properties\n"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "flutter build -v ${{ matrix.build_target }} --release"
            },
            {
                "id": 11,
                "name": "Copy VC redistributables to release directory for Windows",
                "run": "Copy-Item (vswhere -latest -find 'VC\\Redist\\MSVC\\*\\x64\\*\\msvcp140.dll') .\nCopy-Item (vswhere -latest -find 'VC\\Redist\\MSVC\\*\\x64\\*\\vcruntime140.dll') .\nCopy-Item (vswhere -latest -find 'VC\\Redist\\MSVC\\*\\x64\\*\\vcruntime140_1.dll') .\n"
            },
            {
                "id": 12,
                "name": "Rename build for Android",
                "run": "mv app-release.apk $GITHUB_WORKSPACE/flutter_gallery_${{ matrix.target }}.apk"
            },
            {
                "id": 13,
                "name": "Compress build for Linux",
                "run": "tar czf $GITHUB_WORKSPACE/flutter_gallery_${{ matrix.target }}.tar.gz *"
            },
            {
                "id": 14,
                "name": "Compress build for macOS",
                "run": "ditto -c -k --sequesterRsrc --keepParent Flutter\\ Gallery.app $GITHUB_WORKSPACE/flutter_gallery_${{ matrix.target }}.zip"
            },
            {
                "id": 15,
                "name": "Compress build for Windows",
                "run": "compress-archive -Path * -DestinationPath ${env:GITHUB_WORKSPACE}\\flutter_gallery_${{ matrix.target }}.zip"
            },
            {
                "id": 16,
                "name": "Add packaged build to release draft",
                "run": "actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@80e868c13c90f172d68d1f4501dee99e2479f7af"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@83f0fe6c4988d98a455712a27f0255212bba9bd4"
            },
            {
                "id": 1,
                "name": "Clone Flutter repository with master channel",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "flutter doctor -v"
            },
            {
                "id": 3,
                "name": "Checkout gallery code",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "flutter pub get"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "flutter analyze"
            },
            {
                "id": 6,
                "name": "Ensure the Dart code is formatted correctly",
                "run": "dart format --set-exit-if-changed ."
            },
            {
                "id": 7,
                "name": "Run Flutter unit tests",
                "run": "flutter test"
            },
            {
                "id": 1,
                "name": "Clone Flutter repository with master channel",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "flutter doctor -v"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "flutter config --enable-web"
            },
            {
                "id": 4,
                "name": "Checkout gallery code",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "flutter pub get"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "flutter test test_benchmarks"
            },
            {
                "id": 1,
                "name": "Clone Flutter repository with master channel",
                "run": "subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "flutter doctor -v"
            },
            {
                "id": 3,
                "name": "Checkout gallery code",
                "run": "actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "flutter pub get"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "flutter test test_goldens"
            },
            {
                "id": 6,
                "name": "Upload goldens if tests fail",
                "run": "actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce"
            }
        ],
        "flutter/flutter-github-scripts.dart": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dart-lang/setup-dart@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "dart pub get"
            },
            {
                "id": 4,
                "name": "Verify formatting",
                "run": "dart format --output=none --set-exit-if-changed ."
            },
            {
                "id": 5,
                "name": "Analyze project source",
                "run": "dart analyze --fatal-infos"
            },
            {
                "id": 6,
                "name": "Run tests",
                "run": "dart test"
            }
        ],
        "flutter/uxr": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dart-lang/setup-dart@d6a63dab3335f427404425de0fbfed4686d93c4f"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dart pub get"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dart run"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dart-lang/setup-dart@d6a63dab3335f427404425de0fbfed4686d93c4f"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dart pub get"
            },
            {
                "id": 4,
                "name": "Verify formatting",
                "run": "dart format --output=none --set-exit-if-changed ."
            },
            {
                "id": 5,
                "name": "Analyze Dart files",
                "run": "dart analyze --fatal-infos"
            }
        ],
        "flutter/put-flutter-to-work": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@cdcdbb579706841c47f7063dda365e292e5cad7a"
            }
        ],
        "flutter/games": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "subosito/flutter-action@44ac965b96f18d999802d4b807e3256d5a3f9fa1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./flutter_ci_script_${{ matrix.flutter_version }}.sh"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            }
        ]
    },
    "vuejs": {
        "vuejs/vue": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v2"
            },
            {
                "id": 3,
                "name": "Set node version to 18",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run unit tests",
                "run": "pnpm run test:unit"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v2"
            },
            {
                "id": 3,
                "name": "Set node version to 18",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run SSR tests",
                "run": "pnpm run test:ssr"
            },
            {
                "id": 6,
                "name": "Run compiler-sfc tests",
                "run": "pnpm run test:sfc"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v2"
            },
            {
                "id": 3,
                "name": "Set node version to 18",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run e2e tests",
                "run": "pnpm run test:e2e"
            },
            {
                "id": 6,
                "name": "Run transition tests",
                "run": "pnpm run test:transition"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v2"
            },
            {
                "id": 3,
                "name": "Set node version to 18",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run srouce type check",
                "run": "pnpm run ts-check"
            },
            {
                "id": 6,
                "name": "Run type declaration tests",
                "run": "pnpm run test:types"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Create Release for Tag",
                "run": "yyx990803/release-tag@master"
            }
        ],
        "vuejs/devtools": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Create Release for Tag",
                "run": "Akryum/release-tag@v4.0.7"
            }
        ],
        "vuejs/vue-loader": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v2"
            },
            {
                "id": 3,
                "name": "Set node version to 16",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run unit tests",
                "run": "pnpm run test"
            },
            {
                "id": 6,
                "name": "Set up webpack 5 tests",
                "run": "npx json -f package.json -I -e \"this.resolutions = {}, this.resolutions.webpack = '^5.0.0', this.devDependencies.webpack = '^5.0.0' \""
            },
            {
                "id": 7,
                "name": "Install webpack 5",
                "run": "pnpm install --no-frozen-lockfile"
            },
            {
                "id": 8,
                "name": "Run unit tests for webpack 5",
                "run": "pnpm run test && pnpm run test:match-resource"
            }
        ],
        "vuejs/awesome-vue": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Scrum/awesome-readme-lint-double-link-action@v0.1.13"
            }
        ],
        "vuejs/eslint-plugin-vue": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install Packages",
                "run": "npm install --legacy-peer-deps"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "npm run lint"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Node.js v${{ matrix.node }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install Packages",
                "run": "npm install --legacy-peer-deps"
            },
            {
                "id": 4,
                "name": "Install ESLint v${{ matrix.eslint }}",
                "run": "npm install --save-dev eslint@${{ matrix.eslint }} --legacy-peer-deps"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "npm test"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install Packages",
                "run": "npm install --legacy-peer-deps"
            },
            {
                "id": 4,
                "name": "Install typescript-eslint v5",
                "run": "npm install -D @typescript-eslint/parser"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "npm test"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install Packages",
                "run": "npm install --legacy-peer-deps"
            },
            {
                "id": 4,
                "name": "Uninstall @stylistic/eslint-plugin",
                "run": "npm uninstall -D @stylistic/eslint-plugin"
            },
            {
                "id": 5,
                "name": "Install eslint v8",
                "run": "npm install -D eslint@8"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "npm test"
            }
        ],
        "vuejs/apollo": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "amannn/action-semantic-pull-request@v3.4.2"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Create Release for Tag",
                "run": "Akryum/release-tag@v4.0.7"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install node",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v2.0.1"
            },
            {
                "id": 4,
                "name": "Get pnpm store directory",
                "run": "echo \"pnpm_cache_dir=$(pnpm store path)\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 5,
                "name": "Cache pnpm modules",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "Install dependencies",
                "run": "pnpm install"
            },
            {
                "id": 7,
                "name": "Build",
                "run": "pnpm run build"
            },
            {
                "id": 8,
                "name": "Build app",
                "run": "pnpm run build"
            },
            {
                "id": 9,
                "name": "E2E tests",
                "run": "pnpm run test:e2e"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install node",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v2.0.1"
            },
            {
                "id": 4,
                "name": "Get pnpm store directory",
                "run": "echo \"pnpm_cache_dir=$(pnpm store path)\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 5,
                "name": "Cache pnpm modules",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "Install dependencies",
                "run": "pnpm install"
            },
            {
                "id": 7,
                "name": "Build",
                "run": "pnpm run build"
            },
            {
                "id": 8,
                "name": "E2E tests",
                "run": "pnpm run test:e2e"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install node",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v2.0.1"
            },
            {
                "id": 4,
                "name": "Get pnpm store directory",
                "run": "echo \"pnpm_cache_dir=$(pnpm store path)\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 5,
                "name": "Cache pnpm modules",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "Install dependencies",
                "run": "pnpm install"
            },
            {
                "id": 7,
                "name": "Build",
                "run": "pnpm run build"
            },
            {
                "id": 8,
                "name": "E2E tests",
                "run": "pnpm run test:e2e"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install node",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v2.0.1"
            },
            {
                "id": 4,
                "name": "Get pnpm store directory",
                "run": "echo \"pnpm_cache_dir=$(pnpm store path)\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 5,
                "name": "Cache pnpm modules",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "Install dependencies",
                "run": "pnpm install"
            },
            {
                "id": 7,
                "name": "Lint",
                "run": "pnpm run lint"
            },
            {
                "id": 8,
                "name": "Build",
                "run": "pnpm run build"
            },
            {
                "id": 9,
                "name": "Types",
                "run": "pnpm run test:types"
            },
            {
                "id": 10,
                "name": "Unit tests",
                "run": "pnpm run test:unit"
            }
        ],
        "vuejs/vetur": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Get yarn cache directory path",
                "run": "echo \"::set-output name=dir::$(yarn cache dir)\""
            },
            {
                "id": 4,
                "name": "Yarn cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": ".vscode-test cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "Install dependencies and build",
                "run": "yarn --frozen-lockfile\nyarn compile\n"
            },
            {
                "id": 7,
                "name": "Server and E2E test",
                "run": "GabrielBB/xvfb-action@v1.4"
            },
            {
                "id": 1,
                "name": "Checkout the latest code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Automatic Rebase",
                "run": "cirrus-actions/rebase@1.3.1"
            }
        ],
        "vuejs/vue-eslint-parser": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Checkout submodules",
                "run": "git submodule update --init"
            },
            {
                "id": 3,
                "name": "Install Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 4,
                "name": "Install Packages",
                "run": "npm install && cd test/fixtures/eslint && npm install"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "npm run -s lint"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Checkout submodules",
                "run": "git submodule update --init"
            },
            {
                "id": 3,
                "name": "Install Node.js v${{ matrix.node }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 4,
                "name": "Install Packages",
                "run": "npm install --legacy-peer-deps"
            },
            {
                "id": 5,
                "name": "Install ESLint v${{ matrix.eslint }}",
                "run": "node scripts/ci-install-eslint ${{ matrix.eslint }}"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "npm run -s build"
            },
            {
                "id": 7,
                "name": "Test",
                "run": "npm run -s test:mocha"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Checkout submodules",
                "run": "git submodule update --init"
            },
            {
                "id": 3,
                "name": "Install Node.js v16",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 4,
                "name": "Install Packages",
                "run": "npm install"
            },
            {
                "id": 5,
                "name": "Install ESLint v8",
                "run": "node scripts/ci-install-eslint 8.12.0"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "npm run -s build"
            },
            {
                "id": 7,
                "name": "Test",
                "run": "npm run -s test:cover"
            },
            {
                "id": 8,
                "name": "Send Coverage",
                "run": "npm run -s codecov"
            }
        ],
        "vuejs/vue-jest": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install Project Dependencies",
                "run": "yarn --frozen-lockfile"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "yarn test"
            }
        ],
        "vuejs/vuepress": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Get yarn cache directory path",
                "run": "echo \"::set-output name=dir::$(yarn cache dir)\""
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "yarn"
            },
            {
                "id": 6,
                "name": "Run tsc",
                "run": "yarn tsc"
            },
            {
                "id": 7,
                "name": "Run unit tests",
                "run": "yarn test"
            },
            {
                "id": 8,
                "name": "Check linter",
                "run": "yarn lint"
            },
            {
                "id": 9,
                "name": "Check markdown linter",
                "run": "yarn workspace docs lint-md"
            },
            {
                "id": 10,
                "name": "Build vuepress",
                "run": "yarn build"
            }
        ],
        "vuejs/core": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v4.0.0"
            },
            {
                "id": 3,
                "name": "Install Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run eslint",
                "run": "pnpm run lint --fix"
            },
            {
                "id": 6,
                "name": "Run prettier",
                "run": "pnpm run format"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "autofix-ci/action@ea32e3a12414e6d3183163c3424a7d7a8631ad84"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v4.0.0"
            },
            {
                "id": 3,
                "name": "Install Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm release --canary --tag minor"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v4.0.0"
            },
            {
                "id": 3,
                "name": "Install Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm release --canary"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v4.0.0"
            },
            {
                "id": 3,
                "name": "Install Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run unit tests",
                "run": "pnpm run test-unit"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v4.0.0"
            },
            {
                "id": 3,
                "name": "Install Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run compiler unit tests",
                "run": "pnpm run test-unit compiler"
            },
            {
                "id": 6,
                "name": "Run ssr unit tests",
                "run": "pnpm run test-unit server-renderer"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup cache for Chromium binary",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v4.0.0"
            },
            {
                "id": 4,
                "name": "Install Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm install"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "node node_modules/puppeteer/install.mjs"
            },
            {
                "id": 7,
                "name": "Run e2e tests",
                "run": "pnpm run test-e2e"
            },
            {
                "id": 8,
                "name": "verify treeshaking",
                "run": "node scripts/verify-treeshaking.js"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v4.0.0"
            },
            {
                "id": 3,
                "name": "Install Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run eslint",
                "run": "pnpm run lint"
            },
            {
                "id": 6,
                "name": "Run prettier",
                "run": "pnpm run format-check"
            },
            {
                "id": 7,
                "name": "Run type declaration tests",
                "run": "pnpm run test-dts"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v7"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/github-script@v7"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/github-script@v7"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "dessant/lock-threads@v5"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Create Release for Tag",
                "run": "yyx990803/release-tag@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v4.0.0"
            },
            {
                "id": 3,
                "name": "Install Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm run size"
            },
            {
                "id": 6,
                "name": "Upload Size Data",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v4.0.0"
            },
            {
                "id": 3,
                "name": "Install Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Download Size Data",
                "run": "dawidd6/action-download-artifact@v4"
            },
            {
                "id": 6,
                "name": "Download Previous Size Data",
                "run": "dawidd6/action-download-artifact@v4"
            },
            {
                "id": 7,
                "name": "Compare size",
                "run": "pnpm tsx scripts/size-report.ts > size-report.md"
            },
            {
                "id": 8,
                "name": "Read Size Report",
                "run": "juliangruber/read-file-action@v1"
            },
            {
                "id": 9,
                "name": "Create Comment",
                "run": "actions-cool/maintain-one-comment@v3"
            }
        ],
        "vuejs/router": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Create Release for Tag",
                "run": "yyx990803/release-tag@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pnpm/action-setup@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 4,
                "name": "BrowserStack Env Setup",
                "run": "browserstack/github-actions/setup-env@master"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm install"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "pnpm run lint"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "pnpm run -r test:types"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "pnpm run -r test:unit"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "pnpm run -r build"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "pnpm run -r build:dts"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "pnpm run -r test:dts"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "pnpm run -r test:e2e:ci"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "codecov/codecov-action@v4"
            }
        ],
        "vuejs/composition-api": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Create Release",
                "run": "npx conventional-github-releaser -p angular"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v2"
            },
            {
                "id": 3,
                "name": "Set node version to ${{ matrix.node_version }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 4,
                "name": "Install",
                "run": "pnpm i"
            },
            {
                "id": 5,
                "name": "Unit Tests",
                "run": "pnpm run test"
            },
            {
                "id": 6,
                "name": "Typing Declaration Tests",
                "run": "pnpm run test:dts"
            }
        ],
        "vuejs/eslint-config-typescript": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pnpm/action-setup@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm test"
            }
        ],
        "vuejs/pinia": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pnpm/action-setup@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm run lint"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "pnpm run test:types"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "pnpm run -r dev:prepare"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "pnpm run test:vitest"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "pnpm run build"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "pnpm run build:dts"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "pnpm run test:dts"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "pnpm run size"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "codecov/codecov-action@v4"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v1"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v1"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v1"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Create Release for Tag",
                "run": "yyx990803/release-tag@master"
            }
        ]
    },
    "vercel": {
        "vercel/ms": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup pnpm",
                "run": "pnpm/action-setup@v2.2.2"
            },
            {
                "id": 3,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "pnpm test"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup pnpm",
                "run": "pnpm/action-setup@v2.2.2"
            },
            {
                "id": 3,
                "name": "Use Node.js 16",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run Prettier check",
                "run": "pnpm run prettier-check"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup pnpm",
                "run": "pnpm/action-setup@v2.2.2"
            },
            {
                "id": 3,
                "name": "Use Node.js 16",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run ESLint check",
                "run": "pnpm run eslint-check"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup pnpm",
                "run": "pnpm/action-setup@v2.2.2"
            },
            {
                "id": 3,
                "name": "Use Node.js 16",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run TypeScript type check",
                "run": "pnpm run type-check"
            }
        ],
        "vercel/test-listen": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Test Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm test"
            }
        ],
        "vercel/async-retry": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm test"
            }
        ],
        "vercel/react-keyframes": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git fetch --depth=1 origin +refs/tags/*:refs/tags/*"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn install --frozen-lockfile --check-files"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/cache@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "npm run test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/cache@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./publish-release.sh"
            }
        ],
        "vercel/hyper": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Dump Workflow run info from GitHub context",
                "run": "echo \"$WORKFLOW_RUN_INFO\""
            },
            {
                "id": 2,
                "name": "Download Artifacts",
                "run": "dawidd6/action-download-artifact@v2.24.2"
            },
            {
                "id": 3,
                "name": "Get PR number",
                "run": "dawidd6/action-download-artifact@v2.24.2"
            },
            {
                "id": 4,
                "name": "Read the pr_num file",
                "run": "juliangruber/read-file-action@v1.1.6"
            },
            {
                "id": 5,
                "name": "List images",
                "run": "ls -al"
            },
            {
                "id": 6,
                "name": "Upload images to imgur",
                "run": "devicons/public-upload-to-imgur@v2.2.2"
            },
            {
                "id": 7,
                "name": "Comment on the PR",
                "run": "jungwinter/comment@v1"
            },
            {
                "id": 8,
                "name": "Hide older comments",
                "run": "kanga333/comment-hider@v0.4.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ env.NODE_VERSION }}",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Fix node-gyp and Python",
                "run": "python3 -m pip install packaging setuptools"
            },
            {
                "id": 4,
                "name": "Get yarn cache directory path",
                "run": "echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/cache/restore@v3"
            },
            {
                "id": 6,
                "name": "Install",
                "run": "yarn install"
            },
            {
                "id": 7,
                "name": "Install libarchive-tools",
                "run": "sudo apt update\nsudo apt install libarchive-tools\n"
            },
            {
                "id": 8,
                "name": "Lint and Run Unit Tests",
                "run": "yarn run test"
            },
            {
                "id": 9,
                "name": "Getting Build Icon",
                "run": "cp build/canary.ico build/icon.ico\ncp build/canary.icns build/icon.icns\n"
            },
            {
                "id": 10,
                "name": "Build",
                "run": "if [ -z \"$CSC_LINK\" ] ; then unset CSC_LINK ; fi\nif [ -z \"$CSC_KEY_PASSWORD\" ] ; then unset CSC_KEY_PASSWORD ; fi\nif [ -z \"$WIN_CSC_LINK\" ] ; then unset WIN_CSC_LINK ; fi\nif [ -z \"$WIN_CSC_KEY_PASSWORD\" ] ; then unset WIN_CSC_KEY_PASSWORD ; fi\nif [ -z \"$APPLE_ID\" ] ; then unset APPLE_ID ; fi\nif [ -z \"$APPLE_APP_SPECIFIC_PASSWORD\" ] ; then unset APPLE_APP_SPECIFIC_PASSWORD ; fi\nyarn run dist\n"
            },
            {
                "id": 11,
                "name": "Archive Build Artifacts",
                "run": "LabhanshAgrawal/upload-artifact@v3"
            },
            {
                "id": 12,
                "name": "Run E2E Tests",
                "run": "yarn run test:e2e"
            },
            {
                "id": 13,
                "name": "Run E2E Tests on Linux",
                "run": "GabrielBB/xvfb-action@v1.6"
            },
            {
                "id": 14,
                "name": "Archive E2E test screenshot",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 15,
                "name": "Save the pr number in an artifact",
                "run": "echo $PR_NUM > pr_num.txt"
            },
            {
                "id": 16,
                "name": "Upload the pr num",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 17,
                "name": "Step 17",
                "run": "actions/cache/save@v3"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ env.NODE_VERSION }}",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Fix node-gyp and Python",
                "run": "python3 -m pip install packaging setuptools"
            },
            {
                "id": 4,
                "name": "Get yarn cache directory path",
                "run": "echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/cache/restore@v3"
            },
            {
                "id": 6,
                "name": "Install",
                "run": "yarn install\nsudo apt update\nsudo apt install libarchive-tools\n"
            },
            {
                "id": 7,
                "name": "Compile",
                "run": "yarn run build"
            },
            {
                "id": 8,
                "name": "rebuild node-pty",
                "run": "pguyot/arm-runner-action@v2.5.2"
            },
            {
                "id": 9,
                "name": "chown node-pty",
                "run": "sudo chown -R $USER:$USER target/node_modules/node-pty\n"
            },
            {
                "id": 10,
                "name": "Prepare v8 snapshot",
                "run": "sudo dpkg --add-architecture i386\nsudo apt update\nsudo apt install -y libglib2.0-0:i386 libexpat1:i386 libgcc-s1:i386\nnpm_config_arch=armv7l yarn run v8-snapshot:arch\n"
            },
            {
                "id": 11,
                "name": "Build",
                "run": "yarn run electron-builder -l deb rpm AppImage pacman --${{ matrix.name }} -c electron-builder-linux-ci.json"
            },
            {
                "id": 12,
                "name": "Archive Build Artifacts",
                "run": "LabhanshAgrawal/upload-artifact@v3"
            }
        ],
        "vercel/pkg": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "yarn lint"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "yarn build"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "yarn test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v3"
            }
        ],
        "vercel/pkg-fetch": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "echo Is making new release? '${{ inputs.newRelease }}'"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Get previous release tag",
                "run": "PREV_RELEASE=$(gh release list --limit 1 --exclude-drafts --exclude-pre-releases | cut -f3)\necho \"Using release ${PREV_RELEASE}\"\necho \"prev_release=${PREV_RELEASE}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "Get previously released artifacts",
                "run": "gh release download ${{ steps.get_previous_release.outputs.prev_release }} --dir release-artifacts\n"
            },
            {
                "id": 6,
                "name": "Create artifact folders",
                "run": "mkdir artifact-binaries && mkdir artifact-shas"
            },
            {
                "id": 7,
                "name": "Copy previous release artifacts to artifact folders",
                "run": "pushd release-artifacts\npwd\nls -la\nmv *.sha256sum ../artifact-shas/.\nmv * ../artifact-binaries/.\npopd\n"
            },
            {
                "id": 8,
                "name": "Copy current workflow artifacts to artifact folders",
                "run": "pushd downloaded-artifacts\npwd\nls -la\nfor f in $(ls); do\n  mv $f/*.sha256sum ../artifact-shas/.\n  mv $f/* ../artifact-binaries/.\ndone\npopd\n"
            },
            {
                "id": 9,
                "name": "Check SHAs",
                "run": "cd artifact-binaries\nls ../artifact-shas/*.sha256sum | xargs sha256sum --check\n"
            },
            {
                "id": 10,
                "name": "Generate SHA summary",
                "run": "echo \"---\" >> $GITHUB_STEP_SUMMARY\necho \"Update $(date -u +%F) $(date -u +%T) GMT/UTC\" >> $GITHUB_STEP_SUMMARY\necho \"### SHAs of produced and carried forward binaries by this workflow\" >> $GITHUB_STEP_SUMMARY\necho \"  - $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\" >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\nsha_output_file=${GITHUB_SHA}_${RANDOM}_shas.txt\necho \"sha_output_file=${sha_output_file}\" >> $GITHUB_OUTPUT\ncat artifact-shas/*.sha256sum > ${sha_output_file}\ncat artifact-shas/*.sha256sum >> $GITHUB_STEP_SUMMARY\necho '```' >> $GITHUB_STEP_SUMMARY\n# Get a random string of characters to represent the EOF delimiter\nEOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)\necho \"sha_summary<<$EOF\" >> $GITHUB_ENV\ncat $GITHUB_STEP_SUMMARY >> $GITHUB_ENV\necho \"$EOF\" >> $GITHUB_ENV\n"
            },
            {
                "id": 11,
                "name": "Determine release tag to upload assets to and draft type",
                "run": "if [[ \"${{ inputs.newRelease }}\" == \"false\" ]]; then\n  echo \"use_release_tag=${{ steps.get_previous_release.outputs.prev_release }}\" >> $GITHUB_ENV\n  echo \"create_draft=false\" >> $GITHUB_ENV\nelse\n  echo \"use_release_tag=draft_release_${{ github.sha }}\" >> $GITHUB_ENV\n  echo \"create_draft=true\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 12,
                "name": "Add binaries to release",
                "run": "softprops/action-gh-release@d4e8205d7e959a9107da6396278b2f1f07af0f9b"
            },
            {
                "id": 13,
                "name": "Add release url to summary",
                "run": "echo \"Release created/updated at ${{ steps.create_release.outputs.url }}\" >> $GITHUB_STEP_SUMMARY"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 4,
                "name": "Extract binaries from Docker image",
                "run": "tar xvf ../out.tar root/pkg-fetch/dist\n"
            },
            {
                "id": 5,
                "name": "Check if binary is compiled",
                "run": "(test -f root/pkg-fetch/dist/*.sha256sum && echo ::set-output name=EXISTS::true) || echo ::set-output name=EXISTS::false\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 4,
                "name": "Extract binaries from Docker image",
                "run": "tar xvf ../out.tar root/pkg-fetch/dist\n"
            },
            {
                "id": 5,
                "name": "Check if binary is compiled",
                "run": "(test -f root/pkg-fetch/dist/*.sha256sum && echo ::set-output name=EXISTS::true) || echo ::set-output name=EXISTS::false\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 4,
                "name": "Extract binaries from Docker image",
                "run": "tar xvf ../out.tar root/pkg-fetch/dist\n"
            },
            {
                "id": 5,
                "name": "Check if binary is compiled",
                "run": "(test -f root/pkg-fetch/dist/*.sha256sum && echo ::set-output name=EXISTS::true) || echo ::set-output name=EXISTS::false\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 4,
                "name": "Extract binaries from Docker image",
                "run": "tar xvf ../out.tar root/pkg-fetch/dist\n"
            },
            {
                "id": 5,
                "name": "Check if binary is compiled",
                "run": "(test -f root/pkg-fetch/dist/*.sha256sum && echo ::set-output name=EXISTS::true) || echo ::set-output name=EXISTS::false\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "maxim-lobanov/setup-xcode@v1"
            },
            {
                "id": 3,
                "name": "Use Node.js 14",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "yarn start --node-range node${{ matrix.target-node }} --output dist"
            },
            {
                "id": 6,
                "name": "Check if binary is compiled",
                "run": "(test -f dist/*.sha256sum && echo ::set-output name=EXISTS::true) || echo ::set-output name=EXISTS::false\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js 14",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "choco install nasm"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "yarn start --node-range node${{ matrix.target-node }} --arch ${{ matrix.target-arch }} --output dist"
            },
            {
                "id": 6,
                "name": "Check if binary is compiled",
                "run": "if (Test-Path -Path dist\\\\*.sha256sum -PathType Leaf) { echo \"::set-output name=EXISTS::true\" } else { echo \"::set-output name=EXISTS::false\" }\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v2.1.5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Install deps",
                "run": "yarn install"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "yarn lint"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "yarn build"
            },
            {
                "id": 7,
                "name": "Check Patches",
                "run": "./scripts/test_patch.sh node${{ matrix.node-version }}"
            }
        ],
        "vercel/vercel": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Enable corepack",
                "run": "corepack enable pnpm"
            },
            {
                "id": 4,
                "name": "Update Gatsby Fixtures",
                "run": "actions/github-script@v7"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Enable corepack",
                "run": "corepack enable pnpm"
            },
            {
                "id": 3,
                "name": "Create Pull Request",
                "run": "actions/github-script@v7"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Enable corepack",
                "run": "corepack enable pnpm"
            },
            {
                "id": 3,
                "name": "Create Pull Request",
                "run": "actions/github-script@v7"
            },
            {
                "id": 1,
                "name": "Add comment",
                "run": "peter-evans/create-or-update-comment@5adcb0bb0f9fb3f95ef05400558bdb3f329ee808"
            },
            {
                "id": 1,
                "name": "Add comment",
                "run": "peter-evans/close-issue@v2"
            },
            {
                "id": 1,
                "name": "Add comment",
                "run": "peter-evans/create-or-update-comment@5adcb0bb0f9fb3f95ef05400558bdb3f329ee808"
            },
            {
                "id": 1,
                "name": "Checkout Repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Fetch git tags",
                "run": "git fetch origin 'refs/tags/*:refs/tags/*'"
            },
            {
                "id": 3,
                "name": "Setup Node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "install npm@9",
                "run": "npm i -g npm@9"
            },
            {
                "id": 5,
                "name": "install pnpm@8.3.1",
                "run": "npm i -g pnpm@8.3.1"
            },
            {
                "id": 6,
                "name": "Install Dependencies",
                "run": "pnpm install --frozen-lockfile"
            },
            {
                "id": 7,
                "name": "Build Packages",
                "run": "pnpm build"
            },
            {
                "id": 8,
                "name": "Create Release Pull Request or Publish to npm",
                "run": "changesets/action@v1"
            },
            {
                "id": 9,
                "name": "Trigger Update (if a Publish Happened)",
                "run": "actions/github-script@v7"
            },
            {
                "id": 10,
                "name": "Set latest Release to `vercel` (if a Publish Happened)",
                "run": "actions/github-script@v7"
            },
            {
                "id": 1,
                "name": "Check All",
                "run": "echo OK"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "install pnpm@8.3.1",
                "run": "npm i -g pnpm@8.3.1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "TESTS_ARRAY=$(node utils/chunk-tests-18.js $SCRIPT_NAME)\necho \"Files to test:\"\necho \"$TESTS_ARRAY\"\necho \"tests=$TESTS_ARRAY\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "patrickedqvist/wait-for-vercel-preview@bfdff514ff78a669f2536e9f4dd4ef5813a704a2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "install yarn@1.22.19",
                "run": "npm i -g yarn@1.22.19"
            },
            {
                "id": 4,
                "name": "install pnpm@8.3.1",
                "run": "npm i -g pnpm@8.3.1"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm install"
            },
            {
                "id": 6,
                "name": "Build ${{matrix.packageName}} and all its dependencies",
                "run": "node utils/gen.js && node_modules/.bin/turbo run build --cache-dir=\".turbo\" --log-order=stream --scope=${{matrix.packageName}} --include-dependencies --no-deps"
            },
            {
                "id": 7,
                "name": "Test ${{matrix.packageName}}",
                "run": "node utils/gen.js && node_modules/.bin/turbo run ${{matrix.testScript}} --summarize --cache-dir=\".turbo\" --log-order=stream --scope=${{matrix.packageName}} --no-deps -- ${{ join(matrix.testPaths, ' ') }}"
            },
            {
                "id": 8,
                "name": "Determine Turbo HIT or MISS",
                "run": "TURBO_MISS_COUNT=`node utils/determine-turbo-hit-or-miss.js`\necho \"MISS COUNT: $TURBO_MISS_COUNT\"\necho \"misses=$TURBO_MISS_COUNT\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 9,
                "name": "Upload Test Report to Datadog",
                "run": "npx @datadog/datadog-ci@2.18.1 junit upload --service vercel-cli .junit-reports"
            },
            {
                "id": 1,
                "name": "Check All",
                "run": "for status in ${{ join(needs.*.result, ' ') }}\ndo\n  if [ \"$status\" != \"success\" ] && [ \"$status\" != \"skipped\" ]\n  then\n    echo \"Some checks failed\"\n    exit 1\n  fi\ndone"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git fetch origin ${{ github.event.pull_request.head.sha }}:pr-${{ github.event.pull_request.number }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "git checkout pr-${{ github.event.pull_request.number }}"
            },
            {
                "id": 4,
                "name": "install pnpm@8.3.1",
                "run": "npm i -g pnpm@8.3.1"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm install"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "pnpm exec changeset status --since=main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "install pnpm@8.3.1",
                "run": "npm i -g pnpm@8.3.1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm run lint"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "pnpm run prettier-check"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "pnpm run build"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "pnpm run type-check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "install pnpm@8.3.1",
                "run": "npm i -g pnpm@8.3.1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "TESTS_ARRAY=$(node utils/chunk-tests.js $SCRIPT_NAME)\necho \"Files to test:\"\necho \"$TESTS_ARRAY\"\necho \"tests=$TESTS_ARRAY\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "patrickedqvist/wait-for-vercel-preview@bfdff514ff78a669f2536e9f4dd4ef5813a704a2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "install yarn@1.22.19",
                "run": "npm i -g yarn@1.22.19"
            },
            {
                "id": 4,
                "name": "install pnpm@8.3.1",
                "run": "npm i -g pnpm@8.3.1"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm install"
            },
            {
                "id": 6,
                "name": "Build ${{matrix.packageName}} and all its dependencies",
                "run": "node utils/gen.js && node_modules/.bin/turbo run build --cache-dir=\".turbo\" --log-order=stream --scope=${{matrix.packageName}} --include-dependencies --no-deps"
            },
            {
                "id": 7,
                "name": "Test ${{matrix.packageName}}",
                "run": "node utils/gen.js && node_modules/.bin/turbo run ${{matrix.testScript}} --summarize --cache-dir=\".turbo\" --log-order=stream --scope=${{matrix.packageName}} --no-deps -- ${{ join(matrix.testPaths, ' ') }}"
            },
            {
                "id": 8,
                "name": "Determine Turbo HIT or MISS",
                "run": "TURBO_MISS_COUNT=`node utils/determine-turbo-hit-or-miss.js`\necho \"MISS COUNT: $TURBO_MISS_COUNT\"\necho \"misses=$TURBO_MISS_COUNT\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 9,
                "name": "Upload Test Report to Datadog",
                "run": "npx @datadog/datadog-ci@2.36.0 junit upload --service vercel-cli .junit-reports"
            },
            {
                "id": 1,
                "name": "Check All",
                "run": "for status in ${{ join(needs.*.result, ' ') }}\ndo\n  if [ \"$status\" != \"success\" ] && [ \"$status\" != \"skipped\" ]\n  then\n    echo \"Some checks failed\"\n    exit 1\n  fi\ndone"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Enable corepack",
                "run": "corepack enable pnpm"
            },
            {
                "id": 4,
                "name": "Update @remix-run/dev",
                "run": "actions/github-script@v7"
            }
        ],
        "vercel/next.js": [
            {
                "id": 1,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "corepack enable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "echo STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/cache@v4"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "pnpm install"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "pnpm run build"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "if [[ $(node ./scripts/check-is-release.js 2> /dev/null || :) = v* ]];\n  then\n    echo \"IS_RELEASE=true\" >> $GITHUB_OUTPUT\n  else\n    echo \"IS_RELEASE=false\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/cache@v4"
            },
            {
                "id": 1,
                "name": "tune linux network",
                "run": "sudo ethtool -K eth0 tx off rx off"
            },
            {
                "id": 2,
                "name": "tune linux network",
                "run": "sudo ethtool -K eth0 tx off rx off"
            },
            {
                "id": 3,
                "name": "tune windows network",
                "run": "Disable-NetAdapterChecksumOffload -Name * -TcpIPv4 -UdpIPv4 -TcpIPv6 -UdpIPv6"
            },
            {
                "id": 4,
                "name": "tune mac network",
                "run": "sudo sysctl -w net.link.generic.system.hwcksum_tx=0 && sudo sysctl -w net.link.generic.system.hwcksum_rx=0"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/checkout@v4"
            },
            {
                "id": 6,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "corepack enable"
            },
            {
                "id": 8,
                "name": "Install Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 9,
                "name": "normalize versions",
                "run": "node scripts/normalize-version-bump.js"
            },
            {
                "id": 10,
                "name": "Setup toolchain",
                "run": "${{ matrix.settings.setup }}"
            },
            {
                "id": 11,
                "name": "Cache on ${{ github.ref_name }}",
                "run": "ijjk/rust-cache@turbo-cache-v1.0.8"
            },
            {
                "id": 12,
                "name": "Clear native build",
                "run": "rm -rf packages/next-swc/native"
            },
            {
                "id": 13,
                "name": "pull build cache",
                "run": "node ./scripts/pull-turbo-cache.js ${{ matrix.settings.target }}"
            },
            {
                "id": 14,
                "name": "check build exists",
                "run": "if [ -f packages/next-swc/native/next-swc.*.node ]; then echo \"BUILD_EXISTS=yes\" >> $GITHUB_OUTPUT; else echo \"BUILD_EXISTS=no\" >> $GITHUB_OUTPUT; fi"
            },
            {
                "id": 15,
                "name": "Build in docker",
                "run": "docker run -v \"/var/run/docker.sock\":\"/var/run/docker.sock\" -e RUST_BACKTRACE -e NAPI_CLI_VERSION -e CARGO_TERM_COLOR -e CARGO_INCREMENTAL -e CARGO_PROFILE_RELEASE_LTO -e CARGO_REGISTRIES_CRATES_IO_PROTOCOL -e TURBO_API -e TURBO_TEAM -e TURBO_TOKEN -e TURBO_VERSION -e TURBO_REMOTE_ONLY -v ${{ env.HOME }}/.cargo/git:/root/.cargo/git -v ${{ env.HOME }}/.cargo/registry:/root/.cargo/registry -v ${{ github.workspace }}:/build -w /build --entrypoint=bash ${{ matrix.settings.docker }} -c \"${{ matrix.settings.build }}\""
            },
            {
                "id": 16,
                "name": "cache build",
                "run": "pnpm turbo run cache-build-native --force -- ${{ matrix.settings.target }}"
            },
            {
                "id": 17,
                "name": "Build",
                "run": "${{ matrix.settings.build }}"
            },
            {
                "id": 18,
                "name": "check build cache status",
                "run": "if [[ ! -z $(ls packages/next-swc/native) ]]; then echo \"DID_BUILD=true\" >> $GITHUB_OUTPUT; fi"
            },
            {
                "id": 19,
                "name": "Collect turbopack build metrics",
                "run": "mkdir -p ./turbopack-bin-size\nshopt -s nullglob\nfor filename in packages/next-swc/native/next-swc.*.node; do\n  # Strip out filename to extract target triple\n  export FILENAME=$(basename ${filename})\n  export FILENAME=${FILENAME#*.}\n  export FILENAME=${FILENAME%.node}\n  export BYTESIZE=$(wc -c < $filename | xargs)\n  echo \"Reporting $FILENAME:$BYTESIZE for Turbopack bytesize\"\n  echo \"turbopack.bytesize.$FILENAME:$BYTESIZE\" > ./turbopack-bin-size/${{ matrix.settings.target }}\ndone\n"
            },
            {
                "id": 20,
                "name": "Upload turbopack bytesize artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 21,
                "name": "Upload swc artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 22,
                "name": "Upload turbo summary artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "corepack enable"
            },
            {
                "id": 4,
                "name": "Install Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "npm i -g turbo@${{ env.TURBO_VERSION }}"
            },
            {
                "id": 6,
                "name": "Install wasm-pack",
                "run": "curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh"
            },
            {
                "id": 7,
                "name": "normalize versions",
                "run": "node scripts/normalize-version-bump.js"
            },
            {
                "id": 8,
                "name": "Build",
                "run": "turbo run build-wasm -vvv --remote-cache-timeout 90 --summarize -- --target ${{ matrix.target }}"
            },
            {
                "id": 9,
                "name": "Add target to folder name",
                "run": "[[ -d \"packages/next-swc/crates/wasm/pkg\" ]] && mv packages/next-swc/crates/wasm/pkg packages/next-swc/crates/wasm/pkg-${{ matrix.target }} || ls packages/next-swc/crates/wasm"
            },
            {
                "id": 10,
                "name": "Upload turbo summary artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 11,
                "name": "Upload swc artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "corepack enable"
            },
            {
                "id": 3,
                "name": "tune linux network",
                "run": "sudo ethtool -K eth0 tx off rx off"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "npm i -g vercel@latest"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "node ./scripts/deploy-tarball.js"
            },
            {
                "id": 1,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "corepack enable"
            },
            {
                "id": 3,
                "name": "tune linux network",
                "run": "sudo ethtool -K eth0 tx off rx off"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "npm i -g npm@10.4.0"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "echo \"//registry.npmjs.org/:_authToken=$NPM_TOKEN\" >> ~/.npmrc"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "./scripts/publish-native.js"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "./scripts/publish-release.js"
            },
            {
                "id": 11,
                "name": "Upload npm log artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Vercel CLI",
                "run": "npm i -g vercel@latest"
            },
            {
                "id": 3,
                "name": "Deploy preview examples",
                "run": "./scripts/deploy-examples.sh"
            },
            {
                "id": 4,
                "name": "Deploy production examples",
                "run": "./scripts/deploy-examples.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cp -r packages/next-swc/native .github/actions/next-stats-action/native"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./scripts/release-stats.sh"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./.github/actions/next-stats-action"
            },
            {
                "id": 1,
                "name": "Collect bytesize metrics",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Upload to Datadog",
                "run": "ls -al turbopack-bin-size\n\nfor filename in turbopack-bin-size/*; do\n  export BYTESIZE+=\" --metrics $(cat $filename)\"\ndone\n\necho \"Reporting $BYTESIZE\"\n\nnpx @datadog/datadog-ci@2.23.1 metric --no-fail --level pipeline $BYTESIZE\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "check for docs only change",
                "run": "echo \"DOCS_ONLY<<EOF\" >> $GITHUB_OUTPUT;\necho \"$(node scripts/run-for-change.js --not --type docs --exec echo 'false')\" >> $GITHUB_OUTPUT;\necho 'EOF' >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "check for release",
                "run": "if [[ $(node ./scripts/check-is-release.js 2> /dev/null || :) = v* ]];\n  then\n    echo \"IS_RELEASE=true\" >> $GITHUB_OUTPUT\n  else\n    echo \"IS_RELEASE=false\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "corepack enable"
            },
            {
                "id": 4,
                "name": "Run link checker",
                "run": "node ./.github/actions/validate-docs-links/dist/index.js"
            },
            {
                "id": 1,
                "name": "Download test report artifacts",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Upload test report to datadog",
                "run": "if [ -d ./test/test-junit-report ]; then\n  # Add a `test.type` tag to distinguish between turbopack and next.js runs\n  DD_ENV=ci npx @datadog/datadog-ci@2.23.1 junit upload --tags test.type:nextjs --service nextjs ./test/test-junit-report\nfi\n\nif [ -d ./test/turbopack-test-junit-report ]; then\n  # Add a `test.type` tag to distinguish between turbopack and next.js runs\n  DD_ENV=ci npx @datadog/datadog-ci@2.23.1 junit upload --tags test.type:turbopack --service nextjs ./test/turbopack-test-junit-report\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Normalize input step names into path key",
                "run": "actions/github-script@v7"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "fnm use --install-if-missing ${{ inputs.nodeVersion || env.NODE_LTS_VERSION }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "node -v"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "corepack enable"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pwd"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "rm -rf .git"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/checkout@v4"
            },
            {
                "id": 8,
                "name": "Install Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 9,
                "name": "Install mold linker",
                "run": "sudo apt update\nsudo apt install -y mold\necho RUSTFLAGS=${RUSTFLAGS}\\ -C\\ link-arg=-fuse-ld=mold >> $GITHUB_ENV\n"
            },
            {
                "id": 10,
                "name": "Install nextest",
                "run": "taiki-e/install-action@nextest"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "rustc --version"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "corepack prepare --activate yarn@1.22.19 && npm i -g \"turbo@${TURBO_VERSION}\" \"@napi-rs/cli@${NAPI_CLI_VERSION}\""
            },
            {
                "id": 13,
                "name": "Cache on ${{ github.ref_name }}",
                "run": "ijjk/rust-cache@turbo-cache-v1.0.8"
            },
            {
                "id": 14,
                "name": "Step 14",
                "run": "git clean -xdf && rm -rf /tmp/next-repo-*; rm -rf /tmp/next-install-* /tmp/yarn-* /tmp/ncc-cache target"
            },
            {
                "id": 15,
                "name": "Set CI git user",
                "run": "git config --global user.name \"vercel-ci-bot\"\ngit config --global user.email \"infra+ci@vercel.com\"\n"
            },
            {
                "id": 16,
                "name": "Step 16",
                "run": "cargo clean"
            },
            {
                "id": 17,
                "name": "normalize versions",
                "run": "node scripts/normalize-version-bump.js"
            },
            {
                "id": 18,
                "name": "Step 18",
                "run": "turbo run build-native-release -vvv --remote-cache-timeout 90 --summarize -- --target x86_64-unknown-linux-gnu"
            },
            {
                "id": 19,
                "name": "Upload next-swc artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 20,
                "name": "Step 20",
                "run": "git checkout ."
            },
            {
                "id": 21,
                "name": "Step 21",
                "run": "pnpm install"
            },
            {
                "id": 22,
                "name": "Step 22",
                "run": "ANALYZE=1 pnpm build"
            },
            {
                "id": 23,
                "name": "Step 23",
                "run": "pnpm playwright install-deps"
            },
            {
                "id": 24,
                "name": "Step 24",
                "run": "pnpm playwright install chromium"
            },
            {
                "id": 25,
                "name": "Step 25",
                "run": "turbo run get-test-timings -- --build ${{ github.sha }}"
            },
            {
                "id": 26,
                "name": "Step 26",
                "run": "/bin/bash -c \"${{ inputs.afterBuild }}\""
            },
            {
                "id": 27,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 28,
                "name": "Upload bundle analyzer artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 29,
                "name": "Upload test report artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 30,
                "name": "Upload test report artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "styfle/cancel-workflow-action@0.12.1"
            },
            {
                "id": 1,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "corepack enable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "git clone https://github.com/vercel/next.js.git --depth=1 ."
            },
            {
                "id": 4,
                "name": "tune linux network",
                "run": "sudo ethtool -K eth0 tx off rx off"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "node ./scripts/code-freeze.js --type ${{ github.event.inputs.type }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "corepack enable"
            },
            {
                "id": 4,
                "name": "Bankrupt issues & send notification to Slack",
                "run": "node ./.github/actions/next-repo-actions/dist/bankrupt/index.js"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "dessant/lock-threads@v5"
            },
            {
                "id": 1,
                "name": "Close stale issues with no reproduction",
                "run": "actions/stale@v9"
            },
            {
                "id": 2,
                "name": "Close issues not verified on canary",
                "run": "actions/stale@v9"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v7"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "corepack enable"
            },
            {
                "id": 4,
                "name": "Issues: Send notification to Slack",
                "run": "node ./.github/actions/next-repo-actions/dist/issues/index.mjs"
            },
            {
                "id": 5,
                "name": "PRs: Send notification to Slack",
                "run": "node ./.github/actions/next-repo-actions/dist/prs/index.mjs"
            },
            {
                "id": 6,
                "name": "Feature requests: Send notification to Slack",
                "run": "node ./.github/actions/next-repo-actions/dist/feature-requests/index.mjs"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Check non-docs only change",
                "run": "echo \"DOCS_CHANGE<<EOF\" >> $GITHUB_OUTPUT; echo \"$(node scripts/run-for-change.js --not --type docs --exec echo 'nope')\" >> $GITHUB_OUTPUT; echo 'EOF' >> $GITHUB_OUTPUT"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cp -r packages/next-swc/native .github/actions/next-stats-action/native"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./.github/actions/next-stats-action"
            },
            {
                "id": 1,
                "name": "send retry request to GitHub API",
                "run": "gh api \\\n  --method POST \\\n  -H \"Accept: application/vnd.github+json\" \\\n  -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n  /repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/rerun-failed-jobs\n"
            },
            {
                "id": 1,
                "name": "send webhook",
                "run": "slackapi/slack-github-action@v1.25.0"
            },
            {
                "id": 1,
                "name": "Get number of CPU cores",
                "run": "SimenB/github-actions-cpu-cores@v2"
            },
            {
                "id": 2,
                "name": "Setup Rust toolchain",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Display runner information",
                "run": "echo runner cpu count ${{ steps.cpu-cores.outputs.count }}"
            },
            {
                "id": 4,
                "name": "Find Next.js latest release version",
                "run": "# Grab the latest release version from next.js repo, including prelease. `/releases/latest` will only return latest stable release.\necho NEXJS_LATEST_VERSION=$(gh release --repo vercel/next.js --limit 1 list | sed -n 1p | awk '{print $1}') >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "Set Next.js release version",
                "run": "echo \"NEXTJS_VERSION=${{ inputs.version != '' && inputs.version || env.NEXJS_LATEST_VERSION }}\" >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "Print Next.js release version to checkout",
                "run": "echo \"Checking out Next.js ${{ env.NEXTJS_VERSION }}\""
            },
            {
                "id": 7,
                "name": "tune linux network",
                "run": "sudo ethtool -K eth0 tx off rx off"
            },
            {
                "id": 8,
                "name": "Checkout Next.js",
                "run": "actions/checkout@v4"
            },
            {
                "id": 9,
                "name": "Checkout failed test lists",
                "run": "actions/checkout@v4"
            },
            {
                "id": 10,
                "name": "Download binary",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "actions/cache/restore@v3"
            },
            {
                "id": 12,
                "name": "Install dependencies",
                "run": "wget https://github.com/sharkdp/hyperfine/releases/download/v1.16.1/hyperfine_1.16.1_amd64.deb\nsudo dpkg -i hyperfine_1.16.1_amd64.deb\ncorepack enable\npnpm install --loglevel error\n"
            },
            {
                "id": 13,
                "name": "Build next-swc",
                "run": "hyperfine --min-runs 1 --show-output 'pnpm run --filter=@next/swc build-native --features plugin --release'\necho \"Successfully built next-swc with published turbopack\"\n"
            },
            {
                "id": 14,
                "name": "Build next.js",
                "run": "pnpm run build\nstrip packages/next-swc/native/next-swc.*.node\nls -al packages/next-swc/native\n# Reduce the size of the cache bit\ncd packages/next-swc && cargo clean && cd ../../\necho NEXT_SWC_FILESIZE: $(stat -c %s packages/next-swc/native/next-swc.linux-x64-gnu.node)\nnode -e \"console.log('Host', require('os').arch(), require('os').platform())\"\n"
            },
            {
                "id": 15,
                "name": "Detects Next.js build version",
                "run": "# This is being used in github action to collect test results. Do not change it, or should update ./.github/actions/next-integration-test to match.\ndocker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-jammy /bin/bash -c 'curl https://install-node.vercel.app/v16 | FORCE=1 bash && cd /work && echo RUNNING NEXTJS VERSION: $(packages/next/dist/bin/next --version) && ls -al packages/next-swc/native && node -e \"console.log(\\\"Container\\\", require(\\\"os\\\").arch(), require(\\\"os\\\").platform())\"'\n"
            },
            {
                "id": 16,
                "name": "Temporary test skip",
                "run": "rm -rf test/integration/jsconfig-paths/test/index.test.js\n"
            },
            {
                "id": 17,
                "name": "Store next.js build cache with next-swc",
                "run": "actions/cache/save@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "tune linux network",
                "run": "sudo ethtool -K eth0 tx off rx off"
            },
            {
                "id": 3,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "corepack enable"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm install"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "pnpm build"
            },
            {
                "id": 7,
                "name": "Run test/examples",
                "run": "docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.35.1-focal /bin/bash -c \"cd /work && curl -s https://install-node.vercel.app/v${{ matrix.node }} | FORCE=1 bash && node -v && corepack enable > /dev/null && NEXT_TEST_JOB=1 NEXT_TEST_MODE=start xvfb-run node run-tests.js --type examples >> /proc/1/fd/1\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "balazsorban44/nissuer@1.10.0"
            },
            {
                "id": 1,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 2,
                "name": "Clone Next.js repository",
                "run": "git clone https://github.com/vercel/next.js.git --depth=25 --single-branch --branch ${GITHUB_REF_NAME:-canary} ."
            },
            {
                "id": 3,
                "name": "Check token",
                "run": "gh auth status"
            },
            {
                "id": 4,
                "name": "Get commit of the latest tag",
                "run": "echo \"LATEST_TAG_COMMIT=$(git rev-list -n 1 $(git describe --tags --abbrev=0))\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Get latest commit",
                "run": "echo \"LATEST_COMMIT=$(git rev-parse HEAD)\" >> $GITHUB_ENV"
            },
            {
                "id": 6,
                "name": "Check if new commits since last tag",
                "run": "if [ \"$LATEST_TAG_COMMIT\" = \"$LATEST_COMMIT\" ]; then\n  echo \"No new commits. Exiting...\"\n  exit 1\nfi\n"
            },
            {
                "id": 7,
                "name": "tune linux network",
                "run": "sudo ethtool -K eth0 tx off rx off"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "corepack enable && pnpm --version"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "echo STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "actions/cache@v4"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "pnpm install"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "pnpm run build"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "node ./scripts/start-release.js --release-type ${{ github.event.inputs.releaseType || 'canary' }} --semver-type ${{ github.event.inputs.semverType }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/cache/restore@v3"
            },
            {
                "id": 2,
                "name": "Enable corepack and install yarn",
                "run": "corepack enable\ncorepack prepare --activate yarn@1.22.19\n"
            },
            {
                "id": 3,
                "name": "Setup playwright",
                "run": "pnpm playwright install\n"
            },
            {
                "id": 4,
                "name": "Run test/production",
                "run": "NEXT_TEST_MODE=start TURBOPACK=1 TURBOPACK_BUILD=1 node run-tests.js -g ${{ matrix.group }}/12 -c ${TEST_CONCURRENCY} --type production\n"
            },
            {
                "id": 5,
                "name": "Upload test report artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/cache/restore@v3"
            },
            {
                "id": 2,
                "name": "Enable corepack and install yarn",
                "run": "corepack enable\ncorepack prepare --activate yarn@1.22.19\n"
            },
            {
                "id": 3,
                "name": "Setup playwright",
                "run": "pnpm playwright install\n"
            },
            {
                "id": 4,
                "name": "Run test/integration",
                "run": "TURBOPACK=1 TURBOPACK_BUILD=1 node run-tests.js -g ${{ matrix.group }}/12 -c ${TEST_CONCURRENCY} --type integration\n"
            },
            {
                "id": 5,
                "name": "Upload test report artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Collect integration test stat",
                "run": "./.github/actions/next-integration-stat"
            },
            {
                "id": 3,
                "name": "Store artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Download test report artifacts",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Upload to datadog",
                "run": "# We'll tag this to the \"Turbopack\" datadog service, not \"nextjs\"\nnpx @datadog/datadog-ci@2.23.1 junit upload --tags test.type:turbopack-build.daily --service Turbopack-build ./test/reports\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/cache/restore@v3"
            },
            {
                "id": 2,
                "name": "Enable corepack and install yarn",
                "run": "corepack enable\ncorepack prepare --activate yarn@1.22.19\n"
            },
            {
                "id": 3,
                "name": "Setup playwright",
                "run": "pnpm playwright install\n"
            },
            {
                "id": 4,
                "name": "Run test/development",
                "run": "NEXT_TEST_MODE=dev TURBOPACK=1 TURBOPACK_DEV=1 node run-tests.js -g ${{ matrix.group }}/12 -c ${TEST_CONCURRENCY} --type development\n"
            },
            {
                "id": 5,
                "name": "Upload test report artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/cache/restore@v3"
            },
            {
                "id": 2,
                "name": "Enable corepack and install yarn",
                "run": "corepack enable\ncorepack prepare --activate yarn@1.22.19\n"
            },
            {
                "id": 3,
                "name": "Setup playwright",
                "run": "pnpm playwright install\n"
            },
            {
                "id": 4,
                "name": "Run test/integration",
                "run": "TURBOPACK=1 TURBOPACK_DEV=1 node run-tests.js -g ${{ matrix.group }}/12 -c ${TEST_CONCURRENCY} --type integration\n"
            },
            {
                "id": 5,
                "name": "Upload test report artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Collect integration test stat",
                "run": "./.github/actions/next-integration-stat"
            },
            {
                "id": 3,
                "name": "Store artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Download test report artifacts",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Upload to datadog",
                "run": "# We'll tag this to the \"Turbopack\" datadog service, not \"nextjs\"\nnpx @datadog/datadog-ci@2.23.1 junit upload --tags test.type:turbopack.daily --service Turbopack ./test/reports\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "corepack enable"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pnpm i"
            },
            {
                "id": 5,
                "name": "Create Pull Request",
                "run": "node scripts/automated-update-workflow.js"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "corepack enable"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pnpm i"
            },
            {
                "id": 5,
                "name": "Create Pull Request",
                "run": "node scripts/automated-update-workflow.js"
            },
            {
                "id": 1,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "corepack enable"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pnpm i"
            },
            {
                "id": 5,
                "name": "Upload results to \"Are We Turbo Yet\" KV",
                "run": "./.github/actions/upload-turboyet-data"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "corepack enable"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pnpm i"
            },
            {
                "id": 5,
                "name": "Create Pull Request",
                "run": "node scripts/automated-update-workflow.js"
            }
        ],
        "vercel/styled-jsx": [
            {
                "id": 1,
                "name": "Begin CI...",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node 12",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Use cached node_modules",
                "run": "actions/cache@v1"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "yarn build"
            },
            {
                "id": 6,
                "name": "Lint",
                "run": "yarn lint"
            },
            {
                "id": 7,
                "name": "Test",
                "run": "yarn test"
            },
            {
                "id": 8,
                "name": "Test types",
                "run": "yarn test-types"
            },
            {
                "id": 9,
                "name": "Release",
                "run": "yarn semantic-release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "amannn/action-semantic-pull-request@v2.1.0"
            }
        ],
        "vercel/arg": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm test"
            }
        ],
        "vercel/fetch-retry": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Print Node.js Version",
                "run": "node --version"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "npm install"
            },
            {
                "id": 5,
                "name": "Run \"build\" step",
                "run": "npm run build --if-present"
            },
            {
                "id": 6,
                "name": "Run tests",
                "run": "npm test"
            }
        ],
        "vercel/fetch-cached-dns": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Print Node.js Version",
                "run": "node --version"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "npm install"
            },
            {
                "id": 5,
                "name": "Run \"build\" step",
                "run": "npm run build --if-present"
            },
            {
                "id": 6,
                "name": "Run tests",
                "run": "npm test"
            }
        ],
        "vercel/fetch": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pnpm/action-setup@v2.2.2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run Linter",
                "run": "pnpm lint"
            },
            {
                "id": 6,
                "name": "Run Tests",
                "run": "pnpm test"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup pnpm",
                "run": "pnpm/action-setup@v2.2.2"
            },
            {
                "id": 3,
                "name": "Setup Node",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Create Release PR or Publish Packages",
                "run": "changesets/action@v1"
            }
        ],
        "vercel/cosmosdb-server": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "yarn build"
            },
            {
                "id": 5,
                "name": "Publish",
                "run": "npm publish --access public"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Additional Checkout",
                "run": "git submodule update --init --recursive"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "yarn lint"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "yarn build"
            },
            {
                "id": 7,
                "name": "Test",
                "run": "yarn test"
            }
        ],
        "vercel/ncc": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Python 3.11",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Use Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "yarn global add node-gyp && yarn install --frozen-lockfile"
            },
            {
                "id": 5,
                "name": "Build Test Binary",
                "run": "yarn build-test-binary"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "yarn build"
            },
            {
                "id": 7,
                "name": "Run Tests",
                "run": "yarn test"
            },
            {
                "id": 8,
                "name": "Coverage",
                "run": "yarn test-coverage"
            },
            {
                "id": 9,
                "name": "Maybe Release",
                "run": "npx semantic-release@19.0.5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "amannn/action-semantic-pull-request@47b15d52c5c30e94a17ec87eb8dd51ff5221fed9"
            }
        ],
        "vercel/webpack-asset-relocator-loader": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Print Node Version",
                "run": "node --version"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "yarn install"
            },
            {
                "id": 5,
                "name": "Run Tests",
                "run": "yarn test"
            },
            {
                "id": 6,
                "name": "Coverage",
                "run": "yarn test-coverage"
            },
            {
                "id": 7,
                "name": "Release",
                "run": "yarn semantic-release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "amannn/action-semantic-pull-request@v2.1.0"
            }
        ],
        "vercel/fun": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 3,
                "name": "Use pnpm",
                "run": "corepack enable pnpm && pnpm --version"
            },
            {
                "id": 4,
                "name": "Use Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 5,
                "name": "Print Node.js Version",
                "run": "node --version"
            },
            {
                "id": 6,
                "name": "Install Dependencies",
                "run": "npm install"
            },
            {
                "id": 7,
                "name": "Run \"build\" step",
                "run": "npm run build --if-present"
            },
            {
                "id": 8,
                "name": "Compile Go Test Functions",
                "run": "./test/go-build.sh"
            },
            {
                "id": 9,
                "name": "Run tests",
                "run": "npm test"
            },
            {
                "id": 10,
                "name": "Maybe Release",
                "run": "pnpm dlx semantic-release@21.1.1"
            }
        ],
        "vercel/async-listen": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Enable corepack",
                "run": "corepack enable pnpm && pnpm --version"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "pnpm test"
            },
            {
                "id": 6,
                "name": "Maybe Release",
                "run": "pnpm dlx semantic-release@19.0.5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "amannn/action-semantic-pull-request@00282d63cda40a6eaf3e9d0cbb1ac4384de896e8"
            }
        ],
        "vercel/nft": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Prepare Install (if applicable)",
                "run": "node prepare-install.js"
            },
            {
                "id": 5,
                "name": "Enable Corepack",
                "run": "corepack enable npm"
            },
            {
                "id": 6,
                "name": "Install Dependencies",
                "run": "npm install"
            },
            {
                "id": 7,
                "name": "Prettier",
                "run": "npm run prettier-check"
            },
            {
                "id": 8,
                "name": "Build",
                "run": "npm run build"
            },
            {
                "id": 9,
                "name": "Run Tests",
                "run": "npm run ${{ (matrix.os == 'ubuntu-latest') && 'test-verbose' || 'test' }}"
            },
            {
                "id": 10,
                "name": "Maybe Release",
                "run": "npx semantic-release@19.0.5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "amannn/action-semantic-pull-request@0b14f54ac155d88e12522156e52cb6e397745cfd"
            }
        ],
        "vercel/swr": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install",
                "run": "./.github/workflows/install"
            },
            {
                "id": 3,
                "name": "Install Canary",
                "run": "corepack pnpm upgrade react@canary react-dom@canary use-sync-external-store@canary"
            },
            {
                "id": 4,
                "name": "Lint and test",
                "run": "pnpm clean\npnpm build\npnpm test\npnpm test:build\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install",
                "run": "./.github/workflows/install"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "pnpm clean\npnpm build\npnpm test\npnpm test:build\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install",
                "run": "./.github/workflows/install"
            },
            {
                "id": 3,
                "name": "Lint and test",
                "run": "pnpm clean\npnpm build\npnpm run-all-checks\nnpm pack\npnpm attw\npnpm test\npnpm test:build\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install",
                "run": "./.github/workflows/install"
            },
            {
                "id": 3,
                "name": "E2E Tests",
                "run": "pnpm clean\npnpm build\npnpm build:e2e\npnpm test:e2e\n"
            },
            {
                "id": 4,
                "name": "Upload test results",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Check out",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install",
                "run": "./.github/workflows/install"
            },
            {
                "id": 3,
                "name": "Determine tag",
                "run": "echo \"tag=$(echo $GITHUB_REF | grep -Eo 'alpha|beta|canary|rc')\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Publish to versioned tag",
                "run": "echo \"Publishing to ${{ steps.determine_tag.outputs.tag }} tag\"\nnpm publish --access public --no-git-checks --provenance --tag ${{ steps.determine_tag.outputs.tag }}\n"
            },
            {
                "id": 5,
                "name": "Publish to latest",
                "run": "echo \"Publishing to latest\"\nnpm publish --access public --no-git-checks --provenance\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install",
                "run": "./.github/workflows/install"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pnpm clean\npnpm build\npnpm run-all-checks\npnpm test:build\n"
            },
            {
                "id": 4,
                "name": "Configure git",
                "run": "git config user.name \"vercel-release-bot\"\ngit config user.email \"infra+release@vercel.com\"\n"
            },
            {
                "id": 5,
                "name": "Bump version and tag",
                "run": "node ./scripts/bump-next-version.js\n"
            },
            {
                "id": 6,
                "name": "Git push",
                "run": "git push origin main\ngit push origin --tags\n"
            }
        ],
        "vercel/next-learn": [
            {
                "id": 1,
                "name": "Cancel running workflows",
                "run": "styfle/cancel-workflow-action@0.12.1"
            },
            {
                "id": 2,
                "name": "Checkout repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Setup pnpm",
                "run": "pnpm/action-setup@v3"
            },
            {
                "id": 4,
                "name": "Set node version",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 5,
                "name": "Cache node_modules",
                "run": "actions/cache@v4"
            },
            {
                "id": 6,
                "name": "Install dependencies",
                "run": "pnpm install"
            },
            {
                "id": 7,
                "name": "Run tests",
                "run": "pnpm test"
            }
        ],
        "vercel/commerce": [
            {
                "id": 1,
                "name": "Checkout repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set node version",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Set pnpm version",
                "run": "pnpm/action-setup@v2"
            },
            {
                "id": 4,
                "name": "Cache node_modules",
                "run": "actions/cache@v3"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "pnpm install --no-frozen-lockfile"
            },
            {
                "id": 6,
                "name": "Run tests",
                "run": "pnpm test"
            }
        ],
        "vercel/gatsby-plugin-vercel": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "yarn install, publish",
                "run": "yarn install --frozen-lockfile --check-files\nyarn semantic-release --branches main\n"
            }
        ],
        "vercel/turbo": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 4,
                "name": "Clear potentially cached benchmarks",
                "run": "rm -rf target/criterion"
            },
            {
                "id": 5,
                "name": "Build benchmarks",
                "run": "cargo bench --no-run -p turbopack-bench -p turbopack-cli"
            },
            {
                "id": 6,
                "name": "Run cargo bench",
                "run": "cargo bench -p turbopack-bench -p turbopack-cli -- ${{ matrix.bench.run_args }}"
            },
            {
                "id": 7,
                "name": "Install critcmp",
                "run": "baptiste0928/cargo-install@v1"
            },
            {
                "id": 8,
                "name": "Compare results",
                "run": "critcmp --group \"([^/]+/)[^/]+(?:/)(.+)\" base"
            },
            {
                "id": 9,
                "name": "Export results",
                "run": "critcmp --export base > raw.json"
            },
            {
                "id": 10,
                "name": "Upload results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Get current date",
                "run": "echo \"year=$(date +'%Y')\" >> $GITHUB_OUTPUT\necho \"month=$(date +'%m')\" >> $GITHUB_OUTPUT\necho \"date=$(date +'%s')\" >> $GITHUB_OUTPUT\necho \"pretty=$(date +'%Y-%m-%d %H:%M')\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 2,
                "name": "Checkout benchmark-data",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Download benchmark data",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Git pull",
                "run": "git pull --depth=1 --no-tags origin benchmark-data"
            },
            {
                "id": 5,
                "name": "Push data to branch",
                "run": "stefanzweifel/git-auto-commit-action@v4"
            },
            {
                "id": 1,
                "name": "Find PR Comment",
                "run": "peter-evans/find-comment@v2"
            },
            {
                "id": 2,
                "name": "Create or update PR comment",
                "run": "peter-evans/create-or-update-comment@v2"
            },
            {
                "id": 3,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 4,
                "name": "CI related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 5,
                "name": "Root cargo related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 6,
                "name": "Rust related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 7,
                "name": "Turbopack related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 8,
                "name": "Turbopack Benchmark related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 3,
                "name": "Run cargo check release",
                "run": "RUSTFLAGS=\"-D warnings -A deprecated\" cargo groups check turbopack --features rustls-tls --release\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Setup Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 4,
                "name": "Clear benchmarks",
                "run": "rm -rf target/criterion"
            },
            {
                "id": 5,
                "name": "Compile cargo benches",
                "run": "cargo bench --no-run ${{ matrix.bench.args }}"
            },
            {
                "id": 6,
                "name": "Run cargo bench",
                "run": "cargo bench ${{ matrix.bench.args }}"
            },
            {
                "id": 7,
                "name": "Install critcmp",
                "run": "baptiste0928/cargo-install@v1"
            },
            {
                "id": 8,
                "name": "Compare results",
                "run": "critcmp --group \"([^/]+/)[^/]+(?:/)(.+)\" base"
            },
            {
                "id": 9,
                "name": "Export results",
                "run": "critcmp --export base > raw.json"
            },
            {
                "id": 10,
                "name": "Upload results to datadog",
                "run": "npm install -g @datadog/datadog-ci@2.18.1\n# Query raw benchmark output, create key:value pairs for each benchmark entries.\n# The generated key name is compact format the path of the benchmark entry, i.e\n# `base.hmr_to_commit.CSR.1000.mean`\n# [TODO]: datadog-ci sometimes return 400 without detail, need to investigate further. For now accept the flaky uploads.\nfor item in $(cat raw.json | jq -r \".benchmarks[] | { name: .fullname, mean: .criterion_estimates_v1.mean.point_estimate, std: .criterion_estimates_v1.std_dev.point_estimate } | @base64\"); do\n    _jq() {\n      echo ${item} | base64 --decode | jq -r ${1}\n    }\n\n    export METRICS_MEAN+=\" --metrics $(echo ${{ matrix.bench.name }} | sed -e 's/turbopack-//g').$(_jq \".name\" | sed -e 's/\\/bench_/\\//g' | sed -e 's/\\/Turbopack /\\//g' | sed -e 's/ modules//g'| sed -e 's/ /./g' | sed -e 's/\\//./g').mean:$(printf \"%0.2f\" $(_jq \".mean\"))\"\n    export METRICS_STD+=\" --metrics $(echo ${{ matrix.bench.name }} | sed -e 's/turbopack-//g').$(_jq \".name\" | sed -e 's/\\/bench_/\\//g' | sed -e 's/\\/Turbopack /\\//g' | sed -e 's/ modules//g'| sed -e 's/ /./g' | sed -e 's/\\//./g').std:$(printf \"%0.2f\" $(_jq \".std\"))\"\ndone\necho \"Sending metrics $METRICS_MEAN\"\ndatadog-ci metric --level pipeline --no-fail $METRICS_MEAN\necho \"Sending metrics $METRICS_STD\"\ndatadog-ci metric --level pipeline --no-fail $METRICS_STD\n"
            },
            {
                "id": 11,
                "name": "Upload results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 12,
                "name": "Clear benchmarks",
                "run": "rm -rf target/criterion"
            },
            {
                "id": 1,
                "name": "Get current date",
                "run": "echo \"year=$(date +'%Y')\" >> $GITHUB_OUTPUT\necho \"month=$(date +'%m')\" >> $GITHUB_OUTPUT\necho \"date=$(date +'%s')\" >> $GITHUB_OUTPUT\necho \"pretty=$(date +'%Y-%m-%d %H:%M')\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 2,
                "name": "Checkout benchmark-data",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Download benchmark data",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Copy benchmark results",
                "run": "find artifacts -size 0 -delete\nmkdir -p data/${{ steps.date.outputs.year }}/${{ steps.date.outputs.month }}/ubuntu-latest-8-core/${{ steps.date.outputs.date }}-${{ github.sha }}/\nmv artifacts/bench_* data/${{ steps.date.outputs.year }}/${{ steps.date.outputs.month }}/ubuntu-latest-8-core/${{ steps.date.outputs.date }}-${{ github.sha }}/\n"
            },
            {
                "id": 5,
                "name": "Git pull",
                "run": "git pull --depth=1 --no-tags origin benchmark-data"
            },
            {
                "id": 6,
                "name": "Push data to branch",
                "run": "stefanzweifel/git-auto-commit-action@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Fetch the base branch",
                "run": "git -c protocol.version=2 fetch --no-tags --progress --no-recurse-submodules --depth=1 origin +${{ github.base_ref }}:base"
            },
            {
                "id": 3,
                "name": "Setup Node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 4,
                "name": "Setup Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 5,
                "name": "Benchmark and compare with base branch",
                "run": "sokra/criterion-compare-action@main"
            },
            {
                "id": 1,
                "name": "Compute info",
                "run": "cancelled=false\nfailure=false\nsubjob () {\n  local result=$1\n  local name=$2\n  echo \"$name: $result\"\n  if [ \"$result\" = \"cancelled\" ]; then\n    cancelled=true\n  elif [ \"$result\" != \"success\" ] && [ \"$result\" != \"skipped\" ]; then\n    echo \"- $name\" >> failures.md\n    failure=true\n  fi\n}\nsubjob ${{needs.determine_jobs.result}} \"Determining jobs\"\nsubjob ${{needs.turbopack_rust_check.result}} \"Turbopack Rust checks\"\nsubjob ${{needs.turbopack_rust_bench.result}} \"Turbopack Rust benchmarks (non-blocking)\"\nif [ \"$cancelled\" = \"true\" ]; then\n   echo \"cancelled=true\" >> $GITHUB_OUTPUT\nelif [ \"$failure\" = \"true\" ]; then\n  echo \"failure=true\" >> $GITHUB_OUTPUT\nelse\n  echo \"success=true\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 2,
                "name": "Add failure prose text",
                "run": "echo \"## \u26a0\ufe0f Turbopack Benchmark CI failed \u26a0\ufe0f\" > comment.md\necho >> comment.md\necho \"The following steps have failed in CI:\" >> comment.md\necho >> comment.md\ncat failures.md >> comment.md\necho >> comment.md\necho \"See [workflow summary](https://github.com/vercel/turbo/actions/runs/${{ github.run_id }}) for details\">> comment.md\necho >> comment.md\necho \"<!-- CI TURBOPACK BENCH COMMENT -->\" >> comment.md\n"
            },
            {
                "id": 3,
                "name": "Add success prose text",
                "run": "echo \"## \ud83d\udfe2 Turbopack Benchmark CI successful \ud83d\udfe2\" > comment.md\necho >> comment.md\necho \"Thanks\" >> comment.md\necho >> comment.md\necho \"<!-- CI TURBOPACK BENCH COMMENT -->\" >> comment.md\n"
            },
            {
                "id": 4,
                "name": "Find PR Comment",
                "run": "peter-evans/find-comment@v2"
            },
            {
                "id": 5,
                "name": "Create or update PR comment",
                "run": "peter-evans/create-or-update-comment@v2"
            },
            {
                "id": 6,
                "name": "It's not fine",
                "run": "exit 1"
            },
            {
                "id": 7,
                "name": "It's fine",
                "run": "echo Ok"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Setup Turborepo Environment",
                "run": "./.github/actions/setup-turborepo-environment"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "pnpm -F cli build:release"
            },
            {
                "id": 5,
                "name": "Run benchmarks",
                "run": "pnpm -F @turbo/benchmark benchmark"
            },
            {
                "id": 6,
                "name": "Save to Tinybird",
                "run": "curl \\\n  -i \\\n  -F \"ndjson=@./packages/turbo-benchmark/tinybird.ndjson\" \\\n  -X POST \\\n  -H 'Authorization: Bearer ${{ secrets.TINYBIRD_TOKEN }}' \\\n  'https://api.us-east.tinybird.co/v0/datasources?format=ndjson&name=turbo_benchmarks&mode=append'\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set filename for profile",
                "run": "echo 'file_basename=${{ matrix.os.name }}' >> \"$GITHUB_OUTPUT\"\necho 'filename=${{ matrix.os.name }}.json' >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 3,
                "name": "Display filename",
                "run": "echo \"${{ steps.filename.outputs.filename }}\""
            },
            {
                "id": 4,
                "name": "Add rustup for windows",
                "run": "rustup target add x86_64-pc-windows-gnu"
            },
            {
                "id": 5,
                "name": "Setup Turborepo Environment",
                "run": "./.github/actions/setup-turborepo-environment"
            },
            {
                "id": 6,
                "name": "Build Turborepo from source",
                "run": "pnpm -F cli build:release"
            },
            {
                "id": 7,
                "name": "Run benchmarks",
                "run": "pnpm -F @turbo/benchmark ttft \"${{ steps.filename.outputs.filename }}\""
            },
            {
                "id": 8,
                "name": "Upload Artifacts",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Node",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Download profiles",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Display TTFT Data",
                "run": "ls -al packages/turbo-benchmark/profiles\ncat packages/turbo-benchmark/profiles/ubuntu-ttft.json\ncat packages/turbo-benchmark/profiles/macos-ttft.json\ncat packages/turbo-benchmark/profiles/windows-ttft.json\n"
            },
            {
                "id": 5,
                "name": "Send data to TinyBird",
                "run": "cd packages/turbo-benchmark\nnode -r esbuild-register ./src/ttft/tinybird.ts profiles/ubuntu-ttft.json ${{github.run_id}}\nnode -r esbuild-register ./src/ttft/tinybird.ts profiles/macos-ttft.json ${{github.run_id}}\nnode -r esbuild-register ./src/ttft/tinybird.ts profiles/windows-ttft.json ${{github.run_id}}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Node",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Download profiles",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Display TTFT Data",
                "run": "ls -al packages/turbo-benchmark/profiles\ncat packages/turbo-benchmark/profiles/ubuntu-ttft.json\ncat packages/turbo-benchmark/profiles/macos-ttft.json\ncat packages/turbo-benchmark/profiles/windows-ttft.json\n"
            },
            {
                "id": 5,
                "name": "Create Slack payload",
                "run": "cd packages/turbo-benchmark\nnode -r esbuild-register ./src/ttft/slack.ts ${{github.run_id}}\n"
            },
            {
                "id": 6,
                "name": "Debug Slack payload",
                "run": "cat packages/turbo-benchmark/slack-payload.json | jq"
            },
            {
                "id": 7,
                "name": "Send payload to slack",
                "run": "slackapi/slack-github-action@v1.23.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 4,
                "name": "Install hoisted npm dependencies",
                "run": "echo 'node-linker = \"hoisted\"' > .npmrc\npnpm install -r --side-effects-cache false\n"
            },
            {
                "id": 5,
                "name": "Install nextest",
                "run": "taiki-e/install-action@v2"
            },
            {
                "id": 6,
                "name": "Build benchmark",
                "run": "cargo nextest run --no-run ${{ env.BENCH_ARGS }}\n"
            },
            {
                "id": 7,
                "name": "Run benchmark",
                "run": "cargo nextest run --test-threads 1 --no-fail-fast ${{ env.BENCH_ARGS }}\n"
            },
            {
                "id": 8,
                "name": "Show benchmark result",
                "run": "cargo xtask nft-bench-result"
            },
            {
                "id": 1,
                "name": "Dependabot metadata",
                "run": "dependabot/fetch-metadata@v1"
            },
            {
                "id": 2,
                "name": "Approve a PR",
                "run": "gh pr review --approve \"$PR_URL\""
            },
            {
                "id": 1,
                "name": "Dependabot metadata",
                "run": "dependabot/fetch-metadata@v1"
            },
            {
                "id": 2,
                "name": "Enable auto-merge for Dependabot PRs",
                "run": "gh pr merge --auto --squash \"$PR_URL\""
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "CI related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 3,
                "name": "Rust related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 4,
                "name": "Formatting related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 3,
                "name": "Run cargo fmt check",
                "run": "cargo fmt --check\n"
            },
            {
                "id": 4,
                "name": "Check Cargo.toml formatting (taplo)",
                "run": "npx @taplo/cli@0.5.2 format --check"
            },
            {
                "id": 5,
                "name": "Check licenses",
                "run": "EmbarkStudios/cargo-deny-action@v1"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Node",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Install Global Turbo",
                "run": "./.github/actions/install-global-turbo"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "turbo run lint \\\n--filter=!@vercel/devlow-bench \\\n--filter=!@vercel/experimental-nft-next-plugin \\\n--filter=!@vercel/experimental-nft-next-plugin \\\n--filter=!turbopack-bump-action \\\n--filter=!next-integration-stat \\\n--env-mode=strict\n"
            },
            {
                "id": 1,
                "name": "Checkout repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Container",
                "run": "${{ matrix.settings.container-setup }}"
            },
            {
                "id": 3,
                "name": "Setup Protoc",
                "run": "arduino/setup-protoc@v1.2.0"
            },
            {
                "id": 4,
                "name": "Setup capnproto",
                "run": "./.github/actions/setup-capnproto"
            },
            {
                "id": 5,
                "name": "Rust Setup",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 6,
                "name": "Build Setup",
                "run": "${{ matrix.settings.setup }}"
            },
            {
                "id": 7,
                "name": "Build",
                "run": "${{ matrix.settings.rust-build-env }} cargo build --profile release-turborepo-lsp -p turborepo-lsp --target ${{ matrix.settings.target }}"
            },
            {
                "id": 8,
                "name": "Upload Artifacts",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Cleanup",
                "run": "gh extension install actions/gh-actions-cache\n\nREPO=${{ github.repository }}\nBRANCH=${{ github.ref }}\n\necho \"Fetching list of cache key\"\ncacheKeysForPR=$(gh actions-cache list -R \"$REPO\" -B \"$BRANCH\" --limit 100 | cut -f 1)\n\n## Setting this to not fail the workflow while deleting cache keys.\nset +e\necho \"Deleting caches...\"\nfor cacheKey in $cacheKeysForPR\ndo\n    gh actions-cache delete \"$cacheKey\" -R \"$REPO\" -B \"$BRANCH\" --confirm\ndone\necho \"Done\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 4,
                "name": "Build packages",
                "run": "pnpx turbo@canary run build:ts"
            },
            {
                "id": 5,
                "name": "Write NPM_TOKEN",
                "run": "echo \"//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN_ELEVATED }}\" > ~/.npmrc"
            },
            {
                "id": 6,
                "name": "Publish",
                "run": "cargo xtask workspace --publish"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "CI related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 3,
                "name": "/packages related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 4,
                "name": "Docs related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 1,
                "name": "Determine fetch depth",
                "run": "echo \"depth=$(( ${{ github.event.pull_request.commits || 1 }} + 1 ))\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Setup Turborepo Environment",
                "run": "./.github/actions/setup-turborepo-environment"
            },
            {
                "id": 4,
                "name": "Install Global Turbo",
                "run": "./.github/actions/install-global-turbo"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "TURBO_API= turbo run check-types test --filter=\"!turborepo-repository\" --filter={./packages/*}...[${{ github.event.pull_request.base.sha || 'HEAD^1' }}] --color --env-mode=strict\n"
            },
            {
                "id": 1,
                "name": "Compute info",
                "run": "cancelled=false\nfailure=false\n\nsubjob () {\n  local result=$1\n  if [ \"$result\" = \"cancelled\" ]; then\n    cancelled=true\n  elif [ \"$result\" != \"success\" ] && [ \"$result\" != \"skipped\" ]; then\n    failure=true\n  fi\n}\n\nsubjob ${{needs.determine_jobs.result}}\nsubjob ${{needs.js_packages.result}}\n\nif [ \"$cancelled\" = \"true\" ]; then\n    echo \"cancelled=true\" >> $GITHUB_OUTPUT\nelif [ \"$failure\" = \"true\" ]; then\n  echo \"failure=true\" >> $GITHUB_OUTPUT\nelse\n  echo \"success=true\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 2,
                "name": "Failed",
                "run": "exit 1"
            },
            {
                "id": 3,
                "name": "Succeeded",
                "run": "echo Ok"
            },
            {
                "id": 1,
                "name": "Set git to use LF",
                "run": "git config --global core.autocrlf false\ngit config --global core.eol lf\n"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Setup Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 4,
                "name": "Setup Node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 5,
                "name": "Build benchmarks for tests",
                "run": "cargo tp-bench-test --no-run\n"
            },
            {
                "id": 6,
                "name": "Run cargo test on benchmarks",
                "run": "cargo tp-bench-test\n"
            },
            {
                "id": 7,
                "name": "Build benchmarks for tests for other bundlers",
                "run": "cargo test --benches --release -p turbopack-bench --no-run\n"
            },
            {
                "id": 8,
                "name": "Run cargo test on benchmarks for other bundlers",
                "run": "cargo test --benches --release -p turbopack-bench\n"
            },
            {
                "id": 1,
                "name": "Checkout Repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Tag nightly",
                "run": "./.github/actions/turbopack-bump"
            },
            {
                "id": 1,
                "name": "Find PR Comment",
                "run": "peter-evans/find-comment@v2"
            },
            {
                "id": 2,
                "name": "Create or update PR comment",
                "run": "peter-evans/create-or-update-comment@v2"
            },
            {
                "id": 3,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 4,
                "name": "CI related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 5,
                "name": "Root cargo related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 6,
                "name": "Rust related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 7,
                "name": "Turbopack related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 8,
                "name": "Turbopack Benchmark related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 9,
                "name": "Turbopack TypeScript related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 10,
                "name": "Turborepo Rust related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 11,
                "name": "Formatting related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pnpm install -r --side-effects-cache false"
            },
            {
                "id": 4,
                "name": "Check turbopack-node types",
                "run": "pnpm run check"
            },
            {
                "id": 5,
                "name": "Check turbopack-cli types",
                "run": "pnpm run check"
            },
            {
                "id": 6,
                "name": "Check turbopack-ecmascript-runtime types",
                "run": "pnpm run check"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 3,
                "name": "Run cargo check release",
                "run": "RUSTFLAGS=\"-D warnings -A deprecated\" cargo groups check turbopack --features rustls-tls --release\n"
            },
            {
                "id": 4,
                "name": "Run cargo check for the wasi targets",
                "run": "CARGO_BUILD_TARGET=\"wasm32-wasip1-threads\" RUSTFLAGS=\"-D warnings -A deprecated\" cargo groups check turbopack-wasi --release\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 3,
                "name": "Run cargo clippy",
                "run": "RUSTFLAGS=\"-D warnings -A deprecated\" cargo groups clippy turbopack --features rustls-tls\n"
            },
            {
                "id": 4,
                "name": "Run ast-grep lints",
                "run": "npx --package @ast-grep/cli -- ast-grep scan $(cargo groups list turbopack | awk '{ print $2 }' | tr '\\n' ' ')\n"
            },
            {
                "id": 1,
                "name": "Checkout Next.js",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 3,
                "name": "Build next-swc",
                "run": "export TURBOPACK_REMOTE=\"https://github.com/vercel/turbo\"\n\n# patch the turbo git dependency with the commit of the current PR.\nexport BINDING=$(printf 'patch.\"%s\".%s.git=\"%s?rev=%s\"' \"$TURBOPACK_REMOTE\" \"turbopack-binding\" \"$TURBOPACK_REMOTE\" \"$GITHUB_SHA\")\nexport TASKS=$(printf 'patch.\"%s\".%s.git=\"%s?rev=%s\"' \"$TURBOPACK_REMOTE\" \"turbo-tasks\" \"$TURBOPACK_REMOTE\" \"$GITHUB_SHA\")\nexport TASKS_FS=$(printf 'patch.\"%s\".%s.git=\"%s?rev=%s\"' \"$TURBOPACK_REMOTE\" \"turbo-tasks-fs\" \"$TURBOPACK_REMOTE\" \"$GITHUB_SHA\")\n\n# set pipefail so the exit code of `cargo check` gets preserved\n(set -o pipefail && \\\ncargo check \\\n  --config $BINDING --config $TASKS --config $TASKS_FS \\\n  --all -p next-swc-api \\\n  --no-default-features --features rustls-tls \\\n  --message-format short --quiet \\\n2>&1 | tee cargo_output.log)\n"
            },
            {
                "id": 4,
                "name": "Success Log",
                "run": "printf \":white_check_mark: This change can build \\`next-swc\\`\" > out.log\n"
            },
            {
                "id": 5,
                "name": "Post logs if there are errors",
                "run": "job_url=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}/jobs --paginate --jq '.jobs.[] | select(.name == \"Check next-swc\").html_url')\n\n# strip ansi colors with `sed`\necho \"\\\n\u26a0\ufe0f This change may fail to build \\`next-swc\\`.\n\n<details><summary>Logs</summary>\n<p>\n\n\\`\\`\\`\n$(cat cargo_output.log | sed -r \"s/\\x1B\\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g\")\n\\`\\`\\`\n</p>\n</details>\n\nSee [job summary]($job_url) for details\n\" > out.log\n"
            },
            {
                "id": 6,
                "name": "PR comment with file",
                "run": "thollander/actions-comment-pull-request@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 3,
                "name": "Setup Node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 4,
                "name": "Install tests dependencies",
                "run": "pnpm install -r --side-effects-cache false"
            },
            {
                "id": 5,
                "name": "Install tests dependencies in examples/with-yarn",
                "run": "npm install"
            },
            {
                "id": 6,
                "name": "Install nextest",
                "run": "taiki-e/install-action@v2"
            },
            {
                "id": 7,
                "name": "Build nextest",
                "run": "cargo tp-pre-test\n"
            },
            {
                "id": 8,
                "name": "Run nextest",
                "run": "cargo tp-test --profile tp-test-linux\n"
            },
            {
                "id": 9,
                "name": "Upload results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Set git to use LF line endings",
                "run": "git config --global core.autocrlf false\ngit config --global core.eol lf\n"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Setup Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 5,
                "name": "Setup Node.js",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 6,
                "name": "Prepare toolchain on Windows",
                "run": "pnpx node-gyp install\necho 'node-linker = \"hoisted\"' > crates/turbopack/tests/node-file-trace/.npmrc\n"
            },
            {
                "id": 7,
                "name": "Install tests dependencies",
                "run": "pnpm install -r --side-effects-cache false"
            },
            {
                "id": 8,
                "name": "Install tests dependencies in examples/with-yarn",
                "run": "npm install"
            },
            {
                "id": 9,
                "name": "Install nextest",
                "run": "taiki-e/install-action@v2"
            },
            {
                "id": 10,
                "name": "Build nextest",
                "run": "cargo tp-pre-test\n"
            },
            {
                "id": 11,
                "name": "Run nextest (Mac)",
                "run": "cargo tp-test --profile tp-test-mac\n"
            },
            {
                "id": 12,
                "name": "Run nextest (Windows)",
                "run": "cargo tp-test --profile tp-test-win\n"
            },
            {
                "id": 13,
                "name": "Upload results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Compute info",
                "run": "cancelled=false\nfailure=false\nsubjob () {\n  local result=$1\n  local name=$2\n  if [ \"$result\" = \"cancelled\" ]; then\n    cancelled=true\n  elif [ \"$result\" != \"success\" ] && [ \"$result\" != \"skipped\" ]; then\n    echo \"- $name\" >> failures.md\n    failure=true\n  fi\n}\nsubjob ${{needs.determine_jobs.result}} \"Determining jobs\"\nsubjob ${{needs.turbopack_rust_check.result}} \"Turbopack Rust checks\"\nsubjob ${{needs.turbopack_rust_clippy.result}} \"Turbopack Rust clippy\"\nsubjob ${{needs.turbopack_rust_test1.result}} \"Turbopack Rust tests (linux)\"\nsubjob ${{needs.turbopack_rust_test_bench1.result}} \"Turbopack Rust benchmark tests (linux)\"\nsubjob ${{needs.turbopack_typescript.result}} \"Turbopack Typescript checks\"\nif [ \"$cancelled\" = \"true\" ]; then\n   echo \"cancelled=true\" >> $GITHUB_OUTPUT\nelif [ \"$failure\" = \"true\" ]; then\n  echo \"failure=true\" >> $GITHUB_OUTPUT\nelse\n  echo \"success=true\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 2,
                "name": "Add failure prose text",
                "run": "echo \"## \u26a0 CI failed \u26a0\" > comment.md\necho >> comment.md\necho \"The following steps have failed in CI:\" >> comment.md\necho >> comment.md\ncat failures.md >> comment.md\necho >> comment.md\necho \"See [workflow summary](https://github.com/vercel/turbo/actions/runs/${{ github.run_id }}) for details\">> comment.md\necho >> comment.md\necho \"<!-- CI COMMENT -->\" >> comment.md\n"
            },
            {
                "id": 3,
                "name": "Add success prose text",
                "run": "echo \"## \ud83d\udfe2 CI likely successful \ud83d\udfe2\" > comment.md\necho >> comment.md\necho \"A few longer running steps are still running, but they should not be considered as blocking.\" >> comment.md\necho >> comment.md\necho \"See [workflow summary](https://github.com/vercel/turbo/actions/runs/${{ github.run_id }}) for details\">> comment.md\necho >> comment.md\necho \"<!-- CI COMMENT -->\" >> comment.md\n"
            },
            {
                "id": 4,
                "name": "Find PR Comment",
                "run": "peter-evans/find-comment@v2"
            },
            {
                "id": 5,
                "name": "Create or update PR comment",
                "run": "peter-evans/create-or-update-comment@v2"
            },
            {
                "id": 6,
                "name": "It's not fine",
                "run": "exit 1"
            },
            {
                "id": 7,
                "name": "It's fine",
                "run": "echo Ok"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "Install datadog",
                "run": "npm install -g @datadog/datadog-ci@2.18.1"
            },
            {
                "id": 4,
                "name": "Download test results",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 5,
                "name": "Upload",
                "run": "DD_ENV=ci datadog-ci junit upload --service Turbopack ./artifacts/test_reports/**/*.xml\n"
            },
            {
                "id": 1,
                "name": "Compute info",
                "run": "cancelled=false\nfailure=false\nsubjob () {\n  local result=$1\n  local name=$2\n  echo \"$name: $result\"\n  if [ \"$result\" = \"cancelled\" ]; then\n    cancelled=true\n  elif [ \"$result\" != \"success\" ] && [ \"$result\" != \"skipped\" ]; then\n    echo \"- $name\" >> failures.md\n    failure=true\n  fi\n}\nsubjob ${{needs.determine_jobs.result}} \"Determining jobs\"\nsubjob ${{needs.turbopack_rust_check.result}} \"Turbopack Rust checks\"\nsubjob ${{needs.turbopack_rust_clippy.result}} \"Turbopack Rust clippy\"\nsubjob ${{needs.turbopack_rust_test1.result}} \"Turbopack Rust tests (linux)\"\nsubjob ${{needs.turbopack_rust_test2.result}} \"Turbopack Rust tests (mac/win, non-blocking)\"\nsubjob ${{needs.turbopack_rust_test_bench1.result}} \"Turbopack Rust benchmark tests (linux)\"\nsubjob ${{needs.turbopack_rust_test_bench2.result}} \"Turbopack Rust benchmark tests (mac/win, non-blocking)\"\nsubjob ${{needs.turbopack_typescript.result}} \"Turbopack Typescript checks\"\nif [ \"$cancelled\" = \"true\" ]; then\n   echo \"cancelled=true\" >> $GITHUB_OUTPUT\nelif [ \"$failure\" = \"true\" ]; then\n  echo \"failure=true\" >> $GITHUB_OUTPUT\nelse\n  echo \"success=true\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 2,
                "name": "Add failure prose text",
                "run": "echo \"## \u26a0\ufe0f CI failed \u26a0\ufe0f\" > comment.md\necho >> comment.md\necho \"The following steps have failed in CI:\" >> comment.md\necho >> comment.md\ncat failures.md >> comment.md\necho >> comment.md\necho \"See [workflow summary](https://github.com/vercel/turbo/actions/runs/${{ github.run_id }}) for details\">> comment.md\necho >> comment.md\necho \"<!-- CI COMMENT -->\" >> comment.md\n"
            },
            {
                "id": 3,
                "name": "Add success prose text",
                "run": "echo \"## \ud83d\udfe2 CI successful \ud83d\udfe2\" > comment.md\necho >> comment.md\necho \"Thanks\" >> comment.md\necho >> comment.md\necho \"<!-- CI COMMENT -->\" >> comment.md\n"
            },
            {
                "id": 4,
                "name": "Find PR Comment",
                "run": "peter-evans/find-comment@v2"
            },
            {
                "id": 5,
                "name": "Create or update PR comment",
                "run": "peter-evans/create-or-update-comment@v2"
            },
            {
                "id": 6,
                "name": "It's not fine",
                "run": "exit 1"
            },
            {
                "id": 7,
                "name": "It's fine",
                "run": "echo Ok"
            },
            {
                "id": 1,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 2,
                "name": "create-turbo",
                "run": "npm install -g pnpm turbo@${{ inputs.version }}\npnpm dlx create-turbo@${{ inputs.version }} my-turborepo pnpm\n"
            },
            {
                "id": 3,
                "name": "Run build",
                "run": "cd my-turborepo\nturbo run build --filter=docs --filter=web --summarize --skip-infer -vvv\n"
            },
            {
                "id": 4,
                "name": "Grab Turborepo artifacts",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 2,
                "name": "create-turbo",
                "run": "npm install -g pnpm turbo@${{ inputs.version }}\npnpm dlx create-turbo@${{ inputs.version }} my-turborepo pnpm\n"
            },
            {
                "id": 3,
                "name": "Download cache artifacts",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Check for cache hit",
                "run": "cd my-turborepo\nrm .turbo/runs/*.json\nturbo run build --filter=docs --filter=web --summarize --skip-infer -vvv\ncat .turbo/runs/*.json | jq -e '.execution.cached == 2'\n"
            },
            {
                "id": 5,
                "name": "Check for functional server",
                "run": "curl https://raw.githubusercontent.com/vercel/turbo/main/scripts/server.js -O\nnode server.js my-turborepo/apps/docs\n"
            },
            {
                "id": 1,
                "name": "Install Packages",
                "run": "${{ matrix.settings.install }}"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Setup Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 4,
                "name": "Setup Node",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 5,
                "name": "Setup toolchain",
                "run": "${{ matrix.settings.setup }}"
            },
            {
                "id": 6,
                "name": "Build native library",
                "run": "export PATH=/usr/local/cargo/bin/rustup:/root/.cargo/bin:${PATH}\ncd packages/turbo-repository\n${{ matrix.settings.rust_env }} pnpm build:release --target=${{ matrix.settings.target }}\n"
            },
            {
                "id": 7,
                "name": "Upload Artifacts",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Configure git",
                "run": "git config --global user.name 'Turbobot'\ngit config --global user.email 'turbobot@vercel.com'\n"
            },
            {
                "id": 3,
                "name": "Download Artifacts",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Move artifacts into place",
                "run": "mv native-packages/turbo-library-aarch64-apple-darwin/@turbo/repository.darwin-arm64.node packages/turbo-repository/npm/darwin-arm64/\nmv native-packages/turbo-library-x86_64-apple-darwin/@turbo/repository.darwin-x64.node packages/turbo-repository/npm/darwin-x64/\nmv native-packages/turbo-library-aarch64-unknown-linux-gnu/@turbo/repository.linux-arm64-gnu.node packages/turbo-repository/npm/linux-arm64-gnu/\nmv native-packages/turbo-library-aarch64-unknown-linux-musl/@turbo/repository.linux-arm64-musl.node packages/turbo-repository/npm/linux-arm64-musl/\nmv native-packages/turbo-library-x86_64-unknown-linux-gnu/@turbo/repository.linux-x64-gnu.node packages/turbo-repository/npm/linux-x64-gnu/\nmv native-packages/turbo-library-x86_64-unknown-linux-musl/@turbo/repository.linux-x64-musl.node packages/turbo-repository/npm/linux-x64-musl/\nmv native-packages/turbo-library-aarch64-pc-windows-msvc/@turbo/repository.win32-arm64-msvc.node packages/turbo-repository/npm/win32-arm64-msvc/\nmv native-packages/turbo-library-x86_64-pc-windows-msvc/@turbo/repository.win32-x64-msvc.node packages/turbo-repository/npm/win32-x64-msvc/\n"
            },
            {
                "id": 5,
                "name": "Build Meta Package",
                "run": "cd packages/turbo-repository/js\nnpm run build\n"
            },
            {
                "id": 6,
                "name": "Package Artifacts",
                "run": "mkdir tarballs\nnpm pack packages/turbo-repository/npm/darwin-arm64\nnpm pack packages/turbo-repository/npm/darwin-x64\nnpm pack packages/turbo-repository/npm/linux-arm64-gnu\nnpm pack packages/turbo-repository/npm/linux-arm64-musl\nnpm pack packages/turbo-repository/npm/linux-x64-gnu\nnpm pack packages/turbo-repository/npm/linux-x64-musl\nnpm pack packages/turbo-repository/npm/win32-arm64-msvc\nnpm pack packages/turbo-repository/npm/win32-x64-msvc\nnpm pack packages/turbo-repository/js\nmv *.tgz tarballs/\n"
            },
            {
                "id": 7,
                "name": "Upload Artifacts",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 8,
                "name": "Publish Artifacts",
                "run": "npm config set --location=project \"//registry.npmjs.org/:_authToken\" ${NPM_TOKEN}\nVERSION=$(jq -r .version packages/turbo-repository/js/package.json)\ncd tarballs\nls\nTAG=\"canary\"\nnpm publish -ddd --tag ${TAG} --access public turbo-repository-darwin-arm64-${VERSION}.tgz\nnpm publish -ddd --tag ${TAG} --access public turbo-repository-darwin-x64-${VERSION}.tgz\nnpm publish -ddd --tag ${TAG} --access public turbo-repository-linux-arm64-gnu-${VERSION}.tgz\nnpm publish -ddd --tag ${TAG} --access public turbo-repository-linux-arm64-musl-${VERSION}.tgz\nnpm publish -ddd --tag ${TAG} --access public turbo-repository-linux-x64-gnu-${VERSION}.tgz\nnpm publish -ddd --tag ${TAG} --access public turbo-repository-linux-x64-musl-${VERSION}.tgz\nnpm publish -ddd --tag ${TAG} --access public turbo-repository-win32-arm64-msvc-${VERSION}.tgz\nnpm publish -ddd --tag ${TAG} --access public turbo-repository-win32-x64-msvc-${VERSION}.tgz\nnpm publish -ddd --tag ${TAG} --access public turbo-repository-${VERSION}.tgz\n"
            },
            {
                "id": 1,
                "name": "Determine fetch depth",
                "run": "echo \"depth=$(( ${{ github.event.pull_request.commits || 1 }} + 1 ))\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Setup Turborepo Environment",
                "run": "./.github/actions/setup-turborepo-environment"
            },
            {
                "id": 4,
                "name": "Install Global Turbo",
                "run": "./.github/actions/install-global-turbo"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "TURBO_API= turbo run test --filter \"turborepo-repository\" --color --env-mode=strict\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 3,
                "name": "Configure git",
                "run": "git config --global user.name 'Turbobot'\ngit config --global user.email 'turbobot@vercel.com'\n"
            },
            {
                "id": 4,
                "name": "Version",
                "run": "./scripts/version.js ${{ inputs.increment }}\ncat version.txt\n"
            },
            {
                "id": 5,
                "name": "Stage Commit",
                "run": "cd cli && make stage-release && echo \"STAGE_BRANCH=$(git branch --show-current)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 6,
                "name": "Show Stage Commit",
                "run": "echo \"${{ steps.stage.outputs.STAGE_BRANCH }}\""
            },
            {
                "id": 1,
                "name": "Show Stage Commit",
                "run": "echo \"${{ needs.stage.outputs.stage-branch }}\""
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Setup Turborepo Environment",
                "run": "./.github/actions/setup-turborepo-environment"
            },
            {
                "id": 4,
                "name": "Run Rust Unit Tests",
                "run": "cargo groups test turborepo"
            },
            {
                "id": 1,
                "name": "Show Stage Commit",
                "run": "echo \"${{ needs.stage.outputs.stage-branch }}\""
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Setup Turborepo Environment",
                "run": "./.github/actions/setup-turborepo-environment"
            },
            {
                "id": 4,
                "name": "Install Global Turbo",
                "run": "./.github/actions/install-global-turbo"
            },
            {
                "id": 5,
                "name": "Run JS Package Tests",
                "run": "turbo run check-types test --filter=\"./packages/*\" --color"
            },
            {
                "id": 1,
                "name": "Show Stage Commit",
                "run": "echo \"${{ needs.stage.outputs.stage-branch }}\""
            },
            {
                "id": 2,
                "name": "Checkout repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Setup Container",
                "run": "${{ matrix.settings.container-setup }}"
            },
            {
                "id": 4,
                "name": "Setup Protoc",
                "run": "arduino/setup-protoc@v2.1.0"
            },
            {
                "id": 5,
                "name": "Setup capnproto",
                "run": "./.github/actions/setup-capnproto"
            },
            {
                "id": 6,
                "name": "Setup Rust Up",
                "run": "curl --proto '=https' --tlsv1.2 --retry 10 --location --silent --show-error --fail \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\necho \"${CARGO_HOME:-$HOME/.cargo}/bin\" >> $GITHUB_PATH\n"
            },
            {
                "id": 7,
                "name": "Rust Setup",
                "run": "actions-rust-lang/setup-rust-toolchain@v1"
            },
            {
                "id": 8,
                "name": "Build Setup",
                "run": "${{ matrix.settings.setup }}"
            },
            {
                "id": 9,
                "name": "Build",
                "run": "${{ matrix.settings.rust-build-env }} cargo build --profile release-turborepo -p turbo --target ${{ matrix.settings.target }}"
            },
            {
                "id": 10,
                "name": "Upload Artifacts",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Show Stage Commit",
                "run": "echo \"${{ needs.stage.outputs.stage-branch }}\""
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "git fetch origin --tags"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/setup-node"
            },
            {
                "id": 5,
                "name": "Install Global Turbo",
                "run": "./.github/actions/install-global-turbo"
            },
            {
                "id": 6,
                "name": "Configure git",
                "run": "git config --global user.name 'Turbobot'\ngit config --global user.email 'turbobot@vercel.com'\n"
            },
            {
                "id": 7,
                "name": "Install GoReleaser",
                "run": "goreleaser/goreleaser-action@v3"
            },
            {
                "id": 8,
                "name": "Download Rust artifacts",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 9,
                "name": "Move Rust artifacts into place",
                "run": "mv rust-artifacts/turbo-aarch64-apple-darwin cli/dist-darwin-arm64\nmv rust-artifacts/turbo-aarch64-unknown-linux-musl cli/dist-linux-arm64\ncp -r rust-artifacts/turbo-x86_64-pc-windows-gnu cli/dist-windows-arm64\nmv rust-artifacts/turbo-x86_64-unknown-linux-musl cli/dist-linux-amd64\nmv rust-artifacts/turbo-x86_64-apple-darwin cli/dist-darwin-amd64\nmv rust-artifacts/turbo-x86_64-pc-windows-gnu cli/dist-windows-amd64\n"
            },
            {
                "id": 10,
                "name": "Perform Release",
                "run": "cd cli && make publish-turbo SKIP_PUBLISH=${{ inputs.dry_run && '--skip-publish' || '' }}"
            },
            {
                "id": 11,
                "name": "Upload Artifacts",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Show Stage Commit",
                "run": "echo \"${{ needs.stage.outputs.stage-branch }}\""
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@1.0.0"
            },
            {
                "id": 3,
                "name": "Get version",
                "run": "echo \"version=$(head -n 1 version.txt)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 4,
                "name": "Create pull request",
                "run": "thomaseizinger/create-pull-request@master"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "CI related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 3,
                "name": "Root cargo related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 4,
                "name": "Turborepo version changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 5,
                "name": "Rust related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 6,
                "name": "Turborepo Rust related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 7,
                "name": "Turborepo integration tests changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 8,
                "name": "Examples related changes",
                "run": "technote-space/get-diff-action@v6"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Run sccache-cache",
                "run": "mozilla-actions/sccache-action@v0.0.3"
            },
            {
                "id": 3,
                "name": "Setup Turborepo Environment",
                "run": "./.github/actions/setup-turborepo-environment"
            },
            {
                "id": 4,
                "name": "Install Global Turbo",
                "run": "./.github/actions/install-global-turbo"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "if [ -z \"${RUSTC_WRAPPER}\" ]; then\n  unset RUSTC_WRAPPER\nfi\nTURBO_API= turbo run build --filter=cli --color --env-mode=strict --token=${{ secrets.TURBO_TOKEN }} --team=${{ vars.TURBO_TEAM }}\n"
            },
            {
                "id": 6,
                "name": "Run sccache stat for check",
                "run": "${SCCACHE_PATH} --show-stats"
            },
            {
                "id": 1,
                "name": "set crlf",
                "run": "git config --global core.autocrlf input"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Setup Turborepo Environment",
                "run": "./.github/actions/setup-turborepo-environment"
            },
            {
                "id": 4,
                "name": "Install Global Turbo",
                "run": "./.github/actions/install-global-turbo"
            },
            {
                "id": 5,
                "name": "Setup Graphviz",
                "run": "ts-graphviz/setup-graphviz@v1"
            },
            {
                "id": 6,
                "name": "Cache Prysk",
                "run": "actions/cache@v3"
            },
            {
                "id": 7,
                "name": "Integration Tests",
                "run": "turbo run test --filter=turborepo-tests-integration --color --env-mode=strict --token=${{ secrets.TURBO_TOKEN }} --team=${{ vars.TURBO_TEAM }}"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable corepack",
                "run": "corepack disable"
            },
            {
                "id": 3,
                "name": "Setup Turborepo Environment",
                "run": "./.github/actions/setup-turborepo-environment"
            },
            {
                "id": 4,
                "name": "Install Global Turbo",
                "run": "./.github/actions/install-global-turbo"
            },
            {
                "id": 5,
                "name": "Check examples",
                "run": "turbo run test --filter=\"@turborepo-examples-tests/*\" --continue --token=${{ secrets.TURBO_TOKEN }} --team=${{ vars.TURBO_TEAM }} --env-mode=strict --concurrency=1"
            },
            {
                "id": 6,
                "name": "Disable corepack again",
                "run": "corepack disable"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Rust",
                "run": "./.github/actions/setup-rust"
            },
            {
                "id": 3,
                "name": "Run cargo fmt check",
                "run": "cargo fmt --check\n"
            },
            {
                "id": 4,
                "name": "Check Cargo.toml formatting (taplo)",
                "run": "npx @taplo/cli@0.5.2 format --check"
            },
            {
                "id": 5,
                "name": "Check licenses",
                "run": "EmbarkStudios/cargo-deny-action@v1"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Turborepo Environment",
                "run": "./.github/actions/setup-turborepo-environment"
            },
            {
                "id": 3,
                "name": "Run cargo check",
                "run": "cargo groups check turborepo-libraries --features rustls-tls\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Turborepo Environment",
                "run": "./.github/actions/setup-turborepo-environment"
            },
            {
                "id": 3,
                "name": "Run cargo clippy",
                "run": "cargo groups clippy turborepo-libraries --features rustls-tls -- --deny clippy::all\n"
            },
            {
                "id": 4,
                "name": "Run ast-grep lints",
                "run": "npx --package @ast-grep/cli -- ast-grep scan $(cargo groups list turborepo-libraries | awk '{ print $2 }' | tr '\\n' ' ')\n"
            },
            {
                "id": 1,
                "name": "Set git to use LF line endings",
                "run": "git config --global core.autocrlf false\ngit config --global core.eol lf\n"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Setup Turborepo Environment",
                "run": "./.github/actions/setup-turborepo-environment"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "cargo groups test turborepo-libraries\n"
            },
            {
                "id": 1,
                "name": "Compute info",
                "run": "cancelled=false\nfailure=false\n\nsubjob () {\n  local result=$1\n  if [ \"$result\" = \"cancelled\" ]; then\n    cancelled=true\n  elif [ \"$result\" != \"success\" ] && [ \"$result\" != \"skipped\" ]; then\n    failure=true\n  fi\n}\n\nsubjob ${{needs.determine_jobs.result}}\nsubjob ${{needs.build_turborepo.result}}\nsubjob ${{needs.integration.result}}\nsubjob ${{needs.examples.result}}\nsubjob ${{needs.rust_lint.result}}\nsubjob ${{needs.rust_check.result}}\nsubjob ${{needs.rust_clippy.result}}\nsubjob ${{needs.rust_test.result}}\n\nif [ \"$cancelled\" = \"true\" ]; then\n    echo \"cancelled=true\" >> $GITHUB_OUTPUT\nelif [ \"$failure\" = \"true\" ]; then\n  echo \"failure=true\" >> $GITHUB_OUTPUT\nelse\n  echo \"success=true\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 2,
                "name": "Failed",
                "run": "exit 1"
            },
            {
                "id": 3,
                "name": "Succeeded",
                "run": "echo Ok"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "corepack enable"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Get Top Issues",
                "run": "node ./packages/top-issues/src/index.mjs packages/top-issues"
            },
            {
                "id": 6,
                "name": "Show slack payload",
                "run": "cat packages/top-issues/slack-payload.json"
            },
            {
                "id": 7,
                "name": "Send payload to slack",
                "run": "slackapi/slack-github-action@v1.23.0"
            }
        ],
        "vercel/examples": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up pnpm",
                "run": "pnpm/action-setup@v2.2.2"
            },
            {
                "id": 3,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "pnpm i --frozen-lockfile --ignore-scripts"
            },
            {
                "id": 5,
                "name": "Generate E2E tests",
                "run": "pnpm build --filter=@vercel/playwright"
            },
            {
                "id": 6,
                "name": "Run E2E tests",
                "run": "pnpm test --filter=@vercel/playwright"
            },
            {
                "id": 7,
                "name": "Upload test results to GitHub",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up pnpm",
                "run": "pnpm/action-setup@v2.2.2"
            },
            {
                "id": 3,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "pnpm i --frozen-lockfile --ignore-scripts"
            },
            {
                "id": 5,
                "name": "Create Release PR or Publish Packages",
                "run": "changesets/action@v1"
            }
        ]
    },
    "tensorflow": {
        "tensorflow/tensorflow": [
            {
                "id": 1,
                "name": "Stop old running containers (if any)",
                "run": "running_containers=$(docker ps -q) && \\\nif [[ $running_containers == \"\" ]]; then\n  echo \"No running containers\";\nelse\n  echo \"Running container(s) found\" && \\\n  docker stop $running_containers;\nfi\ndocker container prune -f\n"
            },
            {
                "id": 2,
                "name": "Clean repository",
                "run": "find /home/ubuntu/actions-runner/_work/tensorflow/tensorflow/. -name . -o -prune -exec sudo rm -rf -- {} + || true"
            },
            {
                "id": 3,
                "name": "Checkout repository for nightly (skipped for releases)",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 4,
                "name": "Checkout repository for releases (skipped for nightly)",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 5,
                "name": "Build and test pip wheel",
                "run": "is_nightly=0 && tf_project_name='tensorflow_cpu_aws' && ${{ github.event_name == 'schedule' }} && is_nightly=1 && tf_project_name='tf_nightly_cpu_aws'\necho \"PyPI project name:\" $tf_project_name\nCI_DOCKER_BUILD_EXTRA_PARAMS=\"--build-arg py_major_minor_version=${{ matrix.pyver }} --build-arg is_nightly=${is_nightly} --build-arg tf_project_name=${tf_project_name}\" \\\n./tensorflow/tools/ci_build/ci_build.sh cpu.arm64 bash tensorflow/tools/ci_build/rel/ubuntu/cpu_arm64_test_build.sh\n"
            },
            {
                "id": 6,
                "name": "Upload pip wheel to PyPI",
                "run": "python3 -m twine upload --verbose /home/ubuntu/actions-runner/_work/tensorflow/tensorflow/whl/* -u \"__token__\" -p ${{ secrets.AWS_PYPI_ACCOUNT_TOKEN }}"
            },
            {
                "id": 1,
                "name": "Stop old running containers (if any)",
                "run": "running_containers=$(docker ps -q) && \\\nif [[ $running_containers == \"\" ]]; then\n  echo \"No running containers\";\nelse\n  echo \"Running container(s) found\" && \\\n  docker stop $running_containers;\nfi\ndocker container prune -f\ndocker image prune -af\n"
            },
            {
                "id": 2,
                "name": "Clean repository",
                "run": "find /home/ubuntu/actions-runner/_work/tensorflow/tensorflow/. -name . -o -prune -exec sudo rm -rf -- {} + || true"
            },
            {
                "id": 3,
                "name": "Checkout repository for nightly (skipped for releases)",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 4,
                "name": "Checkout repository",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 5,
                "name": "Build binary and run C++ tests",
                "run": "is_nightly=0 && tf_project_name='tf_ci_ext_c' && ${{ github.event_name == 'schedule' }} && is_nightly=1 && tf_project_name='tf_nightly_ci_ext_c'\nCI_DOCKER_BUILD_EXTRA_PARAMS=\"--build-arg py_major_minor_version=${{ matrix.pyver }} --build-arg is_nightly=${is_nightly} --build-arg tf_project_name=${tf_project_name}\" \\\n./tensorflow/tools/ci_build/ci_build.sh cpu.arm64 bash tensorflow/tools/ci_build/rel/ubuntu/cpu_arm64_test_cpp.sh\n"
            },
            {
                "id": 1,
                "name": "Stop old running containers (if any)",
                "run": "running_containers=$(docker ps -q) && \\\nif [[ $running_containers == \"\" ]]; then\n  echo \"No running containers\";\nelse\n  echo \"Running container(s) found\" && \\\n  docker stop $running_containers;\nfi\ndocker container prune -f\ndocker image prune -af\n"
            },
            {
                "id": 2,
                "name": "Clean repository",
                "run": "find /home/ubuntu/actions-runner/_work/tensorflow/tensorflow/. -name . -o -prune -exec sudo rm -rf -- {} + || true"
            },
            {
                "id": 3,
                "name": "Checkout repository for nightly (skipped for releases)",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 4,
                "name": "Checkout repository",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 5,
                "name": "Build binary and run python tests on nightly for all python versions",
                "run": "is_nightly=0 && tf_project_name='tf_ci_ext' && ${{ github.event_name == 'schedule' }} && is_nightly=1 && tf_project_name='tf_nightly_ci_ext'\nCI_DOCKER_BUILD_EXTRA_PARAMS=\"--build-arg py_major_minor_version=${{ matrix.pyver }} --build-arg is_nightly=${is_nightly} --build-arg tf_project_name=${tf_project_name}\" \\\n./tensorflow/tools/ci_build/ci_build.sh cpu.arm64 bash tensorflow/tools/ci_build/rel/ubuntu/cpu_arm64_test.sh\n"
            },
            {
                "id": 1,
                "name": "Stop old running containers (if any)",
                "run": "running_containers=$(docker ps -q) && \\\nif [[ $running_containers == \"\" ]]; then\n  echo \"No running containers\";\nelse\n  echo \"Running container(s) found\" && \\\n  docker stop $running_containers;\nfi\ndocker container prune -f\n"
            },
            {
                "id": 2,
                "name": "Clean repository",
                "run": "find /home/ubuntu/actions-runner/_work/tensorflow/tensorflow/. -name . -o -prune -exec sudo rm -rf -- {} + || true"
            },
            {
                "id": 3,
                "name": "Checkout repository",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 4,
                "name": "Build binary and run python tests",
                "run": "CI_DOCKER_BUILD_EXTRA_PARAMS=\"--pull --build-arg py_major_minor_version=${{ matrix.pyver }} --build-arg is_nightly=1 --build-arg tf_project_name=tf_nightly_ci\" \\\n./tensorflow/tools/ci_build/ci_build.sh cpu.arm64 bash tensorflow/tools/ci_build/rel/ubuntu/cpu_arm64_test.sh\n"
            },
            {
                "id": 1,
                "name": "Check out a copy of the repository",
                "run": "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"
            },
            {
                "id": 2,
                "name": "Check whether the citation metadata from CITATION.cff is valid",
                "run": "citation-file-format/cffconvert-github-action@4cf11baa70a673bfdf9dad0acc7ee33b3f4b6084"
            },
            {
                "id": 1,
                "name": "Checkout repo",
                "run": "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"
            },
            {
                "id": 2,
                "name": "Create a new Github Issue",
                "run": "actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"
            },
            {
                "id": 2,
                "name": "Get file changes",
                "run": "trilom/file-changes-action@a6ca26c14274c33b15e6499323aac178af06ad4b"
            },
            {
                "id": 3,
                "name": "Report list of changed files",
                "run": "echo Changed files: ${{ steps.get_file_changes.outputs.files }}\n"
            },
            {
                "id": 4,
                "name": "Set up Python 3.9",
                "run": "actions/setup-python@2c3dd9e7e29afd70cc0950079bde6c979d1f69f9"
            },
            {
                "id": 5,
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip\npip install pylint==2.13.9 numpy wheel\n"
            },
            {
                "id": 6,
                "name": "Run PyLint on changed files",
                "run": "echo \"${{ steps.get_file_changes.outputs.files}}\" | tr \" \" \"\\n\" | grep \".py$\" | xargs pylint --rcfile=tensorflow/tools/ci_build/pylintrc\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"
            },
            {
                "id": 2,
                "name": "Get some helpful info for formatting",
                "run": "git config --global user.name \"TensorFlow Release Automation\"\ngit config --global user.email \"jenkins@tensorflow.org\"\ngit fetch origin master\ngit cherry-pick ${{ github.event.inputs.git_commit }}\necho \"SHORTSHA=$(git log -1 ${{ github.event.inputs.git_commit }} --format=\"%h\")\" >> \"$GITHUB_OUTPUT\"\necho \"TITLE=$(git log -1 ${{ github.event.inputs.git_commit }} --format=\"%s\")\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 3,
                "name": "Create Pull Request with changes",
                "run": "peter-evans/create-pull-request@2b011faafdcbc9ceb11414d64d0573f37c774b04"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@97a0fba1372883ab732affbe8f94b823f91727db"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@1b1aada464948af03b950897e5eb522f92603cc2"
            },
            {
                "id": 1,
                "name": "Delete unnecessary tools folder",
                "run": "rm -rf /opt/hostedtoolcache"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325"
            },
            {
                "id": 4,
                "name": "Login to DockerHub",
                "run": "docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a"
            },
            {
                "id": 5,
                "name": "Login to GCR",
                "run": "docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a"
            },
            {
                "id": 6,
                "name": "Generate variables for cache busting and tag naming",
                "run": "echo \"DATE=$(date +'%Y-%m-%d')\" >> \"$GITHUB_OUTPUT\"\n# Converts r2.9 to just 2.9\necho \"REF=$(echo $GITHUB_REF_NAME | sed 's/r//g')\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 7,
                "name": "Build and push",
                "run": "docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5"
            },
            {
                "id": 8,
                "name": "Image digest",
                "run": "echo ${{ steps.docker_build.outputs.digest }}"
            },
            {
                "id": 1,
                "name": "Delete unnecessary tools folder",
                "run": "df -h\nrm -rf /opt/hostedtoolcache\ndf -h\n"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325"
            },
            {
                "id": 4,
                "name": "Login to GCR",
                "run": "docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a"
            },
            {
                "id": 5,
                "name": "Grab the date to do cache busting (assumes same day OK to keep)",
                "run": "echo \"DATE=$(date +'%Y-%m-%d')\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 6,
                "name": "Build containers, and push to GCR only if the 'build and push to gcr.io for staging' label is applied",
                "run": "docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5"
            },
            {
                "id": 7,
                "name": "Add a comment with the pushed containers",
                "run": "mshick/add-pr-comment@a65df5f64fc741e91c59b8359a4bc56e57aaf5b1"
            },
            {
                "id": 8,
                "name": "Print image digest",
                "run": "echo ${{ steps.docker_build.outputs.digest }}"
            },
            {
                "id": 1,
                "name": "Delete unnecessary tools folder",
                "run": "rm -rf /opt/hostedtoolcache"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325"
            },
            {
                "id": 4,
                "name": "Login to DockerHub",
                "run": "docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a"
            },
            {
                "id": 5,
                "name": "Login to GCR",
                "run": "docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a"
            },
            {
                "id": 6,
                "name": "Grab the upcoming TF version to tag this container",
                "run": "# [[:digit:]] searches for numbers and \\+ joins them together\nmajor_version=$(grep \"^#define TF_MAJOR_VERSION\" ./tensorflow/core/public/version.h | grep -o \"[[:digit:]]\\+\")\nminor_version=$(grep \"^#define TF_MINOR_VERSION\" ./tensorflow/core/public/version.h | grep -o \"[[:digit:]]\\+\")\necho \"TF_VERSION=${major_version}.${minor_version}\" >> \"$GITHUB_OUTPUT\"\n# Also get the current date to do cache busting. Assumes one day\n# is an ok range for rebuilds\necho \"DATE=$(date +'%Y-%m-%d')\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 7,
                "name": "Build and push",
                "run": "docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5"
            },
            {
                "id": 8,
                "name": "Image digest",
                "run": "echo ${{ steps.docker_build.outputs.digest }}"
            },
            {
                "id": 1,
                "name": "Awaiting response issues",
                "run": "actions/stale@6f05e4244c9a0b2ed3401882b05d701dd0a7289b"
            },
            {
                "id": 2,
                "name": "Contribution issues",
                "run": "actions/stale@6f05e4244c9a0b2ed3401882b05d701dd0a7289b"
            },
            {
                "id": 1,
                "name": "Checkout repo",
                "run": "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"
            },
            {
                "id": 2,
                "name": "Trusted-Partners-PR",
                "run": "actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0"
            },
            {
                "id": 1,
                "name": "Set nightly branch to master HEAD",
                "run": "zofrex/mirror-branch@a8809f0b42f9dfe9b2c5c2162a46327c23d15266"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"
            },
            {
                "id": 2,
                "name": "Update the RBE Configs",
                "run": "function map() {\n  # The \"digest\" that allows us to pull an image is not the digest as\n  # returned by the API, but a sha256sum of the entire chunk of image\n  # metadata. gcr.io helpfully includes it in the header of the response\n  # as docker-content-digest: sha256:[digest]. Note we use egrep to\n  # match exactly sha256:<hash> because curl may include a ^M symbol at\n  # the end of the line.\n  # See https://cloud.google.com/architecture/using-container-images#exploring_image_manifests_digests_and_tags\n  echo -n \"Trying to map name $1 to tag $2... \"\n  digest=$(curl -s --head \"https://gcr.io/v2/tensorflow-sigs/build/manifests/$2\" | egrep -o \"sha256:[[:alnum:]]*\")\n  # Find the line matching the regex \"sigbuild-r2.9\" (with quotes) and\n  # replace just the digest portion in it\n  sed -i\"\" \"/\\\"$1\\\"/ s/sha256:[[:alnum:]]*/$digest/g\" tensorflow/tools/toolchains/remote_config/configs.bzl\n  echo \"success.\"\n}\n# See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/toolchains/remote_config/configs.bzl\n# This is a mapping of name_container_map keys under sigbuild_tf_configs\n# to tag names on gcr.io/tensorflow-sigs/build.\n# TF 2.9\nmap sigbuild-r2.9 2.9-python3.9\nmap sigbuild-r2.9-python3.8 2.9-python3.8\nmap sigbuild-r2.9-python3.9 2.9-python3.9\nmap sigbuild-r2.9-python3.10 2.9-python3.10\n# TF 2.10\nmap sigbuild-r2.10 2.10-python3.9\nmap sigbuild-r2.10-python3.8 2.10-python3.8\nmap sigbuild-r2.10-python3.9 2.10-python3.9\nmap sigbuild-r2.10-python3.10 2.10-python3.10\n# TF 2.11\nmap sigbuild-r2.11 2.11-python3.9\nmap sigbuild-r2.11-python3.8 2.11-python3.8\nmap sigbuild-r2.11-python3.9 2.11-python3.9\nmap sigbuild-r2.11-python3.10 2.11-python3.10\n# WIP Clang Containers, used by TVCs\nmap sigbuild-57469 57469-python3.9\nmap sigbuild-57469-python3.8 57469-python3.8\nmap sigbuild-57469-python3.9 57469-python3.9\nmap sigbuild-57469-python3.10 57469-python3.10\n# TF 2.12\nmap sigbuild-r2.12 2.12-python3.9\nmap sigbuild-r2.12-python3.8 2.12-python3.8\nmap sigbuild-r2.12-python3.9 2.12-python3.9\nmap sigbuild-r2.12-python3.10 2.12-python3.10\nmap sigbuild-r2.12-python3.11 2.12-python3.11\n# TF 2.12 + Clang (containers are the same, but env vars in configs.bzl are different)\nmap sigbuild-r2.12-clang 2.12-python3.9\nmap sigbuild-r2.12-clang-python3.8 2.12-python3.8\nmap sigbuild-r2.12-clang-python3.9 2.12-python3.9\nmap sigbuild-r2.12-clang-python3.10 2.12-python3.10\nmap sigbuild-r2.12-clang-python3.11 2.12-python3.11\n# TF 2.13\nmap sigbuild-r2.13 2.13-python3.9\nmap sigbuild-r2.13-python3.8 2.13-python3.8\nmap sigbuild-r2.13-python3.9 2.13-python3.9\nmap sigbuild-r2.13-python3.10 2.13-python3.10\nmap sigbuild-r2.13-python3.11 2.13-python3.11\n# TF 2.13 + Clang (containers are the same, but env vars in configs.bzl are different)\nmap sigbuild-r2.13-clang 2.13-python3.9\nmap sigbuild-r2.13-clang-python3.8 2.13-python3.8\nmap sigbuild-r2.13-clang-python3.9 2.13-python3.9\nmap sigbuild-r2.13-clang-python3.10 2.13-python3.10\nmap sigbuild-r2.13-clang-python3.11 2.13-python3.11\n# TF 2.14\nmap sigbuild-r2.14 2.14-python3.9\nmap sigbuild-r2.14-python3.9 2.14-python3.9\nmap sigbuild-r2.14-python3.10 2.14-python3.10\nmap sigbuild-r2.14-python3.11 2.14-python3.11\n# TF 2.14 + Clang (containers are the same, but env vars in configs.bzl are different)\nmap sigbuild-r2.14-clang 2.14-python3.9\nmap sigbuild-r2.14-clang-python3.9 2.14-python3.9\nmap sigbuild-r2.14-clang-python3.10 2.14-python3.10\nmap sigbuild-r2.14-clang-python3.11 2.14-python3.11\n# TF 2.16\nmap sigbuild-r2.16 2.16-python3.11\nmap sigbuild-r2.16-python3.9 2.16-python3.9\nmap sigbuild-r2.16-python3.10 2.16-python3.10\nmap sigbuild-r2.16-python3.11 2.16-python3.11\nmap sigbuild-r2.16-python3.12 2.16-python3.12\n# TF 2.16 + Clang (containers are the same, but env vars in configs.bzl are different)\nmap sigbuild-r2.16-clang 2.16-python3.11\nmap sigbuild-r2.16-clang-python3.9 2.16-python3.9\nmap sigbuild-r2.16-clang-python3.10 2.16-python3.10\nmap sigbuild-r2.16-clang-python3.11 2.16-python3.11\nmap sigbuild-r2.16-clang-python3.12 2.16-python3.12\n# TF 2.17\nmap sigbuild-r2.17 2.17-python3.11\nmap sigbuild-r2.17-python3.9 2.17-python3.9\nmap sigbuild-r2.17-python3.10 2.17-python3.10\nmap sigbuild-r2.17-python3.11 2.17-python3.11\nmap sigbuild-r2.17-python3.12 2.17-python3.12\n# TF 2.17 + Clang (containers are the same, but env vars in configs.bzl are different)\nmap sigbuild-r2.17-clang 2.17-python3.11\nmap sigbuild-r2.17-clang-python3.9 2.17-python3.9\nmap sigbuild-r2.17-clang-python3.10 2.17-python3.10\nmap sigbuild-r2.17-clang-python3.11 2.17-python3.11\nmap sigbuild-r2.17-clang-python3.12 2.17-python3.12\n"
            },
            {
                "id": 3,
                "name": "Create Pull Request with changes",
                "run": "peter-evans/create-pull-request@2b011faafdcbc9ceb11414d64d0573f37c774b04"
            }
        ],
        "tensorflow/rust": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install -r .github/workflows/requirements.txt\n"
            },
            {
                "id": 5,
                "name": "Execute test-all",
                "run": "./test-all"
            }
        ],
        "tensorflow/models": [
            {
                "id": 1,
                "name": "Set up Python 3.8",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 2,
                "name": "Install pylint 2.4.4",
                "run": "python -m pip install --upgrade pip\npip install pylint==2.4.4\n"
            },
            {
                "id": 3,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Fetch master for diff",
                "run": "git fetch origin master:master"
            },
            {
                "id": 5,
                "name": "Run pylint script",
                "run": "bash ./.github/scripts/pylint.sh --incremental"
            }
        ],
        "tensorflow/ecosystem": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install Pip Dependencies",
                "run": "cd spark/spark-tensorflow-distributor/\npython -m pip install --upgrade pip\npip install -r requirements.txt\n"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "cd spark/spark-tensorflow-distributor/\nchmod +x ./tests/lint.sh\n./tests/lint.sh\n"
            },
            {
                "id": 5,
                "name": "Install docker-compose",
                "run": "sudo rm /usr/local/bin/docker-compose\ncurl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` > docker-compose\nchmod +x docker-compose\nsudo mv docker-compose /usr/local/bin\n"
            }
        ],
        "tensorflow/tensorboard": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@13ae5bb136fac2878aff31522b9efb785519f984"
            },
            {
                "id": 3,
                "name": "Set up Bazel",
                "run": "ci/download_bazel.sh \"${BAZEL_VERSION}\" \"${BAZEL_SHA256SUM}\" ~/bazel\nsudo mv ~/bazel /usr/local/bin/bazel\nsudo chmod +x /usr/local/bin/bazel\ncp ./ci/bazelrc ~/.bazelrc\n"
            },
            {
                "id": 4,
                "name": "Configure build cache write credentials",
                "run": "if [ -z \"${CREDS}\" ]; then\n  printf 'Using read-only cache (no credentials)\\n'\n  exit\nfi\nif [ \"${EVENT_TYPE}\" = pull_request ]; then\n  printf 'Using read-only cache (PR build)\\n'\n  exit\nfi\nprintf 'Using writable cache\\n'\ncreds_file=/tmp/service_account_creds.json\nprintf '%s\\n' \"${CREDS}\" >\"${creds_file}\"\nprintf '%s\\n' >>~/.bazelrc \\\n  \"common --google_credentials=${creds_file}\" \\\n  \"common --remote_upload_local_results=true\" \\\n  ;\n"
            },
            {
                "id": 5,
                "name": "Install TensorFlow",
                "run": "python -m pip install -U pip\npip install \"${TENSORFLOW_VERSION}\"\n"
            },
            {
                "id": 6,
                "name": "Install Python dependencies",
                "run": "python -m pip install -U pip\npip install \\\n  -r ./tensorboard/pip_package/requirements.txt \\\n  -r ./tensorboard/pip_package/requirements_dev.txt \\\n  ;\n"
            },
            {
                "id": 7,
                "name": "Check Pip state",
                "run": "pip freeze --all"
            },
            {
                "id": 8,
                "name": "Bazel: fetch",
                "run": "bazel fetch //tensorboard/..."
            },
            {
                "id": 9,
                "name": "Bazel: build",
                "run": "( set -o pipefail;\n  bazel build //tensorboard/... |&\\\n  grep -v 'external/com_google_protobuf/python: warning: directory' |&\\\n  grep -v 'INFO: From ProtoCompile ' )\n"
            },
            {
                "id": 10,
                "name": "Bazel: test (with TensorFlow support)",
                "run": "bazel test //tensorboard/..."
            },
            {
                "id": 11,
                "name": "Bazel: test (non-TensorFlow only)",
                "run": "bazel test //tensorboard/... --test_tag_filters=\"support_notf\""
            },
            {
                "id": 12,
                "name": "Bazel: run Pip package test (with TensorFlow support)",
                "run": "bazel run //tensorboard/pip_package:test_pip_package -- \\\n  --tf-version \"${TENSORFLOW_VERSION}\"\n"
            },
            {
                "id": 13,
                "name": "Bazel: run Pip package test (non-TensorFlow only)",
                "run": "bazel run //tensorboard/pip_package:test_pip_package -- \\\n  --tf-version notf\n"
            },
            {
                "id": 14,
                "name": "Bazel: run manual tests",
                "run": "bazel test //tensorboard/compat/tensorflow_stub:gfile_s3_test &&\nbazel test //tensorboard/summary/writer:event_file_writer_s3_test &&\nbazel test //tensorboard/compat/tensorflow_stub:gfile_fsspec_test &&\nbazel test //tensorboard/summary/writer:event_file_writer_fsspec_test\n"
            },
            {
                "id": 15,
                "name": "Bazel: build Pip package (master branch TF build only)",
                "run": "./tensorboard/tools/set_nightly_version.sh\nrm -rf /tmp/tb_nightly_pip_package && mkdir /tmp/tb_nightly_pip_package\nbazel run //tensorboard/pip_package:build_pip_package -- /tmp/tb_nightly_pip_package\n"
            },
            {
                "id": 16,
                "name": "Upload Pip package as an artifact (master branch TF build only)",
                "run": "actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@13ae5bb136fac2878aff31522b9efb785519f984"
            },
            {
                "id": 3,
                "name": "Cache Cargo artifacts",
                "run": "actions/cache@58c146cc91c5b9e778e71775dfe9bf1442ad9a12"
            },
            {
                "id": 4,
                "name": "Install Rust toolchain",
                "run": "dtolnay/rust-toolchain@5f2e2a7aff63d8cbdacb4832218a30fa7a37ee6e"
            },
            {
                "id": 5,
                "name": "Install Python packaging deps",
                "run": "python -m pip install -U pip\npip install \\\n  -c ./tensorboard/pip_package/requirements.txt \\\n  -c ./tensorboard/pip_package/requirements_dev.txt \\\n  setuptools wheel\n"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "cd tensorboard/data/server/ && cargo build --release"
            },
            {
                "id": 7,
                "name": "Test",
                "run": "cd tensorboard/data/server/ && cargo test --release"
            },
            {
                "id": 8,
                "name": "Package (native)",
                "run": "rm -rf /tmp/pip_package && mkdir /tmp/pip_package\npython tensorboard/data/server/pip_package/build.py \\\n  --server-binary tensorboard/data/server/target/release/rustboard \\\n  --out-dir /tmp/pip_package \\\n  ;\n"
            },
            {
                "id": 9,
                "name": "Package (universal)",
                "run": "rm -rf /tmp/pip_package && mkdir /tmp/pip_package\npython tensorboard/data/server/pip_package/build.py \\\n  --universal \\\n  --out-dir /tmp/pip_package \\\n  ;\n"
            },
            {
                "id": 10,
                "name": "Upload",
                "run": "actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@13ae5bb136fac2878aff31522b9efb785519f984"
            },
            {
                "id": 3,
                "name": "Install flake8",
                "run": "python -m pip install -U pip\npip install flake8 -c ./tensorboard/pip_package/requirements_dev.txt\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pip freeze --all"
            },
            {
                "id": 5,
                "name": "Lint Python code for errors with flake8",
                "run": "flake8 . --count --select=E9,F63,F7,F82,F401 --show-source --statistics"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@13ae5bb136fac2878aff31522b9efb785519f984"
            },
            {
                "id": 3,
                "name": "Install black, yamllint, and the TensorFlow docs notebook tools",
                "run": "python -m pip install -U pip\nnbfmt_version=\"84bd7bea0c468667dd0ec273d426ed50f23e1a15\"\npip install black yamllint -c ./tensorboard/pip_package/requirements_dev.txt\npip install -U git+https://github.com/tensorflow/docs@${nbfmt_version}\n"
            },
            {
                "id": 4,
                "name": "Downgrade to compatible protobuf version",
                "run": "pip install -U \"protobuf<3.20\""
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pip freeze --all"
            },
            {
                "id": 6,
                "name": "Lint Python code for style with Black",
                "run": "black --check --diff ."
            },
            {
                "id": 7,
                "name": "Lint YAML for gotchas with yamllint",
                "run": "yamllint -c docs/.yamllint docs docs/.yamllint"
            },
            {
                "id": 8,
                "name": "Lint Colab notebooks for formatting with nbfmt",
                "run": "git ls-files -z '*.ipynb' | xargs -0 python3 -m tensorflow_docs.tools.nbfmt --test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c"
            },
            {
                "id": 2,
                "name": "Cache Cargo artifacts",
                "run": "actions/cache@58c146cc91c5b9e778e71775dfe9bf1442ad9a12"
            },
            {
                "id": 3,
                "name": "Install Rust toolchain",
                "run": "dtolnay/rust-toolchain@5f2e2a7aff63d8cbdacb4832218a30fa7a37ee6e"
            },
            {
                "id": 4,
                "name": "Install cargo-raze",
                "run": "cargo install cargo-raze --version ${{ matrix.cargo_raze_version }} --locked"
            },
            {
                "id": 5,
                "name": "Run Rustfmt",
                "run": "(cd tensorboard/data/server/ && cargo fmt -- --check)"
            },
            {
                "id": 6,
                "name": "Run Clippy",
                "run": "cargo clippy --all-targets --manifest-path tensorboard/data/server/Cargo.toml -- -D warnings"
            },
            {
                "id": 7,
                "name": "Check cargo-raze freshness",
                "run": "rm -rf third_party/rust/\n(cd tensorboard/data/server/ && cargo fetch && cargo raze)\ngit add .\ngit diff --staged --exit-code\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn install --ignore-engines"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn lint"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "! git grep -E 'f(it|describe)\\(' 'tensorboard/*_test.ts'\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "! git grep -E '\"@npm//@angular/material\"|\"@npm//@angular/cdk\"' 'tensorboard/*/BUILD' ':!tensorboard/webapp/BUILD' ':!tensorboard/webapp/angular/BUILD'\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "! git grep -E '\"@npm//d3\"|\"@npm//@types/d3\"' 'tensorboard/webapp/**/*BUILD' ':!tensorboard/webapp/third_party/**'\n"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "! git grep -E '\"@npm_angular_bazel//:index.bzl\"' 'tensorboard/**/BUILD'\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "! git grep -E 'mat-color|$mat-' 'tensorboard/**/*.scss'\n"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "! git grep -E '@npm//numeric' 'tensorboard/*/BUILD' ':!tensorboard/webapp/third_party/**'\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c"
            },
            {
                "id": 2,
                "name": "Set up Buildifier",
                "run": "ci/download_buildifier.sh \"${BUILDTOOLS_VERSION}\" \"${BUILDIFIER_SHA256SUM}\" ~/buildifier\nsudo mv ~/buildifier /usr/local/bin/buildifier\n"
            },
            {
                "id": 3,
                "name": "Set up Buildozer",
                "run": "ci/download_buildozer.sh \"${BUILDTOOLS_VERSION}\" \"${BUILDOZER_SHA256SUM}\" ~/buildozer\nsudo mv ~/buildozer /usr/local/bin/buildozer\n"
            },
            {
                "id": 4,
                "name": "Lint BUILD files",
                "run": "git ls-files -z '*BUILD' third_party/js.bzl third_party/workspace.bzl WORKSPACE | xargs -0 buildifier --mode=check --lint=warn --warnings=-native-py,-native-java"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./tensorboard/tools/mirror_urls_test.sh"
            },
            {
                "id": 6,
                "name": "Lint for no py2 BUILD targets",
                "run": "! git grep 'python_version = \"PY2\"' '*BUILD'\n"
            },
            {
                "id": 7,
                "name": "No comments on licenses rule",
                "run": "buildozer '//tensorboard/...:%licenses' remove_comment && false || test $? = 3\n"
            },
            {
                "id": 8,
                "name": "clang-format lint",
                "run": "DoozyX/clang-format-lint-action@0138140a2adaafd3032a3ff37f66366fd7dc88e0"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "./tensorboard/tools/do_not_submit_test.sh"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "./tensorboard/tools/license_test.sh"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "./tensorboard/tools/whitespace_hygiene_test.py"
            },
            {
                "id": 1,
                "name": "Download pip package",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 2,
                "name": "Install Twine",
                "run": "pip install twine"
            },
            {
                "id": 3,
                "name": "Publish the package",
                "run": "twine check tb_nightly*.whl\ntwine upload tb_nightly*.whl\n"
            }
        ],
        "tensorflow/probability": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Lints",
                "run": "./testing/run_github_lints.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Tests",
                "run": "./testing/run_github_tests.sh\n"
            },
            {
                "id": 4,
                "name": "Upload test logs",
                "run": "actions/upload-artifact@v1"
            }
        ],
        "tensorflow/lucid": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install setuptools wheel twine\n"
            },
            {
                "id": 4,
                "name": "Build and publish",
                "run": "python setup.py sdist bdist_wheel\ntwine upload dist/*\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install tox\n"
            },
            {
                "id": 4,
                "name": "Test with tox",
                "run": "tox -e py$(echo ${{ matrix.python-version }} | tr -d .)"
            },
            {
                "id": 5,
                "name": "Coveralls Parallel",
                "run": "AndreMiras/coveralls-python-action@develop"
            },
            {
                "id": 1,
                "name": "Coveralls Finished",
                "run": "AndreMiras/coveralls-python-action@develop"
            }
        ],
        "tensorflow/tfjs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "FirebaseExtended/action-hosting-deploy@v0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "FirebaseExtended/action-hosting-deploy@v0"
            }
        ],
        "tensorflow/datasets": [
            {
                "id": 1,
                "name": "Check",
                "run": "echo \"status=${{ github.ref == 'refs/heads/master' || (\n  github.event.action != 'closed'\n  && github.event.pull_request.merged == false\n) }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Create variables",
                "run": "echo \"num-shards=$(jq -n -c '[${{ env.PYTEST_NUM_SHARDS }}]')\" >> $GITHUB_OUTPUT\necho \"shard-ids=$(jq -n -c '[range(1;${{ env.PYTEST_NUM_SHARDS }}+1)]')\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup"
            },
            {
                "id": 3,
                "name": "Run core tests",
                "run": "pytest --durations=100 -vv -n auto --shard-id=$((${{ matrix.shard-id }} - 1)) --num-shards=${{ env.PYTEST_NUM_SHARDS }} \\\n  --ignore=\"tensorflow_datasets/datasets/nsynth/nsynth_dataset_builder_test.py\" \\\n  --ignore=\"tensorflow_datasets/image/lsun_test.py\" \\\n  --ignore=\"tensorflow_datasets/datasets/imagenet2012_corrupted/imagenet2012_corrupted_dataset_builder_test.py\" \\\n  --ignore=\"tensorflow_datasets/scripts/documentation/build_api_docs_test.py\" \\\n  --ignore=\"tensorflow_datasets/import_without_tf_test.py\" \\\n  --ignore=\"tensorflow_datasets/core/github_api/github_path_test.py\" \\\n  --ignore=\"tensorflow_datasets/translate/wmt19_test.py\" \\\n  --ignore=\"tensorflow_datasets/core/dataset_builders/huggingface_dataset_builder_test.py\" \\\n  --ignore=\"tensorflow_datasets/core/utils/huggingface_utils_test.py\"\n"
            },
            {
                "id": 4,
                "name": "Run leftover tests",
                "run": "nick-fields/retry@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup"
            },
            {
                "id": 3,
                "name": "Run HuggingFace tests",
                "run": "pytest -vv -n auto \\\n  tensorflow_datasets/core/dataset_builders/huggingface_dataset_builder_test.py \\\n  tensorflow_datasets/core/utils/huggingface_utils_test.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup"
            },
            {
                "id": 3,
                "name": "Run Github API tests",
                "run": "pytest --durations=100 -vv -n auto tensorflow_datasets/core/github_api/github_path_test.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup"
            },
            {
                "id": 3,
                "name": "Run notebook",
                "run": "ipython kernel install --user --name tfds-notebook\nfor notebook in docs/*ipynb\n  do\n    # These notebooks time out because they rely on loading huge datasets.\n    if [[ \"$notebook\" != \"docs/determinism.ipynb\" ]] && \\\n       [[ \"$notebook\" != \"docs/dataset_collections.ipynb\" ]]\n    then\n      jupyter nbconvert \\\n        --ExecutePreprocessor.timeout=600 \\\n        --ExecutePreprocessor.kernel_name=tfds-notebook \\\n        --to notebook \\\n        --execute $notebook && \\\n      pip install tensorflow  # reinstall tensorflow if it was uninstalled\n    fi\n  done\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Python.",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install deps.",
                "run": "pip install setuptools wheel twine"
            },
            {
                "id": 4,
                "name": "Create the source distribution and build the wheels.",
                "run": "python setup.py sdist --nightly\npython setup.py bdist_wheel --nightly\n"
            },
            {
                "id": 5,
                "name": "Publish the package.",
                "run": "twine check dist/*\ntwine upload dist/*\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Remove the `-nightly` suffix.",
                "run": "mv tensorflow_datasets/version_stable.py tensorflow_datasets/version.py"
            },
            {
                "id": 3,
                "name": "Publish the package",
                "run": "etils-actions/pypi-auto-publish@v1"
            }
        ],
        "tensorflow/mesh": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install tf-nightly mock pytest\npip install -e .[test,auto_mtf,transformer]\n"
            },
            {
                "id": 4,
                "name": "Test with pytest",
                "run": "pytest"
            },
            {
                "id": 5,
                "name": "Report success or failure as github status",
                "run": "status=\"${{ job.status }}\"\nlowercase_status=$(echo $status | tr '[:upper:]' '[:lower:]')\ncurl -sS --request POST \\\n--url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \\\n--header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \\\n--header 'content-type: application/json' \\\n--data '{\n    \"state\": \"'$lowercase_status'\",\n    \"target_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\",\n    \"description\": \"'$status'\",\n    \"context\": \"github-actions/build\"\n    }'\n"
            }
        ],
        "tensorflow/model-optimization": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/labeler@v2"
            }
        ],
        "tensorflow/io": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "set -x -e\npython -m pip install -U wheel setuptools\npython --version\n"
            },
            {
                "id": 4,
                "name": "Setup macOS",
                "run": "set -x -e\nbash -x -e tests/test_azure/start_azure.sh\n"
            },
            {
                "id": 5,
                "name": "Test macOS",
                "run": "set -x -e\npython --version\ndf -h\nrm -rf tensorflow_io\nrm -rf tensorflow_io_gcs_filesystem\nexport TF_USE_MODULAR_FILESYSTEM=1\necho ${{ matrix.version }} | awk -F: '{print $1}' | xargs python -m pip install -U\necho ${{ matrix.version }} | awk -F: '{print $2}' | xargs python -m pip install --no-deps -U\npython -m pip install tensorflow-io-gcs-filesystem-nightly\npython -m pip install pytest-benchmark boto3 google-cloud-storage==1.32.0 azure-storage-blob==12.7.1 pyarrow==3.0.0\npython -m pip freeze\npython -c 'import tensorflow as tf; print(tf.version.VERSION)'\npython -c 'import tensorflow_io as tfio; print(tfio.version.VERSION)'\npython -m pytest -s -v tests/test_http.py\npython -m pytest -s -v tests/test_s3.py\npython -m pytest -s -v tests/test_azure.py\npython -m pytest -s -v tests/test_gcs.py\npython -m pytest -s -v tests/test_standalone_filesystem.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Setup Linux",
                "run": "set -x -e\nbash -x -e .github/workflows/build.space.sh\nbash -x -e tests/test_aws/aws_test.sh\nbash -x -e tests/test_azure/start_azure.sh\nbash -x -e tests/test_gcloud/test_gcs.sh gcs-emulator\nbash -x -e tests/test_hdfs/hdfs_test.sh\n"
            },
            {
                "id": 4,
                "name": "Test Linux",
                "run": "set -x -e\npython --version\ndf -h\nrm -rf tensorflow_io\nrm -rf tensorflow_io_gcs_filesystem\nexport TF_USE_MODULAR_FILESYSTEM=1\necho ${{ matrix.version }} | awk -F: '{print $1}' | xargs python -m pip install -U\necho ${{ matrix.version }} | awk -F: '{print $2}' | xargs python -m pip install --no-deps -U\npython -m pip install tensorflow-io-gcs-filesystem-nightly\npython -m pip install pytest-benchmark boto3 google-cloud-storage==1.32.0 azure-storage-blob==12.7.1 pyarrow==3.0.0\npython -m pip freeze\n\nsudo apt-get -y -qq update\nsudo apt-get -y -qq install openjdk-8-jdk\nsudo update-alternatives --config java\nexport JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\ncurl -OL https://archive.apache.org/dist/hadoop/common/hadoop-2.7.0/hadoop-2.7.0.tar.gz\nsudo tar -xzf hadoop-2.7.0.tar.gz -C /usr/local\nsudo chmod 755 -R /usr/local/hadoop-2.7.0\nexport HADOOP_HOME=/usr/local/hadoop-2.7.0\nexport LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${JAVA_HOME}/jre/lib/amd64/server:${HADOOP_HOME}/lib/native\nexport CLASSPATH=$(${HADOOP_HOME}/bin/hadoop classpath --glob)\n\npython -c 'import tensorflow as tf; print(tf.version.VERSION)'\npython -c 'import tensorflow_io as tfio; print(tfio.version.VERSION)'\npython -m pytest -s -v tests/test_http.py\npython -m pytest -s -v tests/test_s3.py\npython -m pytest -s -v tests/test_azure.py\npython -m pytest -s -v tests/test_gcs.py\npython -m pytest -s -v tests/test_standalone_filesystem.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 4,
                "name": "Setup Windows",
                "run": "@echo on\nbash -x -e tests/test_azure/start_azure.sh\n"
            },
            {
                "id": 5,
                "name": "Test Windows",
                "run": "@echo on\npython --version\nrm -rf tensorflow_io\nrm -rf tensorflow_io_gcs_filesystem\nexport TF_USE_MODULAR_FILESYSTEM=1\necho ${{ matrix.version }} | awk -F: '{print $1}' | xargs python -m pip install -U\necho ${{ matrix.version }} | awk -F: '{print $2}' | xargs python -m pip install --no-deps -U\npython -m pip install tensorflow-io-gcs-filesystem-nightly\npython -m pip install pytest-benchmark\npython -m pip freeze\npython -c 'import tensorflow as tf; print(tf.version.VERSION)'\npython -c 'import tensorflow_io as tfio; print(tfio.version.VERSION)'\npython -m pytest -s -v tests/test_http.py -k remote\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Setup macOS",
                "run": "set -x -e\npython -m pip install -U wheel setuptools\npython --version\n"
            },
            {
                "id": 4,
                "name": "Benchmark on macOS",
                "run": "set -x -e\npython --version\ndf -h\nrm -rf tensorflow_io\nrm -rf tensorflow_io_gcs_filesystem\nexport TF_USE_MODULAR_FILESYSTEM=1\necho ${{ matrix.version }} | awk -F: '{print $1}' | xargs python -m pip install -U\necho ${{ matrix.version }} | awk -F: '{print $2}' | xargs python -m pip install --no-deps -U\npython -m pip install tensorflow-io-gcs-filesystem-nightly\npython -m pip install -q scikit-image pytest pytest-benchmark boto3 fastavro avro-python3 scikit-image pandas pyarrow==2.0.0 google-cloud-pubsub==2.1.0 google-cloud-bigquery-storage==1.1.0 google-cloud-bigquery==2.3.1 google-cloud-storage==1.32.0 google-cloud-bigtable==1.6.0 azure-storage-blob==12.7.1\npython -m pip freeze\npython -c 'import tensorflow as tf; print(tf.version.VERSION)'\npython -c 'import tensorflow_io as tfio; print(tfio.version.VERSION)'\npython -c 'from tensorflow_io_gcs_filesystem.core.python.ops import plugin_gs; print(plugin_gs)'\npython -m pytest --benchmark-only -v --import-mode=append $(find . -type f \\( -iname \"test_*.py\" ! \\( -iname \"test_*_v1.py\" -o -iname \"test_bigquery.py\" \\) \\))\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Setup Linux",
                "run": "set -x -e\nbash -x -e .github/workflows/build.space.sh\nbash -x -e tests/test_sql/sql_test.sh\n"
            },
            {
                "id": 4,
                "name": "Benchmark on Linux",
                "run": "set -x -e\npython --version\ndf -h\nrm -rf tensorflow_io\nrm -rf tensorflow_io_gcs_filesystem\nexport TF_USE_MODULAR_FILESYSTEM=1\necho ${{ matrix.version }} | awk -F: '{print $1}' | xargs python -m pip install -U\necho ${{ matrix.version }} | awk -F: '{print $2}' | xargs python -m pip install --no-deps -U\npython -m pip install tensorflow-io-gcs-filesystem-nightly\npython -m pip install -q scikit-image pytest pytest-benchmark boto3 fastavro avro-python3 scikit-image pandas pyarrow==2.0.0 google-cloud-pubsub==2.1.0 google-cloud-bigquery-storage==1.1.0 google-cloud-bigquery==2.3.1 google-cloud-storage==1.32.0 google-cloud-bigtable==1.6.0 azure-storage-blob==12.7.1\npython -m pip freeze\npython -c 'import tensorflow as tf; print(tf.version.VERSION)'\npython -c 'import tensorflow_io as tfio; print(tfio.version.VERSION)'\npython -c 'from tensorflow_io_gcs_filesystem.core.python.ops import plugin_gs; print(plugin_gs)'\npython -m pytest --benchmark-only --benchmark-json benchmark.json -v --import-mode=append $(find . -type f \\( -iname \"test_*.py\" ! \\( -iname \"test_*_v1.py\" -o -iname \"test_bigquery.py\" \\) \\))\n"
            },
            {
                "id": 5,
                "name": "Store benchmark result",
                "run": "rhysd/github-action-benchmark@4de1bed97a47495fc4c5404952da0499e31f5c29"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Bazel on macOS",
                "run": "set -x -e\nbash -e .github/workflows/build.bazel.sh python3\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "set -x -e\necho \"Successfully completely macOS arm64 release\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Wheel ${{ matrix.python }} macOS",
                "run": "set -x -e\npython3 --version\npython --version\nbrew search python\nbrew install python@${{ matrix.python }}\npython${{ matrix.python }} --version\npython${{ matrix.python }} -m pip install --break-system-packages -U wheel setuptools\npython${{ matrix.python }} setup.py --data bazel-bin -q bdist_wheel --plat-name macosx_12_0_arm64\nrm -rf build\npython${{ matrix.python }} setup.py --project tensorflow-io-gcs-filesystem --data bazel-bin -q bdist_wheel --plat-name macosx_12_0_arm64\nls dist/*\nmkdir -p wheelhouse\nfor f in dist/*.whl; do\n  echo \"disable delocate due to build breaks: delocate-wheel -w wheelhouse  $f\"\n  cp $f wheelhouse\ndone\nls wheelhouse/*\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "set -e -x\nmkdir -p wheelhouse\ncp macOS-arm64-3.9-wheel/*.whl wheelhouse/\ncp macOS-arm64-3.10-wheel/*.whl wheelhouse/\ncp macOS-arm64-3.11-wheel/*.whl wheelhouse/\ncp macOS-arm64-3.12-wheel/*.whl wheelhouse/\nls -la wheelhouse/\nsha256sum wheelhouse/*.whl\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "set -x -e\nsha256sum wheelhouse/*.whl | sort -u > wheelhouse.sha256\ngit rev-parse --verify HEAD > wheelhouse.commit\ngrep 'version = ' tensorflow_io/python/ops/version_ops.py  | sed -E 's@^.*version = \"@@g' | sed -E 's@\".*$@@g' > wheelhouse.version\ncat wheelhouse.sha256\ncat wheelhouse.commit\ncat wheelhouse.version\necho \"::set-output name=version::$(cat wheelhouse.version)\"\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cat <<EOF > Dockerfile\nFROM gcr.io/distroless/base-debian11\nCOPY wheelhouse /wheelhouse\nCOPY wheelhouse.sha256 /wheelhouse.sha256\nCOPY wheelhouse.commit /wheelhouse.commit\nCOPY wheelhouse.version /wheelhouse.version\nEOF"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Run Lint Script for Bazel/Pyupgrade/Black/Clang",
                "run": "set -x -e\ngit log --pretty -1\nsudo apt update -y -qq && sudo apt install -y -qq libtinfo5\nTF_PYTHON_VERSION=3.10 bazel run -s --verbose_failures --experimental_repo_remote_exec //tools/lint:check -- bazel clang\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Run Lint Script for Docs",
                "run": "set -x -e\ngit log --pretty -1\nsudo python3 --version\nsudo python3 -m pip install dataclasses\nsudo python3 -m pip install setuptools\nsudo python3 -m pip install -U git+https://github.com/tensorflow/docs\nfind docs -name '*.ipynb' | xargs python3 -m tensorflow_docs.tools.nbfmt\necho \"Check for failed fmt: \"\ngit status --untracked-files=no --porcelain\n[ -z \"$(git status --untracked-files=no --porcelain)\" ] || exit 1\nfind docs -name '*.ipynb' | xargs python3 -m tensorflow_docs.tools.nblint --arg=repo:tensorflow/io\necho \"Check for failed lint: \"\ngit status --untracked-files=no --porcelain\n[ -z \"$(git status --untracked-files=no --porcelain)\" ] || exit 1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "GCP",
                "run": "cat > service_account_creds.json << EOF\n${{ secrets.GCP_CREDS }}\nEOF\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 4,
                "name": "macOS",
                "run": "set -x -e\nexport BAZEL_OPTIMIZATION=\"--config=cache\"\nif [[ \"${EVENT_NAME}\" == \"push\" && \"${REPO_NAME}\" == \"tensorflow/io\" ]]; then\n  export BAZEL_OPTIMIZATION=\"$BAZEL_OPTIMIZATION --remote_upload_local_results=true --google_credentials=service_account_creds.json\"\nfi\necho $PATH\nwhich python3\npython3 --version\npython3 -c 'import site; print(site.getsitepackages())'\npython3 .github/workflows/build.instruction.py --sudo=true docs/development.md \"#### macOS\" > source.sh\nbash -x -e source.sh\npython3 -c 'import tensorflow as tf; print(tf.version.VERSION)'\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "GCP",
                "run": "cat > service_account_creds.json << EOF\n${{ secrets.GCP_CREDS }}\nEOF\n"
            },
            {
                "id": 3,
                "name": "Ubuntu 22.04",
                "run": "set -x -e\nexport BAZEL_OPTIMIZATION=\"--config=cache\"\nif [[ \"${EVENT_NAME}\" == \"push\" && \"${REPO_NAME}\" == \"tensorflow/io\" ]]; then\n  export BAZEL_OPTIMIZATION=\"$BAZEL_OPTIMIZATION --remote_upload_local_results=true --google_credentials=service_account_creds.json\"\nfi\napt update\napt-get install -y python3\npython3 .github/workflows/build.instruction.py docs/development.md \"##### Ubuntu 22.04\" > source.sh\ncat source.sh\nbash -x -e source.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "GCP",
                "run": "cat > service_account_creds.json << EOF\n${{ secrets.GCP_CREDS }}\nEOF\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 4,
                "name": "Bazel on macOS",
                "run": "set -x -e\nexport BAZEL_OPTIMIZATION=\"--config=optimization --config=cache\"\nif [[ \"${EVENT_NAME}\" == \"push\" && \"${REPO_NAME}\" == \"tensorflow/io\" ]]; then\n  export BAZEL_OPTIMIZATION=\"$BAZEL_OPTIMIZATION --remote_upload_local_results=true --google_credentials=service_account_creds.json\"\nfi\nsudo -E -H bash -e .github/workflows/build.bazel.sh python3\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 6,
                "name": "Package pip on macOS",
                "run": "set -x -e\nwhich python3\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 4,
                "name": "Wheel ${{ matrix.python }} macOS",
                "run": "set -x -e\npython -m pip install -U wheel setuptools\npython --version\npython setup.py --data bazel-bin -q bdist_wheel --plat-name macosx_10_14_x86_64\nrm -rf build\npython setup.py --project tensorflow-io-gcs-filesystem --data bazel-bin -q bdist_wheel --plat-name macosx_10_14_x86_64\n"
            },
            {
                "id": 5,
                "name": "Auditwheel ${{ matrix.python }} macOS",
                "run": "set -x -e\npython -m pip install twine delocate==0.10.3\ndelocate-wheel --version\nls dist/*\nmkdir -p wheelhouse\nfor f in dist/*.whl; do\n  echo \"disable delocate due to build breaks: delocate-wheel -w wheelhouse  $f\"\n  cp $f wheelhouse\ndone\nls wheelhouse/*\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "set -x -e\npython -m pip install pip==21.3.1\npython -m pip install -U wheel setuptools\npython --version\n"
            },
            {
                "id": 5,
                "name": "Setup ${{ matrix.python }} macOS",
                "run": "set -x -e\nbash -x -e tests/test_kafka/kafka_test.sh\nbash -x -e tests/test_azure/start_azure.sh\nbash -x -e tests/test_gcloud/test_pubsub_bigtable.sh\nbash -x -e tests/test_pulsar/pulsar_test.sh\n"
            },
            {
                "id": 6,
                "name": "Install ${{ matrix.python }} macOS",
                "run": "set -x -e\npython --version\ndf -h\n(cd wheelhouse && python -m pip install tensorflow_io_gcs_filesystem-*.whl)\n(cd wheelhouse && python -m pip install tensorflow_io-*.whl)\n"
            },
            {
                "id": 7,
                "name": "Test ${{ matrix.python }} macOS",
                "run": "set -x -e\npython --version\nbash -x -e .github/workflows/build.wheel.sh python\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "GCP",
                "run": "cat > service_account_creds.json << EOF\n${{ secrets.GCP_CREDS }}\nEOF\n"
            },
            {
                "id": 3,
                "name": "Bazel on Linux",
                "run": "set -x\ndocker system prune --all --force\ndocker images\ndocker ps -a\ndf -h\n# See https://github.com/actions/runner-images/issues/2840\nsudo rm -rf /usr/share/dotnet\nsudo rm -rf /opt/ghc\nsudo rm -rf \"/usr/local/share/boost\"\nsudo rm -rf \"$AGENT_TOOLSDIRECTORY\"\ndf -h\n# See https://github.com/actions/runner-images/issues/2606\nsudo rm -rf /usr/local/lib/android\ndf -h\nsudo apt-get autoremove -y\nsudo apt-get autoclean -y\ndf -h\n#export BAZEL_OPTIMIZATION=\"--config=optimization --config=linux_ci --config=cache\"\n#if [[ \"${{ env.EVENT_NAME }}\" == \"push\" && \"${{ env.REPO_NAME }}\" == \"tensorflow/io\" ]]; then\n#  export BAZEL_OPTIMIZATION=\"${BAZEL_OPTIMIZATION} --remote_upload_local_results=true --google_credentials=service_account_creds.json\"\n#fi\nTENSORFLOW_VERSION=$(grep tensorflow tensorflow_io/python/ops/version_ops.py | sed -e \"s/require = //g\" | awk -F, '{print $1}' | awk -F= '{print $2}' | awk -F. '{print $1\".\"$2}')\nDOCKER_BUILDKIT=0 docker build -t io -f tools/docker/build.Dockerfile --build-arg PYTHON_VERSION=3.10 --build-arg TENSORFLOW_VERSION=\"${TENSORFLOW_VERSION}\" --build-arg BAZEL_OPTIMIZATION=\"${BAZEL_OPTIMIZATION}\" .\ndocker create -it --name io io bash\nsleep 5\ndocker cp -L io:/opt/io/bazel-bin build\ndocker cp -L io:/opt/io/.bazelrc build/tensorflow_io/\nsudo chown -R $(id -nu):$(id -ng) .\nfind build/tensorflow_io -type f\nfind build/tensorflow_io_gcs_filesystem -type f\nfind build/tensorflow_io -type l\nfind build/tensorflow_io_gcs_filesystem -type l\nfind build/tensorflow_io -name '*runfiles*'\nfind build/tensorflow_io_gcs_filesystem -name '*runfiles*'\nfind build/tensorflow_io -name '*runfiles*' | xargs rm -rf\nfind build/tensorflow_io_gcs_filesystem -name '*runfiles*' | xargs rm -rf\nsudo rm -rf build/tensorflow_io/core/golang_ops.h\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Wheel ${{ matrix.python }} Linux",
                "run": "set -x -e\nmv bazel-bin/tensorflow_io/.bazelrc .\ndocker run -i --rm --user $(id -u):$(id -g) -v /etc/password:/etc/password -v $PWD:/v -w /v --net=host python:${{ matrix.python }}-slim python setup.py --data bazel-bin -q bdist_wheel\nrm -rf build\ndocker run -i --rm --user $(id -u):$(id -g) -v /etc/password:/etc/password -v $PWD:/v -w /v --net=host python:${{ matrix.python }}-slim python setup.py --project tensorflow-io-gcs-filesystem --data bazel-bin -q bdist_wheel\n"
            },
            {
                "id": 4,
                "name": "Auditwheel ${{ matrix.python }} Linux",
                "run": "set -x -e\nls dist/*\nfor f in dist/*.whl; do\n  docker run -i --rm -v $PWD:/v -w /v --net=host quay.io/pypa/manylinux2014_x86_64 bash -x -e /v/tools/build/auditwheel repair --plat manylinux2014_x86_64 $f\ndone\nsudo chown -R $(id -nu):$(id -ng) .\nls wheelhouse/*\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 4,
                "name": "Setup Linux",
                "run": "set -x -e\nbash -x -e .github/workflows/build.space.sh\nbash -x -e tests/test_pulsar/pulsar_test.sh\nbash -x -e tests/test_kafka/kafka_test.sh\nbash -x -e tests/test_aws/aws_test.sh\necho bash -x -e tests/test_gcloud/test_pubsub_bigtable.sh\necho bash -x -e tests/test_prometheus/prometheus_test.sh start\nbash -x -e tests/test_elasticsearch/elasticsearch_test.sh start\nbash -x -e tests/test_mongodb/mongodb_test.sh start\nbash -x -e tests/test_azure/start_azure.sh\nbash -x -e tests/test_sql/sql_test.sh postgresql\nbash -x -e tests/test_gcloud/test_gcs.sh gcs-emulator\nbash -x -e tests/test_hdfs/hdfs_test.sh\n"
            },
            {
                "id": 5,
                "name": "Test Linux",
                "run": "set -x -e\ndf -h\ndocker run -i --rm -v $PWD:/v -w /v --net=host \\\n  buildpack-deps:22.04 \\\n  bash -x -e .github/workflows/build.wheel.sh python${{ matrix.python }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "egor-tensin/vs-shell@9a932a62d05192eae18ca370155cf877eecc2202"
            },
            {
                "id": 3,
                "name": "GCP",
                "run": "cat > service_account_creds.json << EOF\n${{ secrets.GCP_CREDS }}\nEOF\n"
            },
            {
                "id": 4,
                "name": "Bazel on Windows",
                "run": "set -x -e\nexport BAZEL_OPTIMIZATION=\"--config=cache\"\nif [[ \"${EVENT_NAME}\" == \"push\" && \"${REPO_NAME}\" == \"tensorflow/io\" ]]; then\n  export BAZEL_OPTIMIZATION=\"$BAZEL_OPTIMIZATION --remote_upload_local_results=true --google_credentials=service_account_creds.json\"\nfi\nbazel version\npython3 --version\npython3 -m pip install wheel setuptools\npython3 -m pip --version\npython3 setup.py --install-require | xargs python3 -m pip install\npython3 tools/build/configure.py\ncat .bazelrc\nbazel build -s ${BAZEL_OPTIMIZATION} //tensorflow_io:python/ops/libtensorflow_io.so //tensorflow_io:python/ops/libtensorflow_io_plugins.so  //tensorflow_io_gcs_filesystem/...\nmkdir -p build\ncp -r bazel-bin/tensorflow_io build\ncp -r bazel-bin/tensorflow_io_gcs_filesystem build\nbash -c \"find build -not -name '*.so' -type f | xargs rm -rf\"\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 4,
                "name": "Wheel ${{ matrix.python }} Windows",
                "run": "@echo on\npython --version\npython -m pip install -U wheel setuptools\npython setup.py --data bazel-bin -q bdist_wheel\nrm -rf build\npython setup.py --project tensorflow-io-gcs-filesystem --data bazel-bin -q bdist_wheel\nls -la dist\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 5,
                "name": "Setup ${{ matrix.python }} Windows",
                "run": "@echo on\nbash -x -e tests/test_azure/start_azure.sh\n"
            },
            {
                "id": 6,
                "name": "Install ${{ matrix.python }} Windows",
                "run": "@echo on\npython --version\n(cd wheel && ls tensorflow_io_gcs_filesystem-*.whl | xargs python -m pip install && cd ..)\n(cd wheel && ls tensorflow_io-*.whl | xargs python -m pip install && cd ..)\n(grep tensorflow tensorflow_io/python/ops/version_ops.py | sed -e \"s/require = //g\" | xargs python -m pip install)\n"
            },
            {
                "id": 7,
                "name": "Test ${{ matrix.python }} Windows",
                "run": "@echo on\npython --version\npython -m pip install -U pytest-benchmark\npython -m pip install google-cloud-bigquery-storage==0.7.0 google-cloud-bigquery==1.22.0 fastavro\nrm -rf tensorflow_io tensorflow_io_gcs_filesystem\ncd tests\npython -m pytest -s -v test_lmdb.py\nif %errorlevel% neq 0 exit /b %errorlevel%\npython -m pytest -s -v test_image.py -k \"webp or ppm or bmp or bounding or exif or hdr or openexr or tiff or avif\"\nif %errorlevel% neq 0 exit /b %errorlevel%\npython -m pytest -s -v test_serialization.py\nif %errorlevel% neq 0 exit /b %errorlevel%\npython -m pytest -s -v test_io_dataset.py -k \"numpy or hdf5 or audio or to_file\"\nif %errorlevel% neq 0 exit /b %errorlevel%\npython -m pytest -s -v test_http.py\nif %errorlevel% neq 0 exit /b %errorlevel%\npython -m pytest -s -v test_bigquery.py\nif %errorlevel% neq 0 exit /b %errorlevel%\npython -m pytest -s -v test_dicom.py\nif %errorlevel% neq 0 exit /b %errorlevel%\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "set -e -x\nmkdir -p wheelhouse\ncp macOS-3.9-wheel/*.whl wheelhouse/\ncp macOS-3.10-wheel/*.whl wheelhouse/\ncp macOS-3.11-wheel/*.whl wheelhouse/\ncp macOS-3.12-wheel/*.whl wheelhouse/\ncp Linux-3.9-wheel/*.whl wheelhouse/\ncp Linux-3.10-wheel/*.whl wheelhouse/\ncp Linux-3.11-wheel/*.whl wheelhouse/\ncp Linux-3.12-wheel/*.whl wheelhouse/\n# cp Windows-3.9-wheel/*.whl wheelhouse/\n# cp Windows-3.10-wheel/*.whl wheelhouse/\n# cp Windows-3.11-wheel/*.whl wheelhouse/\n# cp Windows-3.12-wheel/*.whl wheelhouse/\nls -la wheelhouse/\nsha256sum wheelhouse/*.whl\n"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "set -x -e\nsha256sum wheelhouse/*.whl | sort -u > wheelhouse.sha256\ngit rev-parse --verify HEAD > wheelhouse.commit\ngrep 'version = ' tensorflow_io/python/ops/version_ops.py  | sed -E 's@^.*version = \"@@g' | sed -E 's@\".*$@@g' > wheelhouse.version\ncat wheelhouse.sha256\ncat wheelhouse.commit\ncat wheelhouse.version\necho \"::set-output name=version::$(cat wheelhouse.version)\"\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cat <<EOF > Dockerfile\nFROM gcr.io/distroless/base-debian11\nCOPY wheelhouse /wheelhouse\nCOPY wheelhouse.sha256 /wheelhouse.sha256\nCOPY wheelhouse.commit /wheelhouse.commit\nCOPY wheelhouse.version /wheelhouse.version\nEOF"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "set -e -x\ndocker login --username tfsigio --password ${{ secrets.DOCKER_PASSWORD }}\nbash -x -e tools/docker/tests/dockerfile_cpu_test.sh\ndocker push tfsigio/tfio:latest\npython --version\nTFIO_VERSION=$(python setup.py --version | tail -1)\ndocker tag tfsigio/tfio:latest tfsigio/tfio:${TFIO_VERSION}\ndocker push tfsigio/tfio:${TFIO_VERSION}\nbash -x -e tools/docker/tests/dockerfile_devel_test.sh\ndocker push tfsigio/tfio:latest-devel\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "set -e -x\nBUILD_NUMBER=$(date \"+%Y%m%d%H%M%S\")\necho ${BUILD_NUMBER} > BUILD_NUMBER\n"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "einaregilsson/build-number@46decf22c413b48c8923e98b2b5836f8aaf7781e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "echo \"Build number is $BUILD_NUMBER\""
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 7,
                "name": "Wheel ${{ matrix.python }} macOS",
                "run": "set -x -e\npython -m pip install -U wheel setuptools\npython --version\npython setup.py --data bazel-bin -q bdist_wheel --plat-name macosx_10_14_x86_64 --nightly $BUILD_NUMBER\nrm -rf build\npython setup.py --project tensorflow-io-gcs-filesystem --data bazel-bin -q bdist_wheel --plat-name macosx_10_14_x86_64 --nightly $BUILD_NUMBER\n"
            },
            {
                "id": 8,
                "name": "Auditwheel ${{ matrix.python }} macOS",
                "run": "set -x -e\npython -m pip install twine delocate==0.10.3\ndelocate-wheel --version\nls dist/*\nmkdir -p wheelhouse\nfor f in dist/*.whl; do\n  echo \"disable delocate due to build breaks: delocate-wheel -w wheelhouse  $f\"\n  cp $f wheelhouse\ndone\nls wheelhouse/*\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "einaregilsson/build-number@46decf22c413b48c8923e98b2b5836f8aaf7781e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "echo \"Build number is $BUILD_NUMBER\""
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 6,
                "name": "Wheel ${{ matrix.python }} Linux",
                "run": "set -x -e\nmv bazel-bin/tensorflow_io/.bazelrc .\ndocker run -i --rm --user $(id -u):$(id -g) -v /etc/password:/etc/password -v $PWD:/v -w /v --net=host python:${{ matrix.python }}-slim python setup.py --data bazel-bin -q bdist_wheel --nightly $BUILD_NUMBER\nrm -rf build\ndocker run -i --rm --user $(id -u):$(id -g) -v /etc/password:/etc/password -v $PWD:/v -w /v --net=host python:${{ matrix.python }}-slim python setup.py --project tensorflow-io-gcs-filesystem --data bazel-bin -q bdist_wheel --nightly $BUILD_NUMBER\n"
            },
            {
                "id": 7,
                "name": "Auditwheel ${{ matrix.python }} Linux",
                "run": "set -x -e\nls dist/*\nfor f in dist/*.whl; do\n  docker run -i --rm -v $PWD:/v -w /v --net=host quay.io/pypa/manylinux2014_x86_64 bash -x -e /v/tools/build/auditwheel repair --plat manylinux2014_x86_64 $f\ndone\nsudo chown -R $(id -nu):$(id -ng) .\nls wheelhouse/*\n"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "einaregilsson/build-number@46decf22c413b48c8923e98b2b5836f8aaf7781e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "echo \"Build number is $BUILD_NUMBER\""
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 7,
                "name": "Wheel ${{ matrix.python }} Windows",
                "run": "@echo on\npython --version\npython -m pip install -U wheel setuptools\npython setup.py --data bazel-bin -q bdist_wheel --nightly %BUILD_NUMBER%\nrm -rf build\npython setup.py --project tensorflow-io-gcs-filesystem --data bazel-bin -q bdist_wheel --nightly %BUILD_NUMBER%\nls -la dist\n"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "set -e -x\nmkdir -p dist\ncp macOS-3.9-nightly/tensorflow_io_nightly*.whl dist/\ncp macOS-3.10-nightly/tensorflow_io_nightly*.whl dist/\ncp macOS-3.11-nightly/tensorflow_io_nightly*.whl dist/\ncp macOS-3.12-nightly/tensorflow_io_nightly*.whl dist/\ncp Linux-3.9-nightly/tensorflow_io_nightly*.whl dist/\ncp Linux-3.10-nightly/tensorflow_io_nightly*.whl dist/\ncp Linux-3.11-nightly/tensorflow_io_nightly*.whl dist/\ncp Linux-3.12-nightly/tensorflow_io_nightly*.whl dist/\ncp Windows-3.9-nightly/tensorflow_io_nightly*.whl dist/\ncp Windows-3.10-nightly/tensorflow_io_nightly*.whl dist/\ncp Windows-3.11-nightly/tensorflow_io_nightly*.whl dist/\ncp Windows-3.12-nightly/tensorflow_io_nightly*.whl dist/\nls -la dist/\nsha256sum dist/*.whl\n"
            },
            {
                "id": 14,
                "name": "Step 14",
                "run": "pypa/gh-action-pypi-publish@81e9d935c883d0b210363ab89cf05f3894778450"
            },
            {
                "id": 15,
                "name": "Step 15",
                "run": "set -e -x\nrm -rf dist\nmkdir -p dist\ncp macOS-3.9-nightly/tensorflow_io_gcs_filesystem_nightly*.whl dist/\ncp macOS-3.10-nightly/tensorflow_io_gcs_filesystem_nightly*.whl dist/\ncp macOS-3.11-nightly/tensorflow_io_gcs_filesystem_nightly*.whl dist/\ncp macOS-3.12-nightly/tensorflow_io_gcs_filesystem_nightly*.whl dist/\ncp Linux-3.9-nightly/tensorflow_io_gcs_filesystem_nightly*.whl dist/\ncp Linux-3.10-nightly/tensorflow_io_gcs_filesystem_nightly*.whl dist/\ncp Linux-3.11-nightly/tensorflow_io_gcs_filesystem_nightly*.whl dist/\ncp Linux-3.12-nightly/tensorflow_io_gcs_filesystem_nightly*.whl dist/\ncp Windows-3.9-nightly/tensorflow_io_gcs_filesystem_nightly*.whl dist/\ncp Windows-3.10-nightly/tensorflow_io_gcs_filesystem_nightly*.whl dist/\ncp Windows-3.11-nightly/tensorflow_io_gcs_filesystem_nightly*.whl dist/\ncp Windows-3.12-nightly/tensorflow_io_gcs_filesystem_nightly*.whl dist/\nls -la dist/\nsha256sum dist/*.whl\n"
            },
            {
                "id": 16,
                "name": "Step 16",
                "run": "pypa/gh-action-pypi-publish@81e9d935c883d0b210363ab89cf05f3894778450"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "set -e -x\ndocker login --username tfsigio --password ${{ secrets.DOCKER_PASSWORD }}\npython --version\nbash -x -e tools/docker/tests/dockerfile_nightly_test.sh\ndocker push tfsigio/tfio:nightly\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git tag"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "python3 tools/release/note_create.py"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "git diff"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "python3 tools/release/note_update.py"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "git diff"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "peter-evans/create-pull-request@6d6857d36972b65feb161a90e484f2984215f83e"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "set -x -e\nCOMMIT=$(git rev-parse --quiet --verify ${{ github.event.inputs.commit }})\nif [[ \"$(git tag -l ${{ github.event.inputs.version }})\" == \"${{ github.event.inputs.version }}\" ]]; then\n  echo \"${{ github.event.inputs.version }} already released\"\n  exit 1\nfi\nVERSION=${{ github.event.inputs.version }}\n\ndocker pull tfsigio/candidate:${VERSION:1}\ndocker create -it --name storage tfsigio/candidate:${VERSION:1} bash\ndocker cp storage:/wheelhouse .\ndocker cp storage:/wheelhouse.sha256 .\ndocker cp storage:/wheelhouse.commit .\ndocker cp storage:/wheelhouse.version .\n\nsha256sum wheelhouse/*.whl | sort -u | diff wheelhouse.sha256 -\nmv wheelhouse dist\n\nif [[ \"${COMMIT}\" != \"$(cat wheelhouse.commit)\" ]]; then\n  echo \"${COMMIT} != $(cat wheelhouse.commit)\"\n  exit 1\nfi\nif [[ \"${VERSION}\" != \"v$(cat wheelhouse.version)\" ]]; then\n  echo \"${VERSION} != v$(cat wheelhouse.version)\"\n  exit 1\nfi\n\npython3 tools/release/note_take.py ${VERSION}\n\necho \"::set-output name=tag::${VERSION}\"\necho \"::set-output name=name::TensorFlow I/O ${VERSION:1}\"\necho \"::set-output name=commit::${COMMIT}\"\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "set -x -e\necho ${{ steps.info.outputs.tag }}\necho ${{ steps.info.outputs.name }}\necho ${{ steps.info.outputs.commit }}\ncat CURRENT.md\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "softprops/action-gh-release@69320dbe05506a9a39fc8ae11030b214ec2d1f87"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pypa/gh-action-pypi-publish@81e9d935c883d0b210363ab89cf05f3894778450"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "sudo python3 -m pip install -U numpy pip black pyupgrade\nbazel run -s --verbose_failures --experimental_repo_remote_exec //tools/lint:lint -- bazel\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "reviewdog/action-suggester@185c9c06d0a28fbe43b50aca4b32777b649e7cbd"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "sudo python3 -m pip install -U numpy pip black pyupgrade\nbazel run -s --verbose_failures --experimental_repo_remote_exec //tools/lint:lint -- black\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "reviewdog/action-suggester@185c9c06d0a28fbe43b50aca4b32777b649e7cbd"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "sudo python3 -m pip install -U numpy pip black pyupgrade\nbazel run -s --verbose_failures --experimental_repo_remote_exec //tools/lint:lint -- clang\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "reviewdog/action-suggester@185c9c06d0a28fbe43b50aca4b32777b649e7cbd"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "sudo python3 -m pip install -U numpy pip black pyupgrade\nbazel run -s --verbose_failures --experimental_repo_remote_exec //tools/lint:lint -- pyupgrade\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "reviewdog/action-suggester@185c9c06d0a28fbe43b50aca4b32777b649e7cbd"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@9fdb3e49720b44c48891d036bb502feb25684276"
            }
        ],
        "tensorflow/tensorrt": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npython -m pip install -r requirements-test.txt\n"
            },
            {
                "id": 4,
                "name": "Test with pytest",
                "run": "pytest\n"
            }
        ],
        "tensorflow/addons": [
            {
                "id": 1,
                "name": "Backport Bot",
                "run": "Gaurav0/backport@d69fd1d2469762a7b4007f671857e4f94deed0af"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run flake8",
                "run": "bash tools/run_build.sh flake8-test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Ensure contributor used (\"black ./\") before commit",
                "run": "bash tools/run_build.sh black-test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run type check",
                "run": "bash tools/run_build.sh source_code_test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run type check",
                "run": "bash tools/run_build.sh valid_build_files"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run type check",
                "run": "bash tools/run_build.sh clang-format"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run type check",
                "run": "bash tools/run_build.sh check-bazel-format"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Checking the pre-commit",
                "run": "bash tools/pre-commit.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Building the docs",
                "run": "bash tools/run_build.sh docs_tests"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pip install --default-timeout=1000 -r tools/install_deps/tensorflow-cpu.txt -r tools/install_deps/pytest.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pip install -e ./"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pytest -v -n auto --skip-custom-ops ./tensorflow_addons"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "bash tools/run_cpu_tests.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install tensorflow-docs",
                "run": "python3 -m pip install -U git+https://github.com/tensorflow/docs"
            },
            {
                "id": 4,
                "name": "Check notebook formatting",
                "run": "# Run on all notebooks to prevent upstream change.\necho \"Check formatting with nbfmt:\"\npython3 -m tensorflow_docs.tools.nbfmt --test \\\n    $(find docs/tutorials/ -type f -name *.ipynb)\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install tensorflow-docs",
                "run": "python3 -m pip install -U git+https://github.com/tensorflow/docs"
            },
            {
                "id": 4,
                "name": "Lint notebooks",
                "run": "# Run on all notebooks to prevent upstream change.\necho \"Lint check with nblint:\"\npython3 -m tensorflow_docs.tools.nblint \\\n    --arg=repo:tensorflow/addons \\\n    $(find docs/tutorials/ -type f -name *.ipynb ! -path \"docs/tutorials/_template.ipynb\")\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pip install pygithub click"
            },
            {
                "id": 4,
                "name": "Drop a message for codeowners",
                "run": "python .github/workflows/notify_codeowners.py \\\n    --pull-request-id=auto \\\n    --no-dry-run\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "release-drafter/release-drafter@74e7c423dafbb406c9c18b1638334f67a7c891c3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Build wheels",
                "run": "pip install --default-timeout=1000 -r tools/install_deps/pytest.txt -r tools/install_deps/tensorflow-cpu.txt -r requirements.txt\nbash tools/install_deps/install_bazelisk.sh ./\npython configure.py\nbazel test -k --test_timeout 300,450,1200,3600 --test_output=errors //tensorflow_addons/...\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@0.3.0"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "echo \"SKIP_CUSTOM_OP_TESTS=--skip-custom-ops\" >> $GITHUB_ENV"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "echo \"NIGHTLY_FLAG=--nightly\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v2"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 6,
                "name": "Setup Bazel",
                "run": "bash tools/install_deps/install_bazelisk.sh ./"
            },
            {
                "id": 7,
                "name": "Build wheels",
                "run": "bash .github/workflows/make_wheel_${OS}_${CPU}.sh"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "set -e -x\nls -la dist/\nsha256sum dist/*.whl\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pypa/gh-action-pypi-publish@v1.1.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "set -e -x\necho ${{ secrets.DOCKER_PW }} | docker login --username ${{ secrets.DOCKER_USER }} --password-stdin\nbash .github/workflows/github_build_dev_container.sh\ndocker push tfaddons/dev_container:latest-gpu\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pip install pygithub click"
            },
            {
                "id": 4,
                "name": "Check that the CODEOWNERS is valid",
                "run": "python .github/workflows/notify_codeowners.py"
            }
        ],
        "tensorflow/graphics": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install system requirements",
                "run": "sudo xargs apt-get update\nsudo xargs apt-get -y install < requirements.unix\n"
            },
            {
                "id": 4,
                "name": "Install pip requirements",
                "run": "python -m pip install --upgrade pip\npip install -U -r requirements.txt\npip install -U pytest coveralls\npip install -U flake8\npip install -U setuptools wheel\n"
            },
            {
                "id": 5,
                "name": "Build ops",
                "run": "bazel build tensorflow_graphics/... --define=BASEDIR=$(pwd) --sandbox_writable_path=$(pwd)\nbazel clean --expunge\n"
            },
            {
                "id": 6,
                "name": "Run python tests and coverage",
                "run": "coverage run --source tensorflow_graphics -m py.test\ncoveralls --service=github\n"
            },
            {
                "id": 7,
                "name": "Linter",
                "run": "flake8 --config=.flake8 tensorflow_graphics/\n"
            },
            {
                "id": 8,
                "name": "Build pip package and install",
                "run": "python setup.py sdist bdist_wheel\npip install dist/*.whl\n"
            },
            {
                "id": 9,
                "name": "Test install",
                "run": "cd $(mktemp -d) && python -c 'import tensorflow_graphics as tfg'\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install system dependencies",
                "run": "sudo xargs apt-get update\nsudo xargs apt-get -y install < requirements.unix\n"
            },
            {
                "id": 4,
                "name": "Install pip requirements",
                "run": "python -m pip install --upgrade pip\npip install -U -r requirements.txt\npip install -U pytest\npip install -U setuptools wheel\npip install -U twine\n"
            },
            {
                "id": 5,
                "name": "Build ops",
                "run": "bazel build tensorflow_graphics/... --define=BASEDIR=$(pwd) --sandbox_writable_path=$(pwd)\nbazel clean --expunge\n"
            },
            {
                "id": 6,
                "name": "Run python tests",
                "run": "pytest tensorflow_graphics\n"
            },
            {
                "id": 7,
                "name": "Build pip package and install",
                "run": "python setup.py sdist bdist_wheel\npip install dist/*.whl\n"
            },
            {
                "id": 8,
                "name": "Test install",
                "run": "cd $(mktemp -d) && python -c 'import tensorflow_graphics as tfg'\n"
            },
            {
                "id": 9,
                "name": "Publish to PyPi",
                "run": "twine upload dist/*\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install system dependencies",
                "run": "sudo xargs apt-get update\nsudo xargs apt-get -y install < requirements.unix\n"
            },
            {
                "id": 4,
                "name": "Install pip requirements",
                "run": "python -m pip install --upgrade pip\npip install -U -r requirements.txt\npip install -U pytest\npip install -U setuptools wheel\npip install -U twine\n"
            },
            {
                "id": 5,
                "name": "Build ops",
                "run": "bazel build tensorflow_graphics/... --define=BASEDIR=$(pwd) --sandbox_writable_path=$(pwd)\nbazel clean --expunge\n"
            },
            {
                "id": 6,
                "name": "Run python tests",
                "run": "pytest tensorflow_graphics\n"
            },
            {
                "id": 7,
                "name": "Build pip package and install",
                "run": "python setup.py sdist bdist_wheel --nightly\npip install dist/*.whl\n"
            },
            {
                "id": 8,
                "name": "Test install",
                "run": "cd $(mktemp -d) && python -c 'import tensorflow_graphics as tfg'\n"
            },
            {
                "id": 9,
                "name": "Publish to PyPi",
                "run": "twine upload dist/*\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install system dependencies",
                "run": "sudo xargs apt-get update\nsudo xargs apt-get -y install < requirements.unix\n"
            },
            {
                "id": 4,
                "name": "Install pip requirements",
                "run": "python -m pip install --upgrade pip\npip install -U -r requirements.txt\npip install -U pytest\npip install -U setuptools wheel\npip install -U twine\n"
            },
            {
                "id": 5,
                "name": "Build ops",
                "run": "bazel build tensorflow_graphics/... --define=BASEDIR=$(pwd) --sandbox_writable_path=$(pwd)\nbazel clean --expunge\n"
            },
            {
                "id": 6,
                "name": "Run python tests",
                "run": "pytest tensorflow_graphics\n"
            },
            {
                "id": 7,
                "name": "Build pip package and install",
                "run": "python setup.py sdist bdist_wheel --nightly\npip install dist/*.whl\n"
            },
            {
                "id": 8,
                "name": "Test install",
                "run": "cd $(mktemp -d) && python -c 'import tensorflow_graphics as tfg'\n"
            },
            {
                "id": 9,
                "name": "Publish to PyPi",
                "run": "twine upload --repository testpypi dist/*\n"
            }
        ],
        "tensorflow/tfx": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Get Changed Files",
                "run": "trilom/file-changes-action@v1.2.4"
            },
            {
                "id": 3,
                "name": "Select files to check",
                "run": "# Filter out non-python files.\n(cat $HOME/files_added.txt; echo; cat $HOME/files_modified.txt) | tr ' ' '\\n' | grep '\\.py$' > py_files.txt || true\n# Filter out non-test python files and e2e or integration tests.\ncat py_files.txt | grep '_test\\.py$' | grep -v _e2e_ | grep -v integration | grep -v 'examples/' > py_test_files.txt || true\n# Select proto files.\n(cat $HOME/files_added.txt; echo; cat $HOME/files_modified.txt) | tr ' ' '\\n' | grep '\\.proto$' > proto_files.txt || true\n"
            },
            {
                "id": 4,
                "name": "Set up Python 3.9",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 5,
                "name": "Set up Bazel 5.3.0",
                "run": "# Instruction from https://docs.bazel.build/versions/master/install-ubuntu.html\ncurl -sSL https://github.com/bazelbuild/bazel/releases/download/5.3.0/bazel-5.3.0-installer-linux-x86_64.sh -o bazel_installer.sh\nchmod +x bazel_installer.sh\nsudo ./bazel_installer.sh\n"
            },
            {
                "id": 6,
                "name": "Cache pip",
                "run": "actions/cache@v2"
            },
            {
                "id": 7,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip wheel\n# TODO(b/232490018): Cython need to be installed separately to build pycocotools.\npython -m pip install Cython -c ./test_constraints.txt\nTFX_DEPENDENCY_SELECTOR=NIGHTLY pip install -c ./test_constraints.txt --extra-index-url https://pypi-nightly.tensorflow.org/simple --pre --editable .[all]\n"
            },
            {
                "id": 8,
                "name": "Run unit tests",
                "run": "[ ! -s \"py_test_files.txt\" ] || cat py_test_files.txt | xargs -I {} python {}\n"
            },
            {
                "id": 9,
                "name": "Lint with protolint",
                "run": "curl -sSOL https://github.com/yoheimuta/protolint/releases/download/v${PROTOLINT_VERSION}/protolint_${PROTOLINT_VERSION}_Linux_x86_64.tar.gz\ntar zxf protolint_${PROTOLINT_VERSION}_Linux_x86_64.tar.gz\necho \"[NOTE] This linter is currently EXPERIMENTAL.=======================================\"\necho \"Please contact reviewers for existing lint errors or false negative errors.\"\necho \"====================================================================================\"\n[ ! -s \"proto_files.txt\" ] || cat proto_files.txt | xargs -I {} ./protolint {}\n"
            },
            {
                "id": 10,
                "name": "Lint with pylint",
                "run": "pip install pylint\necho \"[NOTE] This linter is currently EXPERIMENTAL.=======================================\"\necho \"Please contact reviewers for existing lint errors or false negative errors.\"\necho \"Feel free to send PRs for pylintrc in the root directory of the repository if needed.\"\necho \"====================================================================================\"\n[ ! -s \"py_files.txt\" ] || pylint $(cat py_files.txt | tr '\\n' ' ')\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v7"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/github-script@v6"
            }
        ],
        "tensorflow/swift-apis": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install swift-DEVELOPMENT-SNAPSHOT-2020-12-14-a",
                "run": "curl -sOL https://swift.org/builds/development/xcode/swift-DEVELOPMENT-SNAPSHOT-2020-12-14-a/swift-DEVELOPMENT-SNAPSHOT-2020-12-14-a-osx.pkg\nxattr -dr com.apple.quarantine swift-DEVELOPMENT-SNAPSHOT-2020-12-14-a-osx.pkg\ninstaller -pkg swift-DEVELOPMENT-SNAPSHOT-2020-12-14-a-osx.pkg -target CurrentUserHomeDirectory\n"
            },
            {
                "id": 3,
                "name": "Set Environment Variables",
                "run": "echo \"TOOLCHAINS=...\" > $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Install X10",
                "run": "curl -sL https://artprodeus21.artifacts.visualstudio.com/A8fd008a0-56bc-482c-ba46-67f9425510be/3133d6ab-80a8-4996-ac4f-03df25cd3224/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2NvbXBuZXJkL3Byb2plY3RJZC8zMTMzZDZhYi04MGE4LTQ5OTYtYWM0Zi0wM2RmMjVjZDMyMjQvYnVpbGRJZC80NTU3NC9hcnRpZmFjdE5hbWUvdGVuc29yZmxvdy1kYXJ3aW4teDY00/content?format=zip -o tensorflow-darwin-x64.zip\nunzip tensorflow-darwin-x64.zip\nmv tensorflow-darwin-x64/Library/tensorflow-2.4.0 ~/Library/\n"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "TOOLCHAINS=org.swift.50202012141a swift build -v -Xswiftc -DTENSORFLOW_USE_STANDARD_TOOLCHAIN -Xcc -I${HOME}/Library/tensorflow-2.4.0/usr/include -Xlinker -L${HOME}/Library/tensorflow-2.4.0/usr/lib\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "seanmiddleditch/gha-setup-vsdevenv@master"
            },
            {
                "id": 3,
                "name": "Install swift-DEVELOPMENT-SNAPSHOT-2020-12-14-a",
                "run": "Install-Binary -Url \"https://swift.org/builds/development/windows10/swift-DEVELOPMENT-SNAPSHOT-2020-12-14-a/swift-DEVELOPMENT-SNAPSHOT-2020-12-14-a-windows10.exe\" -Name \"installer.exe\" -ArgumentList (\"-q\")\n"
            },
            {
                "id": 4,
                "name": "Set Environment Variables",
                "run": "echo \"SDKROOT=C:\\Library\\Developer\\Platforms\\Windows.platform\\Developer\\SDKs\\Windows.sdk\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DEVELOPER_DIR=C:\\Library\\Developer\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 5,
                "name": "Adjust Paths",
                "run": "echo \"C:\\Library\\Swift-development\\bin;C:\\Library\\icu-67\\usr\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\necho \"C:\\Library\\Developer\\Toolchains\\unknown-Asserts-development.xctoolchain\\usr\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n"
            },
            {
                "id": 6,
                "name": "Install Supporting Files",
                "run": "Copy-Item \"$env:SDKROOT\\usr\\share\\ucrt.modulemap\" -destination \"$env:UniversalCRTSdkDir\\Include\\$env:UCRTVersion\\ucrt\\module.modulemap\"\nCopy-Item \"$env:SDKROOT\\usr\\share\\visualc.modulemap\" -destination \"$env:VCToolsInstallDir\\include\\module.modulemap\"\nCopy-Item \"$env:SDKROOT\\usr\\share\\visualc.apinotes\" -destination \"$env:VCToolsInstallDir\\include\\visualc.apinotes\"\nCopy-Item \"$env:SDKROOT\\usr\\share\\winsdk.modulemap\" -destination \"$env:UniversalCRTSdkDir\\Include\\$env:UCRTVersion\\um\\module.modulemap\"\n"
            },
            {
                "id": 7,
                "name": "Install X10",
                "run": "Invoke-WebRequest -UseBasicParsing -Uri https://artprodeus21.artifacts.visualstudio.com/A8fd008a0-56bc-482c-ba46-67f9425510be/3133d6ab-80a8-4996-ac4f-03df25cd3224/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2NvbXBuZXJkL3Byb2plY3RJZC8zMTMzZDZhYi04MGE4LTQ5OTYtYWM0Zi0wM2RmMjVjZDMyMjQvYnVpbGRJZC80NTU3NC9hcnRpZmFjdE5hbWUvdGVuc29yZmxvdy13aW5kb3dzLXg2NA2/content?format=zip -OutFile tensorflow-windows-x64.zip\nExpand-Archive -Force -Path tensorflow-windows-x64.zip -DestinationPath C:\\Library\\\nMove-Item C:\\Library\\tensorflow-windows-x64\\Library\\tensorflow-2.4.0 C:\\Library\necho \"C:\\Library\\tensorflow-2.4.0\\usr\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n"
            },
            {
                "id": 8,
                "name": "Build",
                "run": "# We build twice as the first one currently fails for some unexplained\n# reason.  This should only build once.\nswift build -v -Xswiftc -DTENSORFLOW_USE_STANDARD_TOOLCHAIN -Xcc -IC:\\Library\\tensorflow-2.4.0\\usr\\include -Xlinker -LC:\\Library\\tensorflow-2.4.0\\usr\\lib\nswift build -v -Xswiftc -DTENSORFLOW_USE_STANDARD_TOOLCHAIN -Xcc -IC:\\Library\\tensorflow-2.4.0\\usr\\include -Xlinker -LC:\\Library\\tensorflow-2.4.0\\usr\\lib\n"
            }
        ],
        "tensorflow/java": [
            {
                "id": 1,
                "name": "Configure Java",
                "run": "actions/setup-java@v2"
            },
            {
                "id": 2,
                "name": "Checkout repository",
                "run": "actions/checkout@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": "gcc --version\nmvn -version\nmvn clean install -Pjdk17 -B -U -e -Dlint.skip=true -Dmaven.test.skip=true\n"
            },
            {
                "id": 4,
                "name": "Run format checks",
                "run": "mvn spotless:check -Pjdk17 -B -U -e\n"
            },
            {
                "id": 1,
                "name": "Create staging repository",
                "run": "echo \"Creating staging repository with profile $STAGING_PROFILE_ID\"\necho \"<promoteRequest><data><description>Releasing TF Java - created by CI build</description></data></promoteRequest>\" > request.xml\ncurl -X POST -d @request.xml -s -o response.xml -u ${{ secrets.CI_DEPLOY_USERNAME }}:${{ secrets.CI_DEPLOY_PASSWORD }} -H \"Content-Type:application/xml\" \\\n    https://oss.sonatype.org/service/local/staging/profiles/$STAGING_PROFILE_ID/start\nexport STAGING_REPOSITORY_ID=`awk -F'[<>]' '/stagedRepositoryId/{print $3}' response.xml`\necho \"Staging repository created: $STAGING_REPOSITORY_ID\"\necho \"::set-output name=stagingRepositoryId::$STAGING_REPOSITORY_ID\"\n"
            },
            {
                "id": 2,
                "name": "Checkout repository",
                "run": "actions/checkout@v1"
            },
            {
                "id": 3,
                "name": "Extract distribution repository URL",
                "run": "if [[ \"${{ env.DEPLOY_RELEASE }}\" = \"true\" ]]; then\n  export REPOSITORY_URL=`mvn exec:exec -q -N -Dexec.executable='echo' -Dexec.args=\"\\\\${project.distributionManagement.repository.url}\" -DstagingRepositoryId=${{ steps.staging.outputs.stagingRepositoryId }}`\nelse\n  export REPOSITORY_URL=`mvn exec:exec -q -N -Dexec.executable='echo' -Dexec.args=\"\\\\${project.distributionManagement.snapshotRepository.url}\"`\nfi\necho \"Repository URL: $REPOSITORY_URL\"\necho \"::set-output name=repositoryUrl::$REPOSITORY_URL\"\n"
            },
            {
                "id": 1,
                "name": "Configure Java",
                "run": "actions/setup-java@v2"
            },
            {
                "id": 2,
                "name": "Checkout repository",
                "run": "actions/checkout@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": "gcc --version\nmvn -version\necho \"<settings><servers><server><id>ossrh</id><username>${{ secrets.CI_DEPLOY_USERNAME }}</username><password>${{ secrets.CI_DEPLOY_PASSWORD }}</password></server></servers></settings>\" > $HOME/.m2/settings.xml\nmvn clean install -pl '!tensorflow-framework' -B -U -e -Djavacpp.platform=${{ github.job }} -Djavacpp.platform.extension=${{ matrix.ext }}\n"
            },
            {
                "id": 4,
                "name": "Deploy native artifact",
                "run": "mvn -f tensorflow-core/tensorflow-core-native/pom.xml deploy:deploy-file@native-only -B -e -Djavacpp.platform=${{ github.job }} -Djavacpp.platform.extension=${{ matrix.ext }} -Durl=${{ needs.prepare.outputs.repositoryUrl }}"
            },
            {
                "id": 1,
                "name": "Configure Java",
                "run": "actions/setup-java@v2"
            },
            {
                "id": 2,
                "name": "Checkout repository",
                "run": "actions/checkout@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": "clang --version\nmvn -version\necho \"<settings><servers><server><id>ossrh</id><username>${{ secrets.CI_DEPLOY_USERNAME }}</username><password>${{ secrets.CI_DEPLOY_PASSWORD }}</password></server></servers></settings>\" > $HOME/.m2/settings.xml\nmvn clean install -pl '!tensorflow-framework' -B -U -e -Djavacpp.platform=${{ github.job }} -Djavacpp.platform.extension=${{ matrix.ext }}\n"
            },
            {
                "id": 4,
                "name": "Deploy native artifact",
                "run": "mvn -f tensorflow-core/tensorflow-core-native/pom.xml deploy:deploy-file@native-only -B -e -Djavacpp.platform=${{ github.job }} -Djavacpp.platform.extension=${{ matrix.ext }} -Durl=${{ needs.prepare.outputs.repositoryUrl }}"
            },
            {
                "id": 1,
                "name": "Configure Java",
                "run": "actions/setup-java@v2"
            },
            {
                "id": 2,
                "name": "Checkout repository",
                "run": "actions/checkout@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": "clang --version\nmvn -version\necho \"<settings><servers><server><id>ossrh</id><username>${{ secrets.CI_DEPLOY_USERNAME }}</username><password>${{ secrets.CI_DEPLOY_PASSWORD }}</password></server></servers></settings>\" > $HOME/.m2/settings.xml\nmvn clean install -pl '!tensorflow-framework' -B -U -e -Djavacpp.platform=${{ github.job }} -Djavacpp.platform.extension=${{ matrix.ext }}\n"
            },
            {
                "id": 4,
                "name": "Deploy native artifact",
                "run": "mvn -f tensorflow-core/tensorflow-core-native/pom.xml deploy:deploy-file@native-only -B -e -Djavacpp.platform=${{ github.job }} -Djavacpp.platform.extension=${{ matrix.ext }} -Durl=${{ needs.prepare.outputs.repositoryUrl }}"
            },
            {
                "id": 1,
                "name": "Install environment",
                "run": "set \"PATH=C:\\msys64\\usr\\bin;%PATH%\"\npython -m pip install numpy six\nset \"EXT=${{ matrix.ext }}\"\necho %JAVA_HOME%\n"
            },
            {
                "id": 2,
                "name": "Configure Java",
                "run": "actions/setup-java@v2"
            },
            {
                "id": 3,
                "name": "Checkout repository",
                "run": "actions/checkout@v1"
            },
            {
                "id": 4,
                "name": "Build project",
                "run": "call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat\" amd64\nset \"PATH=C:\\msys64\\usr\\bin;%PATH%\"\necho Shorten work paths to prevent Bazel from reaching MAX_PATH limit\nmkdir C:\\tmp\nset \"TEST_TMPDIR=C:\\tmp\"\nset \"TMPDIR=C:\\tmp\"\nset \"TEMP=C:\\tmp\"\nset \"TMP=C:\\tmp\"      \nbash --version\ngit --version\ncl\ncall mvn -version\necho ^<settings^>^<servers^>^<server^>^<id^>ossrh^</id^>^<username^>${{ secrets.CI_DEPLOY_USERNAME }}^</username^>^<password^>${{ secrets.CI_DEPLOY_PASSWORD }}^</password^>^</server^>^</servers^>^</settings^> > %USERPROFILE%\\.m2\\settings.xml\nset \"SKIP_EXPORT=true\"\ncall mvn clean install -pl \"!tensorflow-framework\" -B -U -e -Djavacpp.platform=${{ github.job }} -Djavacpp.platform.extension=${{ matrix.ext }}\nif ERRORLEVEL 1 exit /b\n"
            },
            {
                "id": 5,
                "name": "Deploy native artifact",
                "run": "call mvn -f tensorflow-core/tensorflow-core-native/pom.xml deploy:deploy-file@native-only -B -e -Djavacpp.platform=${{ github.job }} -Djavacpp.platform.extension=${{ matrix.ext }} -Durl=${{ needs.prepare.outputs.repositoryUrl }}\nif ERRORLEVEL 1 exit /b\n"
            },
            {
                "id": 1,
                "name": "Configure Java",
                "run": "actions/setup-java@v2"
            },
            {
                "id": 2,
                "name": "Checkout repository",
                "run": "actions/checkout@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": "java -version\nmvn -version\nmvn clean install -B -U -e -Pdeploying\n"
            },
            {
                "id": 4,
                "name": "Deploy snapshot artifacts",
                "run": "echo \"<settings><servers><server><id>ossrh</id><username>${{ secrets.CI_DEPLOY_USERNAME }}</username><password>${{ secrets.CI_DEPLOY_PASSWORD }}</password></server></servers></settings>\" > $HOME/.m2/settings.xml\nmvn deploy -Pdeploying -B -e -Dmaven.test.skip=true\n"
            }
        ],
        "tensorflow/build": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"
            },
            {
                "id": 2,
                "name": "Download previous workflow's data",
                "run": "dawidd6/action-download-artifact@v2"
            },
            {
                "id": 3,
                "name": "Overwrite data, if provided",
                "run": "mkdir -p tf_oss_dashboard/${{matrix.config}}\ngit clone \"https://gist.github.com/${{github.event.inputs.gist}}.git\" gist\ncd gist\nif [[ -s ${{matrix.config}} ]]; then\n  mv ${{matrix.config}} ../tf_oss_dashboard/${{matrix.config}}/old.json\nfi\n"
            },
            {
                "id": 4,
                "name": "Run Script",
                "run": "./merge_and_generate.sh ${{matrix.config}}"
            },
            {
                "id": 5,
                "name": "Upload ongoing data and dashboard output",
                "run": "actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 3,
                "name": "Move dashboard around, include all generated files",
                "run": "mv artifacts/tensorflow .site\nmv -t .site tf_oss_dashboard/*\nrmdir artifacts || mv -t .site artifacts/*\n"
            },
            {
                "id": 4,
                "name": "Setup Pages",
                "run": "actions/configure-pages@v3"
            },
            {
                "id": 5,
                "name": "Upload pages artifact",
                "run": "actions/upload-pages-artifact@v1"
            },
            {
                "id": 6,
                "name": "Deploy to GitHub Pages",
                "run": "actions/deploy-pages@v1"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@15c10fcf1cf912bd22260bfec67569a359ab87da"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@896079047b4bb059ba6f150a5d87d47dde99e6e5"
            }
        ],
        "tensorflow/docs-l10n": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Update list of failing nootebooks",
                "run": "bash ./tools/notebook-status.sh"
            },
            {
                "id": 3,
                "name": "setup git config",
                "run": "git config user.name \"GitHub Action\"\ngit config user.email \"<>\"\n"
            },
            {
                "id": 4,
                "name": "Commit changes",
                "run": "# Stage, commit and push\ngit add *\ngit commit -m \"Update failing notebook lists\"\ngit push\n"
            }
        ],
        "tensorflow/cloud": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install flake8 pytest mock\n"
            },
            {
                "id": 4,
                "name": "Install tensorflow cloud from setup",
                "run": "pip install src/python/.\npip install nbconvert\n"
            },
            {
                "id": 5,
                "name": "Lint with flake8",
                "run": "# stop the build if there are Python syntax errors or undefined names\nflake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n# exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\nflake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n"
            },
            {
                "id": 6,
                "name": "Test with pytest",
                "run": "pytest src/python/tensorflow_cloud/core/tests/unit/\n"
            }
        ],
        "tensorflow/similarity": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "check modified files",
                "run": "echo \"=============== list modified files ===============\"\ngit diff --name-only HEAD^ HEAD\n\necho \"========== check paths of modified files ==========\"\ngit diff --name-only HEAD^ HEAD > files.txt\nwhile IFS= read -r file\ndo\n  echo $file\n  if [[ $file = tensorflow_similarity/* && $file != tensorflow_similarity/__init__.py ]]; then\n    echo \"This modified file is under the 'tensorflow_similarity' folder.\"\n    echo \"::set-output name=run_job::true\"\n    break\n  else\n    echo \"::set-output name=run_job::false\"\n  fi\ndone < files.txt\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\n"
            },
            {
                "id": 4,
                "name": "Install package",
                "run": "pip install \".[tensorflow,dev]\"\n"
            },
            {
                "id": 5,
                "name": "Increment dev version",
                "run": "# Increments the dev version and pushes the changes to development.\npython scripts/increment_version.py\n"
            },
            {
                "id": 6,
                "name": "Build package",
                "run": "python setup.py sdist bdist_wheel --project_name tfsim-nightly\n"
            },
            {
                "id": 7,
                "name": "Publish package",
                "run": "twine upload -u ${{ secrets.PYPI_NIGHTLY_USERNAME }} -p ${{ secrets.PYPI_NIGHTLY_TOKEN }} dist/* --verbose\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\n"
            },
            {
                "id": 4,
                "name": "Install package",
                "run": "pip install \".[tensorflow,dev]\"\n"
            },
            {
                "id": 5,
                "name": "Build package",
                "run": "python setup.py sdist bdist_wheel\n"
            },
            {
                "id": 6,
                "name": "Publish package",
                "run": "twine upload -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPY_TOKEN }} dist/* --verbose\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install coveralls\n"
            },
            {
                "id": 4,
                "name": "Install TF package",
                "run": "pip install tensorflow==${{ matrix.tf-version }}\n# Fix proto dep issue in protobuf 4\npip install protobuf==3.20.*\n"
            },
            {
                "id": 5,
                "name": "Install dev packages",
                "run": "pip install \".[dev,visualization,redis,faiss,nmslib]\"\n"
            },
            {
                "id": 6,
                "name": "Lint with flake8",
                "run": "# stop the build if there are Python syntax errors or undefined names\nflake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n# exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\nflake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n"
            },
            {
                "id": 7,
                "name": "Static analysis",
                "run": "mypy  tensorflow_similarity/ --raise-exceptions\n"
            },
            {
                "id": 8,
                "name": "Test with pytest",
                "run": "coverage run -m pytest tests/\n"
            },
            {
                "id": 9,
                "name": "Upload coverage to Coveralls",
                "run": "coveralls --service=github\n"
            },
            {
                "id": 10,
                "name": "Check black formatting",
                "run": "psf/black@stable"
            },
            {
                "id": 11,
                "name": "Check isort",
                "run": "isort/isort-action@master"
            },
            {
                "id": 1,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install coveralls\n"
            },
            {
                "id": 2,
                "name": "Finished",
                "run": "coveralls --service=github --finish\n"
            }
        ],
        "tensorflow/recommenders": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Get file changes",
                "run": "trilom/file-changes-action@v1.2.4"
            },
            {
                "id": 3,
                "name": "Report list of changed files",
                "run": "echo Changed files: ${{ steps.get_file_changes.outputs.files }}\n"
            },
            {
                "id": 4,
                "name": "Set up Python 3.9",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 5,
                "name": "Install Python dependencies",
                "run": "python -m pip install --upgrade pip\npip install pylint numpy wheel\n"
            },
            {
                "id": 6,
                "name": "Run PyLint on changed files",
                "run": "echo \"${{ steps.get_file_changes.outputs.files}}\" | tr \" \" \"\\n\" | grep \".py$\" | xargs pylint --rcfile=.pylintrc\n"
            }
        ],
        "tensorflow/tfhub.dev": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install packages",
                "run": "pip install absl-py attrs tensorflow tensorflow_hub pyaml ruamel.yaml\npip freeze all\n"
            },
            {
                "id": 4,
                "name": "Debug information",
                "run": "echo $(git status)\necho $(git branch)\necho $(git remote)\necho $(git diff origin/master --name-only)\necho $(ls)\n"
            },
            {
                "id": 5,
                "name": "Run validator on changed files",
                "run": "git diff origin/master --name-only --relative=assets/docs | xargs python3.7 ./tools/validator.py\npython3.7 ./tools/tags_validator_main.py\n"
            },
            {
                "id": 1,
                "name": "Comment on PR",
                "run": "curl \\\n  -X POST \\\n  $URL \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: token $GITHUB_TOKEN\" \\\n  --data '{ \"body\": \"Thank you for your contribution. Your pull request has been accepted according to the TensorFlow Hub Terms of Service at www.tfhub.dev/terms and Google'\\''s Privacy Policy at https://www.google.com/policies/privacy. Your model should appear on tfhub.dev within a day.\" }'\n"
            },
            {
                "id": 1,
                "name": "Comment on PR",
                "run": "curl \\\n  -X POST \\\n  $URL \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: token $GITHUB_TOKEN\" \\\n  --data '{ \"body\": \"By opening this pull request, you are agreeing to the TensorFlow Hub Terms of Service at www.tfhub.dev/terms and Google'\\''s Privacy Policy at https://www.google.com/policies/privacy, and your pull request is being reviewed.\" }'\n"
            }
        ],
        "tensorflow/model-card-toolkit": [
            {
                "id": 1,
                "name": "Checkout the latest code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Automatic cherry pick",
                "run": "vendoo/gha-cherry-pick@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python 3.8",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Cache python environment",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip wheel\npython -m pip install -e \".[${{ matrix.dependencies }}]\"\n"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "pytest ${{ matrix.tests }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Run pre-commit checks (pylint/yapf/isort)",
                "run": "pre-commit/action@v3.0.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Build wheel",
                "run": "bash -x package_build/initialize.sh; \\\nCFLAGS=$(/usr/bin/python-config --cflags) \\\n  python package_build/model-card-toolkit/setup.py bdist_wheel; \\\nMCT_WHEEL=$(find dist -name 'model_card_toolkit-*.whl'); \\\n"
            },
            {
                "id": 3,
                "name": "Publish Model Card Toolkit distribution package to Test PyPI",
                "run": "pypa/gh-action-pypi-publish@v1.8.6"
            },
            {
                "id": 4,
                "name": "Publish Model Card Toolkit distribution package to PyPI",
                "run": "pypa/gh-action-pypi-publish@v1.8.6"
            },
            {
                "id": 5,
                "name": "Upload files to a GitHub release",
                "run": "svenstaro/upload-release-action@2.6.1"
            }
        ],
        "tensorflow/recommenders-addons": [
            {
                "id": 1,
                "name": "Backport Bot",
                "run": "Gaurav0/backport@d69fd1d2469762a7b4007f671857e4f94deed0af"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Ensure contributor used (\"yapf --style=./.yapf -ri ./**/*.py\") before commit",
                "run": "bash tools/run_build.sh yapf-test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Run type check",
                "run": "bash tools/run_build.sh source_code_test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run type check",
                "run": "bash tools/run_build.sh valid_build_files"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run type check",
                "run": "bash tools/run_build.sh clang-format"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run type check",
                "run": "bash tools/run_build.sh check-bazel-format"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Checking the pre-commit",
                "run": "bash tools/pre-commit.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Building the docs",
                "run": "bash tools/run_build.sh docs_tests"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "bash tools/run_cpu_tests.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pip install pygithub click"
            },
            {
                "id": 4,
                "name": "Check that the CODEOWNERS is valid",
                "run": "python .github/workflows/notify_codeowners.py .github/CODEOWNERS"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install tensorflow-docs",
                "run": "python3 -m pip install -U git+https://github.com/tensorflow/docs"
            },
            {
                "id": 4,
                "name": "Check notebook formatting",
                "run": "# Run on all notebooks to prevent upstream change.\necho \"Check formatting with nbfmt:\"\npython3 -m pip install --upgrade protobuf==4.23.4\npython3 -m tensorflow_docs.tools.nbfmt --test \\\n    $(find docs/tutorials/ -type f -name *.ipynb)\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install tensorflow-docs",
                "run": "python3 -m pip install -U git+https://github.com/tensorflow/docs"
            },
            {
                "id": 4,
                "name": "Lint notebooks",
                "run": "# Run on all notebooks to prevent upstream change.\necho \"Lint check with nblint:\"\npython3 -m pip install --upgrade protobuf==4.23.4\npython3 -m tensorflow_docs.tools.nblint \\\n    --arg=repo:tensorflow/recommenders-addons \\\n    --exclude_lint=tensorflow::button_colab \\\n    --exclude_lint=google::second_person \\\n    --exclude_lint=tensorflow::button_download \\\n    --exclude_lint=tensorflow::button_github \\\n    --exclude_lint=tensorflow::button_website \\\n    $(find docs/tutorials/ -type f -name *.ipynb ! -path \"docs/tutorials/_template.ipynb\")\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pip install pygithub click"
            },
            {
                "id": 4,
                "name": "Drop a message for codeowners",
                "run": "python .github/workflows/notify_codeowners.py \\\n    --pull-request-id=auto \\\n    --no-dry-run \\\n    .github/CODEOWNERS\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "release-drafter/release-drafter@74e7c423dafbb406c9c18b1638334f67a7c891c3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Build wheels",
                "run": "pip install --default-timeout=1000 -r tools/install_deps/pytest.txt -r tools/install_deps/tensorflow.txt -r requirements.txt\nsudo apt install -y redis > /dev/null 2> /dev/null\nbash tools/install_deps/install_bazelisk.sh ./\npython -m pip install tensorflow-io\npython -m pip install --upgrade protobuf==4.23.4\npython configure.py\nbazel test --local_ram_resources=4096 -c opt -k --test_timeout 300,450,1200,3600 --test_output=errors //tensorflow_recommenders_addons/...\n"
            },
            {
                "id": 1,
                "name": "clear cache folder",
                "run": "rm -rf /usr/share/dotnet /opt/ghc \"/usr/local/share/boost\""
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/github-script@0.3.0"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "echo \"SKIP_CUSTOM_OP_TESTS=--skip-custom-ops\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "echo \"NIGHTLY_FLAG=--nightly\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/checkout@v2"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 7,
                "name": "Setup Bazel",
                "run": "bash tools/install_deps/install_bazelisk.sh ./"
            },
            {
                "id": 8,
                "name": "Build wheels",
                "run": "if [[ \"$TF_VERSION\" =~ ^2\\.(11|12|13|14|15)\\.[0-9]$ ]] ; then\n  export HOROVOD_VERSION=\"0.28.1\"\nfi\nbash .github/workflows/make_wheel_${OS}_${CPU}.sh\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "haya14busa/action-cond@v1"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "clear cache folder",
                "run": "rm -rf /usr/share/dotnet /opt/ghc \"/usr/local/share/boost\""
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/github-script@0.3.0"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "echo \"SKIP_CUSTOM_OP_TESTS=--skip-custom-ops\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "echo \"NIGHTLY_FLAG=--nightly\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/checkout@v2"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 7,
                "name": "Setup Bazel",
                "run": "bash tools/install_deps/install_bazelisk.sh ./"
            },
            {
                "id": 8,
                "name": "Build wheels",
                "run": "if [[ \"$TF_VERSION\" =~ ^2\\.(11|12|13|14|15)\\.[0-9]$ ]] ; then\n  export HOROVOD_VERSION=\"0.28.1\"\nfi\nbash .github/workflows/make_wheel_${OS}_${CPU}.sh\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "haya14busa/action-cond@v1"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "haya14busa/action-cond@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "set -e -x\nls -la dist/\nsha256sum dist/*.whl\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pypa/gh-action-pypi-publish@v1.1.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "set -e -x\necho ${{ secrets.DOCKER_PW }} | docker login --username ${{ secrets.DOCKER_USER }} --password-stdin\nexport PY_VERSION=${{ matrix.py-version }}\nbash .github/workflows/github_build_dev_container.sh\ndocker push tfra/dev_container:latest-python${{ matrix.py-version }}"
            }
        ],
        "tensorflow/tfx-addons": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Run Codeowners merge check",
                "run": "casassg/auto-merge-bot@v0.3"
            },
            {
                "id": 1,
                "name": "Checkout the latest code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Automatic Cherry Pick",
                "run": "vendoo/gha-cherry-pick@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Get Changed Files",
                "run": "trilom/file-changes-action@v1.2.4"
            },
            {
                "id": 4,
                "name": "Filter projects",
                "run": "echo \"projects=$(python ./.github/workflows/filter_projects.py $HOME/files.json)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Cache python environment",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip wheel\npython -m pip install -e \".[${{ matrix.project }}, ${{ matrix.depconstraint }}, test]\"\n"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "pytest tfx_addons/${{ matrix.project }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Get Changed Files",
                "run": "trilom/file-changes-action@v1.2.4"
            },
            {
                "id": 4,
                "name": "Filter example projects",
                "run": "echo \"projects=$(python ./.github/workflows/filter_examples.py $HOME/files.json)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Cache python environment",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip wheel pytest\ncd examples/${{ matrix.project }}\npip install -r requirements.txt\n"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "cd examples/${{ matrix.project }}\npython -m pytest .\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run pre-commit checks (pylint/yapf/isort)",
                "run": "pre-commit/action@v2.0.3"
            },
            {
                "id": 1,
                "name": "Check out code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set minor version",
                "run": "echo \"::set-output name=version::$(python ./.github/workflows/prepare_minor_release.py)\"\n"
            },
            {
                "id": 3,
                "name": "Create release branch",
                "run": "git checkout -b r${{ steps.set-version.outputs.version }}"
            },
            {
                "id": 4,
                "name": "Initialize mandatory git config",
                "run": "git config user.name \"GitHub Actions\"\ngit config user.email noreply@github.com\n"
            },
            {
                "id": 5,
                "name": "Commit changelog and manifest files",
                "run": "git add tfx_addons/version.py\ngit commit --message \"Prepare release ${{ steps.set-version.outputs.version }}\"\necho \"::set-output name=commit::$(git rev-parse HEAD)\"\n"
            },
            {
                "id": 6,
                "name": "Push new branch",
                "run": "git push origin r${{ steps.set-version.outputs.version }}"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "ncipollo/release-action@v1"
            },
            {
                "id": 8,
                "name": "Update main",
                "run": "git checkout main\necho \"::set-output name=new_version::$(python ./.github/workflows/update_main.py)\"\n"
            },
            {
                "id": 9,
                "name": "Commit main change",
                "run": "git checkout -b ${{ github.triggering_actor }}/update-${{ steps.update-main.outputs.new_version }}\ngit add tfx_addons/version.py\ngit commit --message \"Update main to ${{ steps.update-main.outputs.new_version }}\"\ngit push origin ${{ github.triggering_actor }}/update-${{ steps.update-main.outputs.new_version }}\n"
            },
            {
                "id": 10,
                "name": "Create pull request into main",
                "run": "thomaseizinger/create-pull-request@1.0.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pypa/build",
                "run": "python -m pip install build --user"
            },
            {
                "id": 4,
                "name": "Build a binary wheel and a source tarball",
                "run": "python -m build --sdist --wheel --outdir dist/ ."
            },
            {
                "id": 5,
                "name": "Publish distribution TFX Addons package to Test PyPI",
                "run": "pypa/gh-action-pypi-publish@v1.5.0"
            },
            {
                "id": 6,
                "name": "Publish distribution TFX Addons package to PyPI",
                "run": "pypa/gh-action-pypi-publish@v1.5.0"
            },
            {
                "id": 7,
                "name": "Upload files to a GitHub release",
                "run": "svenstaro/upload-release-action@2.2.1"
            }
        ],
        "tensorflow/java-ndarray": [
            {
                "id": 1,
                "name": "Configure Java",
                "run": "actions/setup-java@v2"
            },
            {
                "id": 2,
                "name": "Checkout repository",
                "run": "actions/checkout@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": "java -version\nmvn -version\nmvn clean install -B -U -e\n"
            },
            {
                "id": 4,
                "name": "Deploy snapshot artifacts",
                "run": "echo \"<settings><servers><server><id>ossrh</id><username>${{ secrets.CI_DEPLOY_USERNAME }}</username><password>${{ secrets.CI_DEPLOY_PASSWORD }}</password></server></servers></settings>\" > $HOME/.m2/settings.xml\nmvn deploy -B -U -e -Dmaven.test.skip=true\n"
            }
        ],
        "tensorflow/tflite-micro": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Check Files",
                "run": "URL=\"https://api.github.com/repos/${{ github.repository }}/pulls/${{ inputs.pr-number }}/files\"\nPR_FILES=$(curl -s -X GET -H \"Authorization: Bearer ${{ secrets.tflm-bot-token }}\" $URL | jq -r '.[] | .filename')\nrm -rf tmp_pull_request_files.txt\necho \"${PR_FILES}\" >> tmp_pull_request_files.txt\nrm -rf .git\necho ${{ secrets.tflm-bot-token }} | docker login ghcr.io -u tflm-bot --password-stdin\ndocker run --rm -v `pwd`:/tflite-micro -w /tflite-micro ghcr.io/tflm-bot/tflm-ci:latest python3 ci/check_tflite_files.py tmp_pull_request_files.txt\nTFLITE_FILE_TEST_STATUS=$?\nrm -f tmp_pull_request_files.txt\nexit ${TFLITE_FILE_TEST_STATUS}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "sudo ci/install_bazelisk.sh\npip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "tensorflow/lite/micro/tools/ci_build/test_bazel.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "sudo ci/install_bazelisk.sh\npip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "tensorflow/lite/micro/tools/ci_build/test_bazel_tflite_tools.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "sudo ci/install_bazelisk.sh\npip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Fix kernel mmap rnd bits",
                "run": "sudo sysctl vm.mmap_rnd_bits=28"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "tensorflow/lite/micro/tools/ci_build/test_bazel_msan.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "sudo ci/install_bazelisk.sh\npip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Fix kernel mmap rnd bits",
                "run": "sudo sysctl vm.mmap_rnd_bits=28"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "tensorflow/lite/micro/tools/ci_build/test_bazel_asan.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "cd ../\ntflite-micro/tensorflow/lite/micro/tools/ci_build/test_bluepill_release.sh tflite-micro/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "cd ../\ntflite-micro/tensorflow/lite/micro/tools/ci_build/test_bluepill_no_release.sh tflite-micro/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "cd ../\ntflite-micro/tensorflow/lite/micro/tools/ci_build/test_bluepill_renode.sh tflite-micro/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "docker://ghcr.io/tflm-bot/tflm-ci:latest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Check",
                "run": "docker://ghcr.io/tflm-bot/tflm-ci:latest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "cd ../\ntflite-micro/tensorflow/lite/micro/tools/ci_build/test_project_generation.sh tflite-micro/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "tensorflow/lite/micro/tools/ci_build/test_makefile.sh\ncd ../\ntflite-micro/tensorflow/lite/micro/tools/ci_build/test_x86_release.sh tflite-micro/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "tensorflow/lite/micro/tools/ci_build/test_makefile.sh\ncd ../\ntflite-micro/tensorflow/lite/micro/tools/ci_build/test_x86_default.sh tflite-micro/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "tensorflow/lite/micro/tools/ci_build/test_makefile.sh\ncd ../\ntflite-micro/tensorflow/lite/micro/tools/ci_build/test_x86_out_of_tree.sh tflite-micro/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "tensorflow/lite/micro/tools/ci_build/test_makefile.sh\ncd ../\ntflite-micro/tensorflow/lite/micro/tools/ci_build/test_x86_no_tflite_static_memory.sh tflite-micro/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "tensorflow/lite/micro/tools/ci_build/test_cortex_m_generic.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "tensorflow/lite/micro/tools/ci_build/test_cortex_m_corstone_300.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.10",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install AVH Client for Python",
                "run": "pip install git+https://github.com/ARM-software/avhclient.git@v0.1\n"
            },
            {
                "id": 4,
                "name": "Configure AWS Credentials",
                "run": "aws-actions/configure-aws-credentials@v1"
            },
            {
                "id": 5,
                "name": "Execute test suite on Arm Virtual Hardware at AWS",
                "run": "avhclient -b aws execute --specfile ./tensorflow/lite/micro/tools/github/arm_virtual_hardware/cortex_m_generic_avh.yml\n"
            },
            {
                "id": 6,
                "name": "Fetch results from Arm Virtual Hardware",
                "run": "cat ./tensorflow/lite/micro/tools/github/arm_virtual_hardware/cortex_m_generic.log\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.10",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Configure AWS Credentials",
                "run": "aws-actions/configure-aws-credentials@v1"
            },
            {
                "id": 4,
                "name": "Install AVH Client for Python",
                "run": "pip install git+https://github.com/ARM-software/avhclient.git@v0.1.1\n"
            },
            {
                "id": 5,
                "name": "Execute test suite on Arm Virtual Hardware at AWS",
                "run": "avhclient -b aws execute --specfile ./tensorflow/lite/micro/tools/github/arm_virtual_hardware/cortex_m_corstone_300_avh.yml\n"
            },
            {
                "id": 6,
                "name": "Fetch results from Arm Virtual Hardware",
                "run": "cat ./tensorflow/lite/micro/tools/github/arm_virtual_hardware/corstone300.log\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip3 install Pillow\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "tensorflow/lite/micro/tools/ci_build/test_generate_integration_tests.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rm -rf .git\necho ${{ secrets.tflm-bot-token }} | docker login ghcr.io -u tflm-bot --password-stdin\ndocker run --rm -v `pwd`:/opt/tflite-micro ghcr.io/tflm-bot/hexagon:0.4 \\\n/bin/bash -c \\\n\"cd /opt && tflite-micro/tensorflow/lite/micro/tools/ci_build/test_hexagon.sh tflite-micro/\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Run Reporting Script",
                "run": "python3 ci/issue_on_error.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "prepare files for logging",
                "run": "git checkout --track origin/$LOG_BRANCH\ngit checkout main\ngit checkout $LOG_BRANCH -- data/continuous_builds/size_profiling/ \n"
            },
            {
                "id": 3,
                "name": "Create Logs PR Request",
                "run": "peter-evans/create-pull-request@052fc72b4198ba9fbc81b818c6e1859f747d49a8"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build Wheel 3.10",
                "run": "python/tflite_micro/pypi_build.sh cp310\n"
            },
            {
                "id": 3,
                "name": "Build Wheel 3.11",
                "run": "python/tflite_micro/pypi_build.sh cp311\n"
            },
            {
                "id": 4,
                "name": "Check Directory Output",
                "run": "ls -l bazel-pypi-out\n"
            },
            {
                "id": 5,
                "name": "Install Twine",
                "run": "python -m pip install --upgrade pip setuptools wheel\npip install twine\n"
            },
            {
                "id": 6,
                "name": "upload to pypi",
                "run": "python/tflite_micro/pypi_upload.sh \\\nbazel-pypi-out/tflite_micro-*.whl"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "docker://ghcr.io/tflm-bot/tflm-ci:latest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "docker://ghcr.io/tflm-bot/tflm-ci:latest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v7"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies for sync",
                "run": "sudo ./ci/install_bazelisk.sh\npip3 install numpy\n"
            },
            {
                "id": 4,
                "name": "Sync the code",
                "run": "./ci/sync_from_upstream_tf.sh\ngit config --local user.name \"TFLM-bot\"\ngit config --local user.email \"tflm-github-bot@google.com\"\ngit add *\n\nif [[ $(git status --porcelain | wc -l) == 0 ]]; then\n  echo \"no changes\"\nelse\n  git commit -m \"Sync from upstream TF.\"\nfi\n"
            },
            {
                "id": 5,
                "name": "Create Pull Request",
                "run": "peter-evans/create-pull-request@052fc72b4198ba9fbc81b818c6e1859f747d49a8"
            },
            {
                "id": 1,
                "name": "fail-without-labels",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "remove-ready-to-merge",
                "run": "actions/github-script@v5"
            },
            {
                "id": 2,
                "name": "fail-on-bad-synch",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "remove-cirun",
                "run": "actions/github-script@v5"
            },
            {
                "id": 1,
                "name": "remove-cirun-full",
                "run": "actions/github-script@v5"
            },
            {
                "id": 1,
                "name": "Check for BUG=",
                "run": "echo \"PR description requires a BUG= line with issue number.\"\necho \"See https://testing.googleblog.com/2017/09/code-health-providing-context-with.html for additional context\"\nexit 1\n"
            },
            {
                "id": 1,
                "name": "remove-cirun-full",
                "run": "actions/github-script@v5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rm -rf .git\necho ${{ secrets.tflm-bot-token }} | docker login ghcr.io -u tflm-bot --password-stdin\ndocker run --env XTENSA_TOOLS_VERSION=RI-2020.4-linux --rm -v `pwd`:/opt/tflite-micro ghcr.io/tflm-bot/xtensa_xplorer_13:0.3 \\\n/bin/bash -c \\\n\"cd /opt && tflite-micro/tensorflow/lite/micro/tools/ci_build/test_xtensa_fusion_f1.sh EXTERNAL tflite-micro/\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rm -rf .git\necho ${{ secrets.tflm-bot-token }} | docker login ghcr.io -u tflm-bot --password-stdin\ndocker run --env XTENSA_TOOLS_VERSION=RI-2020.4-linux --rm -v `pwd`:/opt/tflite-micro ghcr.io/tflm-bot/xtensa_xplorer_13:0.3 \\\n/bin/bash -c \\\n\"cd /opt && tflite-micro/tensorflow/lite/micro/tools/ci_build/test_xtensa_vision_p6.sh RUN_TESTS tflite-micro/\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rm -rf .git\necho ${{ secrets.tflm-bot-token }} | docker login ghcr.io -u tflm-bot --password-stdin\ndocker run --env XTENSA_TOOLS_VERSION=RI-2019.2-linux --rm -v `pwd`:/opt/tflite-micro ghcr.io/tflm-bot/xtensa_xplorer_11:0.2 \\\n/bin/bash -c \\\n\"cd /opt && tflite-micro/tensorflow/lite/micro/tools/ci_build/test_xtensa_hifimini.sh tflite-micro/\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rm -rf .git\necho ${{ secrets.tflm-bot-token }} | docker login ghcr.io -u tflm-bot --password-stdin\ndocker run --env XTENSA_TOOLS_VERSION=RI-2020.4-linux --rm -v `pwd`:/opt/tflite-micro ghcr.io/tflm-bot/xtensa_xplorer_13:0.3 \\\n/bin/bash -c \\\n\"cd /opt && tflite-micro/tensorflow/lite/micro/tools/ci_build/test_xtensa_vision_p6.sh RUN_NO_TESTS tflite-micro/\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rm -rf .git\necho ${{ secrets.tflm-bot-token }} | docker login ghcr.io -u tflm-bot --password-stdin\ndocker run --env XTENSA_TOOLS_VERSION=RI-2022.9-linux --rm -v `pwd`:/opt/tflite-micro ghcr.io/tflm-bot/xtensa_xplorer_hifi5:0.2 \\\n/bin/bash -c \\\n\"cd /opt && tflite-micro/tensorflow/lite/micro/tools/ci_build/test_xtensa_hifi5.sh tflite-micro/\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rm -rf .git\necho ${{ secrets.tflm-bot-token }} | docker login ghcr.io -u tflm-bot --password-stdin\ndocker run --env XTENSA_TOOLS_VERSION=RI-2020.4-linux --rm -v `pwd`:/opt/tflite-micro ghcr.io/tflm-bot/xtensa_xplorer_13:0.3 \\\n/bin/bash -c \\\n\"cd /opt && tflite-micro/tensorflow/lite/micro/tools/ci_build/test_xtensa_hifi3z.sh EXTERNAL tflite-micro/\"\n"
            }
        ],
        "tensorflow/tflite-micro-arduino-examples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Test",
                "run": "./scripts/install_arduino_cli.sh\n./scripts/test_arduino_library.sh \"${PWD}\"\n"
            },
            {
                "id": 1,
                "name": "remove tags",
                "run": "actions/github-script@a3e7071a34d7e1f219a8a4de9a5e0a34d1ee1293"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Sync the code",
                "run": "pip3 install six Pillow Wave\n./scripts/sync_from_tflite_micro.sh\ngit config --local user.name \"TFLM-bot\"\ngit config --local user.email \"tflm-github-bot@google.com\"\ngit add *\n\nif [[ $(git status --porcelain | wc -l) == 0 ]]; then\n  echo \"no changes\"\nelse\n  git commit -m \"Sync from tflite-micro.\"\nfi\n"
            },
            {
                "id": 4,
                "name": "Create Pull Request",
                "run": "peter-evans/create-pull-request@052fc72b4198ba9fbc81b818c6e1859f747d49a8"
            }
        ]
    },
    "dotnet": {
        "dotnet/cecil": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "dotnet build -c Debug Mono.Cecil.sln"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "dotnet test --no-build -c Debug Mono.Cecil.sln"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "dotnet build -c Debug Mono.Cecil.sln"
            },
            {
                "id": 3,
                "name": "Test .NET Core",
                "run": "dotnet test --no-build -c Debug Mono.Cecil.sln"
            },
            {
                "id": 4,
                "name": "Get NuGet",
                "run": "curl -o ./nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"
            },
            {
                "id": 5,
                "name": "Get NUnit.Console",
                "run": "mono ./nuget.exe install NUnit.Console -Version 3.9.0 -OutputDirectory ./packages"
            },
            {
                "id": 6,
                "name": "Test .NET 4.0 using Mono",
                "run": "mono ./packages/NUnit.ConsoleRunner.3.9.0/tools/nunit3-console.exe ./Mono.Cecil.nunit"
            }
        ],
        "dotnet/aspnetcore": [
            {
                "id": 1,
                "name": "Checkout Actions",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Actions",
                "run": "npm install --production --prefix ./actions"
            },
            {
                "id": 3,
                "name": "Run Locker",
                "run": "./actions/locker"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Run Markdownlint",
                "run": "echo \"::add-matcher::.github/workflows/markdownlint-problem-matcher.json\"\nnpm i -g markdownlint-cli\nmarkdownlint \"docs/**/*.md\"\n"
            },
            {
                "id": 1,
                "name": "Checkout aspnetcore",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout runtime",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Copy",
                "run": "CopyToAspNetCore.cmd"
            },
            {
                "id": 4,
                "name": "Diff",
                "run": "mkdir ..\\artifacts\ngit status > ..\\artifacts\\status.txt\ngit diff > ..\\artifacts\\diff.txt\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 6,
                "name": "Check and Notify",
                "run": "# Test this script using an issue in the local forked repo\n$issue = 'https://api.github.com/repos/dotnet/aspnetcore/issues/18943'\n$sendpr = .\\aspnetcore\\.github\\workflows\\ReportDiff.ps1\necho \"sendpr=$sendpr\" >> $env:GITHUB_OUTPUT\n"
            },
            {
                "id": 7,
                "name": "Send PR",
                "run": "dotnet/actions-create-pull-request@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "martincostello/update-dotnet-sdk@67d6e2b14939c06978a7f80444157296c3defe14"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Run npm ci to validate package-lock.json against the feed",
                "run": "npm ci --prefer-online --fetch-retries 5"
            }
        ],
        "dotnet/Open-XML-SDK": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "SunburstChartExample",
                "run": "dotnet publish samples/SunburstChartExample/ -f net8.0 /p:SummaryOutDir=$GITHUB_WORKSPACE/summary"
            },
            {
                "id": 4,
                "name": "LinqSvgExample",
                "run": "dotnet publish samples/Linq/SvgExample -f net8.0 /p:SummaryOutDir=$GITHUB_WORKSPACE/summary"
            },
            {
                "id": 5,
                "name": "ThreadedCommentExample",
                "run": "dotnet publish samples/ThreadedCommentExample/ -f net8.0 /p:SummaryOutDir=$GITHUB_WORKSPACE/summary"
            },
            {
                "id": 6,
                "name": "Write summary",
                "run": "cd $GITHUB_WORKSPACE/summary\nfor FILE in *.summary.md\ndo\n  cat ${FILE} >> $GITHUB_STEP_SUMMARY\ndone\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "Build benchmarks",
                "run": "cd test/DocumentFormat.OpenXml.Benchmarks; dotnet build -c RELEASE"
            },
            {
                "id": 4,
                "name": "Run benchmarks",
                "run": "cd test/DocumentFormat.OpenXml.Benchmarks; dotnet run -c RELEASE -f net8.0"
            },
            {
                "id": 5,
                "name": "Write summary",
                "run": "$files = gci test/DocumentFormat.OpenXml.Benchmarks/BenchmarkDotNet.Artifacts/results/*-report-github.md\n\nforeach ($file in $files){\n  $name = $file.Name.Replace(\"-report-github.md\", \"\").Replace(\"DocumentFormat.OpenXml.Benchmarks.\", \"\")\n  \"## $name\" >> $env:GITHUB_STEP_SUMMARY\n  gc $file >> $env:GITHUB_STEP_SUMMARY\n}"
            },
            {
                "id": 1,
                "name": "Upload",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install .NET",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "Remove generated files for baseline",
                "run": "Remove-Item generated/ -Include *.g.cs -Recurse"
            },
            {
                "id": 4,
                "name": "Restore",
                "run": "dotnet restore --verbosity normal"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "dotnet build --no-restore --verbosity normal"
            },
            {
                "id": 6,
                "name": "Validate generated files",
                "run": "if [ \"$(git diff --ignore-space-at-eol generated/ | wc -l)\" -gt \"0\" ]; then\n  echo \"Detected uncommitted changes after build.  See status below:\"\n  git diff\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install .NET Core",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "Install global.json .NET",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 4,
                "name": "Restore",
                "run": "dotnet restore --verbosity normal"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "dotnet build --no-restore --verbosity normal"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "dotnet test --no-restore --verbosity normal --logger trx --results-directory test-results/"
            },
            {
                "id": 7,
                "name": "Upload Test Results",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install .NET Core",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "Restore",
                "run": "dotnet restore --verbosity normal"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "dotnet build --no-restore --verbosity normal"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "dotnet test --no-restore --verbosity normal --collect:\"XPlat Code Coverage\" --results-directory coverage"
            },
            {
                "id": 6,
                "name": "ReportGenerator",
                "run": "danielpalme/ReportGenerator-GitHub-Action@5.3.6"
            },
            {
                "id": 7,
                "name": "Post results",
                "run": "cat coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 8,
                "name": "Upload Test Results",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup .NET",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 4,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v3"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install .NET Core",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "Install .NET Core from global.json",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 4,
                "name": "Install GitVersion",
                "run": "gittools/actions/gitversion/setup@v1"
            },
            {
                "id": 5,
                "name": "Determine Version",
                "run": "gittools/actions/gitversion/execute@v1"
            },
            {
                "id": 6,
                "name": "Display GitVersion variables (with prefix)",
                "run": "echo \"Major: ${{ env.GitVersion_Major }}\"\necho \"Minor: ${{ env.GitVersion_Minor }}\"\necho \"Patch: ${{ env.GitVersion_Patch }}\"\necho \"PreReleaseTag: ${{ env.GitVersion_PreReleaseTag }}\"\necho \"PreReleaseTagWithDash: ${{ env.GitVersion_PreReleaseTagWithDash }}\"\necho \"PreReleaseLabel: ${{ env.GitVersion_PreReleaseLabel }}\"\necho \"PreReleaseNumber: ${{ env.GitVersion_PreReleaseNumber }}\"\necho \"WeightedPreReleaseNumber: ${{ env.GitVersion_WeightedPreReleaseNumber }}\"\necho \"BuildMetaData: ${{ env.GitVersion_BuildMetaData }}\"\necho \"BuildMetaDataPadded: ${{ env.GitVersion_BuildMetaDataPadded }}\"\necho \"FullBuildMetaData: ${{ env.GitVersion_FullBuildMetaData }}\"\necho \"MajorMinorPatch: ${{ env.GitVersion_MajorMinorPatch }}\"\necho \"SemVer: ${{ env.GitVersion_SemVer }}\"\necho \"LegacySemVer: ${{ env.GitVersion_LegacySemVer }}\"\necho \"LegacySemVerPadded: ${{ env.GitVersion_LegacySemVerPadded }}\"\necho \"AssemblySemVer: ${{ env.GitVersion_AssemblySemVer }}\"\necho \"AssemblySemFileVer: ${{ env.GitVersion_AssemblySemFileVer }}\"\necho \"FullSemVer: ${{ env.GitVersion_FullSemVer }}\"\necho \"InformationalVersion: ${{ env.GitVersion_InformationalVersion }}\"\necho \"BranchName: ${{ env.GitVersion_BranchName }}\"\necho \"EscapedBranchName: ${{ env.GitVersion_EscapedBranchName }}\"\necho \"Sha: ${{ env.GitVersion_Sha }}\"\necho \"ShortSha: ${{ env.GitVersion_ShortSha }}\"\necho \"NuGetVersionV2: ${{ env.GitVersion_NuGetVersionV2 }}\"\necho \"NuGetVersion: ${{ env.GitVersion_NuGetVersion }}\"\necho \"NuGetPreReleaseTagV2: ${{ env.GitVersion_NuGetPreReleaseTagV2 }}\"\necho \"NuGetPreReleaseTag: ${{ env.GitVersion_NuGetPreReleaseTag }}\"\necho \"VersionSourceSha: ${{ env.GitVersion_VersionSourceSha }}\"\necho \"CommitsSinceVersionSource: ${{ env.GitVersion_CommitsSinceVersionSource }}\"\necho \"CommitsSinceVersionSourcePadded: ${{ env.GitVersion_CommitsSinceVersionSourcePadded }}\"\necho \"UncommittedChanges: ${{ env.GitVersion_UncommittedChanges }}\"\necho \"CommitDate: ${{ env.GitVersion_CommitDate }}\"\n"
            },
            {
                "id": 7,
                "name": "Restore",
                "run": "dotnet restore --verbosity normal"
            },
            {
                "id": 8,
                "name": "Build",
                "run": "dotnet build --no-restore --verbosity normal"
            },
            {
                "id": 9,
                "name": "Pack",
                "run": "dotnet pack --no-build"
            },
            {
                "id": 10,
                "name": "Upload",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Install .NET Core",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 2,
                "name": "Install SignTool tool",
                "run": "dotnet tool install --tool-path . sign --version 0.9.0-beta.23127.3"
            },
            {
                "id": 3,
                "name": "Install Nuget Sign Tool",
                "run": "dotnet tool install --global NuGetKeyVaultSignTool"
            },
            {
                "id": 4,
                "name": "Download Unsigned Packages",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 5,
                "name": "Expand Packages For Signing",
                "run": "cd ${{ github.workspace }}/unsigned\nmkdir raw\ncd raw\ngci ..\\*.nupkg | % { Expand-Archive $_ }\ncd ..\\..\ngci -r\n"
            },
            {
                "id": 6,
                "name": "Sign the DLLs",
                "run": "./sign code azure-key-vault **/DocumentFormat.OpenXml*.dll --base-directory  \"${{ github.workspace }}/unsigned/raw\" --publisher-name \"Microsoft\" --description \"DocumentFormat.OpenXml DLL Signing\" --description-url https://github.com/dotnet/sign --azure-key-vault-tenant-id \"${{ secrets.SignTenantId }}\" --azure-key-vault-client-id \"${{ secrets.SignClientId }}\"  --azure-key-vault-client-secret \"${{ secrets.SignClientSecret }}\" --azure-key-vault-certificate \"${{ secrets.SignKeyVaultCertificate }}\"  --azure-key-vault-url \"${{ secrets.SignKeyVaultUrl }}\"\n"
            },
            {
                "id": 7,
                "name": "Create Signed NUPKG",
                "run": "cd ${{ github.workspace }}/unsigned/raw\ngci -r CodeSignSummary | rm\ngci -Directory | % { [IO.Compression.ZipFile]::CreateFromDirectory($_, \"$_.nupkg\") }\ngci \n"
            },
            {
                "id": 8,
                "name": "Sign the NUPKGs",
                "run": "./sign code azure-key-vault  *.nupkg  --base-directory  \"${{ github.workspace }}/unsigned/raw\"  --publisher-name \"Microsoft\"  --description \"DocumentFormat.OpenXml DLL Signing\"  --description-url \"https://github.com/dotnet/sign\"  --azure-key-vault-tenant-id \"${{ secrets.SignTenantId }}\"  --azure-key-vault-client-id \"${{ secrets.SignClientId }}\"  --azure-key-vault-client-secret \"${{ secrets.SignClientSecret }}\" --azure-key-vault-certificate \"${{ secrets.SignKeyVaultCertificate }}\"  --azure-key-vault-url \"${{ secrets.SignKeyVaultUrl }}\"\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Install .NET Core",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 2,
                "name": "Download Packages",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Push to CI feed",
                "run": "cd $GITHUB_WORKSPACE/packages\ndotnet tool install -g sleet\nsleet push . --skip-existing\n"
            },
            {
                "id": 1,
                "name": "Get Release Info",
                "run": "echo ${{ github.event_name == 'release' }} >> release-info.txt\n"
            },
            {
                "id": 2,
                "name": "Upload Release Info",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "imjohnbo/gh-polls-bot-action@master"
            },
            {
                "id": 1,
                "name": "Download Release Info",
                "run": "dawidd6/action-download-artifact@v3"
            },
            {
                "id": 2,
                "name": "Check if workflow is release",
                "run": "$isRelease = Get-Content -Path release-info.txt\n\nif ($isRelease -eq 'true') {\n  echo \"isRelease=true\" >> $env:GITHUB_OUTPUT\n} else {\n  echo \"isRelease=false\" >> $env:GITHUB_OUTPUT\n}\n"
            },
            {
                "id": 1,
                "name": "Download and Extract Artifacts from build",
                "run": "dawidd6/action-download-artifact@v3"
            },
            {
                "id": 2,
                "name": "Setup .NET Core",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "Approve",
                "run": "trstringer/manual-approval@v1"
            },
            {
                "id": 4,
                "name": "Publish NuGet package",
                "run": "foreach($file in (Get-ChildItem \"${{ github.workspace }}/artifacts\" -Recurse -Include *.nupkg)) {\n    dotnet nuget push $file --api-key \"${{ secrets.NUGET_APIKEY }}\" --source https://api.nuget.org/v3/index.json --skip-duplicate\n}\n"
            },
            {
                "id": 1,
                "name": "Download and Extract Artifacts from build",
                "run": "dawidd6/action-download-artifact@v3"
            },
            {
                "id": 2,
                "name": "Publish Test Results",
                "run": "EnricoMi/publish-unit-test-result-action@v2"
            },
            {
                "id": 3,
                "name": "Add Coverage PR Comment",
                "run": "marocchino/sticky-pull-request-comment@v2"
            }
        ],
        "dotnet/Docker.DotNet": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup .NET Core",
                "run": "actions/setup-dotnet@v2"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "dotnet build -c Release"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "dotnet test -c Release --no-build"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup .NET Core",
                "run": "actions/setup-dotnet@v2"
            },
            {
                "id": 3,
                "name": "Install SignClient tool",
                "run": "dotnet tool install --tool-path . SignClient"
            },
            {
                "id": 4,
                "name": "Install NBGV tool",
                "run": "dotnet tool install --tool-path . nbgv"
            },
            {
                "id": 5,
                "name": "Set Version",
                "run": "./nbgv cloud"
            },
            {
                "id": 6,
                "name": "Create Packages",
                "run": "dotnet pack -c Release -o packages"
            },
            {
                "id": 7,
                "name": "Sign Packages",
                "run": "echo $DNF_CODESIGN_CONFIG > ./packages/sign.json\n./SignClient sign --config \"./packages/sign.json\" --input \"./packages/**/*.nupkg\" --name \"Docker.DotNet\" --user \"$DNF_CODESIGN_USER\" --secret \"$DNF_CODESIGN_SECRET\" --Description \"Docker.Net\" --descriptionUrl \"https://github.com/dotnet/Docker.DotNet\"\nrm packages/sign.json\n"
            },
            {
                "id": 8,
                "name": "Push packages to NuGet.org",
                "run": "dotnet nuget push ./packages/Docker.DotNet.*.nupkg --skip-duplicate -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json"
            },
            {
                "id": 9,
                "name": "Create Release",
                "run": "actions/github-script@v5"
            }
        ],
        "dotnet/core": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gaurav-nelson/github-action-markdown-link-check@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v9"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Lint Code Base",
                "run": "github/super-linter@v5"
            }
        ],
        "dotnet/orleans": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup .NET",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "dotnet build"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup .NET",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "dotnet test --filter \"Category=${{ matrix.provider }}&(Category=BVT|Category=SlowBVT|Category=Functional)\" --blame-hang-timeout 10m --logger \"trx\" -- -parallel none -noshadow"
            },
            {
                "id": 4,
                "name": "Archive Test Results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup .NET",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "dotnet test --filter \"Category=${{ matrix.provider }}&(Category=BVT|Category=SlowBVT|Category=Functional)\" --blame-hang-timeout 10m --logger \"trx\" -- -parallel none -noshadow"
            },
            {
                "id": 4,
                "name": "Archive Test Results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup .NET",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "dotnet test --filter \"Category=${{ matrix.provider }}&(Category=BVT|Category=SlowBVT|Category=Functional)\" --blame-hang-timeout 10m --logger \"trx\" -- -parallel none -noshadow"
            },
            {
                "id": 4,
                "name": "Archive Test Results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup .NET",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "dotnet test --filter \"Category=${{ matrix.provider }}&(Category=BVT|Category=SlowBVT|Category=Functional)\" --blame-hang-timeout 10m --logger \"trx\" -- -parallel none -noshadow"
            },
            {
                "id": 4,
                "name": "Archive Test Results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup .NET",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "dotnet test --filter \"Category=${{ matrix.provider }}&Category=${{ matrix.suite }}\" --framework ${{ matrix.framework }} --blame-hang-timeout 10m --logger \"trx\" -- -parallel none -noshadow"
            },
            {
                "id": 4,
                "name": "Archive Test Results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup .NET",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 3,
                "name": "Start Azure Cosmos DB emulator",
                "run": "Write-Host \"Launching Azure Cosmos DB Emulator\"\nImport-Module \"$env:ProgramFiles\\Azure Cosmos DB Emulator\\PSModules\\Microsoft.Azure.CosmosDB.Emulator\"\nStart-CosmosDbEmulator -NoUI -Consistency Strong -PartitionCount 2 -DefaultPartitionCount 2\n$IPAddress = \"127.0.0.1\" #(Get-NetIPAddress -AddressFamily IPV4 -AddressState Preferred -PrefixOrigin Manual | Select-Object IPAddress -First 1).IPAddress ?? \"127.0.0.1\"\nAdd-Content -Path $env:GITHUB_ENV -Value \"ORLEANSCOSMOSDBACCOUNTENDPOINT=https://$($IPAddress):8081/\"\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "dotnet test --filter \"Category=${{ matrix.provider }}&(Category=BVT|Category=SlowBVT|Category=Functional)\" --framework ${{ matrix.framework }} --blame-hang-timeout 10m --logger \"trx\" -- -parallel none -noshadow"
            },
            {
                "id": 5,
                "name": "Archive Test Results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup .NET",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "dotnet test --filter \"Category=${{ matrix.provider }}&(Category=BVT|Category=SlowBVT|Category=Functional)\" --blame-hang-timeout 10m --logger \"trx\" -- -parallel none -noshadow"
            },
            {
                "id": 4,
                "name": "Archive Test Results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup .NET",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "dotnet test --filter \"Category=${{ matrix.provider }}&(Category=BVT|Category=SlowBVT|Category=Functional)\" --blame-hang-timeout 10m --logger \"trx\" -- -parallel none -noshadow"
            },
            {
                "id": 4,
                "name": "Archive Test Results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup .NET",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "dotnet test --filter \"Category=${{ matrix.provider }}&(Category=BVT|Category=SlowBVT|Category=Functional)\" --blame-hang-timeout 10m --logger \"trx\" -- -parallel none -noshadow"
            },
            {
                "id": 4,
                "name": "Archive Test Results",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Actions",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Actions",
                "run": "npm install --production --prefix ./actions"
            },
            {
                "id": 3,
                "name": "Run Locker",
                "run": "./actions/locker"
            }
        ],
        "dotnet/AspNetCore.Docs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dotnet/docs-actions/actions/status-checker@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "if [ \"$(gh pr list --base $DOTNET_DOCS_BASE --head $DOTNET_DOCS_HEAD --json id --jq \". | length\")\" -ne \"0\" ]; then\n  echo \"::notice title=Skipping Workflow::A pull request for branch \\\"$DOTNET_DOCS_HEAD\\\" into branch \\\"$DOTNET_DOCS_BASE\\\" already exists.\"\nelse\n  gh pr create --base $DOTNET_DOCS_BASE --head $DOTNET_DOCS_HEAD --title \"Merge to Live\" --body \"[AUTOMATED]\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Print manual bulk import run reason",
                "run": "echo \"Reason: ${{ github.event.inputs.reason }}\"\n"
            },
            {
                "id": 2,
                "name": "Azure OpenID Connect",
                "run": "dotnet/docs-tools/.github/actions/oidc-auth-flow@main"
            },
            {
                "id": 3,
                "name": "bulk-sequester",
                "run": "dotnet/docs-tools/actions/sequester@main"
            },
            {
                "id": 1,
                "name": "Print manual run reason",
                "run": "echo \"Reason: ${{ github.event.inputs.reason }}\"\necho \"Issue number: ${{ github.event.inputs.issue }}\"\n"
            },
            {
                "id": 2,
                "name": "Azure OpenID Connect",
                "run": "dotnet/docs-tools/.github/actions/oidc-auth-flow@main"
            },
            {
                "id": 3,
                "name": "manual-sequester",
                "run": "dotnet/docs-tools/actions/sequester@main"
            },
            {
                "id": 4,
                "name": "auto-sequester",
                "run": "dotnet/docs-tools/actions/sequester@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c"
            },
            {
                "id": 2,
                "name": "Print manual run reason",
                "run": "echo \"Reason: ${{ github.event.inputs.reason }}\"\n"
            },
            {
                "id": 3,
                "name": "Azure OpenID Connect",
                "run": "dotnet/docs-tools/.github/actions/oidc-auth-flow@main"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dotnet/docs-tools/WhatsNew.Cli@main"
            },
            {
                "id": 5,
                "name": "create-pull-request",
                "run": "peter-evans/create-pull-request@2b011faafdcbc9ceb11414d64d0573f37c774b04"
            }
        ],
        "dotnet/fsharp": [
            {
                "id": 1,
                "name": "Delete old workflow runs",
                "run": "_UrlPath=\"/repos/$GITHUB_REPOSITORY/actions/workflows\"\n_CurrentWorkflowID=\"$(gh api -X GET \"$_UrlPath\" | jq '.workflows[] | select(.name == '\\\"\"$GITHUB_WORKFLOW\"\\\"') | .id')\"\ngh api -X GET \"$_UrlPath/$_CurrentWorkflowID/runs\" --paginate \\\n  | jq '.workflow_runs[] | select(.status == \"completed\") | .id' \\\n  | xargs -I{} gh api -X DELETE \"/repos/$GITHUB_REPOSITORY/actions/runs\"/{}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Get github ref",
                "run": "actions/github-script@v3"
            },
            {
                "id": 2,
                "name": "Checkout repo",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Check for release notes changes",
                "run": "set -e\nEOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)\nFSHARP_REPO_URL=\"https://github.com/${GITHUB_REPOSITORY}\"\nPR_AUTHOR=\"${{ github.event.pull_request.user.login }}\"\nPR_NUMBER=${{ github.event.number }}\nPR_URL=\"${FSHARP_REPO_URL}/pull/${PR_NUMBER}\"\n\necho \"PR Tags: ${{ toJson(github.event.pull_request.labels) }}\"\n\nOPT_OUT_RELEASE_NOTES=${{ contains(github.event.pull_request.labels.*.name, 'NO_RELEASE_NOTES') }}\n\necho \"Opt out of release notes: $OPT_OUT_RELEASE_NOTES\"\n\n# Parse version from eng/Versions.props\n# For FSarp.Core:\n# <FSMajorVersion>8</FSMajorVersion>\n# <FSMinorVersion>0</FSMinorVersion>\n# <FSBuildVersion>100</FSBuildVersion>\n# For FCS:\n# FCSMajorVersion>43</FCSMajorVersion>\n# <FCSMinorVersion>8</FCSMinorVersion>\n# <FCSBuildVersion>$(FSBuildVersion)</FCSBuildVersion>\n# For VS:\n# <VSMajorVersion>17</VSMajorVersion>\n# <VSMinorVersion>8</VSMinorVersion>\n\n_fs_major_version=$(grep -oPm1 \"(?<=<FSMajorVersion>)[^<]+\" eng/Versions.props)\n_fs_minor_version=$(grep -oPm1 \"(?<=<FSMinorVersion>)[^<]+\" eng/Versions.props)\n_fs_build_version=$(grep -oPm1 \"(?<=<FSBuildVersion>)[^<]+\" eng/Versions.props)\n_fcs_major_version=$(grep -oPm1 \"(?<=<FCSMajorVersion>)[^<]+\" eng/Versions.props)\n_fcs_minor_version=$(grep -oPm1 \"(?<=<FCSMinorVersion>)[^<]+\" eng/Versions.props)\n_fcs_build_version=$_fs_build_version\n_vs_major_version=$(grep -oPm1 \"(?<=<VSMajorVersion>)[^<]+\" eng/Versions.props)\n_vs_minor_version=$(grep -oPm1 \"(?<=<VSMinorVersion>)[^<]+\" eng/Versions.props)\n\nFSHARP_CORE_VERSION=\"$_fs_major_version.$_fs_minor_version.$_fs_build_version\"\nFCS_VERSION=\"$_fcs_major_version.$_fcs_minor_version.$_fcs_build_version\"\nVISUAL_STUDIO_VERSION=\"$_vs_major_version.$_vs_minor_version\"\n\necho \"Found F# version: ${FSHARP_CORE_VERSION}\"\necho \"Found FCS version: ${FCS_VERSION}\"\necho \"Found Visual Studio version: ${VISUAL_STUDIO_VERSION}\"\n\n[[ \"$FSHARP_CORE_VERSION\" =~ ^[0-9]+\\.[0-9]+.[0-9]+$ ]] || (echo \"  Invalid FSharp.Core Version parsed\"; exit 1)\n[[ \"$FCS_VERSION\" =~ ^[0-9]+\\.[0-9]+.[0-9]+$ ]] || (echo \"  Invalid FCS Version parsed\"; exit 1)\n[[ \"$VISUAL_STUDIO_VERSION\" =~ ^[0-9]+\\.[0-9]+$ ]] || (echo \"   Invalid Visual Studio Version parsed\"; exit 1)\n\n_release_notes_base_path='docs/release-notes'\n_fsharp_core_release_notes_path=\"${_release_notes_base_path}/.FSharp.Core/${FSHARP_CORE_VERSION}.md\"\n_fsharp_compiler_release_notes_path=\"${_release_notes_base_path}/.FSharp.Compiler.Service/${FSHARP_CORE_VERSION}.md\"\n_fsharp_language_release_notes_path=\"${_release_notes_base_path}/.Language/preview.md\"\n_fsharp_vs_release_notes_path=\"${_release_notes_base_path}/.VisualStudio/${VISUAL_STUDIO_VERSION}.md\"\n\nreadonly paths=(\n    \"src/FSharp.Core|${_fsharp_core_release_notes_path}\"\n    \"src/Compiler|${_fsharp_compiler_release_notes_path}\"\n    \"LanguageFeatures.fsi|${_fsharp_language_release_notes_path}\"\n    \"vsintegration/src|${_fsharp_vs_release_notes_path}\"\n)\n\n# Check all changed paths\nRELEASE_NOTES_MESSAGE=\"\"\nRELEASE_NOTES_MESSAGE_DETAILS=\"\"\nRELEASE_NOTES_FOUND=\"\"\nRELEASE_NOTES_CHANGES_SUMMARY=\"\"\nRELEASE_NOTES_NOT_FOUND=\"\"\nPULL_REQUEST_FOUND=true\n\ngh repo set-default ${GITHUB_REPOSITORY}\n\n_modified_paths=`gh pr view ${PR_NUMBER} --json files --jq '.files.[].path'`\n\nfor fields in ${paths[@]}\ndo\n    IFS=$'|' read -r path release_notes <<< \"$fields\"\n    echo \"Checking for changed files in: $path\"\n\n    # Check if path is in modified files:\n    if [[ \"${_modified_paths[@]}\" =~ \"${path}\" ]]; then\n        echo \"  Found $path in modified files\"\n        echo \"      Checking if release notes modified in: $release_notes\"\n        if [[ \"${_modified_paths[@]}\" =~ \"${release_notes}\" ]]; then\n            echo \"          Found $release_notes in modified files\"\n            echo \"              Checking for pull request URL in $release_notes\"\n\n            if [[ ! -f $release_notes ]]; then\n                echo \"              $release_notes does not exist, please, create it.\"\n                #exit 1;\n            fi\n\n            _pr_link_occurences=`grep -c \"${PR_URL}\" $release_notes || true`\n\n            echo \"              Found $_pr_link_occurences occurences of $PR_URL in $release_notes\"\n\n            if [[ ${_pr_link_occurences} -eq 1 ]]; then\n                echo \"                  Found pull request URL in $release_notes once\"\n                RELEASE_NOTES_FOUND+=\"> | \\\\\\`$path\\\\\\` | [$release_notes](${FSHARP_REPO_URL}/tree/main/$release_notes) | |\"\n                RELEASE_NOTES_FOUND+=$'\\n'\n            elif [[ ${_pr_link_occurences} -eq 0 ]]; then\n                echo \"                  Did not find pull request URL in $release_notes\"\n                DESCRIPTION=\"**No current pull request URL (${PR_URL}) found, please consider adding it**\"\n                RELEASE_NOTES_FOUND+=\"> | \\\\\\`$path\\\\\\` | [$release_notes](${FSHARP_REPO_URL}/tree/main/$release_notes) | ${DESCRIPTION} |\"\n                RELEASE_NOTES_FOUND+=$'\\n'\n                PULL_REQUEST_FOUND=false\n            fi\n        else\n            echo \"          Did not find $release_notes in modified files\"\n            DESCRIPTION=\"**No release notes found or release notes format is not correct**\"\n            RELEASE_NOTES_NOT_FOUND+=\"| \\\\\\`$path\\\\\\` | [$release_notes](${FSHARP_REPO_URL}/tree/main/$release_notes) | ${DESCRIPTION} |\"\n            RELEASE_NOTES_NOT_FOUND+=$'\\n'\n        fi\n    else\n        echo \"      Nothing found, no release notes required\"\n    fi\ndone\n\necho \"Done checking for release notes changes\"\n\nif [[ $RELEASE_NOTES_NOT_FOUND != \"\" ]]; then\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\"@${PR_AUTHOR},\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\"> [!CAUTION]\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\"> **No release notes found for the changed paths (see table below).**\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\">\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\"> Please make sure to add an entry with an informative description of the change as well as link to this pull request, issue and language suggestion if applicable. Release notes for this repository are based on [Keep A Changelog](https://keepachangelog.com/en/1.1.0/) format.\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\">\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\"> **The following format is recommended for this repository:**\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\">\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\">\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\"> \\\\\\`* <Informative description>. ([PR #XXXXX](https://github.com/dotnet/fsharp/pull/XXXXX))\\\\\\`\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\">\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\">\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\"> See examples in the files, listed in the table below or in th full documentation at https://fsharp.github.io/fsharp-compiler-docs/release-notes/About.html.\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'**If you believe that release notes are not necessary for this PR, please add <kbd>NO_RELEASE_NOTES</kbd> label to the pull request.**'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\"**You can open this PR in browser to add release notes: [open in github.dev](https://github.dev/dotnet/fsharp/pull/${PR_NUMBER})**\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+='| Change path      | Release notes path | Description |'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+='| ---------------- | ------------------ | ----------- |'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=\"${RELEASE_NOTES_NOT_FOUND}\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\nfi\n\nif [[ $RELEASE_NOTES_FOUND != \"\" ]]; then\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\"<hr/>\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$\"> :white_check_mark: Found changes and release notes in following paths:\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n\n    if [[ $PULL_REQUEST_FOUND = false ]]; then\n        RELEASE_NOTES_MESSAGE_DETAILS+=$\"> [!WARNING]\"\n        RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n        RELEASE_NOTES_MESSAGE_DETAILS+=$\"> **No PR link found in some release notes, please consider adding it.**\"\n        RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n        RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n        RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    fi\n\n    RELEASE_NOTES_MESSAGE_DETAILS+='> | Change path      | Release notes path | Description |'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+='> | ---------------- | ------------------ | ----------- |'\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\n    RELEASE_NOTES_MESSAGE_DETAILS+=\"${RELEASE_NOTES_FOUND}\"\n    RELEASE_NOTES_MESSAGE_DETAILS+=$'\\n'\nfi\n\nRELEASE_NOTES_MESSAGE+=$'<!-- DO_NOT_REMOVE: release_notes_check -->\\n'\n\nif [[ $RELEASE_NOTES_MESSAGE_DETAILS == \"\" ]]; then\n    RELEASE_NOTES_MESSAGE+=$'## :white_check_mark: No release notes required\\n\\n'\nelse\n    RELEASE_NOTES_MESSAGE+=$'## :heavy_exclamation_mark: Release notes required\\n\\n'\n    RELEASE_NOTES_MESSAGE+=$RELEASE_NOTES_MESSAGE_DETAILS\nfi\n\necho \"release-notes-check-message<<$EOF\" >>$GITHUB_OUTPUT\n\nif [[ \"$OPT_OUT_RELEASE_NOTES\" = true ]]; then\n    echo \"<!-- DO_NOT_REMOVE: release_notes_check -->\" >>$GITHUB_OUTPUT\n    echo \"\" >>$GITHUB_OUTPUT\n    echo \"## :warning: Release notes required, but author opted out\" >>$GITHUB_OUTPUT\n    echo \"\" >>$GITHUB_OUTPUT\n    echo \"\" >>$GITHUB_OUTPUT\n    echo \"> [!WARNING]\" >>$GITHUB_OUTPUT\n    echo \"> **Author opted out of release notes, check is disabled for this pull request.**\" >>$GITHUB_OUTPUT\n    echo \"> cc @dotnet/fsharp-team-msft\" >>$GITHUB_OUTPUT\nelse\n    echo \"${RELEASE_NOTES_MESSAGE}\" >>$GITHUB_OUTPUT\nfi\n\necho \"$EOF\" >>$GITHUB_OUTPUT\n\nif [[ $RELEASE_NOTES_NOT_FOUND != \"\" && ${OPT_OUT_RELEASE_NOTES} != true ]]; then\n    exit 1\nfi\n"
            },
            {
                "id": 4,
                "name": "Find Comment",
                "run": "peter-evans/find-comment@v2.4.0"
            },
            {
                "id": 5,
                "name": "Create comment",
                "run": "actions/github-script@v6"
            },
            {
                "id": 6,
                "name": "Update comment",
                "run": "actions/github-script@v6"
            },
            {
                "id": 1,
                "name": "Delete old workflow runs",
                "run": "_UrlPath=\"/repos/$GITHUB_REPOSITORY/actions/workflows\"\n_CurrentWorkflowID=\"$(gh api -X GET \"$_UrlPath\" | jq '.workflows[] | select(.name == '\\\"\"$GITHUB_WORKFLOW\"\\\"') | .id')\"\n\n# delete workitems which are 'completed'. (other candidate values of status field are: 'queued' and 'in_progress')\n\ngh api -X GET \"$_UrlPath/$_CurrentWorkflowID/runs\" --paginate \\\n  | jq '.workflow_runs[] | select(.status == \"completed\") | .id' \\\n  | xargs -I{} gh api -X DELETE \"/repos/$GITHUB_REPOSITORY/actions/runs\"/{}\n"
            },
            {
                "id": 1,
                "name": "Extract command to run",
                "run": "actions/github-script@v3"
            },
            {
                "id": 2,
                "name": "Get github ref",
                "run": "actions/github-script@v3"
            },
            {
                "id": 3,
                "name": "Checkout repo",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Install dotnet",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Install dotnet tools",
                "run": "dotnet tool restore"
            },
            {
                "id": 6,
                "name": "Process fantomas command",
                "run": "dotnet fantomas . -r"
            },
            {
                "id": 7,
                "name": "Process fantomas command",
                "run": "dotnet build src/Compiler /t:UpdateXlf"
            },
            {
                "id": 8,
                "name": "Commit and push changes",
                "run": "git config --local user.name \"github-actions[bot]\"\ngit config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\ngit commit -a -m 'Automated command ran: ${{ steps.command-extractor.outputs.result }}\n\n  Co-authored-by: ${{ github.event.comment.user.login }} <${{ github.event.comment.user.id }}+${{ github.event.comment.user.login }}@users.noreply.github.com>'\ngit push\n"
            },
            {
                "id": 9,
                "name": "Post command comment",
                "run": "actions/github-script@v3"
            },
            {
                "id": 10,
                "name": "Post command failed comment",
                "run": "actions/github-script@v3"
            },
            {
                "id": 1,
                "name": "Check if lockdown is in place",
                "run": "set -e\nif [[ ${{ vars.LOCKDOWN }} == \"true\" ]]; then\n  exit 1\nfi\n"
            },
            {
                "id": 2,
                "name": "Find Comment",
                "run": "peter-evans/find-comment@v2.4.0"
            },
            {
                "id": 3,
                "name": "Create comment",
                "run": "actions/github-script@v6"
            },
            {
                "id": 4,
                "name": "Update comment",
                "run": "actions/github-script@v6"
            },
            {
                "id": 5,
                "name": "Delete comment",
                "run": "actions/github-script@v6"
            }
        ],
        "dotnet/ClangSharp": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./scripts/cibuild.cmd -configuration ${{ matrix.configuration }} -architecture ${{ matrix.architecture }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./scripts/cibuild.sh --configuration ${{ matrix.configuration }} --architecture ${{ matrix.architecture }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./scripts/cibuild.sh --configuration ${{ matrix.configuration }} --architecture ${{ matrix.architecture }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./scripts/cibuild.cmd -configuration release -architecture x64"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dotnet tool install --tool-path ./artifacts/tools sign --version 0.9.1-beta.24170.3"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./artifacts/tools/sign code azure-key-vault \"**/*.nupkg\" --timestamp-url \"http://timestamp.digicert.com\" --base-directory \"${{ github.workspace }}/artifacts/pkg\" --file-list \"${{ github.workspace }}/scripts/SignClientFileList.txt\" --publisher-name \".NET Foundation\" --description \"ClangSharp\" --description-url \"https://github.com/dotnet/clangsharp\" --azure-key-vault-certificate \"${{ secrets.SC_KEY_VAULT_CERTIFICATE_ID }}\" --azure-key-vault-client-id \"${{ secrets.SC_AZURE_CLIENT_ID }}\" --azure-key-vault-client-secret \"${{ secrets.SC_AZURE_CLIENT_SECRET }}\" --azure-key-vault-tenant-id \"${{ secrets.SC_AZURE_TENANT_ID }}\" --azure-key-vault-url \"${{ secrets.SC_KEY_VAULT_URL }}\""
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./scripts/cibuild.cmd -configuration release -architecture x64"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dotnet tool install --tool-path ./artifacts/tools sign --version 0.9.1-beta.24170.3"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./artifacts/tools/sign code azure-key-vault \"**/*.nupkg\" --timestamp-url \"http://timestamp.digicert.com\" --base-directory \"${{ github.workspace }}/artifacts/pkg\" --file-list \"${{ github.workspace }}/scripts/SignClientFileList.txt\" --publisher-name \".NET Foundation\" --description \"ClangSharp\" --description-url \"https://github.com/dotnet/clangsharp\" --azure-key-vault-certificate \"${{ secrets.SC_KEY_VAULT_CERTIFICATE_ID }}\" --azure-key-vault-client-id \"${{ secrets.SC_AZURE_CLIENT_ID }}\" --azure-key-vault-client-secret \"${{ secrets.SC_AZURE_CLIENT_SECRET }}\" --azure-key-vault-tenant-id \"${{ secrets.SC_AZURE_TENANT_ID }}\" --azure-key-vault-url \"${{ secrets.SC_KEY_VAULT_URL }}\""
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet nuget push \"./artifacts/pkg/Release/*.nupkg\" --api-key AzureDevOps --skip-duplicate"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet nuget push \"./artifacts/pkg/Release/*.nupkg\" --source https://nuget.pkg.github.com/dotnet/index.json --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate"
            }
        ],
        "dotnet/LLVMSharp": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./scripts/cibuild.cmd -configuration ${{ matrix.configuration }} -architecture ${{ matrix.architecture }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./scripts/cibuild.sh --configuration ${{ matrix.configuration }} --architecture ${{ matrix.architecture }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./scripts/cibuild.sh --configuration ${{ matrix.configuration }} --architecture ${{ matrix.architecture }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./scripts/cibuild.cmd -configuration release -architecture x64"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dotnet tool install --tool-path ./artifacts/tools sign --version 0.9.1-beta.24170.3"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./artifacts/tools/sign code azure-key-vault \"**/*.nupkg\" --timestamp-url \"http://timestamp.digicert.com\" --base-directory \"${{ github.workspace }}/artifacts/pkg\" --file-list \"${{ github.workspace }}/scripts/SignClientFileList.txt\" --publisher-name \".NET Foundation\" --description \"LLVMSharp\" --description-url \"https://github.com/dotnet/llvmsharp\" --azure-key-vault-certificate \"${{ secrets.SC_KEY_VAULT_CERTIFICATE_ID }}\" --azure-key-vault-client-id \"${{ secrets.SC_AZURE_CLIENT_ID }}\" --azure-key-vault-client-secret \"${{ secrets.SC_AZURE_CLIENT_SECRET }}\" --azure-key-vault-tenant-id \"${{ secrets.SC_AZURE_TENANT_ID }}\" --azure-key-vault-url \"${{ secrets.SC_KEY_VAULT_URL }}\""
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./scripts/cibuild.cmd -configuration release -architecture x64"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dotnet tool install --tool-path ./artifacts/tools sign --version 0.9.1-beta.24170.3"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./artifacts/tools/sign code azure-key-vault \"**/*.nupkg\" --timestamp-url \"http://timestamp.digicert.com\" --base-directory \"${{ github.workspace }}/artifacts/pkg\" --file-list \"${{ github.workspace }}/scripts/SignClientFileList.txt\" --publisher-name \".NET Foundation\" --description \"LLVMSharp\" --description-url \"https://github.com/dotnet/llvmsharp\" --azure-key-vault-certificate \"${{ secrets.SC_KEY_VAULT_CERTIFICATE_ID }}\" --azure-key-vault-client-id \"${{ secrets.SC_AZURE_CLIENT_ID }}\" --azure-key-vault-client-secret \"${{ secrets.SC_AZURE_CLIENT_SECRET }}\" --azure-key-vault-tenant-id \"${{ secrets.SC_AZURE_TENANT_ID }}\" --azure-key-vault-url \"${{ secrets.SC_KEY_VAULT_URL }}\""
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet nuget push \"./artifacts/pkg/Release/*.nupkg\" --api-key AzureDevOps --skip-duplicate"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet nuget push \"./artifacts/pkg/Release/*.nupkg\" --source https://nuget.pkg.github.com/dotnet/index.json --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate"
            }
        ],
        "dotnet/runtime-assets": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Branch",
                "run": "git config user.name github-actions[bot]\ngit config user.email github-actions[bot]@users.noreply.github.com\ngit checkout -b update-from-IANA-${{ github.run_id }}\n"
            },
            {
                "id": 3,
                "name": "Run UpdateToLatestVersion",
                "run": "rm -r src/System.Runtime.TimeZoneData/data\ngit rm -r src/System.Runtime.TimeZoneData/data\n./dotnet.sh build src/System.Runtime.TimeZoneData /t:UpdateToLatestVersion\ngit add src/System.Runtime.TimeZoneData\n"
            },
            {
                "id": 4,
                "name": "Check for changes",
                "run": "echo \"has_changes=$(git diff-index --quiet HEAD && echo false || echo true)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "Commit Update",
                "run": "echo steps.check_changes.outputs.has_changes=${{steps.check_changes.outputs.has_changes}}\nif ${{steps.check_changes.outputs.has_changes}} == 'true'; then\n  git commit -m \"Automated update of IANA time zone data\"\n  git push --set-upstream origin update-from-IANA-${{ github.run_id }}\nelse\n  echo \"No changes detected.\"\nfi\n"
            },
            {
                "id": 6,
                "name": "Create PR",
                "run": "actions/github-script@v7"
            }
        ],
        "dotnet/docs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.5"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dotnet/docs-tools/actions/status-checker@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.5"
            },
            {
                "id": 2,
                "name": "Clean repo",
                "run": "dotnet/docs-tools/cleanrepo/CleanRepo@main"
            },
            {
                "id": 3,
                "name": "create-pull-request",
                "run": "peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c"
            },
            {
                "id": 1,
                "name": "Dependabot metadata",
                "run": "dependabot/fetch-metadata@5e5f99653a5b510e8555840e80cbf1514ad4af38"
            },
            {
                "id": 2,
                "name": "Approve a PR",
                "run": "gh pr review --approve \"$PR_URL\""
            },
            {
                "id": 3,
                "name": "Enable auto-merge for Dependabot PRs",
                "run": "gh pr merge --auto --merge \"$PR_URL\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.5"
            },
            {
                "id": 2,
                "name": "Print manual run reason",
                "run": "echo \"Reason: ${{ github.event.inputs.reason }}\"\n"
            },
            {
                "id": 3,
                "name": "dependabot-bot",
                "run": "dotnet/docs-tools/actions/dependabot-bot@main"
            },
            {
                "id": 4,
                "name": "Create pull request",
                "run": "peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c"
            },
            {
                "id": 1,
                "name": "Check \"${{ matrix.label }}\" label",
                "run": "echo \"::notice::Merging permission is diabled for PRs when the '${{ matrix.label }}' label is applied.\"\n\nif [ \"${{ contains(github.event.pull_request.labels.*.name, matrix.label) }}\" = \"true\" ]; then\n  echo \"::error::Pull request is labeled as '${{ matrix.label }}'. Please remove the label before merging.\"\n  exit 1\nelse\n  exit 0\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea"
            },
            {
                "id": 2,
                "name": "Checkout the repository",
                "run": "actions/checkout@v4.1.5"
            },
            {
                "id": 3,
                "name": "Checkout Pull Request",
                "run": "hub pr checkout ${{ github.event.issue.number }}\n"
            },
            {
                "id": 4,
                "name": "Tryfix",
                "run": "dotnet/docs-actions/actions/docs-verifier@main"
            },
            {
                "id": 5,
                "name": "Push changes",
                "run": "git config --global user.name github-actions\ngit config --global user.email 41898282+github-actions[bot]@users.noreply.github.com\ngit remote add fork https://github.com/${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}\ngit commit -am \"Automated: Fix links\"\ngit push -u fork ${{ fromJSON(steps.get-pr.outputs.result).head.ref }}\n"
            },
            {
                "id": 1,
                "name": "Checkout the repository",
                "run": "actions/checkout@v4.1.5"
            },
            {
                "id": 2,
                "name": "Validate",
                "run": "dotnet/docs-actions/actions/docs-verifier@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.5"
            },
            {
                "id": 2,
                "name": "Use Node.js",
                "run": "actions/setup-node@eff380dfbcf941bf8832e4acb788cebe13dfd758"
            },
            {
                "id": 3,
                "name": "Run Markdownlint",
                "run": "echo \"::add-matcher::.github/workflows/markdownlint-problem-matcher.json\"\nnpm i -g markdownlint-cli2\nmarkdownlint-cli2 \"**/*.md\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "lee-dohm/no-response@9bb0a4b5e6a45046f00353d5de7d90fb8bd773bb"
            },
            {
                "id": 1,
                "name": "Profanity filter",
                "run": "IEvangelist/profanity-filter@main"
            },
            {
                "id": 1,
                "name": "Print manual bulk import run reason",
                "run": "echo \"Reason: ${{ github.event.inputs.reason }}\"\n"
            },
            {
                "id": 2,
                "name": "Azure OpenID Connect",
                "run": "dotnet/docs-tools/.github/actions/oidc-auth-flow@main"
            },
            {
                "id": 3,
                "name": "bulk-sequester",
                "run": "dotnet/docs-tools/actions/sequester@main"
            },
            {
                "id": 1,
                "name": "Print manual run reason",
                "run": "echo \"Reason: ${{ github.event.inputs.reason }}\"\necho \"Issue number: ${{ github.event.inputs.issue }}\"\n"
            },
            {
                "id": 2,
                "name": "Azure OpenID Connect",
                "run": "dotnet/docs-tools/.github/actions/oidc-auth-flow@main"
            },
            {
                "id": 3,
                "name": "manual-sequester",
                "run": "dotnet/docs-tools/actions/sequester@main"
            },
            {
                "id": 4,
                "name": "auto-sequester",
                "run": "dotnet/docs-tools/actions/sequester@main"
            },
            {
                "id": 1,
                "name": "Check for merge conflicts",
                "run": "eps1lon/actions-label-merge-conflict@releases/2.x"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b"
            },
            {
                "id": 2,
                "name": "Setup .NET",
                "run": "actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3"
            },
            {
                "id": 3,
                "name": "Display .NET info",
                "run": "dotnet --info\n"
            },
            {
                "id": 4,
                "name": "Clone docs-tools repository",
                "run": "git clone --depth 1 https://github.com/dotnet/docs-tools\n"
            },
            {
                "id": 5,
                "name": "Run snippets 5000 for PR",
                "run": "dotnet run --project docs-tools/snippets5000/Snippets5000/Snippets5000.csproj -- --sourcepath \"${{ github.workspace }}\" --pullrequest ${{ github.event.number }} --owner ${{ github.repository_owner }} --repo ${{ github.event.repository.name }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@28ca1036281a5e5922ead5184a1bbf96e5fc984e"
            },
            {
                "id": 1,
                "name": ".NET version updater",
                "run": "dotnet/docs-tools/actions/dotnet-version-updater@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.5"
            },
            {
                "id": 2,
                "name": "Print manual run reason",
                "run": "echo \"Reason: ${{ github.event.inputs.reason }}\"\n"
            },
            {
                "id": 3,
                "name": "Azure OpenID Connect",
                "run": "dotnet/docs-tools/.github/actions/oidc-auth-flow@main"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dotnet/docs-tools/WhatsNew.Cli@main"
            },
            {
                "id": 5,
                "name": "create-pull-request",
                "run": "peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c"
            }
        ],
        "dotnet/EntityFramework.Docs": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup .NET Core 3.1 SDK",
                "run": "actions/setup-dotnet@v1"
            },
            {
                "id": 3,
                "name": "Setup .NET 6.0 SDK",
                "run": "actions/setup-dotnet@v1"
            },
            {
                "id": 4,
                "name": "Setup .NET 8.0 SDK",
                "run": "actions/setup-dotnet@v1"
            },
            {
                "id": 5,
                "name": "Build samples",
                "run": "dotnet build"
            },
            {
                "id": 6,
                "name": "Build planetary docs sample",
                "run": "dotnet build"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Run Markdownlint",
                "run": "echo \"::add-matcher::.github/workflows/markdownlint-problem-matcher.json\"\nnpm i -g markdownlint-cli\nmarkdownlint \"**/*.md\" -i \"entity-framework/ef6/\"\n"
            }
        ],
        "dotnet/roslyn-analyzers": [
            {
                "id": 1,
                "name": "Get data",
                "run": "gh api graphql -f query='\n  query($org: String!, $repo: String!, $pull: Int!, $label: String!) {\n    repository(name: $repo, owner: $org) {\n      label(name: $label) {\n        id\n      }\n      pullRequest(number: $pull) {\n        authorAssociation\n      }\n    }\n  }' -f org=$ORGANIZATION -f repo=$REPOSITORY -F pull=$PULL_REQUEST_NUMBER -f label=\"$LABEL_NAME\" > data.json\n\ncat data.json\necho 'LABEL_ID='$(jq -r '.data.repository.label.id' data.json) >> $GITHUB_ENV\necho 'AUTHOR_ASSOCIATION='$(jq -r '.data.repository.pullRequest.authorAssociation' data.json) >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Assign label",
                "run": "gh api graphql -f query='\n  mutation($pull: ID!, $label: ID!) {\n    addLabelsToLabelable(input: {labelableId: $pull, labelIds: [$label]}) {\n      clientMutationId\n    }\n  }' -f pull=$PULL_REQUEST_ID -f label=$LABEL_ID\n"
            },
            {
                "id": 1,
                "name": "Enable pull request auto-merge",
                "run": "gh api graphql -f query='\n  mutation($pull: ID!) {\n    enablePullRequestAutoMerge(input: {pullRequestId: $pull}) {\n      pullRequest {\n        id\n        number\n        autoMergeRequest {\n          mergeMethod\n        }\n      }\n    }\n  }' -f pull=$PULL_REQUEST_ID\n"
            },
            {
                "id": 1,
                "name": "Get milestone data",
                "run": "gh api graphql -f query='\n  query($org: String!, $repo: String!, $milestone: String!) {\n    repository(name: $repo, owner: $org) {\n      milestones(query: $milestone, first: 2) {\n        nodes {\n          id\n          title\n        }\n      }\n    }\n  }' -f org=$ORGANIZATION -f repo=$REPOSITORY -f milestone=\"$MILESTONE_NAME\" > milestone_data.json\n\necho 'MILESTONE_ID='$(jq -r 'if (((.data.repository.milestones.nodes | length) == 1) and .data.repository.milestones.nodes[0].title == $MILESTONE_NAME) then .data.repository.milestones.nodes[0].id else \"\" end' --arg MILESTONE_NAME \"$MILESTONE_NAME\" milestone_data.json) >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Assign milestone",
                "run": "gh api graphql -f query='\n  mutation($pull: ID!, $milestone: ID!) {\n    updatePullRequest(input: {pullRequestId: $pull, milestoneId: $milestone}) {\n      pullRequest {\n        id\n        number\n        milestone {\n          id\n          number\n          title\n        }\n      }\n    }\n  }' -f pull=$PULL_REQUEST_ID -f milestone=$MILESTONE_ID\n"
            },
            {
                "id": 1,
                "name": "Create review",
                "run": "gh api graphql -f query='\n  mutation($pull: ID!) {\n    addPullRequestReview(input: {pullRequestId: $pull}) {\n      pullRequestReview {\n        id\n      }\n    }\n  }' -f pull=$PULL_REQUEST_ID > data.json\n\ncat data.json\necho 'REVIEW_ID='$(jq -r '.data.addPullRequestReview.pullRequestReview.id' data.json) >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Submit approval",
                "run": "gh api graphql -f query='\n  mutation($review: ID!) {\n    submitPullRequestReview(input: {pullRequestReviewId: $review, event: APPROVE, body: \"Auto-approve\"}) {\n      clientMutationId\n    }\n  }' -f review=$REVIEW_ID\n"
            },
            {
                "id": 3,
                "name": "Submit change request",
                "run": "gh api graphql -f query='\n  mutation($review: ID!) {\n    submitPullRequestReview(input: {pullRequestReviewId: $review, event: REQUEST_CHANGES, body: \"This PR changes the .NET SDK version. Review required from @dotnet/roslyn-infrastructure-current-swat before merging.\"}) {\n      clientMutationId\n    }\n  }' -f review=$REVIEW_ID\n"
            }
        ],
        "dotnet/docfx": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/build"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm run lint"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm test"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "dotnet test -c Release -f net8.0 --no-build --collect:\"XPlat Code Coverage\""
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "dotnet test -c Release -f net6.0 --no-build --collect:\"XPlat Code Coverage\""
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "npm i -g @percy/cli"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "percy exec -- dotnet test -c Release -f net8.0 --filter Stage=Percy --no-build --collect:\"XPlat Code Coverage\""
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "codecov/codecov-action@v4"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "echo \"DOTNET_DbgEnableMiniDump=1\" >> $GITHUB_ENV"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "dotnet run -c Release --no-build -f net8.0 --project src/docfx -- docs/docfx.json"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "dotnet run -c Release --no-build -f net8.0 --project src/docfx -- samples/seed/docfx.json --output docs/_site/seed"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "actions/upload-pages-artifact@v3"
            },
            {
                "id": 14,
                "name": "Step 14",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/deploy-pages@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "npm install\nnpm run build\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "dotnet build -c Release"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "gh pr review --approve \"$PR_URL\""
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gh pr merge --auto --squash \"$PR_URL\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "paulhatch/semantic-version@v5.4.0"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/build"
            },
            {
                "id": 5,
                "name": "dotnet test",
                "run": "dotnet test -c Release -f net9.0 --no-build"
            },
            {
                "id": 6,
                "name": "dotnet pack",
                "run": "dotnet pack -c Release /p:Version=${{ steps.version.outputs.version }} /p:ApiCompatGenerateSuppressionFile=true -o drop/nuget"
            },
            {
                "id": 7,
                "name": "dotnet nuget push",
                "run": "dotnet nuget push drop/nuget/*.nupkg --api-key \"${{ secrets.GITHUB_TOKEN }}\" --skip-duplicate --source https://nuget.pkg.github.com/dotnet/index.json\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/build"
            },
            {
                "id": 3,
                "name": "dotnet pack",
                "run": "dotnet pack -c Release /p:Version=${GITHUB_REF_NAME#v} -o drop/nuget"
            },
            {
                "id": 4,
                "name": "dotnet publish",
                "run": "dotnet publish src/docfx -f net8.0 -c Release /p:Version=${GITHUB_REF_NAME#v} --self-contained -r win-x64 -o drop/publish/win-x64 /p:PlaywrightPlatform=win\ndotnet publish src/docfx -f net8.0 -c Release /p:Version=${GITHUB_REF_NAME#v} --self-contained -r linux-x64 -o drop/publish/linux-x64 /p:PlaywrightPlatform=linux\ndotnet publish src/docfx -f net8.0 -c Release /p:Version=${GITHUB_REF_NAME#v} --self-contained -r osx-x64 -o drop/publish/osx-x64 /p:PlaywrightPlatform=osx\nmkdir -p drop/bin\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "zip -r ../../bin/docfx-win-x64-${GITHUB_REF_NAME}.zip ."
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "zip -r ../../bin/docfx-linux-x64-${GITHUB_REF_NAME}.zip ."
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "zip -r ../../bin/docfx-osx-x64-${GITHUB_REF_NAME}.zip ."
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet tool install --tool-path . sign --version 0.9.1-beta.24170.3"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./sign code azure-key-vault drop/nuget/**/*.* --description \"Docfx code sign\" --description-url \"https://dotnet.github.io/docfx\" --timestamp-url http://timestamp.digicert.com --azure-key-vault-url \"${{ secrets.SIGN_KEY_VAULT_URL }}\" --azure-key-vault-certificate \"${{ secrets.SIGN_KEY_VAULT_CERTIFICATE }}\" --azure-key-vault-tenant-id \"${{ secrets.SIGN_KEY_VAULT_TENANT_ID }}\" --azure-key-vault-client-id \"${{ secrets.SIGN_KEY_VAULT_CLIENT_ID }}\" --azure-key-vault-client-secret \"${{ secrets.SIGN_KEY_VAULT_CLIENT_SECRET }}\"\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "Publish NuGet packages",
                "run": "dotnet nuget push drop/nuget/*.nupkg --api-key \"${{ secrets.NUGET_KEY }}\" --skip-duplicate --source https://api.nuget.org/v3/index.json\n"
            },
            {
                "id": 5,
                "name": "Upload GitHub release",
                "run": "gh release upload --repo dotnet/docfx ${GITHUB_REF_NAME} drop/bin/docfx-win-x64-${GITHUB_REF_NAME}.zip\ngh release upload --repo dotnet/docfx ${GITHUB_REF_NAME} drop/bin/docfx-linux-x64-${GITHUB_REF_NAME}.zip\ngh release upload --repo dotnet/docfx ${GITHUB_REF_NAME} drop/bin/docfx-osx-x64-${GITHUB_REF_NAME}.zip\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/build"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet test -c Release -f net8.0 --no-build --filter Stage=Snapshot"
            },
            {
                "id": 4,
                "name": "Show diff file names",
                "run": "git diff --name-only\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "stefanzweifel/git-auto-commit-action@v5"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/github-script@v7"
            }
        ],
        "dotnet/Nerdbank.Streams": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "\u2699\ufe0f Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "\u2699\ufe0f Install prerequisites",
                "run": "./init.ps1 -UpgradePrerequisites\ndotnet --info\n\n# Print mono version if it is present.\nif (Get-Command mono -ErrorAction SilentlyContinue) {\n  mono --version\n}\n"
            },
            {
                "id": 4,
                "name": "\ud83d\udee0\ufe0f build",
                "run": "dotnet build --no-restore -c ${{ env.BUILDCONFIGURATION }}"
            },
            {
                "id": 5,
                "name": "\ud83d\udd0d Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "\u2699\ufe0f Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "\ud83d\udee0\ufe0f Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 4,
                "name": "\ud83d\udd0d Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            }
        ],
        "dotnet/project-system": [
            {
                "id": 1,
                "name": "Clone the repository",
                "run": "actions/checkout@96f53100ba2a5449eb71d2e6604bbcd94b9449b5"
            },
            {
                "id": 2,
                "name": "Validate Markdown links",
                "run": "gaurav-nelson/github-action-markdown-link-check@322b2315689b8cc8c65c14a07064ec862e62ee7c"
            }
        ],
        "dotnet/roslynator": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dotnet tool install -g GitVersion.Tool --version 5.11.1"
            },
            {
                "id": 3,
                "name": "Resolve version",
                "run": "dotnet-gitversion\ndotnet-gitversion > version.json\nversion=\"$(jq -r '.SemVer' version.json)\"\nversion3=\"$(jq -r '.MajorMinorPatch' version.json)\"\npr_version=\"$(jq -r '.MajorMinorPatch' version.json)-$(jq -r '.PreReleaseLabel' version.json).${{ github.run_number }}.${{ github.run_attempt }}\"\nif [ \"${{ github.event_name }}\" = \"pull_request\" ]; then version=$pr_version; fi\necho \"Resolved version: $version\"\necho \"version=${version}\" >> $GITHUB_OUTPUT\necho \"Resolved version3: $version3\"\necho \"version3=${version3}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Resolve CLI version",
                "run": "dotnet-gitversion /overrideconfig tag-prefix=cli-v > version.json\nversion=\"$(jq -r '.SemVer' version.json)\"\npr_version=\"$(jq -r '.MajorMinorPatch' version.json)-$(jq -r '.PreReleaseLabel' version.json).${{ github.run_number }}.${{ github.run_attempt }}\"\nif [ \"${{ github.event_name }}\" = \"pull_request\" ]; then version=$pr_version; fi\necho \"Resolved CLI version: $version\"\necho \"version=${version}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "dotnet restore Roslynator.sln"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "dotnet build Roslynator.sln --no-restore"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet format Roslynator.sln --no-restore --verify-no-changes --severity info\n"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test Roslynator.sln --no-build"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/checkout@v4"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "dotnet tool install -g Roslynator.DotNet.Cli --version 0.8.3"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "roslynator spellcheck Roslynator.sln --dry-run --scope all --words \\\n  spellcheck \\\n  ../wordb/data/en \\\n  ../wordb/data/en-us \\\n  ../wordb/data/names.txt \\\n  ../wordb/data/tech.names.txt \\\n  ../wordb/data/tech.acronyms.txt\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dotnet restore Roslynator.CoreAndTesting.slnf"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet build Roslynator.CoreAndTesting.slnf --no-restore"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dotnet pack Roslynator.CoreAndTesting.slnf --no-build -o _nupkg"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dotnet restore --force /p:RoslynVersion=roslyn3.8"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet build --no-restore /p:Roslynator${{ matrix.component.propertyName }}NuGet=true /p:RoslynVersion=roslyn3.8"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dotnet restore --force /p:RoslynVersion=roslyn4.7"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "dotnet build --no-restore /p:Roslynator${{ matrix.component.propertyName }}NuGet=true /p:RoslynVersion=roslyn4.7"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "dotnet pack --no-build"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dotnet restore --force /p:RoslynVersion=roslyn3.8"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet build --no-restore /p:RoslynatorRefactoringsNuGet=true /p:RoslynVersion=roslyn3.8"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dotnet restore --force /p:RoslynVersion=roslyn4.7"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "dotnet build --no-restore /p:RoslynatorRefactoringsNuGet=true /p:RoslynVersion=roslyn4.7"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "dotnet pack --no-build"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dotnet restore --force /p:RoslynVersion=roslyn3.8"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet build --no-restore /p:RoslynatorCodeFixesNuGet=true /p:RoslynVersion=roslyn3.8"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dotnet restore --force /p:RoslynVersion=roslyn4.7"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "dotnet build --no-restore /p:RoslynatorCodeFixesNuGet=true /p:RoslynVersion=roslyn4.7"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "dotnet pack --no-build"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "(Get-Content source.extension.vsixmanifest) -replace 'Version=\"1.0.0\"', 'Version=\"${{ needs.pre_build.outputs.version3 }}\"' | Set-Content source.extension.vsixmanifest"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet restore"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "microsoft/setup-msbuild@v2"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "msbuild -m"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/upload-artifact/merge@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dotnet restore"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet build --no-restore"
            },
            {
                "id": 4,
                "name": "Copy DLLs to package",
                "run": "mkdir package/roslyn/analyzers\nmkdir package/roslyn/refactorings\nmkdir package/roslyn/fixes\ncp bin/Release/netstandard2.0/Roslynator.Core.dll package/roslyn/common\ncp bin/Release/netstandard2.0/Roslynator.Common.dll package/roslyn/common\ncp bin/Release/netstandard2.0/Roslynator.CSharp.dll package/roslyn/common\ncp bin/Release/netstandard2.0/Roslynator.Workspaces.Core.dll package/roslyn/common\ncp bin/Release/netstandard2.0/Roslynator.Workspaces.Common.dll package/roslyn/common\ncp bin/Release/netstandard2.0/Roslynator.CSharp.Workspaces.dll package/roslyn/common\ncp bin/Release/netstandard2.0/Roslynator.CSharp.Analyzers.dll package/roslyn/analyzers\ncp bin/Release/netstandard2.0/Roslynator.CSharp.Analyzers.CodeFixes.dll package/roslyn/analyzers\ncp bin/Release/netstandard2.0/Roslynator.Formatting.Analyzers.dll package/roslyn/analyzers\ncp bin/Release/netstandard2.0/Roslynator.Formatting.Analyzers.CodeFixes.dll package/roslyn/analyzers\ncp bin/Release/netstandard2.0/Roslynator.CSharp.Refactorings.dll package/roslyn/refactorings\ncp bin/Release/netstandard2.0/Roslynator.CSharp.CodeFixes.dll package/roslyn/fixes\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "sed -i 's/\"version\": \"1.0.0\"/\"version\": \"${{ needs.pre_build.outputs.version3 }}\"/' package/package.json\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "npm install"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "npm install -g @vscode/vsce"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "vsce package"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "rm package/*.vsix"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "sed -i s/ms-dotnettools.csharp/muhammad-sammy.csharp/ package/package.json"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "vsce package"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dotnet restore"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet build --no-restore"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dotnet pack --no-build"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dotnet restore"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dotnet build --no-restore"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "dotnet publish --no-build"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "dotnet pack --no-build"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dotnet nuget push \"*.nupkg\" -k ${{ secrets.NUGET_API_KEY }} -s \"https://api.nuget.org/v3/index.json\" --skip-duplicate"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dotnet nuget push \"*.nupkg\" -k ${{ secrets.NUGET_API_KEY }} -s \"https://api.nuget.org/v3/index.json\" --skip-duplicate"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "npm install -g @vscode/vsce"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "vsce publish -p ${{ secrets.VS_MARKETPLACE_TOKEN }} -i \"roslynator-${{ needs.pre_build.outputs.version3 }}.vsix\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "npm install -g ovsx"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "ovsx publish -p ${{ secrets.OPEN_VSX_TOKEN }} -i \"roslynator-${{ needs.pre_build.outputs.version3 }}.vsix\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Publish VS extension to Marketplace",
                "run": "$visualStudioPath = vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VSSDK -property installationPath\n$vsixPublisher = Join-Path \"$visualStudioPath\" \"VSSDK\\VisualStudioIntegration\\Tools\\Bin\\VsixPublisher.exe\"\n& \"$vsixPublisher\" publish -payload Roslynator.VisualStudio.vsix -publishManifest manifest.json -personalAccessToken ${{ secrets.VS_MARKETPLACE_TOKEN }}\n"
            }
        ],
        "dotnet/sdk": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v9"
            }
        ],
        "dotnet/aspnet-api-versioning": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v1"
            },
            {
                "id": 3,
                "name": "Build solution",
                "run": "$start = (Get-Location).Path.Length + 1\n$sln = Join-Path '..' 'ApiVersioning.sln'\n$projects = Get-ChildItem src -Include *.csproj -Recurse | `\n            ForEach-Object { $_.FullName.Substring($start) }\n$json = ConvertTo-Json(New-Object PSObject -Property @{solution=@{path=$sln;projects=$projects}})\n$obj = New-Item -Path 'obj' -ItemType Directory -Force\n$slnf = New-Item -Path (Join-Path $obj 'codeql.slnf') -ItemType File -Value $json -Force\n\ndotnet build $slnf.FullName --configuration Release\n"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v1"
            }
        ],
        "dotnet/csharp-tmLanguage": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js 18.x",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm ci"
            }
        ],
        "dotnet/MQTTnet": [
            {
                "id": 1,
                "name": "Setup Windows SDK",
                "run": "GuillaumeFalourd/setup-windows10-sdk-action@v1"
            },
            {
                "id": 2,
                "name": "Setup .NET SDK",
                "run": "actions/setup-dotnet@v1.9.0"
            },
            {
                "id": 3,
                "name": "Setup MSBuild",
                "run": "microsoft/setup-msbuild@v1.1"
            },
            {
                "id": 4,
                "name": "Checkout Code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 5,
                "name": "Setup Signing Certificate",
                "run": "$secret = '${{ secrets.SNC_BASE64 }}'\n$decoded = [System.Convert]::FromBase64CharArray($secret, 0, $secret.Length)\nSet-Content -Path ${{ github.workspace }}\\certificate.snk -Value $decoded -AsByteStream\n"
            },
            {
                "id": 6,
                "name": "Restore nuget packages",
                "run": "msbuild MQTTnet.sln /t:Restore /p:Configuration=\"Release\" /verbosity:m"
            },
            {
                "id": 7,
                "name": "Build solution",
                "run": "msbuild MQTTnet.sln /t:Build /p:Configuration=\"Release\" /verbosity:m /p:FileVersion=${{ env.VERSION }} /p:AssemblyVersion=${{ env.VERSION }} /p:PackageVersion=${{ env.VERSION }} /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=${{ github.workspace }}\\certificate.snk"
            },
            {
                "id": 8,
                "name": "Collect nuget Packages",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 9,
                "name": "Setup VSTest",
                "run": "darenm/Setup-VSTest@v1"
            },
            {
                "id": 10,
                "name": "Core Tests",
                "run": "vstest.console.exe Source\\MQTTnet.Tests\\bin\\Release\\net7.0\\MQTTnet.Tests.dll"
            },
            {
                "id": 11,
                "name": "ASP.NET Tests",
                "run": "vstest.console.exe Source\\MQTTnet.AspNetCore.Tests\\bin\\Release\\netcoreapp3.1\\MQTTnet.AspNetCore.Tests.dll"
            },
            {
                "id": 12,
                "name": "Publish MyGet nugets",
                "run": "dotnet nuget push **/*.nupkg -k ${{ secrets.MYGET_API_KEY }} -s https://www.myget.org/F/mqttnet/api/v3/index.json --skip-duplicate"
            }
        ]
    },
    "apache": {
        "apache/apr": [
            {
                "id": 1,
                "name": "Install prerequisites",
                "run": "sudo apt-get install libtool libtool-bin ${{ matrix.packages }}"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Workaround ASAN issue in Ubuntu 22.04 runners",
                "run": "sudo sysctl vm.mmap_rnd_bits=28"
            },
            {
                "id": 4,
                "name": "buildconf",
                "run": "./buildconf"
            },
            {
                "id": 5,
                "name": "configure",
                "run": "./configure --prefix=/tmp/apr ${{ matrix.config }}"
            },
            {
                "id": 6,
                "name": "check for expected configure output ${{ matrix.config-output }}",
                "run": "for var in ${{ matrix.config-output }}; do grep \"^#define *${var} *1\" include/apr.h; done"
            },
            {
                "id": 7,
                "name": "make",
                "run": "make $MARGS"
            },
            {
                "id": 8,
                "name": "install",
                "run": "make install"
            },
            {
                "id": 9,
                "name": "check",
                "run": "make check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "buildconf",
                "run": "./buildconf"
            },
            {
                "id": 3,
                "name": "configure",
                "run": "./configure"
            },
            {
                "id": 4,
                "name": "make",
                "run": "make $MARGS"
            },
            {
                "id": 5,
                "name": "make check",
                "run": "make check || true"
            },
            {
                "id": 1,
                "name": "Export GitHub Actions cache environment variables",
                "run": "actions/github-script@v7"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Vcpkg Install",
                "run": "C:\\vcpkg\\vcpkg.exe install ${{ matrix.port }} --head --overlay-ports ${{ github.workspace }}\\build\\vcpkg --triplet ${{ matrix.triplet }} --enforce-port-checks"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Configure CMake",
                "run": "cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DAPR_BUILD_TESTAPR=ON -DTEST_STATIC_LIBS=${{ matrix.test-static }} -G \"${{ matrix.generator }}\" -A ${{ matrix.arch }} -T ${{ matrix.toolset }}"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "cmake --build ${{github.workspace}}/build --config ${{ matrix.build-type }}"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "ctest -C ${{ matrix.build-type }} --output-on-failure"
            }
        ],
        "apache/lucenenet": [
            {
                "id": 1,
                "name": "Add warning comment to PR",
                "run": "curl \\\n  -X POST \\\n  $URL \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: token $GITHUB_TOKEN\" \\\n  --data '{ \"body\": \":warning: **IMPORTANT:** This PR may contain changes to dependency versions. The GitHub Actions test runner is not set up to detect dependency version conflicts between projects. To ensure the changes do not cause dependency conflicts, [run the tests for these changes in Azure DevOps](https://github.com/apache/lucenenet#azure-devops) before accepting this pull request. :warning:\" }'\n"
            },
            {
                "id": 1,
                "name": "Checkout Lucene.Net source",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set version from tag",
                "run": "# initialize to SHA\necho (\"CURRENT_TAG=\" + $Env:GITHUB_SHA) >> $env:GITHUB_ENV\n$ref = $Env:GITHUB_REF\n\nif ($ref.StartsWith(\"refs/tags/\")) {\n  $tag = $ref.Substring(10)\n  echo \"extracted tag name from refs/tags as $tag\"\n}\nelse {\n  echo \"Get the latest Lucene.Net_ tag\"\n  $tag = & git --git-dir \"$Env:GIT_MAIN_REPO\" tag --list --sort=-version:refname 'Lucene.Net_[0-9]_[0-9]_[0-9]*' | select -first 1\n}\n\nif ($tag -eq $null) {\n  echo \"::error::Could not determine current version tag\"\n  exit 1\n}\n\n# write the environment var\necho (\"CURRENT_TAG=\" + $tag) >> $env:GITHUB_ENV\n\n$parts = $tag.Split(\"_\")\n$version = '';\nFor ($i=1; $i -le $parts.Length; $i++) {\n  $version += $parts[$i]\n  if ($i -eq ($parts.Length - 2)) {\n    $version += \"-\"\n  }\n  elseif ($i -lt ($parts.Length - 1)) {\n    $version += \".\"\n  }\n}\n\nif ($version -ne '') {\n  # the tag parsed to the correct version format, write the environment var\n  echo (\"RELEASE_VERSION=\" + $version) >> $env:GITHUB_ENV\n}\nelse {\n  echo \"::error::Could not parse current version tag\"\n  exit 1\n}\n"
            },
            {
                "id": 3,
                "name": "Verify environment variables",
                "run": "echo \"CURRENT_TAG=$Env:CURRENT_TAG\"\necho \"RELEASE_VERSION=$Env:RELEASE_VERSION\"\n"
            },
            {
                "id": 4,
                "name": "Change branch",
                "run": "git --git-dir \"$Env:GIT_MAIN_REPO\" checkout -b \"docs/${{ env.RELEASE_VERSION }}\"\n"
            },
            {
                "id": 5,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Build docs",
                "run": "./main-repo/websites/apidocs/docs.ps1 -Clean -LuceneNetVersion ${{ env.RELEASE_VERSION }}"
            },
            {
                "id": 7,
                "name": "Checkout Lucene.Net website",
                "run": "actions/checkout@v3"
            },
            {
                "id": 8,
                "name": "Copy documentation site files",
                "run": "Get-ChildItem -Path \"$Env:GITHUB_WORKSPACE\\main-repo\\websites\\apidocs\\_site\" | Copy-Item -Destination \"$Env:GITHUB_WORKSPACE\\website-repo\\docs\\$Env:RELEASE_VERSION\" -Recurse -Force"
            },
            {
                "id": 9,
                "name": "Create Pull Request",
                "run": "peter-evans/create-pull-request@v5"
            },
            {
                "id": 10,
                "name": "Check outputs",
                "run": "echo \"Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}\"\necho \"Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}\"\n"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet pack ${{env.project_under_test_path}} --configuration ${{matrix.configuration}} /p:TestFrameworks=true /p:PortableDebugTypeOnly=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 10,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Source Code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 3,
                "name": "Setup .NET 5 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 4,
                "name": "Setup .NET 6 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 5,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 6,
                "name": "Setup Environment Variables",
                "run": "$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path)\n$test_results_artifact_name = \"testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}\"\n$working_directory = \"$env:GITHUB_WORKSPACE\"\nWrite-Host \"Project Name: $project_name\"\nWrite-Host \"Results Artifact Name: $test_results_artifact_name\"\nWrite-Host \"Working Directory: $working_directory\"\necho \"project_name=$project_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"test_results_artifact_name=$test_results_artifact_name\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Set the Azure DevOps default working directory env variable, so our tests only need to deal with a single env variable\necho \"SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n# Title for LiquidTestReports.Markdown\necho \"title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "dotnet build ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} /p:TestFrameworks=true"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "dotnet test ${{env.project_path}} --configuration ${{matrix.configuration}} --framework ${{matrix.framework}} --no-build --no-restore --blame-hang --blame-hang-dump-type mini --blame-hang-timeout 20minutes --logger:\"console;verbosity=normal\" --logger:\"trx;LogFileName=${{env.trx_file_name}}\" --logger:\"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};\" --results-directory:\"${{github.workspace}}/${{env.test_results_artifact_name}}/${{env.project_name}}\" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\\(name=\\\"tests:slow\\\",\\ value=\\\"\\${{env.run_slow_tests}}\\\"\\)"
            },
            {
                "id": 9,
                "name": "Upload a Build Artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout Lucene.Net source",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set version from tag",
                "run": "$ref = $Env:GITHUB_REF\n\nif ($ref.StartsWith(\"refs/tags/\")) {\n  $tag = $ref.Substring(10)\n  echo \"extracted tag name from refs/tags as $tag\"\n}\nelse {\n  echo \"Get the latest Lucene.Net_ tag\"\n  $tag = & git --git-dir \"$Env:GIT_MAIN_REPO\" tag --list --sort=-version:refname 'Lucene.Net_[0-9]_[0-9]_[0-9]*' | select -first 1\n}\n\nif ($tag -eq $null) {\n  echo \"::error::Could not determine current version tag\"\n  exit 1\n}\n\n$parts = $tag.Split(\"_\")\n$version = '';\nFor ($i=1; $i -le $parts.Length; $i++) {\n  $version += $parts[$i]\n  if ($i -eq ($parts.Length - 2)) {\n    $version += \"-\"\n  }\n  elseif ($i -lt ($parts.Length - 1)) {\n    $version += \".\"\n  }\n}\n\nif ($version -ne '') {\n  # the tag parsed to the correct version format, write the environment var\n  echo \"parsed version is $version\"\n  echo (\"RELEASE_VERSION=\" + $version) >> $env:GITHUB_ENV\n}\nelse {\n  echo \"::error::Could not parse current version tag\"\n  exit 1\n}\n"
            },
            {
                "id": 3,
                "name": "Verify environment variables",
                "run": "echo \"RELEASE_VERSION=$Env:RELEASE_VERSION\"\n"
            },
            {
                "id": 4,
                "name": "Build website",
                "run": "./main-repo/websites/site/site.ps1 -Clean"
            },
            {
                "id": 5,
                "name": "Upload website as build artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 6,
                "name": "Checkout Lucene.Net website",
                "run": "actions/checkout@v3"
            },
            {
                "id": 7,
                "name": "Copy website files",
                "run": "Get-ChildItem -Path \"$Env:GITHUB_WORKSPACE\\main-repo\\websites\\site\\_site\" | Copy-Item -Destination \"$Env:GITHUB_WORKSPACE\\website-repo\" -Recurse -Force"
            },
            {
                "id": 8,
                "name": "Create Pull Request",
                "run": "peter-evans/create-pull-request@v5"
            },
            {
                "id": 9,
                "name": "Check outputs",
                "run": "echo \"Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}\"\necho \"Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}\"\n"
            },
            {
                "id": 1,
                "name": "Disable .NET SDK Telemetry and Logo",
                "run": "echo \"DOTNET_NOLOGO=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\necho \"DOTNET_CLI_TELEMETRY_OPTOUT=1\" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append\n"
            },
            {
                "id": 2,
                "name": "Setup .NET 8 SDK",
                "run": "actions/setup-dotnet@v3"
            },
            {
                "id": 3,
                "name": "Set up JDK 21",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v3"
            },
            {
                "id": 5,
                "name": "Cache SonarCloud packages",
                "run": "actions/cache@v3"
            },
            {
                "id": 6,
                "name": "Cache SonarCloud scanner",
                "run": "actions/cache@v3"
            },
            {
                "id": 7,
                "name": "Install SonarCloud scanner",
                "run": "$dir = '.\\.sonar\\scanner'\nif (!(Test-Path $dir)) { New-Item -Path $dir -ItemType Directory }\ndotnet tool update dotnet-sonarscanner --tool-path $dir\n"
            },
            {
                "id": 8,
                "name": "Build and analyze",
                "run": ".\\.sonar\\scanner\\dotnet-sonarscanner begin /k:\"apache_lucenenet\" /o:\"apache\" /d:sonar.token=\"${{ secrets.SONARCLOUD_TOKEN }}\" /d:sonar.host.url=\"https://sonarcloud.io\"\ndotnet build\n.\\.sonar\\scanner\\dotnet-sonarscanner end /d:sonar.token=\"${{ secrets.SONARCLOUD_TOKEN }}\"\n"
            }
        ],
        "apache/spamassassin": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install requirements for Ubuntu",
                "run": "./.github/actions/setup_ubuntu_for_sa_test"
            },
            {
                "id": 3,
                "name": "Install requirements for macOS",
                "run": "./.github/actions/setup_macos_for_sa_test"
            },
            {
                "id": 4,
                "name": "Install requirements for Windows",
                "run": "./.github/actions/setup_windows_for_sa_test"
            },
            {
                "id": 5,
                "name": "Set up perl",
                "run": "shogo82148/actions-setup-perl@v1"
            },
            {
                "id": 6,
                "name": "Set up postgres",
                "run": "./.github/actions/postgres"
            },
            {
                "id": 7,
                "name": "Set up mysql",
                "run": "./.github/actions/mysql"
            },
            {
                "id": 8,
                "name": "prepare test config",
                "run": "perl -i.bak -pe 's/^run_(long_tests|net_tests|dcc_tests|sql_pref_tests)=n/run_$1=y/' t/config.dist\n"
            },
            {
                "id": 9,
                "name": "Cache CPAN Modules",
                "run": "actions/cache@v3"
            },
            {
                "id": 10,
                "name": "Install dependencies and optional modules for full testing",
                "run": "./.github/actions/install_cpan_dependencies_for_sa"
            },
            {
                "id": 11,
                "name": "Run Tests",
                "run": "perl Makefile.PL\n${{ env.MAKECMD }} ENABLE_SSL=yes\n${{ ( startsWith( matrix.runner, 'macos-' ) && 'sudo -u $USER' ) || '' }} ${{ env.MAKECMD }} test ${{ ((matrix.database != 'none') && 'TEST_FILES=\"t/*sql*.t\"') || (github.event.inputs.tests && format('TEST_FILES=\"{0}\"', github.event.inputs.tests)) }}\n"
            },
            {
                "id": 12,
                "name": "Publish logs as artifacts",
                "run": "actions/upload-artifact@v3"
            }
        ],
        "apache/directory-studio": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4.1.1"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "mvn -f pom-first.xml clean install\nmvn clean install\n"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up JDK 11",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Build with Apache Maven",
                "run": "mvn -f pom-first.xml -U clean install  && mvn clean install"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up the JDK",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Build with Apache Maven",
                "run": "mvn -f pom-first.xml -U clean install  && mvn clean install"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up the JDK",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Build with Apache Maven",
                "run": "mvn -f pom-first.xml -U clean install  && mvn clean install"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up JDK 11",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Build with Apache Maven",
                "run": "mvn -f pom-first.xml -U clean install  && mvn clean install"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@cdcdbb579706841c47f7063dda365e292e5cad7a"
            }
        ],
        "apache/httpd": [
            {
                "id": 1,
                "name": "Set environment variables",
                "run": "echo \"${{ matrix.env }}\" >> $GITHUB_ENV\necho JOBID=`echo \"${{ matrix.notest-cflags }} ${{ matrix.env }} ${{ matrix.config }}'\"| md5sum - | sed 's/ .*//'` >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Workaround ASAN issue in Ubuntu 22.04",
                "run": "sudo sysctl vm.mmap_rnd_bits=28"
            },
            {
                "id": 3,
                "name": "apt refresh",
                "run": "sudo apt-get -o Acquire::Retries=5 update"
            },
            {
                "id": 4,
                "name": "Install prerequisites",
                "run": "sudo apt-get install -o Acquire::Retries=5 cpanminus libtool-bin libapr1-dev libaprutil1-dev liblua5.3-dev libbrotli-dev libcurl4-openssl-dev libnghttp2-dev libjansson-dev libpcre2-dev gdb perl-doc ${{ matrix.pkgs }}"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/checkout@v4"
            },
            {
                "id": 6,
                "name": "Cache installed libraries",
                "run": "actions/cache@v4"
            },
            {
                "id": 7,
                "name": "Cache CPAN modules",
                "run": "actions/cache@v4"
            },
            {
                "id": 8,
                "name": "Configure environment",
                "run": "./test/travis_before_linux.sh"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 10,
                "name": "Build and test",
                "run": "./test/travis_run_linux.sh"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "apache/camel": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.os }}",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "mvn build ${{ matrix.os }}",
                "run": "./mvnw -B -V -D'http.keepAlive=false' -l build.log -D'maven.wagon.http.pool=false' -D'maven.wagon.httpconnectionManager.ttlSeconds=120' --no-transfer-progress -Dquickly install"
            },
            {
                "id": 4,
                "name": "Archive logs ${{ matrix.os }}",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/install-mvnd"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "mvn build and sbom generation",
                "run": "./mvnw -B -l build.log -Psbom -Dquickly verify"
            },
            {
                "id": 5,
                "name": "archive logs",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 6,
                "name": "Create Pull Request",
                "run": "peter-evans/create-pull-request@v6"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/install-mvnd"
            },
            {
                "id": 3,
                "name": "Set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "mvn checkstyle",
                "run": "${{ steps.install-mvnd.outputs.mvnd-dir }}/mvnd -l checkstyle.log $MVND_OPTS -e checkstyle:checkstyle"
            },
            {
                "id": 5,
                "name": "archive logs",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 6,
                "name": "Generate failure checkstyle summary",
                "run": "echo \":x: Checkstyle failed\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 7,
                "name": "Generate successful checkstyle summary",
                "run": "echo \":white_check_mark: Checkstyle passed\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/install-packages"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/install-mvnd"
            },
            {
                "id": 4,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 5,
                "name": "maven build",
                "run": "${{ steps.install-mvnd.outputs.mvnd-dir }}/mvnd -l build.log $MVND_OPTS -Pfastinstall -DskipTests install"
            },
            {
                "id": 6,
                "name": "archive logs",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Quick test execution for affected components",
                "run": "./.github/actions/quick-test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/install-packages"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/install-mvnd"
            },
            {
                "id": 4,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 5,
                "name": "maven build",
                "run": "./mvnw -l build.log -Dquickly install"
            },
            {
                "id": 6,
                "name": "archive logs",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Fail if there are uncommitted changes",
                "run": "[[ -z $(git status --porcelain) ]] || { echo 'There are uncommitted changes'; git status; echo; echo; git diff; exit 1; }\n"
            },
            {
                "id": 8,
                "name": "mvn test",
                "run": "./.github/actions/incremental-build"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/install-packages"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/install-mvnd"
            },
            {
                "id": 4,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 5,
                "name": "maven build",
                "run": "./etc/scripts/regen.sh"
            },
            {
                "id": 6,
                "name": "archive logs",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Fail if there are uncommitted changes",
                "run": "[[ -z $(git status --porcelain) ]] || { echo 'There are uncommitted changes'; git status; echo; echo; git diff; exit 1; }\n"
            },
            {
                "id": 8,
                "name": "mvn test",
                "run": "./.github/actions/incremental-build"
            },
            {
                "id": 1,
                "name": "Retrieve sha",
                "run": "actions/github-script@v7"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/create-or-update-comment"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/install-packages"
            },
            {
                "id": 5,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 6,
                "name": "Component test execution",
                "run": "./.github/actions/component-test"
            }
        ],
        "apache/xmlgraphics-fop": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.jdk }}",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn -B package checkstyle:check spotbugs:check --file pom.xml"
            }
        ],
        "apache/maven-release": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "release-drafter/release-drafter@v6"
            }
        ],
        "apache/synapse": [
            {
                "id": 1,
                "name": "Checkout the latest code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup java 8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Cache maven artifacts",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Build Synapse",
                "run": "mvn clean install"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup java",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Caches maven artifacts",
                "run": "actions/cache@v1"
            },
            {
                "id": 4,
                "name": "Maven Package",
                "run": "mvn clean package"
            }
        ],
        "apache/cayenne": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup java",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "mvn verify ${{ matrix.db-profile }}",
                "run": "mvn verify -q -DcayenneTestConnection=${{ matrix.db-profile }} -DcayenneLogLevel=ERROR"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Export version",
                "run": "./.github/actions/export-pom-version"
            },
            {
                "id": 3,
                "name": "Setup java",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Deploy snapshot",
                "run": "mvn deploy -DskipTests --settings .github/maven-settings.xml"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup java",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "mvn verify ${{ matrix.db-profile }}",
                "run": "mvn verify -q -DcayenneTestConnection=${{ matrix.db-profile }} -DcayenneLogLevel=ERROR"
            }
        ],
        "apache/commons-collections": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 4,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn --show-version --batch-mode --no-transfer-progress test jacoco:report"
            },
            {
                "id": 5,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn --errors --show-version --batch-mode --no-transfer-progress"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            }
        ],
        "apache/openjpa": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Java JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Cache Maven packages",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn -B install --file pom.xml"
            },
            {
                "id": 5,
                "name": "Remove Snapshots Before Caching",
                "run": "find ~/.m2 -name '*SNAPSHOT' | xargs rm -Rf"
            }
        ],
        "apache/poi": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Grant execute permission for gradlew",
                "run": "chmod +x gradlew"
            },
            {
                "id": 4,
                "name": "Build with Gradle",
                "run": "./gradlew check -PjdkVersion=11 --no-daemon --refresh-dependencies"
            }
        ],
        "apache/nutch": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.4"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@v4.2.1"
            },
            {
                "id": 3,
                "name": "Javadoc",
                "run": "ant clean javadoc -buildfile build.xml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.4"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@v4.2.1"
            },
            {
                "id": 3,
                "name": "Run Apache Rat",
                "run": "ant clean run-rat -buildfile build.xml"
            },
            {
                "id": 4,
                "name": "Cache unknown licenses",
                "run": "echo \"UNKNOWN_LICENSES=$(sed -n 18p /home/runner/work/nutch/nutch/build/apache-rat-report.txt)\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Versions",
                "run": "echo $UNKNOWN_LICENSES\n"
            },
            {
                "id": 6,
                "name": "Fail if any unknown licenses",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4.1.4"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@v4.2.1"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "ant clean test -buildfile build.xml"
            }
        ],
        "apache/commons-codec": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 4,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn --show-version --batch-mode --no-transfer-progress test jacoco:report"
            },
            {
                "id": 5,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn --errors --show-version --batch-mode --no-transfer-progress"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            }
        ],
        "apache/commons-lang": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 4,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn --show-version --batch-mode --no-transfer-progress test jacoco:report"
            },
            {
                "id": 5,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn --errors --show-version --batch-mode --no-transfer-progress -Ddoclint=all"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            }
        ],
        "apache/xmlgraphics-commons": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.jdk }}",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn -B package checkstyle:check spotbugs:check --file pom.xml"
            },
            {
                "id": 4,
                "name": "Update dependency graph",
                "run": "advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Cache SonarCloud packages",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Cache Maven packages",
                "run": "actions/cache@v3"
            },
            {
                "id": 5,
                "name": "Build and test, with coverage",
                "run": "mvn -B verify -Pcoverage"
            },
            {
                "id": 6,
                "name": "Perform Sonar analysis",
                "run": "mvn -B verify -DskipTests org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=xmlgraphics-commons"
            }
        ],
        "apache/commons-io": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 4,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn --show-version --batch-mode --no-transfer-progress test jacoco:report"
            },
            {
                "id": 5,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn --errors --show-version --batch-mode --no-transfer-progress -DtrimStackTrace=false"
            },
            {
                "id": 5,
                "name": "Deploy SNAPSHOT using minimal build",
                "run": "echo \"Deploy SNAPSHOT\" >> $GITHUB_STEP_SUMMARY; mvn --show-version --batch-mode --no-transfer-progress deploy -Dgpg.skip  -DskipTests -Drat.skip -Djacoco.skip -Dcyclonedx.skip -Dspotbugs.skip -Dspdx.skip -Dpmd.skip\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            }
        ],
        "apache/httpcomponents-core": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "mvn clean package -DskipTests -Drat.skip=true -Dcheckstyle.skip"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn -V --file pom.xml --no-transfer-progress -DtrimStackTrace=false -P-use-toolchains"
            }
        ],
        "apache/maven-doxia-sitetools": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "release-drafter/release-drafter@v6"
            }
        ],
        "apache/httpcomponents-client": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "mvn clean package -DskipTests -Drat.skip=true -Dcheckstyle.skip"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn -V --file pom.xml --no-transfer-progress -DtrimStackTrace=false -P-use-toolchains"
            }
        ],
        "apache/wicket": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Temurin JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Apt update",
                "run": "sudo apt update"
            },
            {
                "id": 4,
                "name": "Install Puppeteer's dependencies",
                "run": "sudo apt-get install -y chromium-browser fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget libappindicator3-1 libgbm1"
            },
            {
                "id": 5,
                "name": "Install Maven",
                "run": "wget https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz\ntar -xzf apache-maven-${MAVEN_VERSION}-bin.tar.gz\n"
            },
            {
                "id": 6,
                "name": "Cache Maven packages",
                "run": "actions/cache@v4"
            },
            {
                "id": 7,
                "name": "Build with Maven",
                "run": "java -version \n./apache-maven-${MAVEN_VERSION}/bin/mvn --show-version clean verify -Pjs-test\n"
            }
        ],
        "apache/directory-server": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            }
        ],
        "apache/hive": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "shufo/auto-assign-reviewer-by-files@v1.1.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up JDK 8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": "mvn clean install -DskipTests -Pitests\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Hive version",
                "run": "echo \"HIVE_VERSION=${{ github.event.inputs.hiveVersion }}\"  >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Tag",
                "run": "echo \"tag=${{ env.HIVE_VERSION }}\" | awk '{print tolower($0)}' >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Hadoop version",
                "run": "echo \"HADOOP_VERSION=${{ github.event.inputs.hadoopVersion }}\" >> $GITHUB_ENV"
            },
            {
                "id": 6,
                "name": "Tez version",
                "run": "echo \"TEZ_VERSION=${{ github.event.inputs.tezVersion }}\" >> $GITHUB_ENV"
            },
            {
                "id": 7,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 8,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 9,
                "name": "Build and push Hive Image to docker hub",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Hive version",
                "run": "echo \"HIVE_VERSION=$(mvn -f \"pom.xml\" -q help:evaluate -Dexpression=project.version -DforceStdout)\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Tag",
                "run": "echo \"tag=${{ env.HIVE_VERSION }}\" | awk '{print tolower($0)}' >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Hadoop version",
                "run": "echo \"HADOOP_VERSION=$(mvn -f \"pom.xml\" -q help:evaluate -Dexpression=hadoop.version -DforceStdout)\" >> $GITHUB_ENV"
            },
            {
                "id": 6,
                "name": "Tez version",
                "run": "echo \"TEZ_VERSION=$(mvn -f \"pom.xml\" -q help:evaluate -Dexpression=tez.version -DforceStdout)\" >> $GITHUB_ENV"
            },
            {
                "id": 7,
                "name": "Build project",
                "run": "mvn clean package -DskipTests -Pitests,iceberg -Pdist"
            },
            {
                "id": 8,
                "name": "Check for hive tar.gz",
                "run": "ls ./packaging/target/"
            },
            {
                "id": 9,
                "name": "Copy to docker directory",
                "run": "cp ./packaging/target/apache-hive-*-bin.tar.gz ./packaging/src/docker/"
            },
            {
                "id": 10,
                "name": "Confirm the copy of hive tar.gz",
                "run": "ls ./packaging/src/docker/"
            },
            {
                "id": 11,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 12,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 13,
                "name": "Build and push Hive Image to docker hub",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 1,
                "name": "checkout-merge",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "check-spelling",
                "run": "check-spelling/check-spelling@v0.0.20-alpha3"
            },
            {
                "id": 4,
                "name": "store-comment",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "set up",
                "run": "mkdir /tmp/data\n"
            },
            {
                "id": 3,
                "name": "retrieve-comment",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 4,
                "name": "comment",
                "run": "check-spelling/check-spelling@v0.0.20-alpha3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v3"
            }
        ],
        "apache/xmlgraphics-batik": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.jdk }}",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn -B package checkstyle:check --file pom.xml"
            }
        ],
        "apache/roller": [
            {
                "id": 1,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 2,
                "name": "Checkout Project",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn -DskipTests=true -V -ntp install"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 2,
                "name": "Setup Xvfb",
                "run": "echo \"DISPLAY=:99.0\" >> $GITHUB_ENV\nXvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\n"
            },
            {
                "id": 3,
                "name": "Checkout Project",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Build Roller and run JUnit Tests",
                "run": "mvn -V -ntp install"
            },
            {
                "id": 5,
                "name": "Run Integration Tests",
                "run": "cd it-selenium\nmvn -V -ntp install\n"
            },
            {
                "id": 6,
                "name": "Publish JUnit Report",
                "run": "test-summary/action@v2"
            },
            {
                "id": 7,
                "name": "Publish IT Report",
                "run": "test-summary/action@v2"
            },
            {
                "id": 8,
                "name": "Upload Dev Build on Integration",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "apache/avro": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install .NET SDKs",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 4,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v3"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 5,
                "name": "Java Test",
                "run": "mvn clean test"
            },
            {
                "id": 6,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v3"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v3"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 5,
                "name": "Deploy Maven snapshots",
                "run": "echo \"<settings><servers><server><id>apache.snapshots.https</id><username>$ASF_USERNAME</username><password>$ASF_PASSWORD</password></server></servers></settings>\" > settings.xml\nmvn --settings settings.xml -U -B -e -fae -ntp -PskipQuality deploy\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/labeler@v5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Cache Maven 4 Build Cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 5,
                "name": "Setup Maven 4",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "mvn clean verify"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 5,
                "name": "Run Rat",
                "run": "mvn test -Dmaven.main.skip=true -Dmaven.test.skip=true -DskipTests=true -Dinvoker.skip=true -P rat -pl :avro-toplevel"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 5,
                "name": "Run Spotless Check",
                "run": "mvn spotless:check"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "sudo apt-get update -q\nsudo apt-get install -q -y gcc g++ libboost-all-dev libfmt-dev cmake\n"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "set -x\n./build.sh clean test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Dependencies",
                "run": "sudo apt update && sudo apt-get install -qqy cppcheck libboost-all-dev libsnappy-dev libfmt-dev cmake"
            },
            {
                "id": 3,
                "name": "Clean",
                "run": "./build.sh clean"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "./build.sh lint"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "./build.sh test"
            },
            {
                "id": 6,
                "name": "Release build",
                "run": "mkdir -p build\ncd build\ncmake -G \"Unix Makefiles\" -D CMAKE_BUILD_TYPE=Release ..\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "sudo apt-get update -q\nsudo apt-get install -q -y cmake liblzma-dev libsnappy-dev libjansson-dev zlib1g-dev pkg-config\n"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "set -x\n./build.sh clean test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Dependencies",
                "run": "sudo apt-get install -qqy libjansson-dev libsnappy-dev"
            },
            {
                "id": 3,
                "name": "Lint",
                "run": "./build.sh lint"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "./build.sh test"
            },
            {
                "id": 5,
                "name": "Check pkg-config",
                "run": "mkdir -p build\ncd build\ncmake ..\nexport PKG_CONFIG_PATH=./src\npkg-config --libs avro-c\n"
            },
            {
                "id": 6,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 7,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 8,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 9,
                "name": "Install Java Avro for Interop Test",
                "run": "mvn -B install -PskipQuality"
            },
            {
                "id": 10,
                "name": "Create Interop Data Directory",
                "run": "mkdir -p build/interop/data"
            },
            {
                "id": 11,
                "name": "Generate Interop Resources",
                "run": "mvn -B -P interop-data-generate generate-resources"
            },
            {
                "id": 12,
                "name": "Generate Interop Data",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 13,
                "name": "Run Interop Tests",
                "run": "./build.sh interop-data-test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Dependencies",
                "run": "sudo apt-get install -qqy --no-install-recommends libbz2-dev \\\n                                                  libjansson-dev \\\n                                                  liblzma-dev \\\n                                                  libsnappy-dev \\\n                                                  libzstd-dev\n"
            },
            {
                "id": 3,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 5,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 6,
                "name": "Install Java Avro for Interop Test",
                "run": "mvn -B install -PskipQuality"
            },
            {
                "id": 7,
                "name": "Create Interop Data Directory",
                "run": "mkdir -p build/interop/data"
            },
            {
                "id": 8,
                "name": "Generate Interop Resources",
                "run": "mvn -B -P interop-data-generate generate-resources"
            },
            {
                "id": 9,
                "name": "Generate Interop Data",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 10,
                "name": "Run Interop Tests",
                "run": "./build.sh interop-data-test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Add libzstd",
                "run": "sudo apt-get install -y libzstd-dev"
            },
            {
                "id": 3,
                "name": "Install .NET SDKs",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "./build.sh lint"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "./build.sh test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Add libzstd",
                "run": "sudo apt-get install -y libzstd-dev"
            },
            {
                "id": 3,
                "name": "Install .NET SDKs",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 4,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 6,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 7,
                "name": "Install Java Avro for Interop Test",
                "run": "mvn -B install -PskipQuality"
            },
            {
                "id": 8,
                "name": "Create Interop Data Directory",
                "run": "mkdir -p build/interop/data"
            },
            {
                "id": 9,
                "name": "Generate Interop Resources",
                "run": "mvn -B -P interop-data-generate generate-resources"
            },
            {
                "id": 10,
                "name": "Generate Interop Data",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 11,
                "name": "Run Interop Tests",
                "run": "./build.sh interop-data-test"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Nuget",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "sudo apt-get update -q\nsudo apt-get install -q -y wget libzstd-dev libicu-dev\nwget https://dot.net/v1/dotnet-install.sh\nbash ./dotnet-install.sh --channel \"3.1\" --install-dir \"$HOME/.dotnet\" # 3.1\nbash ./dotnet-install.sh --channel \"5.0\" --install-dir \"$HOME/.dotnet\" # 5.0\nbash ./dotnet-install.sh --channel \"6.0\" --install-dir \"$HOME/.dotnet\" # 6.0\nbash ./dotnet-install.sh --channel \"7.0\" --install-dir \"$HOME/.dotnet\" # 7.0\nbash ./dotnet-install.sh --channel \"8.0\" --install-dir \"$HOME/.dotnet\" # 8.0\n"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "set -x\nexport PATH=$HOME/.dotnet:$PATH\ndotnet --list-sdks\n./build.sh clean test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Add libzstd",
                "run": "sudo apt-get install -y libzstd-dev"
            },
            {
                "id": 3,
                "name": "Install .NET SDKs",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "./build.sh lint"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "./build.sh test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Add libzstd",
                "run": "sudo apt-get install -y libzstd-dev"
            },
            {
                "id": 3,
                "name": "Install .NET SDKs",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 4,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 6,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 7,
                "name": "Install Java Avro for Interop Test",
                "run": "mvn -B install -PskipQuality"
            },
            {
                "id": 8,
                "name": "Create Interop Data Directory",
                "run": "mkdir -p build/interop/data"
            },
            {
                "id": 9,
                "name": "Generate Interop Resources",
                "run": "mvn -B -P interop-data-generate generate-resources"
            },
            {
                "id": 10,
                "name": "Generate Interop Data",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 11,
                "name": "Run Interop Tests",
                "run": "./build.sh interop-data-test"
            },
            {
                "id": 1,
                "name": "Checkout sourcecode",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2"
            },
            {
                "id": 4,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "./build.sh clean test"
            },
            {
                "id": 1,
                "name": "Checkout sourcecode",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2"
            },
            {
                "id": 3,
                "name": "Setup Temurin JDK 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 5,
                "name": "Java Lint",
                "run": "./build.sh lint"
            },
            {
                "id": 6,
                "name": "Java Test",
                "run": "./build.sh test"
            },
            {
                "id": 7,
                "name": "Install Java Avro for reproducibility test",
                "run": "mvn -B clean install -PskipQuality"
            },
            {
                "id": 8,
                "name": "Test Reproducible Build",
                "run": "mvn clean verify -PskipQuality artifact:compare"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Setup Temurin JDK 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 5,
                "name": "Setup Python for Generating Input Data",
                "run": "actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c"
            },
            {
                "id": 6,
                "name": "Apt Install Compression Libs Required by Python",
                "run": "sudo apt-get install -qqy --no-install-recommends libbz2-dev \\\n                                                  liblzma-dev \\\n                                                  libsnappy-dev \\\n                                                  libzstd-dev\n"
            },
            {
                "id": 7,
                "name": "Install Python Dependencies",
                "run": "python3 -m pip install --upgrade pip setuptools tox\npython3 -m pip install python-snappy zstandard\n"
            },
            {
                "id": 8,
                "name": "Setup C# for Generating Interop Data",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 9,
                "name": "Create Interop Data Directory",
                "run": "mkdir -p build/interop/data"
            },
            {
                "id": 10,
                "name": "Generate Interop Data using Python",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 11,
                "name": "Generate Interop Data using C#",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 12,
                "name": "Install Java Avro for other tests",
                "run": "mvn -B install -PskipQuality"
            },
            {
                "id": 13,
                "name": "Generate Interop Data using Java 11, 17 & 21",
                "run": "mvn -B verify -Pgenerate-test-data"
            },
            {
                "id": 14,
                "name": "Run Interop Tests using Java 11, 17 & 21",
                "run": "mvn -B verify -Pcheck-test-data"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Npm",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Setup Node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "sudo apt-get update -q\nsudo apt-get install -q -y wget tar xz-utils\n"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "set -x\n./build.sh clean test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "./build.sh lint"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "./build.sh test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Setup Python for Generating Input Data",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 5,
                "name": "Apt Install Compression Libs Required by Python",
                "run": "sudo apt-get install -qqy --no-install-recommends libbz2-dev \\\n                                                  liblzma-dev \\\n                                                  libsnappy-dev \\\n                                                  libzstd-dev\n"
            },
            {
                "id": 6,
                "name": "Install Python Dependencies",
                "run": "python3 -m pip install --upgrade pip setuptools tox\npython3 -m pip install python-snappy zstandard\n"
            },
            {
                "id": 7,
                "name": "Create Interop Data Directory",
                "run": "mkdir -p build/interop/data"
            },
            {
                "id": 8,
                "name": "Generate Interop Data using Python",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 9,
                "name": "Generate Interop Data",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 10,
                "name": "Run Interop Tests",
                "run": "npm install && ./build.sh interop-data-test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "shogo82148/actions-setup-perl@v1"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "sudo apt-get -qqy install --no-install-recommends libjansson-dev \\\n                                                  libcompress-raw-zlib-perl \\\n                                                  libcpan-uploader-perl \\\n                                                  libencode-perl \\\n                                                  libio-string-perl \\\n                                                  libjson-xs-perl \\\n                                                  libmodule-install-perl \\\n                                                  libmodule-install-readmefrompod-perl \\\n                                                  libobject-tiny-perl \\\n                                                  libperl-critic-perl \\\n                                                  libsnappy-dev \\\n                                                  libtest-exception-perl \\\n                                                  libtest-pod-perl\ncpanm --mirror https://www.cpan.org/ install Compress::Zstd \\\n                                             Error::Simple \\\n                                             Module::Install::Repository \\\n                                             Regexp::Common \\\n                                             Try::Tiny \\\n                                             inc::Module::Install \\\n                                             Module::Install::ReadmeFromPod \\\n                                             Test::Exception \\\n                                             IO::String \\\n                                             Object::Tiny\n"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "./build.sh lint"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "./build.sh test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "shogo82148/actions-setup-perl@v1"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "sudo apt-get -qqy install --no-install-recommends libcompress-raw-zlib-perl \\\n                                                  libcpan-uploader-perl \\\n                                                  libencode-perl \\\n                                                  libio-string-perl \\\n                                                  libjansson-dev \\\n                                                  libjson-xs-perl \\\n                                                  libmodule-install-perl \\\n                                                  libmodule-install-readmefrompod-perl \\\n                                                  libobject-tiny-perl \\\n                                                  libsnappy-dev \\\n                                                  libtest-exception-perl \\\n                                                  libtest-pod-perl\ncpanm --mirror https://www.cpan.org/ install Compress::Zstd \\\n                                             Error::Simple \\\n                                             Module::Install::Repository \\\n                                             Object::Tiny \\\n                                             Regexp::Common \\\n                                             Try::Tiny \\\n                                             inc::Module::Install\n"
            },
            {
                "id": 4,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 6,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 7,
                "name": "Install Java Avro for Interop Test",
                "run": "mvn -B install -PskipQuality"
            },
            {
                "id": 8,
                "name": "Create Interop Data Directory",
                "run": "mkdir -p build/interop/data"
            },
            {
                "id": 9,
                "name": "Generate Interop Resources",
                "run": "mvn -B -P interop-data-generate generate-resources"
            },
            {
                "id": 10,
                "name": "Generate Interop Data",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 11,
                "name": "Run Interop Tests",
                "run": "./build.sh interop-data-test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "shogo82148/actions-setup-perl@v1"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "sudo apt-get -qqy install --no-install-recommends libjansson-dev \\\n                                                  libcompress-raw-zlib-perl \\\n                                                  libcpan-uploader-perl \\\n                                                  libencode-perl \\\n                                                  libio-string-perl \\\n                                                  libjson-xs-perl \\\n                                                  libmodule-install-perl \\\n                                                  libmodule-install-readmefrompod-perl \\\n                                                  libobject-tiny-perl \\\n                                                  libperl-critic-perl \\\n                                                  libsnappy-dev \\\n                                                  libtest-exception-perl \\\n                                                  libtest-pod-perl\ncpanm --mirror https://www.cpan.org/ install Compress::Zstd \\\n                                             Error::Simple \\\n                                             Module::Install::Repository \\\n                                             Regexp::Common \\\n                                             Try::Tiny \\\n                                             inc::Module::Install \\\n                                             Module::Install::ReadmeFromPod \\\n                                             Test::Exception \\\n                                             IO::String \\\n                                             Object::Tiny\n"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "./build.sh lint"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "./build.sh test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "shogo82148/actions-setup-perl@v1"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "sudo apt-get -qqy install --no-install-recommends libcompress-raw-zlib-perl \\\n                                                  libcpan-uploader-perl \\\n                                                  libencode-perl \\\n                                                  libio-string-perl \\\n                                                  libjansson-dev \\\n                                                  libjson-xs-perl \\\n                                                  libmodule-install-perl \\\n                                                  libmodule-install-readmefrompod-perl \\\n                                                  libobject-tiny-perl \\\n                                                  libsnappy-dev \\\n                                                  libtest-exception-perl \\\n                                                  libtest-pod-perl\ncpanm --mirror https://www.cpan.org/ install Compress::Zstd \\\n                                             Error::Simple \\\n                                             Module::Install::Repository \\\n                                             Object::Tiny \\\n                                             Regexp::Common \\\n                                             Try::Tiny \\\n                                             inc::Module::Install\n"
            },
            {
                "id": 4,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 6,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 7,
                "name": "Install Java Avro for Interop Test",
                "run": "mvn -B install -PskipQuality"
            },
            {
                "id": 8,
                "name": "Create Interop Data Directory",
                "run": "mkdir -p build/interop/data"
            },
            {
                "id": 9,
                "name": "Generate Interop Resources",
                "run": "mvn -B -P interop-data-generate generate-resources"
            },
            {
                "id": 10,
                "name": "Generate Interop Data",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 11,
                "name": "Run Interop Tests",
                "run": "./build.sh interop-data-test"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "sudo apt-get update -q\nsudo apt-get install -q -y wget php php-xml php-mbstring php-curl php-gmp php-bz2 unzip libtidy-dev libpq5\nphp -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nphp -r \"if (hash_file('sha384', 'composer-setup.php') === file_get_contents('https://composer.github.io/installer.sig')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"\nphp composer-setup.php --version=2.2.5\nphp -r \"unlink('composer-setup.php');\"\nsudo mv composer.phar /usr/local/bin/composer\n"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "set -x\ncomposer --version\n./build.sh clean test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup PHP",
                "run": "shivammathur/setup-php@v2"
            },
            {
                "id": 3,
                "name": "Get Composer Cache Directory",
                "run": "echo \"dir=$(composer config cache-files-dir)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "./build.sh lint"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "./build.sh test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup PHP",
                "run": "shivammathur/setup-php@v2"
            },
            {
                "id": 3,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 5,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 6,
                "name": "Install Java Avro for Interop Test",
                "run": "mvn -B install -PskipQuality"
            },
            {
                "id": 7,
                "name": "Create Interop Data Directory",
                "run": "mkdir -p build/interop/data"
            },
            {
                "id": 8,
                "name": "Generate Interop Resources",
                "run": "mvn -B -P interop-data-generate generate-resources"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "actions/checkout@v4"
            },
            {
                "id": 10,
                "name": "Install php-ext-zstd",
                "run": "sudo apt-get install -qqy --no-install-recommends libzstd-dev libbz2-dev\nphpize\n./configure --with-libzstd\nmake\nsudo make install\necho \"extension=zstd.so\" | sudo tee -a /etc/php/${{ matrix.php }}/cli/conf.d/10-zstd.ini\nphp -m\n"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "actions/checkout@v4"
            },
            {
                "id": 12,
                "name": "Install php-ext-snappy",
                "run": "sudo apt-get install -qqy --no-install-recommends libsnappy-dev\nphpize\n./configure --with-libsnappy\nmake\nsudo make install\necho \"extension=snappy.so\" | sudo tee -a /etc/php/${{ matrix.php }}/cli/conf.d/10-snappy.ini\nphp -m\n"
            },
            {
                "id": 13,
                "name": "Generate Interop Data",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 14,
                "name": "Run Interop Tests",
                "run": "./build.sh test-interop"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "sudo apt-get update -q\nsudo apt-get install -q -y python3 python3-dev python3-pip git libbz2-dev libjansson-dev liblzma-dev libsnappy-dev libzstd-dev\npython3 -m pip install --upgrade pip setuptools tox\n"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "set -x\n./build.sh clean test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Apt Install Compression Libs",
                "run": "sudo apt-get install -qqy --no-install-recommends libbz2-dev \\\n                                                  libjansson-dev \\\n                                                  liblzma-dev \\\n                                                  libsnappy-dev \\\n                                                  libzstd-dev\n"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "python3 -m pip install --upgrade pip setuptools tox\n"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "python3 -m tox -e lint"
            },
            {
                "id": 6,
                "name": "Typechecks",
                "run": "python3 -m tox -e typechecks"
            },
            {
                "id": 7,
                "name": "Test",
                "run": "python3 -m tox -e py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Apt Install Compression Libs",
                "run": "sudo apt-get install -qqy --no-install-recommends libbz2-dev \\\n                                                  libjansson-dev \\\n                                                  liblzma-dev \\\n                                                  libsnappy-dev \\\n                                                  libzstd-dev\n"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "python3 -m pip install --upgrade pip setuptools tox\npython3 -m pip install python-snappy zstandard\n"
            },
            {
                "id": 5,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 6,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 7,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 8,
                "name": "Install Java Avro for Interop Test",
                "run": "mvn -B install -PskipQuality"
            },
            {
                "id": 9,
                "name": "Create Interop Data Directory",
                "run": "mkdir -p build/interop/data"
            },
            {
                "id": 10,
                "name": "Generate Interop Resources",
                "run": "mvn -B -P interop-data-generate generate-resources"
            },
            {
                "id": 11,
                "name": "Generate Interop Data",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 12,
                "name": "Run Interop Tests",
                "run": "./build.sh interop-data-test"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache gems",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "sudo apt-get update -q\nsudo apt-get install -q -y ruby-dev bundler libsnappy-dev libyaml-dev\n"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "set -x\n./build.sh clean test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "sudo apt-get install -qqy libsnappy-dev"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Configure Bundler to Use Cache",
                "run": "bundle config path .gem"
            },
            {
                "id": 6,
                "name": "Lint",
                "run": "PATH=$PWD/.gem/bin:$PATH\n./build.sh lint\n"
            },
            {
                "id": 7,
                "name": "Test",
                "run": "PATH=$PWD/.gem/bin:$PATH\n./build.sh test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "sudo apt-get install -qqy libsnappy-dev"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Configure Bundler to Use Cache",
                "run": "bundle config path .gem"
            },
            {
                "id": 6,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 7,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 8,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 9,
                "name": "Install Java Avro for Interop Test",
                "run": "mvn -B install -PskipQuality"
            },
            {
                "id": 10,
                "name": "Create Interop Data Directory",
                "run": "mkdir -p build/interop/data"
            },
            {
                "id": 11,
                "name": "Generate Interop Resources",
                "run": "mvn -B -P interop-data-generate generate-resources"
            },
            {
                "id": 12,
                "name": "Bundle Install",
                "run": "export GEM_HOME=\"$PWD/.gem/\"\nexport PATH=\"$GEM_HOME/bin:$PATH\"\nbundle install\n"
            },
            {
                "id": 13,
                "name": "Generate Interop Data",
                "run": "export GEM_HOME=\"$PWD/.gem/\"\nexport PATH=\"$GEM_HOME/bin:$PATH\"\nbundle exec rake --trace generate_interop\n"
            },
            {
                "id": 14,
                "name": "Run Interop Tests",
                "run": "export GEM_HOME=\"$PWD/.gem/\"\nexport PATH=\"$GEM_HOME/bin:$PATH\"\nbundle exec rake --trace interop\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dependency Review",
                "run": "actions/dependency-review-action@v4"
            },
            {
                "id": 3,
                "name": "Install Cargo Audit",
                "run": "cargo install cargo-audit"
            },
            {
                "id": 4,
                "name": "Audit",
                "run": "cargo audit"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Cargo Deny",
                "run": "cargo install cargo-deny"
            },
            {
                "id": 3,
                "name": "Check",
                "run": "cargo deny check"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Cargo",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Cache Rust dependencies",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Rust Toolchain",
                "run": "dtolnay/rust-toolchain@nightly"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "set -x\n./build.sh test\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache Cargo",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Cache Rust dependencies",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Rust Toolchain",
                "run": "dtolnay/rust-toolchain@nightly"
            },
            {
                "id": 5,
                "name": "Cache cargo-rdme",
                "run": "actions/cache@v4"
            },
            {
                "id": 6,
                "name": "Run cargo-rdme",
                "run": "cargo install --root ~/.cargo-${{ matrix.rust }}/cargo-rdme --locked cargo-rdme\nexport PATH=$PATH:~/.cargo-${{ matrix.rust }}/cargo-rdme/bin\ncargo rdme --check\n"
            },
            {
                "id": 7,
                "name": "Rust Format",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 8,
                "name": "Rust Build",
                "run": "cargo build --all-features --all-targets"
            },
            {
                "id": 9,
                "name": "Rust Test",
                "run": "cargo test --all-features --target ${{ matrix.target }}"
            },
            {
                "id": 10,
                "name": "Rust Test AVRO-3549",
                "run": "cargo test --target ${{ matrix.target }} test_avro_3549_read_not_enabled_codec"
            },
            {
                "id": 11,
                "name": "Rust Test docs",
                "run": "cargo test --doc"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Rust Toolchain",
                "run": "dtolnay/rust-toolchain@nightly"
            },
            {
                "id": 3,
                "name": "Cache Cargo",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Cache Rust dependencies",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Cache Local Maven Repository",
                "run": "actions/cache@v4"
            },
            {
                "id": 6,
                "name": "Setup Temurin JDK 8, 11, 17 & 21",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 7,
                "name": "Setup Maven 3.9.6",
                "run": "stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1"
            },
            {
                "id": 8,
                "name": "Install Java Avro for Interop Test",
                "run": "mvn -B install -PskipQuality"
            },
            {
                "id": 9,
                "name": "Create Interop Data Directory",
                "run": "mkdir -p build/interop/data"
            },
            {
                "id": 10,
                "name": "Generate Interop Resources",
                "run": "mvn -B -P interop-data-generate generate-resources"
            },
            {
                "id": 11,
                "name": "Generate interop data",
                "run": "./build.sh interop-data-generate"
            },
            {
                "id": 12,
                "name": "Rust reads interop files created by Java and Rust",
                "run": "./build.sh interop-data-test"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "shogo82148/actions-setup-perl@v1"
            },
            {
                "id": 14,
                "name": "Install Dependencies",
                "run": "sudo apt-get -qqy install --no-install-recommends libcompress-raw-zlib-perl \\\n                                                  libcpan-uploader-perl \\\n                                                  libencode-perl \\\n                                                  libio-string-perl \\\n                                                  libjansson-dev \\\n                                                  libjson-xs-perl \\\n                                                  libmodule-install-perl \\\n                                                  libmodule-install-readmefrompod-perl \\\n                                                  libobject-tiny-perl \\\n                                                  libsnappy-dev \\\n                                                  libtest-exception-perl \\\n                                                  libtest-pod-perl\ncpanm --mirror https://www.cpan.org/ install Compress::Zstd \\\n                                             Error::Simple \\\n                                             Module::Install::Repository \\\n                                             Object::Tiny \\\n                                             Regexp::Common \\\n                                             Try::Tiny \\\n                                             inc::Module::Install\n"
            },
            {
                "id": 15,
                "name": "Perl reads interop files created by Java and Rust",
                "run": "./build.sh interop-data-test"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Rust Toolchain",
                "run": "dtolnay/rust-toolchain@nightly"
            },
            {
                "id": 3,
                "name": "Cache Cargo",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Cache Rust dependencies",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Install wasm-pack",
                "run": "curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh"
            },
            {
                "id": 6,
                "name": "Build the Web Assembly demo app",
                "run": "wasm-pack build wasm-demo"
            },
            {
                "id": 7,
                "name": "Test the Web Assembly demo app",
                "run": "RUST_BACKTRACE=1 wasm-pack test --headless --firefox wasm-demo"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo clippy --all-features --all-targets -- -Dclippy::all -Dunused_imports"
            }
        ],
        "apache/maven": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Set up Maven",
                "run": "mvn --errors --batch-mode --show-version org.apache.maven.plugins:maven-wrapper-plugin:3.3.2:wrapper \"-Dmaven=3.9.7\""
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "./mvnw verify -e -B -V -DdistributionFileName=apache-maven"
            },
            {
                "id": 5,
                "name": "Upload built Maven",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Collect environment context variables",
                "run": "set +e\nrepo=maven-integration-testing\ntarget_branch=master\ntarget_user=apache\nif [ \"$GITHUB_EVENT_NAME\" == \"pull_request\" ]; then\n  user=${PR_HEAD_LABEL%:*}\n  branch=${PR_HEAD_LABEL#*:}\nelse\n  user=${GITHUB_REPOSITORY%/*}\n  branch=${GITHUB_REF#refs/heads/}\nfi\nif [ $branch != \"master\" ]; then\n  git ls-remote https://github.com/$user/$repo.git | grep \"refs/heads/${branch}$\" > /dev/null\n  if [ $? -eq 0 ]; then\n    echo \"Found a branch \\\"$branch\\\" in fork \\\"$user/$repo\\\", configuring this for the integration tests to be run against.\"\n    target_branch=$branch\n    target_user=$user\n  else\n    echo \"Could not find fork \\\"$user/$repo\\\" or a branch \\\"$branch\\\" in this fork. Falling back to \\\"$target_branch\\\" in \\\"$target_user/$repo\\\".\"\n  fi\nelse\n  echo \"Integration tests will run against $target_user/$repo for master builds.\"\nfi\necho \"REPO_BRANCH=$target_branch\" >> $GITHUB_ENV\necho \"REPO_USER=$target_user\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Checkout maven-integration-testing",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/checkout@v4"
            },
            {
                "id": 5,
                "name": "Set up Maven",
                "run": "mvn --errors --batch-mode --show-version org.apache.maven.plugins:maven-wrapper-plugin:3.3.2:wrapper \"-Dmaven=3.9.7\""
            },
            {
                "id": 6,
                "name": "Build Maven",
                "run": "./mvnw install -e -B -V -DdistributionFileName=apache-maven -DskipTests -f maven/pom.xml"
            },
            {
                "id": 7,
                "name": "Running integration tests",
                "run": "./mvnw install -e -B -V -Prun-its,embedded -DmavenDistro=\"$GITHUB_WORKSPACE/maven/apache-maven/target/apache-maven-bin.zip\" -f maven-integration-testing/pom.xml"
            },
            {
                "id": 8,
                "name": "Upload artifact on integration testing",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Set up Maven",
                "run": "mvn --errors --batch-mode --show-version org.apache.maven.plugins:maven-wrapper-plugin:3.3.2:wrapper \"-Dmaven=3.9.7\""
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "./mvnw install -e -B -V -DdistributionFileName=apache-maven"
            },
            {
                "id": 5,
                "name": "Extract tarball",
                "run": "set +e\nif [ -f ${{ env.TAR_BALL }} ]; then\n  temp_dir=$(mktemp -d)\n  tar -xzf ${{ env.TAR_BALL }} -C \"$temp_dir\" --strip 1\n  maven_bin_dir=$temp_dir/bin\n  if [ -d $maven_bin_dir ]; then\n    echo \"tar.gz file \\\"${{ env.TAR_BALL }}\\\" successfully extracted in temporarily directory \\\"$temp_dir.\\\"\"\n    echo \"TEMP_MAVEN_BIN_DIR=$maven_bin_dir\" >> $GITHUB_ENV\n  else\n    echo \"$maven_bin_dir does not exist.\"\n    exit 1;\n  fi\nelse\n  echo \"${{ env.TAR_BALL }} does not exist.\"\n  exit 1;\nfi\n"
            },
            {
                "id": 6,
                "name": "Clean with Maven",
                "run": "./mvnw -e -B -V clean"
            },
            {
                "id": 7,
                "name": "Build again with Maven SNAPSHOT",
                "run": "set +e\nexport PATH=${{ env.TEMP_MAVEN_BIN_DIR }}:$PATH\nmvn verify site -e -B -V -DdistributionFileName=apache-maven -Preporting\n"
            }
        ],
        "apache/commons-logging": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 4,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn --show-version --batch-mode --no-transfer-progress verify jacoco:report"
            },
            {
                "id": 4,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn --errors --show-version --batch-mode --no-transfer-progress -Ddoclint=none"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            }
        ],
        "apache/commons-cli": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 4,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@23acc5c183826b7a8a97bce3cecc52db901f8251"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn --show-version --batch-mode --no-transfer-progress test jacoco:report"
            },
            {
                "id": 5,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Set up JDK ${{ matrix.java }}",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Build with Maven",
                "run": "mvn --errors --show-version --batch-mode --no-transfer-progress"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@23acc5c183826b7a8a97bce3cecc52db901f8251"
            }
        ],
        "apache/servicemix-maven-plugins": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 11",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn -B package --file pom.xml"
            },
            {
                "id": 4,
                "name": "Update dependency graph",
                "run": "advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6"
            }
        ]
    },
    "cs50": {
        "cs50/libcs50": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build packages for linux/arm64 platform",
                "run": "\n# Enable an execution of different multi-architecture containers by QEMU\nsudo apt-get update -y\nsudo apt-get install -y qemu qemu-user-static\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n\n# Build packages on aarch64 architecture\ndocker run \\\n  -e DEBIAN_FRONTEND=noninteractive \\\n  --rm \\\n  --tty \\\n  --volume \"${PWD}/artifacts:/artifacts\" \\\n  --volume \"${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE}\" \\\n  --workdir \"${GITHUB_WORKSPACE}\" \\\n  arm64v8/ubuntu:22.04 \\\n  /bin/bash -c \\\n  \"apt-get update && \\\n  apt-get -qq install -y build-essential gem rpm ruby-full && \\\n  gem install fpm package_cloud && \\\n  make deb && \\\n  make rpm && \\\n  cp build/deb/*.deb /artifacts && \\\n  cp build/rpm/*.rpm /artifacts && \\\n  rm -rf build\"\n"
            },
            {
                "id": 3,
                "name": "Build packages for linux/amd64 platform",
                "run": "sudo apt-get install -y rpm\nsudo gem install fpm package_cloud\nmake deb\nmake rpm\nsudo cp build/deb/*.deb ${PWD}/artifacts\nsudo cp build/rpm/*.rpm ${PWD}/artifacts\n"
            },
            {
                "id": 4,
                "name": "Deploy",
                "run": "PACKAGECLOUD_REPO=\"cs50/repo\"\n\n# Deploy deb to ubuntu repos\nUBUNTU_REPOS=( xenial yakkety zesty artful bionic cosmic disco eoan focal groovy hirsute impish jammy kinetic lunar )\nfor repo in \"${UBUNTU_REPOS[@]}\"; do\n  package_cloud push \"$PACKAGECLOUD_REPO\"/ubuntu/\"$repo\" ${PWD}/artifacts/*.deb\ndone\n\n# Deploy rpm to fedora repos\nfor repo in $(seq 28 38); do\n  package_cloud push \"$PACKAGECLOUD_REPO\"/fedora/\"$repo\" ${PWD}/artifacts/*.rpm\ndone\n"
            },
            {
                "id": 5,
                "name": "Extract version from Makefile",
                "run": "echo ::set-output name=version::$(make version)\n"
            },
            {
                "id": 6,
                "name": "Create Release",
                "run": "actions/github-script@v7"
            }
        ],
        "cs50/php-cs50": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "sudo apt-get install -y rpm\nsudo gem install fpm package_cloud\n"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "make deb\nmake rpm\n"
            },
            {
                "id": 4,
                "name": "Deploy",
                "run": "PACKAGECLOUD_REPO=\"cs50/repo\"\n\n# Deploy deb to ubuntu repos\nUBUNTU_REPOS=( xenial yakkety zesty artful bionic disco eoan focal groovy )\nfor repo in \"${UBUNTU_REPOS[@]}\"; do\n  package_cloud push \"$PACKAGECLOUD_REPO\"/ubuntu/\"$repo\" build/deb/*.deb\ndone\n\n# Deploy rpm to fedora repos\nfor repo in $(seq 28 32); do\n  package_cloud push \"$PACKAGECLOUD_REPO\"/fedora/\"$repo\" build/rpm/*.rpm\ndone\n"
            },
            {
                "id": 5,
                "name": "Extract version from Makefile",
                "run": "echo ::set-output name=version::$(make version)\n"
            },
            {
                "id": 6,
                "name": "Create Release",
                "run": "actions/github-script@v7"
            }
        ],
        "cs50/render50": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "pip install .\nrender50 -h\ntouch foo.c && render50 -o foo.pdf foo.c && test -f foo.pdf\n"
            },
            {
                "id": 4,
                "name": "Install pypa/build",
                "run": "python -m pip install build --user"
            },
            {
                "id": 5,
                "name": "Build a binary wheel and a source tarball",
                "run": "python -m build --sdist --wheel --outdir dist/ ."
            },
            {
                "id": 6,
                "name": "Deploy to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 7,
                "name": "Extract program version",
                "run": "echo ::set-output name=version::$(render50 --version | cut --delimiter ' ' --fields 2)\n"
            },
            {
                "id": 8,
                "name": "Create Release",
                "run": "actions/github-script@v7"
            },
            {
                "id": 9,
                "name": "Re-deploy dependent",
                "run": "actions/github-script@v7"
            }
        ],
        "cs50/server": [
            {
                "id": 1,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Log into Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 5,
                "name": "Build for linux/amd64",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 6,
                "name": "Squash for linux/amd64",
                "run": "pip3 install docker-squash\ndocker-squash --tag cs50/server:amd64 cs50/server:amd64\n"
            },
            {
                "id": 7,
                "name": "Push linux/amd64 build to Docker Hub",
                "run": "docker push cs50/server:amd64\n"
            },
            {
                "id": 8,
                "name": "Build for linux/arm64",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 9,
                "name": "Squash for linux/arm64",
                "run": "pip3 install docker-squash\ndocker-squash --tag cs50/server:arm64 cs50/server:arm64\n"
            },
            {
                "id": 10,
                "name": "Push linux/arm64 build to Docker Hub",
                "run": "docker push cs50/server:arm64\n"
            },
            {
                "id": 11,
                "name": "Create multi-arch manifest and push to Docker Hub",
                "run": "docker manifest create cs50/server:latest \\\n--amend cs50/server:amd64 \\\n--amend cs50/server:arm64\ndocker manifest push cs50/server:latest\n"
            }
        ],
        "cs50/libcs50-java": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "sudo apt-get install -y rpm\nsudo gem install fpm package_cloud\n"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "make deb\nmake rpm\n"
            },
            {
                "id": 4,
                "name": "Deploy",
                "run": "PACKAGECLOUD_REPO=\"cs50/repo\"\n\n# Deploy deb to ubuntu repos\nUBUNTU_REPOS=( xenial yakkety zesty artful bionic cosmic disco eoan focal groovy hirsute impish jammy )\nfor repo in \"${UBUNTU_REPOS[@]}\"; do\n  package_cloud push \"$PACKAGECLOUD_REPO\"/ubuntu/\"$repo\" build/deb/*.deb\ndone\n\n# Deploy rpm to fedora repos\nfor repo in $(seq 28 36); do\n  package_cloud push \"$PACKAGECLOUD_REPO\"/fedora/\"$repo\" build/rpm/*.rpm\ndone\n"
            },
            {
                "id": 5,
                "name": "Extract version from Makefile",
                "run": "echo ::set-output name=version::$(make version)\n"
            },
            {
                "id": 6,
                "name": "Create Release",
                "run": "actions/github-script@v7"
            }
        ],
        "cs50/cli": [
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 2,
                "name": "Log into Docker Hub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 3,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Build for linux/amd64",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 5,
                "name": "Push linux/amd64 build to Docker Hub",
                "run": "docker push cs50/cli:amd64\n"
            },
            {
                "id": 6,
                "name": "Push linux/amd64 build to Docker Hub (canary)",
                "run": "docker push cs50/cli:canary-amd64\n"
            },
            {
                "id": 1,
                "name": "Install Docker (remove once Docker is pre-installed on arm64 runners)",
                "run": "export DEBIAN_FRONTEND=noninteractive\nsudo apt update\nsudo apt install -y ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\necho \\\n\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n$(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\\nsudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt update\nsudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\nsudo usermod -aG docker $USER\nsudo apt install -y acl\nsudo setfacl --modify user:$USER:rw /var/run/docker.sock\n"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 3,
                "name": "Log into Docker Hub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Install Python (replace with setup-python once available on arm64 runners)",
                "run": "sudo apt install -y python3\n"
            },
            {
                "id": 5,
                "name": "Build for linux/arm64",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 6,
                "name": "Push linux/arm64 build to Docker Hub",
                "run": "docker push cs50/cli:arm64\n"
            },
            {
                "id": 7,
                "name": "Push linux/arm64 build to Docker Hub (canary)",
                "run": "docker push cs50/cli:canary-arm64\n"
            },
            {
                "id": 1,
                "name": "Log into Docker Hub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 2,
                "name": "Create multi-arch manifest and push to Docker Hub",
                "run": "docker manifest create cs50/cli:latest \\\n--amend cs50/cli:amd64 \\\n--amend cs50/cli:arm64\ndocker manifest push cs50/cli:latest\n"
            },
            {
                "id": 3,
                "name": "Create multi-arch manifest and push to Docker Hub (canary)",
                "run": "docker manifest create cs50/cli:canary \\\n--amend cs50/cli:canary-amd64 \\\n--amend cs50/cli:canary-arm64\ndocker manifest push cs50/cli:canary\n"
            },
            {
                "id": 4,
                "name": "Re-deploy depdendents",
                "run": "actions/github-script@v7"
            }
        ],
        "cs50/submit50": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "pip install babel\npip install .\nsubmit50 --help\npython setup.py compile_catalog\n"
            },
            {
                "id": 4,
                "name": "Install pypa/build",
                "run": "python -m pip install build --user"
            },
            {
                "id": 5,
                "name": "Build a binary wheel and a source tarball",
                "run": "python -m build --sdist --wheel --outdir dist/ ."
            },
            {
                "id": 6,
                "name": "Deploy to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 7,
                "name": "Extract program version",
                "run": "echo ::set-output name=version::$(submit50 --version | cut --delimiter ' ' --fields 2)\n"
            },
            {
                "id": 8,
                "name": "Create Release",
                "run": "actions/github-script@v7"
            }
        ],
        "cs50/python-cs50": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Setup databases",
                "run": "pip install .\npip install mysqlclient psycopg2-binary SQLAlchemy\n"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "python tests/sql.py"
            },
            {
                "id": 5,
                "name": "Install pypa/build",
                "run": "python -m pip install build --user"
            },
            {
                "id": 6,
                "name": "Build a binary wheel and a source tarball",
                "run": "python -m build --sdist --wheel --outdir dist/ ."
            },
            {
                "id": 7,
                "name": "Deploy to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 8,
                "name": "Get Version",
                "run": "echo ::set-output name=version::$(python3 setup.py --version)\n"
            },
            {
                "id": 9,
                "name": "Create Release",
                "run": "actions/github-script@v7"
            }
        ],
        "cs50/cli50": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Compile catalog",
                "run": "pip install babel\npython setup.py compile_catalog\n"
            },
            {
                "id": 4,
                "name": "Install pypa/build",
                "run": "python -m pip install build --user\n"
            },
            {
                "id": 5,
                "name": "Build a binary wheel and a source tarball",
                "run": "python -m build --sdist --wheel --outdir dist/ .\n"
            },
            {
                "id": 6,
                "name": "Deploy to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 7,
                "name": "Extract program version",
                "run": "pip install .\necho ::set-output name=version::$(cli50 --version | cut --delimiter ' ' --fields 2)\n"
            },
            {
                "id": 8,
                "name": "Create Release",
                "run": "actions/github-script@v7"
            }
        ],
        "cs50/check50": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "pip install babel flask\npip install .\npython -m tests\n"
            },
            {
                "id": 4,
                "name": "Install pypa/build",
                "run": "python -m pip install build --user"
            },
            {
                "id": 5,
                "name": "Build a binary wheel and a source tarball",
                "run": "python -m build --sdist --wheel --outdir dist/ ."
            },
            {
                "id": 6,
                "name": "Deploy to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 7,
                "name": "Extract program version",
                "run": "echo ::set-output name=version::$(check50 --version | cut --delimiter ' ' --fields 2)\n"
            },
            {
                "id": 8,
                "name": "Create Release",
                "run": "actions/github-script@v7"
            }
        ],
        "cs50/help.cs50.net": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "deploy",
                "run": "cs50/deploy-to-eb@main"
            }
        ],
        "cs50/compare50": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "pip install .\npython -m tests\n"
            },
            {
                "id": 4,
                "name": "Install pypa/build",
                "run": "python -m pip install build --user"
            },
            {
                "id": 5,
                "name": "Build a binary wheel and a source tarball",
                "run": "python -m build --sdist --wheel --outdir dist/ ."
            },
            {
                "id": 6,
                "name": "Deploy to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 7,
                "name": "Extract program version",
                "run": "echo ::set-output name=version::$(compare50 --version | cut --delimiter ' ' --fields 2)\n"
            },
            {
                "id": 8,
                "name": "Create Release",
                "run": "actions/github-script@v7"
            }
        ],
        "cs50/style50": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "pip install .\nstyle50 --help\n"
            },
            {
                "id": 4,
                "name": "Install pypa/build",
                "run": "python -m pip install build --user"
            },
            {
                "id": 5,
                "name": "Build a binary wheel and a source tarball",
                "run": "python -m build --sdist --wheel --outdir dist/ ."
            },
            {
                "id": 6,
                "name": "Deploy to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 7,
                "name": "Extract program version",
                "run": "echo ::set-output name=version::$(style50 --version | cut --delimiter ' ' --fields 2)\n"
            },
            {
                "id": 8,
                "name": "Create Release",
                "run": "actions/github-script@7"
            }
        ],
        "cs50/check": [
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 2,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 3,
                "name": "Build and push",
                "run": "docker/build-push-action@v5"
            }
        ],
        "cs50/sandbox": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "rm -rf gh-pages && mkdir gh-pages && cp next.css scripts.js styles.css gh-pages"
            },
            {
                "id": 3,
                "name": "Deploy",
                "run": "peaceiris/actions-gh-pages@v3"
            }
        ],
        "cs50/mysql": [
            {
                "id": 1,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 3,
                "name": "Log into Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build for linux/amd64",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 5,
                "name": "Push linux/amd64 build to Docker Hub",
                "run": "docker push cs50/mysql:amd64\n"
            },
            {
                "id": 6,
                "name": "Build for linux/arm64",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 7,
                "name": "Push linux/arm64 build to Docker Hub",
                "run": "docker push cs50/mysql:arm64\n"
            },
            {
                "id": 8,
                "name": "Create multi-arch manifest and push to Docker Hub",
                "run": "docker manifest create cs50/mysql:latest \\\n--amend cs50/mysql:amd64 \\\n--amend cs50/mysql:arm64\ndocker manifest create cs50/mysql:8 \\\n--amend cs50/mysql:amd64 \\\n--amend cs50/mysql:arm64\ndocker manifest push cs50/mysql:latest\ndocker manifest push cs50/mysql:8\n"
            }
        ],
        "cs50/lib50": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "pip install babel\npip install .\npython setup.py compile_catalog\npython -m tests\n"
            },
            {
                "id": 4,
                "name": "Install pypa/build",
                "run": "python -m pip install build --user"
            },
            {
                "id": 5,
                "name": "Build a binary wheel and a source tarball",
                "run": "python -m build --sdist --wheel --outdir dist/ ."
            },
            {
                "id": 6,
                "name": "Deploy to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            }
        ],
        "cs50/draw.cs50.io": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "cs50/deploy-to-eb@main"
            }
        ],
        "cs50/publish50-electron": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn dist"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "yarn release"
            }
        ]
    },
    "twitter": {
        "twitter/twurl": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Run unit tests",
                "run": "bundle exec rake"
            },
            {
                "id": 1,
                "name": "CLA Assistant",
                "run": "cla-assistant/github-action@v2.0.2-alpha"
            }
        ],
        "twitter/finagle": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "echo java version",
                "run": "java -Xmx32m -version"
            },
            {
                "id": 4,
                "name": "echo javac version",
                "run": "javac -J-Xmx32m -version"
            },
            {
                "id": 5,
                "name": "cache build dependencies",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "update cache",
                "run": "if [ -f ~/.ivy2/cache ]; then\n  find ~/.ivy2/cache  -name \"ivydata-*.properties\" -delete\nfi\nif [ -f ~/.sbt ]; then\n  find ~/.sbt         -name \"*.lock\"               -delete\nfi\n"
            },
            {
                "id": 7,
                "name": "build dependencies",
                "run": "twitter/dodo-build@v3"
            },
            {
                "id": 8,
                "name": "test",
                "run": "${{ format('./sbt ++{0} clean \"{1}/test\"', matrix.scala, matrix.project) }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "echo java version",
                "run": "java -Xmx32m -version"
            },
            {
                "id": 4,
                "name": "echo javac version",
                "run": "javac -J-Xmx32m -version"
            },
            {
                "id": 5,
                "name": "cache build dependencies",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "update cache",
                "run": "if [ -f ~/.ivy2/cache ]; then\n  find ~/.ivy2/cache  -name \"ivydata-*.properties\" -delete\nfi\nif [ -f ~/.sbt ]; then\n  find ~/.sbt         -name \"*.lock\"               -delete\nfi\n"
            },
            {
                "id": 7,
                "name": "build dependencies",
                "run": "twitter/dodo-build@v3"
            },
            {
                "id": 8,
                "name": "set up netty snapshot",
                "run": "source ./netty-snapshot-env.sh"
            },
            {
                "id": 9,
                "name": "test",
                "run": "${{ format('./sbt ++{0} clean \"{1}/test\"', matrix.scala, matrix.project) }}"
            }
        ],
        "twitter/opensource-website": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "setup hugo",
                "run": "peaceiris/actions-hugo@2e89aa66d0093e4cd14751b3028fc1a179452c2e"
            },
            {
                "id": 3,
                "name": "build",
                "run": "hugo"
            },
            {
                "id": 4,
                "name": "deploy",
                "run": "peaceiris/actions-gh-pages@bbdfb200618d235585ad98e965f4aafc39b4c501"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "cache pip",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "python scripts/fetch_projects.py"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "git config user.name 'GitHub Actions'\ngit config user.email 'actions@users.noreply.github.com'\ngit add -A\ntimestamp=$(date -u)\ngit commit -m \"update data: ${timestamp}\" || exit 0\ngit push\n"
            }
        ],
        "twitter/util": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "echo java version",
                "run": "java -Xmx32m -version"
            },
            {
                "id": 4,
                "name": "echo javac version",
                "run": "javac -J-Xmx32m -version"
            },
            {
                "id": 5,
                "name": "cache build dependencies",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "update cache",
                "run": "if [ -f ~/.ivy2/cache ]; then\n  find ~/.ivy2/cache  -name \"ivydata-*.properties\" -delete\nfi\nif [ -f ~/.sbt ]; then\n  find ~/.sbt         -name \"*.lock\"               -delete\nfi\n"
            },
            {
                "id": 7,
                "name": "test",
                "run": "${{ format('./sbt ++{0} clean test', matrix.scala) }}"
            }
        ],
        "twitter/scrooge": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "echo java version",
                "run": "java -Xmx32m -version"
            },
            {
                "id": 4,
                "name": "echo javac version",
                "run": "javac -J-Xmx32m -version"
            },
            {
                "id": 5,
                "name": "cache build dependencies",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "update cache",
                "run": "if [ -f ~/.ivy2/cache ]; then\n  find ~/.ivy2/cache  -name \"ivydata-*.properties\" -delete\nfi\nif [ -f ~/.sbt ]; then\n  find ~/.sbt         -name \"*.lock\"               -delete\nfi\n"
            },
            {
                "id": 7,
                "name": "build dependencies",
                "run": "twitter/dodo-build@v3"
            },
            {
                "id": 8,
                "name": "test",
                "run": "${{ format('./sbt ++{0} clean test', matrix.scala) }}"
            },
            {
                "id": 9,
                "name": "scrooge-generator test",
                "run": "${{ format('./sbt ++{0} \"project scrooge-generator-tests\" test', matrix.scala) }}"
            }
        ],
        "twitter/finatra": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "echo java version",
                "run": "java -Xmx32m -version"
            },
            {
                "id": 4,
                "name": "echo javac version",
                "run": "javac -J-Xmx32m -version"
            },
            {
                "id": 5,
                "name": "cache build dependencies",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "update cache",
                "run": "if [ -f ~/.ivy2/cache ]; then\n  find ~/.ivy2/cache  -name \"ivydata-*.properties\" -delete\nfi\nif [ -f ~/.sbt ]; then\n  find ~/.sbt         -name \"*.lock\"               -delete\nfi\n"
            },
            {
                "id": 7,
                "name": "build dependencies",
                "run": "twitter/dodo-build@v3"
            },
            {
                "id": 8,
                "name": "test",
                "run": "${{ format('./sbt ++{0} clean test', matrix.scala) }}"
            }
        ],
        "twitter/twemproxy": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build and test in docker",
                "run": "bash ./test_in_docker.sh ${{ matrix.REDIS_VER }}"
            }
        ],
        "twitter/twitter-cldr-rb": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Ruby ${{ matrix.ruby-version }}",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Run Tests",
                "run": "bundle exec rake spec:full"
            }
        ],
        "twitter/twitter-server": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "echo java version",
                "run": "java -Xmx32m -version"
            },
            {
                "id": 4,
                "name": "echo javac version",
                "run": "javac -J-Xmx32m -version"
            },
            {
                "id": 5,
                "name": "cache build dependencies",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "update cache",
                "run": "if [ -f ~/.ivy2/cache ]; then\n  find ~/.ivy2/cache  -name \"ivydata-*.properties\" -delete\nfi\nif [ -f ~/.sbt ]; then\n  find ~/.sbt         -name \"*.lock\"               -delete\nfi\n"
            },
            {
                "id": 7,
                "name": "build dependencies",
                "run": "twitter/dodo-build@v3"
            },
            {
                "id": 8,
                "name": "test",
                "run": "${{ format('./sbt ++{0} clean test', matrix.scala) }}"
            }
        ],
        "twitter/pelikan": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Update cargo flags",
                "run": "echo 'CARGO_FLAGS=--release' >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Update cargo flags",
                "run": "echo 'CARGO_FLAGS=' >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 6,
                "name": "build",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 7,
                "name": "test",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 8,
                "name": "doctests",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Update cargo flags",
                "run": "echo 'CARGO_FLAGS=--release' >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Update cargo flags",
                "run": "echo 'CARGO_FLAGS=' >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 6,
                "name": "build",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions-rs/clippy-check@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "cargo audit",
                "run": "cargo install cargo-audit\ncargo audit\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build Cache for Pelikan",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./pelikan/.github/actions/ca"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./pelikan/.github/actions/pingserver"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "./pelikan/.github/actions/rpc-perf"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build Cache for Pelikan",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./pelikan/.github/actions/ca"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./pelikan/.github/actions/pingserver"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "./pelikan/.github/actions/rpc-perf"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build Cache for Pelikan",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./pelikan/.github/actions/ca"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./pelikan/.github/actions/pingserver"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "./pelikan/.github/actions/pingproxy"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "./pelikan/.github/actions/rpc-perf"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build Cache for Pelikan",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./pelikan/.github/actions/ca"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./pelikan/.github/actions/pingserver"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "./pelikan/.github/actions/pingproxy"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "./pelikan/.github/actions/rpc-perf"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build Cache for Pelikan",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./pelikan/.github/actions/pingserver"
            },
            {
                "id": 5,
                "name": "Validate",
                "run": "sleep 60 && curl -s http://localhost:9998/vars.json | jq '.' > /dev/null"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Install cargo-fuzz",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 5,
                "name": "fuzz ${{ matrix.target }}",
                "run": "cd src/${{ matrix.target }}\nfor FUZZ_TARGET in `cargo +nightly fuzz list`; do\n  cargo +nightly fuzz run ${FUZZ_TARGET} --jobs ${{ env.FUZZ_JOBS }} -- \\\n    -max_total_time=${{ env.FUZZ_TIME }};\ndone\n"
            }
        ],
        "twitter/ccommon": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Configure",
                "run": "mkdir -p _build\ncmake -B _build -S . \\\n  -DCMAKE_BUILD_TYPE=${{ matrix.profile }} \\\n  -DBUILD_AND_INSTALL_CHECK=yes\n"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "cmake --build _build\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "cmake --build _build --target test\n"
            }
        ],
        "twitter/rpc-perf": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Update cargo flags",
                "run": "echo 'CARGO_FLAGS=--release' >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Update cargo flags",
                "run": "echo 'CARGO_FLAGS=' >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 6,
                "name": "build",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 7,
                "name": "test",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/clippy-check@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "cargo build --release"
            },
            {
                "id": 4,
                "name": "Smoketest",
                "run": "target/release/rpc-perf configs/memcache.toml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "cargo build --release"
            },
            {
                "id": 4,
                "name": "Run",
                "run": "target/release/rpc-perf configs/memcache.toml &"
            },
            {
                "id": 5,
                "name": "Validate",
                "run": "sleep 60 && curl -s http://localhost:9090/vars.json | jq '.' > /dev/null"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "cargo build --release"
            },
            {
                "id": 4,
                "name": "Smoketest",
                "run": "target/release/rpc-perf configs/redis.toml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "cargo build --release"
            },
            {
                "id": 4,
                "name": "Smoketest",
                "run": "target/release/rpc-perf configs/redis_resp.toml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Checkout Pelikan",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Build Cache for rpc-perf",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Build Cache for Pelikan",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 5,
                "name": "Build Pelikan",
                "run": "cd pelikan && cargo build --release"
            },
            {
                "id": 6,
                "name": "Build rpc-perf",
                "run": "cd rpc-perf && cargo build --release"
            },
            {
                "id": 7,
                "name": "Run Pelikan Pingserver",
                "run": "pelikan/target/release/pelikan_pingserver_rs &"
            },
            {
                "id": 8,
                "name": "Smoketest",
                "run": "rpc-perf/target/release/rpc-perf rpc-perf/configs/ping.toml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Checkout Pelikan",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Build Cache for rpc-perf",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Build Cache for Pelikan",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 5,
                "name": "Build Pelikan",
                "run": "cd pelikan && cargo build --release"
            },
            {
                "id": 6,
                "name": "Build rpc-perf",
                "run": "cd rpc-perf && cargo build --release"
            },
            {
                "id": 7,
                "name": "Run Pelikan Segcache",
                "run": "pelikan/target/release/pelikan_segcache_rs &"
            },
            {
                "id": 8,
                "name": "Smoketest",
                "run": "rpc-perf/target/release/rpc-perf rpc-perf/configs/pelikan.toml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Checkout Pelikan",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Build Cache for rpc-perf",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Build Cache for Pelikan",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 5,
                "name": "Fetch step-cli",
                "run": "curl -O -L https://dl.step.sm/gh-release/cli/docs-cli-install/v0.18.0/step-cli_0.18.0_amd64.deb"
            },
            {
                "id": 6,
                "name": "Install step-cli",
                "run": "sudo dpkg -i step-cli_0.18.0_amd64.deb"
            },
            {
                "id": 7,
                "name": "Generate Root CA",
                "run": "step certificate create --profile root-ca \"Root CA\" root_ca.crt root_ca.key --no-password --insecure"
            },
            {
                "id": 8,
                "name": "Install Root CA",
                "run": "sudo step certificate install root_ca.crt"
            },
            {
                "id": 9,
                "name": "Generate Intermediate CA",
                "run": "step certificate create \"Intermediate CA\" intermediate_ca.crt intermediate_ca.key --profile intermediate-ca --ca ./root_ca.crt --ca-key ./root_ca.key --no-password --insecure"
            },
            {
                "id": 10,
                "name": "Generate Trust Chain",
                "run": "cat intermediate_ca.crt > trust.chain && cat root_ca.crt >> trust.chain"
            },
            {
                "id": 11,
                "name": "Generate Client Cert and Key",
                "run": "step certificate create client client.crt client.key --ca ./intermediate_ca.crt --ca-key ./intermediate_ca.key --bundle --no-password --insecure"
            },
            {
                "id": 12,
                "name": "Generate Server Cert and Key",
                "run": "step certificate create server server.crt server.key --ca ./intermediate_ca.crt --ca-key ./intermediate_ca.key --bundle --no-password --insecure"
            },
            {
                "id": 13,
                "name": "Build Pelikan",
                "run": "cd pelikan && cargo build --release"
            },
            {
                "id": 14,
                "name": "Build rpc-perf",
                "run": "cd rpc-perf && cargo build --release"
            },
            {
                "id": 15,
                "name": "Configure Pelikan Segcache",
                "run": "echo 'certificate_chain = \"trust.chain\"' >> pelikan/config/segcache.toml\necho 'certificate = \"server.crt\"' >> pelikan/config/segcache.toml\necho 'private_key = \"server.key\"' >> pelikan/config/segcache.toml\n"
            },
            {
                "id": 16,
                "name": "Run Pelikan Segcache",
                "run": "pelikan/target/release/pelikan_segcache_rs pelikan/config/segcache.toml &"
            },
            {
                "id": 17,
                "name": "Configure rpc-perf",
                "run": "echo '[tls]' >> rpc-perf/configs/pelikan.toml\necho 'verify = false' >> rpc-perf/configs/pelikan.toml\necho 'certificate_chain = \"trust.chain\"' >> rpc-perf/configs/pelikan.toml\necho 'certificate = \"client.crt\"' >> rpc-perf/configs/pelikan.toml\necho 'private_key = \"client.key\"' >> rpc-perf/configs/pelikan.toml\n"
            },
            {
                "id": 18,
                "name": "Final rpc-perf config",
                "run": "cat rpc-perf/configs/pelikan.toml"
            },
            {
                "id": 19,
                "name": "Smoketest",
                "run": "rpc-perf/target/release/rpc-perf rpc-perf/configs/pelikan.toml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Checkout Pelikan",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Build Cache for rpc-perf",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Build Cache for Pelikan",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 5,
                "name": "Fetch step-cli",
                "run": "curl -O -L https://dl.step.sm/gh-release/cli/docs-cli-install/v0.18.0/step-cli_0.18.0_amd64.deb"
            },
            {
                "id": 6,
                "name": "Install step-cli",
                "run": "sudo dpkg -i step-cli_0.18.0_amd64.deb"
            },
            {
                "id": 7,
                "name": "Generate Root CA",
                "run": "step certificate create --profile root-ca \"Root CA\" root_ca.crt root_ca.key --no-password --insecure"
            },
            {
                "id": 8,
                "name": "Install Root CA",
                "run": "sudo step certificate install root_ca.crt"
            },
            {
                "id": 9,
                "name": "Generate Intermediate CA",
                "run": "step certificate create \"Intermediate CA\" intermediate_ca.crt intermediate_ca.key --profile intermediate-ca --ca ./root_ca.crt --ca-key ./root_ca.key --no-password --insecure"
            },
            {
                "id": 10,
                "name": "Generate Trust Chain",
                "run": "cat intermediate_ca.crt > trust.chain && cat root_ca.crt >> trust.chain"
            },
            {
                "id": 11,
                "name": "Generate Client Cert and Key",
                "run": "step certificate create client client.crt client.key --ca ./intermediate_ca.crt --ca-key ./intermediate_ca.key --bundle --no-password --insecure"
            },
            {
                "id": 12,
                "name": "Generate Server Cert and Key",
                "run": "step certificate create server server.crt server.key --ca ./intermediate_ca.crt --ca-key ./intermediate_ca.key --bundle --no-password --insecure"
            },
            {
                "id": 13,
                "name": "Build Pelikan",
                "run": "cd pelikan && cargo build --release"
            },
            {
                "id": 14,
                "name": "Build rpc-perf",
                "run": "cd rpc-perf && cargo build --release"
            },
            {
                "id": 15,
                "name": "Configure Pelikan Segcache",
                "run": "echo 'certificate_chain = \"trust.chain\"' >> pelikan/config/segcache.toml\necho 'certificate = \"server.crt\"' >> pelikan/config/segcache.toml\necho 'private_key = \"server.key\"' >> pelikan/config/segcache.toml\n"
            },
            {
                "id": 16,
                "name": "Run Pelikan Segcache",
                "run": "pelikan/target/release/pelikan_segcache_rs pelikan/config/segcache.toml &"
            },
            {
                "id": 17,
                "name": "Configure rpc-perf",
                "run": "echo '[tls]' >> rpc-perf/configs/pelikan.toml\necho 'verify = false' >> rpc-perf/configs/pelikan.toml\necho 'certificate_chain = \"trust.chain\"' >> rpc-perf/configs/pelikan.toml\necho 'certificate = \"client.crt\"' >> rpc-perf/configs/pelikan.toml\necho 'private_key = \"client.key\"' >> rpc-perf/configs/pelikan.toml\necho 'session_cache = 0' >> rpc-perf/configs/pelikan.toml\n"
            },
            {
                "id": 18,
                "name": "Final rpc-perf config",
                "run": "cat rpc-perf/configs/pelikan.toml"
            },
            {
                "id": 19,
                "name": "Smoketest",
                "run": "rpc-perf/target/release/rpc-perf rpc-perf/configs/pelikan.toml"
            }
        ],
        "twitter/scoot": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Cache go modules",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Check fmt",
                "run": "bash scripts/check_gofmt.sh"
            },
            {
                "id": 5,
                "name": "Vet",
                "run": "make vet"
            },
            {
                "id": 6,
                "name": "Run all tests",
                "run": "# Certain tests need sudo to run on github actions,\n# so run them all as sudo.\n# su doesn't use the same go version, so preserve env.\n# See https://github.com/actions/virtual-environments/issues/731\nexport GOPATH=\"$HOME/go\"\nsudo ln -f -s $GOROOT/bin/* /usr/bin/\nsudo -E PATH=\"$PATH\" make ci\n"
            },
            {
                "id": 7,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1"
            }
        ],
        "twitter/dodo": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "echo java version",
                "run": "java -Xmx32m -version"
            },
            {
                "id": 4,
                "name": "echo javac version",
                "run": "javac -J-Xmx32m -version"
            },
            {
                "id": 5,
                "name": "test",
                "run": "${{ format('./bin/build --no-test --dry-run --scala-version {0} --all', matrix.scala) }}"
            },
            {
                "id": 1,
                "name": "dump/context",
                "run": "echo \"$GITHUB_CONTEXT\""
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 3,
                "name": "delete/snapshots",
                "run": "${{ github.workspace }}/bin/delete-snapshots --dry-run ${{ github.event.client_payload.dry_run }} --verbose ${{ github.event.client_payload.version }}"
            },
            {
                "id": 4,
                "name": "slack/notification-failure",
                "run": "${{ github.workspace }}/bin/slack --verbose --denote-dry-run ${{ github.event.client_payload.dry_run }} --message \"\ud83d\uddd1\ufe0f ${{ github.event.client_payload.version }} Snapshot cleanup \\`failed\\`.\" --color \"#DA2700\""
            },
            {
                "id": 5,
                "name": "slack/notification-success",
                "run": "${{ github.workspace }}/bin/slack  --verbose --denote-dry-run ${{ github.event.client_payload.dry_run }} --message \"\ud83d\uddd1\ufe0f ${{ github.event.client_payload.version }} Snapshot cleanup \\`successful\\`.\" --color \"#229954\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "olafurpg/setup-gpg@v3"
            },
            {
                "id": 5,
                "name": "setup/gpg-secret",
                "run": "${{ github.workspace }}/bin/gpg-init"
            },
            {
                "id": 6,
                "name": "setup/sbt",
                "run": "cp -r ${{ github.workspace }}/bin/.sbt ~/.sbt\n"
            },
            {
                "id": 7,
                "name": "checkout/util",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 8,
                "name": "merge/util",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose util\n"
            },
            {
                "id": 9,
                "name": "checkout/scrooge",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 10,
                "name": "merge/scrooge",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose scrooge\n"
            },
            {
                "id": 11,
                "name": "dodo/build",
                "run": "twitter/dodo-build@v3"
            },
            {
                "id": 12,
                "name": "checkout/finagle",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 13,
                "name": "release/finagle",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }} --dry-run ${{ github.event.client_payload.dry_run }} --verbose finagle\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "olafurpg/setup-gpg@v3"
            },
            {
                "id": 5,
                "name": "setup/gpg-secret",
                "run": "${{ github.workspace }}/bin/gpg-init"
            },
            {
                "id": 6,
                "name": "setup/sbt",
                "run": "cp -r ${{ github.workspace }}/bin/.sbt ~/.sbt\n"
            },
            {
                "id": 7,
                "name": "checkout/util",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 8,
                "name": "merge/util",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose util\n"
            },
            {
                "id": 9,
                "name": "checkout/scrooge",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 10,
                "name": "merge/scrooge",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose scrooge\n"
            },
            {
                "id": 11,
                "name": "checkout/finagle",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 12,
                "name": "merge/finagle",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose finagle\n"
            },
            {
                "id": 13,
                "name": "checkout/twitter-server",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 14,
                "name": "merge/twitter-server",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose twitter-server\n"
            },
            {
                "id": 15,
                "name": "dodo/build",
                "run": "twitter/dodo-build@v3"
            },
            {
                "id": 16,
                "name": "checkout/finatra",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 17,
                "name": "release/finatra",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose finatra\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "setup/git",
                "run": "git config --global user.email \"${API_USER}@twitter.com\"\ngit config --global user.name \"$API_USER\"\ngit config remote.origin.fetch +refs/heads/*:refs/remotes/origin/*\n"
            },
            {
                "id": 3,
                "name": "merge",
                "run": "develop_head=$(git rev-parse HEAD)\ngit fetch --no-tags --prune origin +refs/heads/*:refs/remotes/origin/*\ngit checkout release && git merge \"$develop_head\" && git push -f origin release\n"
            },
            {
                "id": 1,
                "name": "dump/context",
                "run": "echo \"$GITHUB_CONTEXT\""
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 6,
                "name": "setup/sphinx",
                "run": "sudo apt-get update\nsudo apt-get install python3-sphinx\n"
            },
            {
                "id": 7,
                "name": "setup/git",
                "run": "git config --global user.email \"${API_USER}@twitter.com\"\ngit config --global user.name \"$API_USER\"\n"
            },
            {
                "id": 8,
                "name": "checkout/util",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 9,
                "name": "generate/util",
                "run": "./sbt --warn util-doc/makeSite\n./sbt --warn unidoc\n"
            },
            {
                "id": 10,
                "name": "checkout/util-gh-pages",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 11,
                "name": "publish/util-gh-pages",
                "run": "touch .nojekyll\ncp ${{ github.workspace }}/util/site/index.html .\nrm -fr docs/\ncp -r ${{ github.workspace }}/util/target/scala-$SCALA_VERSION/unidoc/ docs/\nrm -fr guide/\ncp -r ${{ github.workspace }}/util/doc/target/site/ guide/\ngit add .\ngit commit --allow-empty -m \"site publish by $API_USER\"\ngit diff --name-only origin/gh-pages gh-pages\n"
            },
            {
                "id": 12,
                "name": "push/util-gh-pages",
                "run": "git push $REMOTE_BASE/util.git HEAD\n"
            },
            {
                "id": 13,
                "name": "checkout/scrooge",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 14,
                "name": "generate/scrooge",
                "run": "./sbt --warn scrooge-doc/makeSite\n"
            },
            {
                "id": 15,
                "name": "checkout/scrooge-gh-pages",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 16,
                "name": "publish/scrooge-gh-pages",
                "run": "git rm -fr --ignore-unmatch .\ntouch .nojekyll\ncp -r ${{ github.workspace }}/scrooge/doc/target/site/* .\ngit add .\ngit commit --allow-empty -m \"site publish by $API_USER\"\ngit diff --name-only origin/gh-pages gh-pages\n"
            },
            {
                "id": 17,
                "name": "push/scrooge-gh-pages",
                "run": "git push $REMOTE_BASE/scrooge.git HEAD\n"
            },
            {
                "id": 18,
                "name": "checkout/finagle",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 19,
                "name": "generate/finagle",
                "run": "./sbt --warn finagle-doc/makeSite\n./sbt --warn unidoc\n"
            },
            {
                "id": 20,
                "name": "checkout/finagle-gh-pages",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 21,
                "name": "publish/finagle-gh-pages",
                "run": "touch .nojekyll\ncp ${{ github.workspace }}/finagle/site/index.html .\nrm -fr docs/\ncp -r ${{ github.workspace }}/finagle/target/scala-$SCALA_VERSION/unidoc/ docs/\nrm -fr guide/\ncp -r ${{ github.workspace }}/finagle/doc/target/site/ guide/\ngit add .\ngit commit --allow-empty -m \"site publish by $API_USER\"\ngit diff --name-only origin/gh-pages gh-pages\n"
            },
            {
                "id": 22,
                "name": "push/finagle-gh-pages",
                "run": "git push $REMOTE_BASE/finagle.git HEAD\n"
            },
            {
                "id": 23,
                "name": "checkout/twitter-server",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 24,
                "name": "generate/twitter-server",
                "run": "./sbt --warn twitterServerDoc/makeSite\n"
            },
            {
                "id": 25,
                "name": "checkout/twitter-server-gh-pages",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 26,
                "name": "publish/twitter-server-gh-pages",
                "run": "git rm -fr --ignore-unmatch .\ntouch .nojekyll\ncp -r ${{ github.workspace }}/twitter-server/doc/target/site/* .\ngit add .\ngit commit --allow-empty -m \"site publish by $API_USER\"\ngit diff --name-only origin/gh-pages gh-pages\n"
            },
            {
                "id": 27,
                "name": "push/twitter-server-gh-pages",
                "run": "git push $REMOTE_BASE/twitter-server.git HEAD\n"
            },
            {
                "id": 28,
                "name": "checkout/finatra",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 29,
                "name": "generate/finatra",
                "run": "./sbt --warn site/makeSite\n./sbt --warn unidoc\n"
            },
            {
                "id": 30,
                "name": "checkout/finatra-gh-pages",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 31,
                "name": "publish/finatra-gh-pages",
                "run": "git rm -fr --ignore-unmatch .\ntouch .nojekyll\ncp -r ${{ github.workspace }}/finatra/doc/target/site/* .\ncp -r ${{ github.workspace }}/finatra/target/scala-$SCALA_VERSION/unidoc/ scaladocs/\ngit add .\ngit commit --allow-empty -m \"site publish by $API_USER\"\ngit diff --name-only origin/gh-pages gh-pages\n"
            },
            {
                "id": 32,
                "name": "push/finatra-gh-pages",
                "run": "git push $REMOTE_BASE/finatra.git HEAD\n"
            },
            {
                "id": 33,
                "name": "slack/notification-failure",
                "run": "${{ github.workspace }}/bin/slack --verbose --denote-dry-run ${{ github.event.client_payload.dry_run }} --message \"\ud83d\udcd3 ${{ github.event.client_payload.version }} Site publish \\`failed\\`.\" --color \"#DA2700\""
            },
            {
                "id": 34,
                "name": "slack/notification-success",
                "run": "${{ github.workspace }}/bin/slack --verbose --denote-dry-run ${{ github.event.client_payload.dry_run }} --message \"\ud83d\udcd3 ${{ github.event.client_payload.version }} Site publish \\`successful\\`.\" --color \"#229954\""
            },
            {
                "id": 1,
                "name": "dump/context",
                "run": "echo \"$GITHUB_CONTEXT\""
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "olafurpg/setup-gpg@v3"
            },
            {
                "id": 6,
                "name": "setup/gpg",
                "run": "${{ github.workspace }}/bin/gpg-init"
            },
            {
                "id": 7,
                "name": "setup/maven",
                "run": "whelk-io/maven-settings-xml-action@v14"
            },
            {
                "id": 8,
                "name": "setup/sbt",
                "run": "cp -r ${{ github.workspace }}/bin/.sbt ~/.sbt\n"
            },
            {
                "id": 9,
                "name": "checkout/util",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 10,
                "name": "release/util",
                "run": "${{ github.workspace }}/bin/publish --snapshot --dry-run $DRY_RUN --verbose util\n"
            },
            {
                "id": 11,
                "name": "checkout/scrooge",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 12,
                "name": "release/scrooge",
                "run": "${{ github.workspace }}/bin/publish --snapshot --dry-run $DRY_RUN --verbose scrooge\n"
            },
            {
                "id": 13,
                "name": "release/scrooge-sbt-plugin",
                "run": "${{ github.workspace }}/bin/publish --snapshot --dry-run $DRY_RUN --verbose scrooge-sbt-plugin\n"
            },
            {
                "id": 14,
                "name": "release/scrooge-maven-plugin",
                "run": "${{ github.workspace }}/bin/publish --snapshot --dry-run $DRY_RUN --verbose scrooge-maven-plugin\n"
            },
            {
                "id": 15,
                "name": "clean-up/scrooge-maven-plugin",
                "run": "curl -X DELETE -s -o /dev/null -w \"%{http_code}\" -u ${SONATYPE_USERNAME}:${SONATYPE_PASSWORD} https://oss.sonatype.org/content/repositories/snapshots/com/twitter/maven-metadata.xml\ncurl -X DELETE -s -o /dev/null -w \"%{http_code}\" -u ${SONATYPE_USERNAME}:${SONATYPE_PASSWORD} https://oss.sonatype.org/content/repositories/snapshots/com/twitter/maven-metadata.xml.md5\ncurl -X DELETE -s -o /dev/null -w \"%{http_code}\" -u ${SONATYPE_USERNAME}:${SONATYPE_PASSWORD} https://oss.sonatype.org/content/repositories/snapshots/com/twitter/maven-metadata.xml.sha1\n"
            },
            {
                "id": 16,
                "name": "checkout/finagle",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 17,
                "name": "release/finagle",
                "run": "${{ github.workspace }}/bin/publish --snapshot --dry-run $DRY_RUN --verbose finagle\n"
            },
            {
                "id": 18,
                "name": "checkout/twitter-server",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 19,
                "name": "release/twitter-server",
                "run": "${{ github.workspace }}/bin/publish --snapshot --dry-run $DRY_RUN --verbose twitter-server\n"
            },
            {
                "id": 20,
                "name": "checkout/finatra",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 21,
                "name": "release/finatra",
                "run": "${{ github.workspace }}/bin/publish --snapshot --dry-run $DRY_RUN --verbose finatra\n"
            },
            {
                "id": 22,
                "name": "slack/notification-failure",
                "run": "${{ github.workspace }}/bin/slack --verbose --denote-dry-run $DRY_RUN --message \"\ud83d\udcf8 Snapshot publishing \\`failed\\`.\" --color \"#DA2700\""
            },
            {
                "id": 23,
                "name": "slack/notification-success",
                "run": "${{ github.workspace }}/bin/slack --verbose --denote-dry-run $DRY_RUN --message \"\ud83d\udcf8 Snapshot publishing \\`successful\\`.\" --color \"#229954\""
            },
            {
                "id": 1,
                "name": "dump/context",
                "run": "echo \"$GITHUB_CONTEXT\""
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "olafurpg/setup-gpg@v3"
            },
            {
                "id": 6,
                "name": "setup/gpg",
                "run": "${{ github.workspace }}/bin/gpg-init"
            },
            {
                "id": 7,
                "name": "setup/maven",
                "run": "whelk-io/maven-settings-xml-action@v14"
            },
            {
                "id": 8,
                "name": "setup/sbt",
                "run": "cp -r ${{ github.workspace }}/bin/.sbt ~/.sbt\n"
            },
            {
                "id": 9,
                "name": "checkout/util",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 10,
                "name": "release/util",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }} --dry-run ${{ github.event.client_payload.dry_run }} --verbose util\n"
            },
            {
                "id": 11,
                "name": "checkout/scrooge",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 12,
                "name": "release/scrooge",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }} --dry-run ${{ github.event.client_payload.dry_run }} --verbose scrooge\n"
            },
            {
                "id": 13,
                "name": "release/scrooge-sbt-plugin",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }} --dry-run ${{ github.event.client_payload.dry_run }} --verbose scrooge-sbt-plugin\n"
            },
            {
                "id": 14,
                "name": "release/scrooge-maven-plugin",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }} --dry-run ${{ github.event.client_payload.dry_run }} --verbose scrooge-maven-plugin\n"
            },
            {
                "id": 15,
                "name": "checkout/finagle",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 16,
                "name": "release/finagle",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }} --dry-run ${{ github.event.client_payload.dry_run }} --verbose finagle\n"
            },
            {
                "id": 17,
                "name": "checkout/twitter-server",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 18,
                "name": "release/twitter-server",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }} --dry-run ${{ github.event.client_payload.dry_run }} --verbose twitter-server\n"
            },
            {
                "id": 19,
                "name": "checkout/finatra",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 20,
                "name": "release/finatra",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }} --dry-run ${{ github.event.client_payload.dry_run }} --verbose finatra\n"
            },
            {
                "id": 21,
                "name": "slack/notification-failure",
                "run": "${{ github.workspace }}/bin/slack --verbose --denote-dry-run ${{ github.event.client_payload.dry_run }} --message \"\ud83d\udc23 Versioned release \\`failed\\`.\" --color \"#DA2700\""
            },
            {
                "id": 22,
                "name": "slack/notification-success",
                "run": "${{ github.workspace }}/bin/slack --verbose --denote-dry-run ${{ github.event.client_payload.dry_run }} --message \"\ud83d\udc23 Versioned release \\`successful\\`.\" --color \"#229954\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "olafurpg/setup-gpg@v3"
            },
            {
                "id": 5,
                "name": "setup/gpg-secret",
                "run": "${{ github.workspace }}/bin/gpg-init"
            },
            {
                "id": 6,
                "name": "setup/maven",
                "run": "whelk-io/maven-settings-xml-action@v14"
            },
            {
                "id": 7,
                "name": "checkout/util",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 8,
                "name": "merge/util",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose util\n"
            },
            {
                "id": 9,
                "name": "checkout/finagle",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 10,
                "name": "merge/finagle",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose finagle\n"
            },
            {
                "id": 11,
                "name": "dodo/build",
                "run": "twitter/dodo-build@v3"
            },
            {
                "id": 12,
                "name": "checkout/scrooge",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 13,
                "name": "release/scrooge-maven-plugin",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose scrooge-maven-plugin\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "olafurpg/setup-gpg@v3"
            },
            {
                "id": 5,
                "name": "setup/gpg-secret",
                "run": "${{ github.workspace }}/bin/gpg-init"
            },
            {
                "id": 6,
                "name": "setup/sbt",
                "run": "cp -r ${{ github.workspace }}/bin/.sbt ~/.sbt\n"
            },
            {
                "id": 7,
                "name": "checkout/util",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 8,
                "name": "merge/util",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose util\n"
            },
            {
                "id": 9,
                "name": "checkout/finagle",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 10,
                "name": "merge/finagle",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose finagle\n"
            },
            {
                "id": 11,
                "name": "dodo/build",
                "run": "twitter/dodo-build@v3"
            },
            {
                "id": 12,
                "name": "checkout/scrooge",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 13,
                "name": "release/scrooge-sbt-plugin",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose scrooge-sbt-plugin\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "olafurpg/setup-gpg@v3"
            },
            {
                "id": 5,
                "name": "setup/gpg-secret",
                "run": "${{ github.workspace }}/bin/gpg-init"
            },
            {
                "id": 6,
                "name": "setup/sbt",
                "run": "cp -r ${{ github.workspace }}/bin/.sbt ~/.sbt\n"
            },
            {
                "id": 7,
                "name": "checkout/util",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 8,
                "name": "merge/util",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose util\n"
            },
            {
                "id": 9,
                "name": "checkout/finagle",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 10,
                "name": "merge/finagle",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose finagle\n"
            },
            {
                "id": 11,
                "name": "dodo/build",
                "run": "twitter/dodo-build@v3"
            },
            {
                "id": 12,
                "name": "checkout/scrooge",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 13,
                "name": "release/scrooge",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose scrooge\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "olafurpg/setup-gpg@v3"
            },
            {
                "id": 5,
                "name": "setup/gpg-secret",
                "run": "${{ github.workspace }}/bin/gpg-init"
            },
            {
                "id": 6,
                "name": "setup/sbt",
                "run": "cp -r ${{ github.workspace }}/bin/.sbt ~/.sbt\n"
            },
            {
                "id": 7,
                "name": "checkout/util",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 8,
                "name": "merge/util",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose util\n"
            },
            {
                "id": 9,
                "name": "checkout/scrooge",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 10,
                "name": "merge/scrooge",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose scrooge\n"
            },
            {
                "id": 11,
                "name": "checkout/finagle",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 12,
                "name": "merge/finagle",
                "run": "${{ github.workspace }}/bin/merge --phab-id ${{ github.event.client_payload.phab_id }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose finagle\n"
            },
            {
                "id": 13,
                "name": "dodo/build",
                "run": "twitter/dodo-build@v3"
            },
            {
                "id": 14,
                "name": "checkout/twitter-server",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 15,
                "name": "release/twitter-server",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose twitter-server\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "olafurpg/setup-gpg@v3"
            },
            {
                "id": 5,
                "name": "setup/gpg-secret",
                "run": "${{ github.workspace }}/bin/gpg-init"
            },
            {
                "id": 6,
                "name": "setup/sbt",
                "run": "cp -r ${{ github.workspace }}/bin/.sbt ~/.sbt\n"
            },
            {
                "id": 7,
                "name": "checkout/util",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 8,
                "name": "release/util",
                "run": "${{ github.workspace }}/bin/publish --phab-id ${{ github.event.client_payload.phab_id }} --version ${{ github.event.client_payload.version }}  --dry-run ${{ github.event.client_payload.dry_run }} --verbose util\n"
            }
        ],
        "twitter/metrics": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "cache pip",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./update.sh"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "git config user.name 'GitHub Actions'\ngit config user.email 'actions@users.noreply.github.com'\ngit add -A\ntimestamp=$(date -u)\ngit commit -m \"update data: ${timestamp}\" || exit 0\ngit push\n"
            }
        ],
        "twitter/rezolus": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "BCC Build Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Run CI",
                "run": "bash -e build/ci.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "BCC Build Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Run CI",
                "run": "bash -e build/ci.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "BCC Build Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Run CI",
                "run": "bash -e build/ci.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "BCC Build Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Run CI",
                "run": "bash -e build/ci.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "BCC Build Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Run CI",
                "run": "bash -e build/ci.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "BCC Build Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Run CI",
                "run": "bash -e build/ci.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "BCC Build Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Run CI",
                "run": "bash -e build/ci.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "BCC Build Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Run CI",
                "run": "bash -e build/ci.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "BCC Build Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Run CI",
                "run": "bash -e build/ci.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "BCC Build Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Run CI",
                "run": "bash -e build/ci.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "bash build/ci.sh"
            },
            {
                "id": 4,
                "name": "Smoketest",
                "run": "target/release/rezolus --config configs/memcache.toml & sleep 180; curl -s http://localhost:4242/vars"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "cargo build --release"
            },
            {
                "id": 4,
                "name": "Smoketest",
                "run": "target/release/rezolus --config configs/macos.toml & sleep 180; curl -s http://localhost:4242/vars"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 3,
                "name": "install rust musl toolchain",
                "run": "rustup target add x86_64-unknown-linux-musl"
            },
            {
                "id": 4,
                "name": "update apt",
                "run": "sudo apt-get update"
            },
            {
                "id": 5,
                "name": "install musl-tools",
                "run": "sudo apt-get install -y musl-tools"
            },
            {
                "id": 6,
                "name": "build",
                "run": "cargo build --release --target x86_64-unknown-linux-musl"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "install rustfmt",
                "run": "rustup component add rustfmt"
            },
            {
                "id": 3,
                "name": "rustfmt",
                "run": "cargo fmt -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "install clippy",
                "run": "rustup component add clippy"
            },
            {
                "id": 3,
                "name": "clippy",
                "run": "cargo clippy || cargo clippy"
            }
        ],
        "twitter/rustcommon": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Update cargo flags",
                "run": "echo 'CARGO_FLAGS=--release' >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Update cargo flags",
                "run": "echo 'CARGO_FLAGS=' >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 6,
                "name": "build",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 7,
                "name": "test",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 8,
                "name": "doctests",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/clippy-check@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/audit-check@v1"
            }
        ],
        "twitter/dict_minimize": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.pythonversion }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install -r requirements/base.txt\npip install -r requirements/frameworks.txt\npip install -r requirements/tests.txt\npip install -r requirements/tools.txt\npip install -e .[test]\n"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "pre-commit run --all-files\n"
            },
            {
                "id": 5,
                "name": "Test with pytest",
                "run": "pytest tests/ -s -v --disable-pytest-warnings --hypothesis-seed=0\n"
            }
        ],
        "twitter/bazel-multiversion": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 3,
                "name": "Coursier cache",
                "run": "coursier/cache-action@v5"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn global add @bazel/bazelisk"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "arduino/setup-protoc@v1"
            },
            {
                "id": 6,
                "name": "multiversion-example",
                "run": "scripts/ci-test.sh"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "sbt test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 3,
                "name": "Coursier cache",
                "run": "coursier/cache-action@v5"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "arduino/setup-protoc@v1"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "sbt -v -Dfile.encoding=UTF8 nativeImage\nchmod +x multiversion/target/native-image/multiversion\n"
            },
            {
                "id": 6,
                "name": "Archive native image artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "olafurpg/setup-scala@v10"
            },
            {
                "id": 3,
                "name": "Coursier cache",
                "run": "coursier/cache-action@v5"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn global add @bazel/bazelisk"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "arduino/setup-protoc@v1"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "sbt scalafmtCheckAll"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "sbt 'scalafixAll --check'"
            }
        ],
        "twitter/TwitterTextEditor": [
            {
                "id": 1,
                "name": "Use Xcode 14.2",
                "run": "sudo xcode-select -s /Applications/Xcode_14.2.app/Contents/Developer\n"
            },
            {
                "id": 2,
                "name": "Current platform versions",
                "run": "sw_vers\nxcodebuild -version\nswift --version\nswiftlint version\n"
            },
            {
                "id": 3,
                "name": "Checkout default branch",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Run lint",
                "run": "make lint\n"
            },
            {
                "id": 5,
                "name": "Run test",
                "run": "make test\n"
            },
            {
                "id": 6,
                "name": "Run doc",
                "run": "make doc\n"
            },
            {
                "id": 1,
                "name": "Use Xcode 14.2",
                "run": "sudo xcode-select -s /Applications/Xcode_14.2.app/Contents/Developer\n"
            },
            {
                "id": 2,
                "name": "Show versions",
                "run": "sw_vers\nxcodebuild -version\nswift --version\n"
            },
            {
                "id": 3,
                "name": "Checkout default branch",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Checkout gh-pages branch",
                "run": "actions/checkout@v2"
            },
            {
                "id": 5,
                "name": "Update GitHub Pages",
                "run": "make ghpages\n"
            },
            {
                "id": 6,
                "name": "Commit changes",
                "run": "cd ${GITHUB_WORKSPACE}/.gh-pages\ngit config user.name github-actions\ngit config user.email github-actions@github.com\ngit add .\nif git commit -m \"Update.\"; then\n  git push\nfi\n"
            }
        ],
        "twitter/ios-twitter-apache-thrift": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "SwiftPM Build",
                "run": "swift test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "xcodebuild",
                "run": "xcodebuild \\\n  -scheme \"TwitterApacheThrift\" \\\n  -destination \"platform=iOS Simulator,OS=latest,name=iPhone 11 Pro Max\" \\\n  -quiet \\\n  build test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "SwiftPM Build",
                "run": "swift test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "SwiftPM Build",
                "run": "swift test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "xcodebuild",
                "run": "xcodebuild \\\n  -scheme \"TwitterApacheThrift\" \\\n  -destination \"platform=iOS Simulator,OS=latest,name=iPhone 11 Pro Max\" \\\n  -quiet \\\n  build test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@main"
            },
            {
                "id": 2,
                "name": "SwiftPM Build",
                "run": "swift test"
            }
        ],
        "twitter/check-my-repo": [
            {
                "id": 1,
                "name": "Gives access to repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Node version",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Generate frontend data",
                "run": "node src/index.js"
            },
            {
                "id": 5,
                "name": "Install Frontend",
                "run": "cd frontend && npm install"
            },
            {
                "id": 6,
                "name": "Build Vue",
                "run": "cd frontend && npm run build"
            },
            {
                "id": 7,
                "name": "Deploy Vue Site",
                "run": "peaceiris/actions-gh-pages@v3"
            },
            {
                "id": 1,
                "name": "Gives access to repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Node version",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Generate frontend data",
                "run": "node src/index.js"
            },
            {
                "id": 5,
                "name": "Generate Artifact",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 6,
                "name": "Install Frontend",
                "run": "cd frontend && npm install"
            },
            {
                "id": 7,
                "name": "Build Vue",
                "run": "cd frontend && npm run build"
            },
            {
                "id": 8,
                "name": "Deploy Vue Site",
                "run": "peaceiris/actions-gh-pages@v3"
            },
            {
                "id": 1,
                "name": "Setup Node version",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 2,
                "name": "Clone Repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "npm test"
            }
        ],
        "twitter/communitynotes": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Redirects",
                "run": "actions/configure-pages@v3"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-pages-artifact@v1"
            },
            {
                "id": 4,
                "name": "Deploy Redirects",
                "run": "actions/deploy-pages@v1"
            }
        ],
        "twitter/dodo-build": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "npm install\nnpm run all"
            }
        ],
        "twitter/focus": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install `addlicense`",
                "run": "go install github.com/google/addlicense@latest"
            },
            {
                "id": 3,
                "name": "Check licensing",
                "run": "git diff || (echo \"Working copy should be clean\" && exit 1)\n./scripts/add-license.sh\nif ! git diff --quiet; then\n  git diff --name-only | awk '{ print \"::error file=\" $1 \"::File requires license (run `scripts/add-license.sh`)\" }'\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Cache dependencies",
                "run": "Swatinem/rust-cache@cb2cf0cc7c5198d3364b9630e2c3d457f160790c"
            },
            {
                "id": 4,
                "name": "Run `cargo fmt`",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 5,
                "name": "Run `cargo clippy`",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Cache dependencies",
                "run": "Swatinem/rust-cache@cb2cf0cc7c5198d3364b9630e2c3d457f160790c"
            },
            {
                "id": 4,
                "name": "Compile",
                "run": "cargo build --features ci --all-targets --workspace"
            },
            {
                "id": 5,
                "name": "Run Rust tests",
                "run": "cargo test --features ci --examples --tests --workspace"
            },
            {
                "id": 6,
                "name": "Run Rust doc-tests",
                "run": "cargo test --features ci --doc --workspace"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "cargo build --release --locked"
            },
            {
                "id": 3,
                "name": "Tar Build",
                "run": "mkdir release\npushd release\nmkdir bin\ncp ../target/release/focus bin/focus\ntar jcf ../${{ matrix.artifact_name }} .\npopd\n"
            },
            {
                "id": 4,
                "name": "Upload binaries to release",
                "run": "svenstaro/upload-release-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Cache dependencies",
                "run": "Swatinem/rust-cache@cb2cf0cc7c5198d3364b9630e2c3d457f160790c"
            },
            {
                "id": 4,
                "name": "Compile (but don't test) `twttr` feature",
                "run": "cargo build --features ci,twttr --all-targets --workspace"
            }
        ],
        "twitter/the-algorithm-ml": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "install packages",
                "run": "/usr/bin/python -m pip install --upgrade pip\npip install --no-deps -r images/requirements.txt\n# - name: ssh access\n#   uses: lhotari/action-upterm@v1\n#   with:\n#     limit-access-to-actor: true\n#     limit-access-to-users: arashd\n"
            },
            {
                "id": 4,
                "name": "run tests",
                "run": "# Environment variables are reset in between steps.\nmkdir /tmp/github_testing\nln -s $GITHUB_WORKSPACE /tmp/github_testing/tml\nexport PYTHONPATH=\"/tmp/github_testing:$PYTHONPATH\"\npytest -vv\n"
            }
        ]
    },
    "android": {
        "android/testing-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set Up JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build project and run screenshot tests",
                "run": "./gradlew validateDebugScreenshotTest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gradle/wrapper-validation-action@v1"
            }
        ],
        "android/location-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/performance-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dorny/paths-filter@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build Macrobenchmark Sample",
                "run": "eskatos/gradle-command-action@v1"
            },
            {
                "id": 4,
                "name": "Authenticate Cloud SDK",
                "run": "google-github-actions/auth@v0"
            },
            {
                "id": 5,
                "name": "Set up Cloud SDK",
                "run": "google-github-actions/setup-gcloud@v0"
            },
            {
                "id": 6,
                "name": "Install Cloud SDK Beta components",
                "run": "gcloud components install beta"
            },
            {
                "id": 7,
                "name": "Run Macro Benchmarks",
                "run": "gcloud beta firebase test android run \\\n  --type instrumentation \\\n  --app ${{ github.workspace }}/MacrobenchmarkSample/app/build/outputs/apk/benchmark/app-benchmark.apk \\\n  --test ${{ github.workspace }}/MacrobenchmarkSample/macrobenchmark/build/outputs/apk/benchmark/macrobenchmark-benchmark.apk \\\n  --device model=redfin,version=30,locale=en,orientation=portrait \\\n  --directories-to-pull /sdcard/Download \\\n  --results-bucket gs://macrobenchmark-results \\\n  --environment-variables clearPackageData=true,additionalTestOutputDir=/sdcard/Download,no-isolated-storage=true,androidx.benchmark.enabledRules=Macrobenchmark \\\n  --num-uniform-shards 3 \\\n  --timeout 30m\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dorny/paths-filter@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Setup Gradle",
                "run": "gradle/gradle-build-action@v2"
            },
            {
                "id": 4,
                "name": "Copy CI gradle.properties",
                "run": "mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties"
            },
            {
                "id": 5,
                "name": "Clean GMD",
                "run": "./gradlew cleanManagedDevices --unused-only"
            },
            {
                "id": 6,
                "name": "Build production app",
                "run": "./gradlew assembleRelease -Pandroid.testInstrumentationRunnerArguments.androidx.benchmark.enabledRules=BaselineProfile -Pandroid.testoptions.manageddevices.emulator.gpu=\"swiftshader_indirect\" -Pandroid.experimental.testOptions.managedDevices.emulator.showKernelLogging=true -Pandroid.experimental.androidTest.numManagedDeviceShards=1 -Pandroid.experimental.testOptions.managedDevices.maxConcurrentDevices=1"
            },
            {
                "id": 7,
                "name": "Upload app with Baseline Profile",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dorny/paths-filter@v2"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Setup Gradle",
                "run": "gradle/gradle-build-action@v2"
            },
            {
                "id": 4,
                "name": "Build Macrobenchmark Sample",
                "run": "./gradlew assemble \\\n  -x :macrobenchmark:pixel6Api31NonMinifiedReleaseAndroidTest \\\n  -x :macrobenchmark:collectNonMinifiedReleaseBaselineProfile \\\n  -Pandroidx.benchmark.enabledRules=BaselineProfile \\\n  -Pandroid.testoptions.manageddevices.emulator.gpu=\"swiftshader_indirect\" \\\n  -Pandroid.experimental.testOptions.managedDevices.setupTimeoutMinutes=180 \\\n  -Pandroid.experimental.androidTest.numManagedDeviceShards=1 \\\n  -Pandroid.experimental.testOptions.managedDevices.maxConcurrentDevices=1\n"
            }
        ],
        "android/uamp": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "set up JDK 1.8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 4,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 5,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/ndk-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "set up JDK 1.8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "setup env",
                "run": "source .ci_tools/setup_env.sh"
            },
            {
                "id": 4,
                "name": "build samples",
                "run": "export SAMPLE_CI_RESULT=0\nsource .ci_tools/build_samples.sh\nsource .ci_tools/run_samples.sh\neval \"[[ $SAMPLE_CI_RESULT == 0 ]]\"\n"
            }
        ],
        "android/android-test": [
            {
                "id": 1,
                "name": "Check out repository code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Java 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Cache Bazel files",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Build maven artifacts",
                "run": "bazelisk build //:axt_m2repository"
            },
            {
                "id": 5,
                "name": "cp to upload dir",
                "run": "mkdir -p ~/download\ncp bazel-bin/axt_m2repository.zip ~/download\n"
            },
            {
                "id": 6,
                "name": "Upload local snapshot for tests",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Clean bazel cache",
                "run": "rm -rf $(bazel info repository_cache)\nrm -rf ~/.cache/bazel/*/*/external/\n"
            },
            {
                "id": 1,
                "name": "Check out repository code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Java 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Cache Bazel files",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Run Robolectric tests and fast tagged tests",
                "run": "bazelisk test --test_tag_filters=robolectric,fast --build_tag_filters=robolectric,fast --test_output=all ..."
            },
            {
                "id": 5,
                "name": "Clean bazel cache",
                "run": "rm -rf $(bazel info repository_cache)\nrm -rf ~/.cache/bazel/*/*/external/\n"
            },
            {
                "id": 1,
                "name": "Check out repository code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Java 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Gradle wrapper validation",
                "run": "gradle/wrapper-validation-action@v2"
            },
            {
                "id": 4,
                "name": "Enable KVM group perms",
                "run": "echo 'KERNEL==\"kvm\", GROUP=\"kvm\", MODE=\"0666\", OPTIONS+=\"static_node=kvm\"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules\nsudo udevadm control --reload-rules\nsudo udevadm trigger --name-match=kvm       \n"
            },
            {
                "id": 5,
                "name": "Cache Gradle files",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 6,
                "name": "Download local snapshot for tests",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 7,
                "name": "Install to local maven repo",
                "run": "mkdir -p ~/.m2\nunzip ~/download/axt_m2repository.zip -d ~/.m2/\n"
            },
            {
                "id": 8,
                "name": "Setup Android SDK",
                "run": "android-actions/setup-android@v3"
            },
            {
                "id": 9,
                "name": "Run gradle tests",
                "run": "cd ${{ github.workspace }}/gradle-tests\n./gradlew nexusOneDebugAndroidTest -Pandroid.testoptions.manageddevices.emulator.gpu=\"swiftshader_indirect\" --no-watch-fs --stacktrace\n"
            },
            {
                "id": 10,
                "name": "Upload test reports",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "android/play-billing-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/architecture-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/codelab-constraint-layout": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build and check",
                "run": "./gradlew assembleDebug assembleDebugAndroidTest testDebug"
            },
            {
                "id": 4,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 5,
                "name": "Copy test results",
                "run": "mkdir -p junit\nfind . -type f -regex \".*/build/test-results/.*xml\" -exec cp {} junit/ \\;\n"
            },
            {
                "id": 6,
                "name": "Upload test results",
                "run": "actions/upload-artifact@v1"
            }
        ],
        "android/architecture-components-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/codelab-android-lifecycles": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "set up JDK 1.8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew build"
            }
        ],
        "android/android-studio-poet": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up JDK 11",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "eskatos/gradle-command-action@v1"
            }
        ],
        "android/codelab-android-room-with-a-view": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "set up JDK 1.8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build and check",
                "run": "./gradlew assembleDebug assembleDebugAndroidTest app:lintDebug testDebug"
            },
            {
                "id": 4,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 5,
                "name": "Copy test results",
                "run": "mkdir -p junit\nfind . -type f -regex \".*/build/test-results/.*xml\" -exec cp {} junit/ \\;\n"
            },
            {
                "id": 6,
                "name": "Upload test results",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 7,
                "name": "Upload app APK",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 8,
                "name": "Upload Android Test APK",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Download app APK",
                "run": "actions/download-artifact@v1"
            },
            {
                "id": 3,
                "name": "Download Android test APK",
                "run": "actions/download-artifact@v1"
            },
            {
                "id": 4,
                "name": "Login to Google Cloud",
                "run": "GoogleCloudPlatform/github-actions/setup-gcloud@master"
            },
            {
                "id": 5,
                "name": "Set current project",
                "run": "gcloud config set project ${{ secrets.FIREBASE_PROJECT_ID }}"
            },
            {
                "id": 6,
                "name": "Run Instrumentation Tests in Firebase Test Lab",
                "run": "gcloud firebase test android run --type instrumentation --app app-debug/app-debug.apk --test app-debug-androidTest/app-debug-androidTest.apk --device model=Pixel2,version=28,locale=pl,orientation=portrait"
            }
        ],
        "android/databinding-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/sunflower": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 4,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 5,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Copy CI gradle.properties",
                "run": "mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties"
            },
            {
                "id": 3,
                "name": "set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 4,
                "name": "Update dependencies",
                "run": "./gradlew versionCatalogUpdate"
            },
            {
                "id": 5,
                "name": "Create pull request",
                "run": "peter-evans/create-pull-request@v4"
            }
        ],
        "android/snippets": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "set up Java 11",
                "run": "actions/setup-java@v2"
            },
            {
                "id": 3,
                "name": "Set up JDK 11",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 4,
                "name": "Build Compose",
                "run": "./gradlew :compose:build"
            }
        ],
        "android/codelab-kotlin-coroutines": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build and check all modules",
                "run": "./gradlew assembleDebug assembleDebugAndroidTest start:lintDebug finished_code:lintDebug testDebug"
            },
            {
                "id": 4,
                "name": "Copy test results",
                "run": "mkdir -p junit\nfind . -type f -regex \".*/build/test-results/.*xml\" -exec cp {} junit/ \\;\n"
            },
            {
                "id": 5,
                "name": "Upload test results",
                "run": "actions/upload-artifact@v1"
            }
        ],
        "android/storage-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 4,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 5,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/codelab-android-direct-share": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build and check all modules",
                "run": "./gradlew assembleDebug assembleDebugAndroidTest lintDebug testDebug"
            },
            {
                "id": 4,
                "name": "Upload build reports (direct-share-start)",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 5,
                "name": "Upload build reports (direct-share-done)",
                "run": "actions/upload-artifact@v1"
            }
        ],
        "android/camera-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v2"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 4,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 5,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/wear-os-samples": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": "./scripts/checksum.sh $SAMPLE_PATH checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Build project",
                "run": "./gradlew check --stacktrace"
            },
            {
                "id": 6,
                "name": "Upload build outputs (APKs)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": "./scripts/checksum.sh $SAMPLE_PATH checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Build project",
                "run": "./gradlew check --stacktrace"
            },
            {
                "id": 6,
                "name": "Upload build outputs (APKs)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": "./scripts/checksum.sh $SAMPLE_PATH checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Build project",
                "run": "./gradlew app:assembleRelease"
            },
            {
                "id": 6,
                "name": "Upload APK",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": "./scripts/checksum.sh $SAMPLE_PATH checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Build project",
                "run": "./gradlew check --stacktrace"
            },
            {
                "id": 6,
                "name": "Upload build outputs (APKs)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": "./scripts/checksum.sh $SAMPLE_PATH checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Build project",
                "run": "./gradlew app:assembleRelease"
            },
            {
                "id": 6,
                "name": "Upload APK",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": "./scripts/checksum.sh $SAMPLE_PATH checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Build project",
                "run": "./gradlew check --stacktrace"
            },
            {
                "id": 6,
                "name": "Upload build outputs (APKs)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": "./scripts/checksum.sh $SAMPLE_PATH checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Build project",
                "run": "./gradlew check --stacktrace"
            },
            {
                "id": 6,
                "name": "Upload build outputs (APKs)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": "./scripts/checksum.sh $SAMPLE_PATH checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Build project",
                "run": "./gradlew check --stacktrace"
            },
            {
                "id": 6,
                "name": "Upload build outputs (APKs)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": "./scripts/checksum.sh $SAMPLE_PATH checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Build project",
                "run": "./gradlew wear:assembleRelease"
            },
            {
                "id": 6,
                "name": "Upload APK",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Setup Gradle",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 4,
                "name": "Build project",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 5,
                "name": "Upload build outputs (APKs)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 6,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/tv-samples": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": "./scripts/checksum.sh ${{ inputs.path }} checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Build debug",
                "run": "./gradlew assembleDebug --stacktrace"
            },
            {
                "id": 6,
                "name": "Build release",
                "run": "./gradlew assembleRelease --stacktrace"
            },
            {
                "id": 7,
                "name": "Upload build outputs (APKs)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 8,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": "./scripts/checksum.sh ${{ inputs.path }} checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v4"
            },
            {
                "id": 5,
                "name": "Check formatting",
                "run": "./gradlew --init-script buildscripts/init.gradle.kts spotlessCheck --stacktrace"
            },
            {
                "id": 6,
                "name": "Check lint",
                "run": "./gradlew lintDebug --stacktrace"
            },
            {
                "id": 7,
                "name": "Build debug",
                "run": "./gradlew assembleDebug --stacktrace"
            },
            {
                "id": 8,
                "name": "Build release",
                "run": "./gradlew assembleRelease --stacktrace"
            },
            {
                "id": 9,
                "name": "Run local tests",
                "run": "./gradlew testDebug --stacktrace"
            },
            {
                "id": 10,
                "name": "Upload build outputs (APKs)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 11,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "android/security-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/renderscript-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/animation-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 4,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 5,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/graphics-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": ".github/scripts/checksum.sh checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 6,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 7,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/enterprise-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 4,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 5,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/fit-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/identity-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/user-interface-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "set up JDK 17",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Generate cache key",
                "run": ".github/scripts/checksum.sh checksum.txt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 6,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 7,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/input-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/connectivity-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "set up JDK 1.8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 4,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 5,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/views-widgets-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/app-bundle-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/media-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "set up JDK 1.8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 4,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 5,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/permissions-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "set up JDK 1.8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 4,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 5,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/compose-samples": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Copy CI gradle.properties",
                "run": "mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties"
            },
            {
                "id": 3,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Build all projects",
                "run": "./scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 5,
                "name": "Create Release",
                "run": "actions/create-release@v4"
            },
            {
                "id": 6,
                "name": "Upload Crane",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 7,
                "name": "Upload Owl",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 8,
                "name": "Upload Jetcaster",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 9,
                "name": "Upload Jetchat",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 10,
                "name": "Upload Jetnews",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 11,
                "name": "Upload Jetsnack",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 12,
                "name": "Upload Jetsurvey",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Copy CI gradle.properties",
                "run": "mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties"
            },
            {
                "id": 3,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Generate cache key",
                "run": "./scripts/checksum.sh ${{ inputs.path }} checksum.txt"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/cache@v4"
            },
            {
                "id": 6,
                "name": "Check formatting",
                "run": "./gradlew --init-script buildscripts/init.gradle.kts spotlessCheck --stacktrace"
            },
            {
                "id": 7,
                "name": "Check lint",
                "run": "./gradlew lintDebug --stacktrace"
            },
            {
                "id": 8,
                "name": "Build debug",
                "run": "./gradlew assembleDebug --stacktrace"
            },
            {
                "id": 9,
                "name": "Run local tests",
                "run": "./gradlew testDebug --stacktrace"
            },
            {
                "id": 10,
                "name": "Upload build outputs (APKs)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 11,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set up Java 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Apply spotless formatting",
                "run": "./scripts/format.sh"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "stefanzweifel/git-auto-commit-action@v5"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Copy CI gradle.properties",
                "run": "mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties"
            },
            {
                "id": 3,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Check snapshot",
                "run": "./scripts/test_snapshot.sh $CI_COMPOSE_VERSION $CI_COMPOSE_SNAPSHOT"
            },
            {
                "id": 5,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Copy CI gradle.properties",
                "run": "mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties"
            },
            {
                "id": 3,
                "name": "set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Update dependencies",
                "run": "./scripts/updateDeps.sh"
            },
            {
                "id": 5,
                "name": "Duplicate version configuration",
                "run": "./scripts/duplicate_version_config.sh"
            },
            {
                "id": 6,
                "name": "Create pull request",
                "run": "peter-evans/create-pull-request@v6"
            }
        ],
        "android/project-replicator": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Validate Gradle Wrapper",
                "run": "gradle/wrapper-validation-action@v1"
            },
            {
                "id": 3,
                "name": "Setup JDK 11",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 4,
                "name": "run checks",
                "run": "./gradlew check --stacktrace"
            },
            {
                "id": 5,
                "name": "Archive test logs",
                "run": "actions/upload-artifact@v2"
            }
        ],
        "android/codelab-android-datastore": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v2"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew build"
            }
        ],
        "android/car-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ],
        "android/android-dev-challenge-compose": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Prevent changes in test/",
                "run": "xalvarez/prevent-file-change-action@v1"
            },
            {
                "id": 4,
                "name": "Grant execute permission for gradlew",
                "run": "chmod +x gradlew"
            },
            {
                "id": 5,
                "name": "Run local tests",
                "run": "./gradlew testDebug --stacktrace"
            },
            {
                "id": 6,
                "name": "Upload build outputs (APKs)",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 7,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v3"
            }
        ],
        "android/trackr": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Prepare script",
                "run": "chmod +x .github/scripts/gradlew_recursive.sh"
            },
            {
                "id": 4,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 5,
                "name": "Test project",
                "run": ".github/scripts/gradlew_recursive.sh testDebug"
            },
            {
                "id": 6,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 7,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            }
        ],
        "android/health-samples": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Unit Tests",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 4,
                "name": "Upload test results and reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Unit Tests",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 4,
                "name": "Upload test results and reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Unit Tests",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 4,
                "name": "Upload test results and reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Unit Tests",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 4,
                "name": "Upload test results and reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Unit Tests",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 4,
                "name": "Upload test results and reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Unit Tests",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 4,
                "name": "Upload test results and reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Unit Tests",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 4,
                "name": "Upload test results and reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Unit Tests",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 4,
                "name": "Upload test results and reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Unit Tests",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 4,
                "name": "Upload test results and reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Unit Tests",
                "run": "gradle/gradle-build-action@v3"
            },
            {
                "id": 4,
                "name": "Upload test results and reports",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "android/cose-lib": [
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@248ae51c2e8cc9622ecf50685c8bf7150c6e8813"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b"
            },
            {
                "id": 3,
                "name": "set up JDK 11",
                "run": "actions/setup-java@860f60056505705214d223b91ed7a30f173f6142"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "mvn package --file pom.xml -DskipTests"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "mvn test --file pom.xml -X"
            }
        ],
        "android/codelab-handling-back-navigation": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "set up JDK 11",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build project",
                "run": ".github/scripts/gradlew_recursive.sh assembleDebug"
            },
            {
                "id": 4,
                "name": "Zip artifacts",
                "run": "zip -r assemble.zip . -i '**/build/*.apk' '**/build/*.aab' '**/build/*.aar' '**/build/*.so'"
            },
            {
                "id": 5,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit merge origin/main\ngit push\n"
            }
        ]
    },
    "nodejs": {
        "nodejs/node-gyp": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "google-github-actions/release-please-action@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pip install --user ruff"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "ruff --output-format=github --select=\"E,F,PLC,PLE,UP,W,YTT\" --ignore=\"E721,PLC1901,S101,UP031\" --target-version=py38 ."
            },
            {
                "id": 1,
                "name": "Checkout Repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js 20.x",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "npm run lint"
            },
            {
                "id": 1,
                "name": "Checkout Repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js 20.x",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Check Engines",
                "run": "# TODO: move this to its own action\nnpm install @npmcli/arborist@7 semver@7 --no-save\nnode .github/scripts/check-engines.js\n"
            },
            {
                "id": 1,
                "name": "Checkout Repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js 20.x",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Update npm",
                "run": "npm install npm@latest -g"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "npm install"
            },
            {
                "id": 5,
                "name": "Pack",
                "run": "mkdir -p $NODE_GYP_TEMP_DIR\nnpm pack\ntar xzf *.tgz -C $NODE_GYP_TEMP_DIR --strip-components=1\ncp -r test/ $NODE_GYP_TEMP_DIR/test/\necho \"dir=$NODE_GYP_TEMP_DIR\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "npm install\nnpm test\n"
            },
            {
                "id": 1,
                "name": "Checkout Repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Use Python ${{ matrix.python }}",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "seanmiddleditch/gha-setup-ninja@v4"
            },
            {
                "id": 5,
                "name": "Install Dependencies",
                "run": "npm install\npip install pytest\n"
            },
            {
                "id": 6,
                "name": "Set Windows Env",
                "run": "echo 'GYP_MSVS_VERSION=2015' >> $Env:GITHUB_ENV\necho 'GYP_MSVS_OVERRIDE_PATH=C:\\\\Dummy' >> $Env:GITHUB_ENV\n"
            },
            {
                "id": 7,
                "name": "Run Python Tests",
                "run": "python -m pytest"
            },
            {
                "id": 8,
                "name": "Run Tests (macOS or Linux)",
                "run": "npm test --python=\"${pythonLocation}/python\""
            },
            {
                "id": 9,
                "name": "Run Tests (Windows)",
                "run": "npm run test --python=\"${env:pythonLocation}\\\\python.exe\""
            },
            {
                "id": 1,
                "name": "Checkout Repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Python 3.12",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Run Node tests",
                "run": "npm run test --python=\"${env:pythonLocation}\\\\python.exe\" --msvs-version=\"${{ matrix.msvs-version }}\""
            }
        ],
        "nodejs/readable-stream": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Use Node.js 16",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Restore cached dependencies",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 5,
                "name": "Install Browser",
                "run": "./node_modules/.bin/playwright install ${{ fromJSON('{\"chrome\":\"chromium\",\"edge\":\"msedge\",\"firefox\":\"firefox\",\"safari\":\"webkit\"}')[matrix.browser] }}"
            },
            {
                "id": 6,
                "name": "Bundle code",
                "run": "npm run test:prepare ${{ matrix.bundler }}"
            },
            {
                "id": 7,
                "name": "Bundle readable-stream code with readable-stream specific bundlers",
                "run": "npm run test:readable-stream-only ${{ matrix.bundler }}"
            },
            {
                "id": 8,
                "name": "Run Tests on Browsers",
                "run": "npm run test:browsers ${{ matrix.browser }} ${{ matrix.bundler }}"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }} on ${{ matrix.os }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Restore cached dependencies",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 5,
                "name": "Bundle code",
                "run": "npm run test:prepare ${{ matrix.bundler }}"
            },
            {
                "id": 6,
                "name": "Run Tests on Browsers",
                "run": "npm run test:bundlers ${{ matrix.bundler }}"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }} on ${{ matrix.os }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Restore cached dependencies",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 5,
                "name": "Run Tests",
                "run": "npm run coverage"
            }
        ],
        "nodejs/node-addon-examples": [
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@55d479fb1c5bcad5a4f9099a5d9f37c8857b2845"
            },
            {
                "id": 2,
                "name": "Checkout repository",
                "run": "actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@46ed16ded91731b2df79a2893d3aea8e9f03b5c4"
            },
            {
                "id": 4,
                "name": "Use Node.js v18.x",
                "run": "actions/setup-node@e33196f7422957bea03ed53f6fbb155025ffc7b8"
            },
            {
                "id": 5,
                "name": "Build cpp",
                "run": "npm install -g cmake-js@6.3.2 && npm install && npm test\n"
            },
            {
                "id": 6,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@46ed16ded91731b2df79a2893d3aea8e9f03b5c4"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@55d479fb1c5bcad5a4f9099a5d9f37c8857b2845"
            },
            {
                "id": 2,
                "name": "Checkout Repository",
                "run": "actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9"
            },
            {
                "id": 3,
                "name": "Dependency Review",
                "run": "actions/dependency-review-action@1360a344ccb0ab6e9475edef90ad2f46bf8003b1"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@55d479fb1c5bcad5a4f9099a5d9f37c8857b2845"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "check clang-format",
                "run": "git config clangFormat.binary node_modules/.bin/clang-format\ngit config clangFormat.style file\nnpx check-clang-format\n"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@55d479fb1c5bcad5a4f9099a5d9f37c8857b2845"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9"
            },
            {
                "id": 3,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@e33196f7422957bea03ed53f6fbb155025ffc7b8"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm install -g cmake-js@6.3.2"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "npm install"
            },
            {
                "id": 6,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 7,
                "name": "Run Test",
                "run": "npm test"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@55d479fb1c5bcad5a4f9099a5d9f37c8857b2845"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm i -g n && n nightly"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "node -p process.versions"
            },
            {
                "id": 5,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "npm install -g cmake-js@6.3.2"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "npm install"
            },
            {
                "id": 8,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 9,
                "name": "Run Test",
                "run": "npm test"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@55d479fb1c5bcad5a4f9099a5d9f37c8857b2845"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9"
            },
            {
                "id": 3,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@99c53751e09b9529366343771cc321ec74e9bd3d"
            },
            {
                "id": 4,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce"
            },
            {
                "id": 5,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@46ed16ded91731b2df79a2893d3aea8e9f03b5c4"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@55d479fb1c5bcad5a4f9099a5d9f37c8857b2845"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npx envinfo"
            },
            {
                "id": 4,
                "name": "Build and Deploy",
                "run": "npm install\nnpx gatsby build --prefix-paths\n"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@55d479fb1c5bcad5a4f9099a5d9f37c8857b2845"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npx envinfo"
            },
            {
                "id": 4,
                "name": "Build and Deploy",
                "run": "npm install\nnpx gatsby build --prefix-paths\nnpx gh-pages -d public -r https://git:${TOKEN}@github.com/${REPO}.git -u \"${USER}\"\n"
            }
        ],
        "nodejs/build": [
            {
                "id": 1,
                "name": "Checkout current repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ env.NODE_VERSION }}",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Check web ceritificate expiry",
                "run": "node tools/check-certificates/check-certificates.mjs >> $GITHUB_OUTPUT"
            },
            {
                "id": 4,
                "name": "Create issue",
                "run": "dblock/create-a-github-issue@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\n# pip install -r requirements.txt  # TODO: Add tap2junit\n"
            },
            {
                "id": 4,
                "name": "Lint with flake8",
                "run": "pip install flake8\nflake8 --version\nflake8 .\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "ShellCheck",
                "run": "ludeeus/action-shellcheck@2.0.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v9"
            }
        ],
        "nodejs/node": [
            {
                "id": 1,
                "name": "Get Pull Requests",
                "run": "numbers=$(gh pr list \\\n        --repo ${{ github.repository }} \\\n        --label 'request-ci' \\\n        --json 'number' \\\n        -t '{{ range . }}{{ .number }} {{ end }}' \\\n        --limit 5)\necho \"numbers=$numbers\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Install Node.js",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Install @node-core/utils",
                "run": "npm install -g @node-core/utils"
            },
            {
                "id": 4,
                "name": "Setup @node-core/utils",
                "run": "ncu-config set username ${{ secrets.JENKINS_USER }}\nncu-config set token \"${{ secrets.GH_USER_TOKEN }}\"\nncu-config set jenkins_token ${{ secrets.JENKINS_TOKEN }}\nncu-config set owner \"${{ github.repository_owner }}\"\nncu-config set repo \"$(echo ${{ github.repository }} | cut -d/ -f2)\"\n"
            },
            {
                "id": 5,
                "name": "Start the CI",
                "run": "./tools/actions/start-ci.sh ${{ needs.get-prs-for-ci.outputs.numbers }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Set up sccache",
                "run": "mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd"
            },
            {
                "id": 4,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 5,
                "name": "Make tarball",
                "run": "export DISTTYPE=nightly\nexport DATESTRING=`date \"+%Y-%m-%d\"`\nexport COMMIT=$(git rev-parse --short=10 \"$GITHUB_SHA\")\n./configure && make tar -j8 SKIP_XZ=1\nmkdir tarballs\nmv *.tar.gz tarballs\n"
            },
            {
                "id": 6,
                "name": "Upload tarball artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Set up sccache",
                "run": "mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd"
            },
            {
                "id": 4,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 5,
                "name": "Download tarball",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 6,
                "name": "Extract tarball",
                "run": "tar xzf tarballs/*.tar.gz -C $RUNNER_TEMP\necho \"TAR_DIR=$RUNNER_TEMP/`basename tarballs/*.tar.gz .tar.gz`\" >> $GITHUB_ENV\n"
            },
            {
                "id": 7,
                "name": "Copy directories needed for testing",
                "run": "cp -r tools/eslint $TAR_DIR/tools\ncp -r tools/eslint-rules $TAR_DIR/tools\n"
            },
            {
                "id": 8,
                "name": "Build",
                "run": "cd $TAR_DIR\nmake build-ci -j4 V=1\n"
            },
            {
                "id": 9,
                "name": "Test",
                "run": "cd $TAR_DIR\nmake run-ci -j4 V=1 TEST_CI_ARGS=\"-p dots --node-args='--test-reporter=spec' --measure-flakiness 9\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Install deps",
                "run": "choco install nasm"
            },
            {
                "id": 4,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "./vcbuild.bat"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@28ca1036281a5e5922ead5184a1bbf96e5fc984e"
            },
            {
                "id": 1,
                "name": "Set default end date which is 1 year ago",
                "run": "echo \"END_DATE=$(date --date='525600 minutes ago' --rfc-2822)\"  >> \"$GITHUB_ENV\""
            },
            {
                "id": 2,
                "name": "if date set in event override the default end date",
                "run": "echo \"END_DATE=$END_DATE_INPUT_VALUE\"  >> \"$GITHUB_ENV\""
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "mhdawson/stale@453d6581568dc43dbe345757f24408d7b451c651"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@28ca1036281a5e5922ead5184a1bbf96e5fc984e"
            },
            {
                "id": 1,
                "name": "Post stalled comment",
                "run": "gh issue comment \"$NUMBER\" --repo ${{ github.repository }} --body \"$STALE_MESSAGE\""
            },
            {
                "id": 1,
                "name": "Request Fast-Track",
                "run": "gh pr comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body \"$FAST_TRACK_MESSAGE\""
            },
            {
                "id": 1,
                "name": "Add notable change description",
                "run": "gh pr comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body \"$NOTABLE_CHANGE_MESSAGE\""
            },
            {
                "id": 1,
                "name": "Compute number of commits in the PR",
                "run": "echo \"plusOne=$((${{ github.event.pull_request.commits }} + 1))\" >> $GITHUB_OUTPUT\necho \"minusOne=$((${{ github.event.pull_request.commits }} - 1))\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "git reset HEAD^2"
            },
            {
                "id": 4,
                "name": "Install Node.js",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 5,
                "name": "Validate commit message",
                "run": "echo \"::add-matcher::.github/workflows/commit-lint-problem-matcher.json\"\ngit rev-parse HEAD~${{ steps.nb-of-commits.outputs.minusOne }} | xargs npx -q core-validate-commit --no-validate-metadata --tap\n"
            },
            {
                "id": 1,
                "name": "Get Pull Requests",
                "run": "prs=$(gh pr list \\\n        --repo ${{ github.repository }} \\\n        --base ${{ github.ref_name }} \\\n        --label 'commit-queue' \\\n        --json 'number' \\\n        --search \"created:<=$(date --date=\"2 days ago\"  +\"%Y-%m-%dT%H:%M:%S%z\")\" \\\n        -t '{{ range . }}{{ .number }} {{ end }}' \\\n        --limit 100)\nfast_track_prs=$(gh pr list \\\n        --repo ${{ github.repository }} \\\n        --base ${{ github.ref_name }} \\\n        --label 'commit-queue' \\\n        --label 'fast-track' \\\n        --json 'number' \\\n        -t '{{ range . }}{{ .number }} {{ end }}' \\\n        --limit 100)\nnumbers=$(echo $prs' '$fast_track_prs | jq -r -s 'unique | join(\" \")')\necho \"numbers=$numbers\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Install Node.js",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Install @node-core/utils",
                "run": "npm install -g @node-core/utils"
            },
            {
                "id": 4,
                "name": "Set variables",
                "run": "echo \"REPOSITORY=$(echo ${{ github.repository }} | cut -d/ -f2)\" >> $GITHUB_ENV\necho \"OWNER=${{ github.repository_owner }}\" >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "Configure @node-core/utils",
                "run": "ncu-config set branch ${GITHUB_REF_NAME}\nncu-config set upstream origin\nncu-config set username \"${{ secrets.GH_USER_NAME }}\"\nncu-config set token \"${{ secrets.GH_USER_TOKEN }}\"\nncu-config set jenkins_token \"${{ secrets.JENKINS_TOKEN }}\"\nncu-config set repo \"${REPOSITORY}\"\nncu-config set owner \"${OWNER}\"\n"
            },
            {
                "id": 6,
                "name": "Start the Commit Queue",
                "run": "./tools/actions/commit-queue.sh ${{ env.OWNER }} ${{ env.REPOSITORY }} ${{ needs.get_mergeable_prs.outputs.numbers }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Set up sccache",
                "run": "mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd"
            },
            {
                "id": 4,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 5,
                "name": "Install gcovr",
                "run": "pip install gcovr==4.2"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "make build-ci -j4 V=1 CONFIG_FLAGS=\"--error-on-warn --coverage --without-intl\""
            },
            {
                "id": 7,
                "name": "Test",
                "run": "NODE_V8_COVERAGE=coverage/tmp make test-cov -j4 V=1 TEST_CI_ARGS=\"-p dots --node-args='--test-reporter=spec' --measure-flakiness 9\" || exit 0"
            },
            {
                "id": 8,
                "name": "Report JS",
                "run": "npx c8 report --check-coverage"
            },
            {
                "id": 9,
                "name": "Report C++",
                "run": "cd out && gcovr --gcov-exclude='.*\\b(deps|usr|out|obj|cctest|embedding)\\b' -v -r Release/obj.target --xml -o ../coverage/coverage-cxx.xml --root=$(cd ../ && pwd)"
            },
            {
                "id": 10,
                "name": "Clean tmp",
                "run": "rm -rf coverage/tmp && rm -rf out"
            },
            {
                "id": 11,
                "name": "Upload",
                "run": "codecov/codecov-action@125fc84a9a348dbcf27191600683ec096ec9021c"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Set up sccache",
                "run": "mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd"
            },
            {
                "id": 4,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 5,
                "name": "Install gcovr",
                "run": "pip install gcovr==4.2"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "make build-ci -j4 V=1 CONFIG_FLAGS=\"--error-on-warn --coverage\""
            },
            {
                "id": 7,
                "name": "Test",
                "run": "NODE_V8_COVERAGE=coverage/tmp make test-cov -j4 V=1 TEST_CI_ARGS=\"-p dots --node-args='--test-reporter=spec' --measure-flakiness 9\" || exit 0"
            },
            {
                "id": 8,
                "name": "Report JS",
                "run": "npx c8 report --check-coverage"
            },
            {
                "id": 9,
                "name": "Report C++",
                "run": "cd out && gcovr --gcov-exclude='.*\\b(deps|usr|out|obj|cctest|embedding)\\b' -v -r Release/obj.target --xml -o ../coverage/coverage-cxx.xml --root=$(cd ../ && pwd)"
            },
            {
                "id": 10,
                "name": "Clean tmp",
                "run": "rm -rf coverage/tmp && rm -rf out"
            },
            {
                "id": 11,
                "name": "Upload",
                "run": "codecov/codecov-action@125fc84a9a348dbcf27191600683ec096ec9021c"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Install deps",
                "run": "choco install nasm"
            },
            {
                "id": 4,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "./vcbuild.bat"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "./vcbuild.bat test-ci-js; node -e 'process.exit(0)'"
            },
            {
                "id": 7,
                "name": "Report",
                "run": "npx c8 report"
            },
            {
                "id": 8,
                "name": "Clean tmp",
                "run": "npx rimraf ./coverage/tmp"
            },
            {
                "id": 9,
                "name": "Upload",
                "run": "codecov/codecov-action@125fc84a9a348dbcf27191600683ec096ec9021c"
            },
            {
                "id": 1,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 2,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 3,
                "name": "Get latest nightly",
                "run": "echo \"NIGHTLY=$(curl -s https://nodejs.org/download/nightly/index.json | jq -r '[.[] | select(.files[] | contains(\"linux-x64\"))][0].version')\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Install Node.js",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 5,
                "name": "Get nightly ref",
                "run": "SHORT_SHA=$(node -p 'process.version.split(/-nightly\\d{8}/)[1]')\necho \"NIGHTLY_REF=$(gh api /repos/nodejs/node/commits/$SHORT_SHA --jq '.sha')\" >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "Checkout ${{ steps.setup-node.outputs.node-version }}",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 7,
                "name": "Set env.NODE",
                "run": "echo \"NODE=$(which node)\" >> $GITHUB_ENV"
            },
            {
                "id": 8,
                "name": "Set env.WPT_REVISION",
                "run": "echo \"WPT_REVISION=$(gh api /repos/web-platform-tests/wpt/branches/epochs/daily --jq '.commit.sha')\" >> $GITHUB_ENV"
            },
            {
                "id": 9,
                "name": "Remove stale WPT",
                "run": "rm -rf wpt"
            },
            {
                "id": 10,
                "name": "Checkout epochs/daily WPT",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 11,
                "name": "Run WPT and generate report",
                "run": "make test-wpt-report || true\nif [ -e out/wpt/wptreport.json ]; then\n  echo \"WPT_REPORT=$(pwd)/out/wpt/wptreport.json\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 12,
                "name": "Set env.UNDICI_VERSION",
                "run": "echo \"UNDICI_VERSION=v$(jq -r '.version' < deps/undici/src/package.json)\" >> $GITHUB_ENV"
            },
            {
                "id": 13,
                "name": "Remove deps/undici",
                "run": "rm -rf deps/undici"
            },
            {
                "id": 14,
                "name": "Checkout undici",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 15,
                "name": "Add undici WPTs to the report",
                "run": "rm -rf test/wpt/tests\nmv ../../test/fixtures/wpt/ test/wpt/tests/\nnpm install\nnpm run test:wpt || true\n"
            },
            {
                "id": 16,
                "name": "Clone report for upload",
                "run": "cp wptreport.json wptreport-${{ steps.setup-node.outputs.node-version }}.json"
            },
            {
                "id": 17,
                "name": "Upload GitHub Actions artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 18,
                "name": "Upload WPT Report to wpt.fyi API",
                "run": "gzip wptreport.json\necho \"## Node.js ${{ steps.setup-node.outputs.node-version }}\" >> $GITHUB_STEP_SUMMARY\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"WPT Revision: [\\`${WPT_REVISION:0:7}\\`](https://github.com/web-platform-tests/wpt/commits/$WPT_REVISION)\" >> $GITHUB_STEP_SUMMARY\nfor WPT_FYI_ENDPOINT in \"https://wpt.fyi/api/results/upload\" \"https://staging.wpt.fyi/api/results/upload\"\ndo\n  response=$(curl -sS \\\n    -u \"$WPT_FYI_USERNAME:$WPT_FYI_PASSWORD\" \\\n    -F \"result_file=@wptreport.json.gz\" \\\n    -F \"labels=master\" \\\n    $WPT_FYI_ENDPOINT)\n\n  if [[ $response =~ Task\\ ([0-9]+)\\ added\\ to\\ queue ]]; then\n    run_id=${BASH_REMATCH[1]}\n    origin=${WPT_FYI_ENDPOINT%/api/results/upload}\n\n    echo \"\" >> $GITHUB_STEP_SUMMARY\n    echo \"Run ID [\\`$run_id\\`]($origin/api/runs/$run_id) added to the processor queue at ${origin:8}\" >> $GITHUB_STEP_SUMMARY\n    echo \"- [View on the ${origin:8} dashboard]($origin/results?run_id=$run_id)\" >> $GITHUB_STEP_SUMMARY\n  fi\ndone\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ env.NODE_VERSION }}",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 4,
                "name": "Build lto",
                "run": "sudo apt-get update && sudo apt-get install ninja-build -y\n./configure --enable-lto --ninja\nninja -C out/Release\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ env.NODE_VERSION }}",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "NODE=$(command -v node) make doc-only"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "NODE=$(command -v node) make test-doc-ci TEST_CI_ARGS=\"-p actions --node-args='--test-reporter=spec' --node-args='--test-reporter-destination=stdout' --measure-flakiness 9\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ env.NODE_VERSION }}",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Find inactive collaborators",
                "run": "tools/find-inactive-collaborators.mjs"
            },
            {
                "id": 4,
                "name": "Open pull request",
                "run": "gr2m/create-or-update-pull-request-action@77596e3166f328b24613f7082ab30bf2d93079d5"
            },
            {
                "id": 1,
                "name": "Checkout the repo",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Clone nodejs/TSC repository",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 3,
                "name": "Use Node.js ${{ env.NODE_VERSION }}",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 4,
                "name": "Find inactive TSC voting members",
                "run": "tools/find-inactive-tsc.mjs >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Open pull request",
                "run": "gr2m/create-or-update-pull-request-action@77596e3166f328b24613f7082ab30bf2d93079d5"
            },
            {
                "id": 1,
                "name": "Extract labels",
                "run": "BODY=\"${BODY//$'\\n'/'\\n'}\"\n\ndeclare -A platform2label\n\nplatform2label[\"AIX\"]=\"aix\";\nplatform2label[\"FreeBSD\"]=\"freebsd\";\nplatform2label[\"Linux ARM64\"]=\"linux\";\nplatform2label[\"Linux ARMv7\"]=\"arm\";\nplatform2label[\"Linux PPC64LE\"]=\"ppc\";\nplatform2label[\"Linux s390x\"]=\"s390\";\nplatform2label[\"Linux x64\"]=\"linux\";\nplatform2label[\"macOS ARM64\"]=\"macos\";\nplatform2label[\"macOS x64\"]=\"macos\";\nplatform2label[\"SmartOS\"]=\"smartos\";\nplatform2label[\"Windows\"]=\"windows\";\n\n# sed is cleaning up the edges\nPLATFORMS=$(echo $BODY | sed 's/^.*Platform\\\\n\\\\n//' | sed 's/\\(, Other\\)\\?\\\\n\\\\n.*$//') 2> /dev/null\nreadarray -d , -t list <<< \"$PLATFORMS\"\nlabels=\nfor row in \"${list[@]}\"; do \\\n  platform=$(echo $row | xargs); \\\n  labels=\"${labels}${platform2label[$platform]},\"; \\\ndone;\n\necho \"LABELS=${labels::-1}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 2,
                "name": "Add labels",
                "run": "gh issue edit \"$NUMBER\" --repo ${{ github.repository }} --add-label \"${{ steps.extract-labels.outputs.LABELS }}\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "nodejs/node-pr-labeler@d4cf1b8b9f23189c37917000e5e17e796c770a6b"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./tools/license-builder.sh"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "gr2m/create-or-update-pull-request-action@86ec1766034c8173518f61d2075cc2a173fb8c97"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ env.NODE_VERSION }}",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 4,
                "name": "Lint addon docs",
                "run": "NODE=$(command -v node) make lint-addon-docs"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 4,
                "name": "Lint C/C++ files",
                "run": "make lint-cpp"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ env.NODE_VERSION }}",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 4,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 5,
                "name": "Format C/C++ files",
                "run": "make format-cpp-build\n# The `make format-cpp` error code is intentionally ignored here\n# because it is irrelevant. We already check if the formatter produced\n# a diff in the next line.\n# Refs: https://github.com/nodejs/node/pull/42764\nCLANG_FORMAT_START=\"$(git merge-base HEAD refs/remotes/origin/$GITHUB_BASE_REF)\" \\\n  make format-cpp || true\ngit --no-pager diff --exit-code && EXIT_CODE=\"$?\" || EXIT_CODE=\"$?\"\nif [ \"$EXIT_CODE\" != \"0\" ]\nthen\n  echo\n  echo 'ERROR: Please run:'\n  echo\n  echo \"  CLANG_FORMAT_START=\"$\\(git merge-base HEAD ${GITHUB_BASE_REF}\\)\" make format-cpp\"\n  echo\n  echo 'to format the commits in your branch.'\n  exit \"$EXIT_CODE\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ env.NODE_VERSION }}",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 3,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 4,
                "name": "Lint JavaScript files",
                "run": "NODE=$(command -v node) make lint-js"
            },
            {
                "id": 5,
                "name": "Get release version numbers",
                "run": "./tools/lint-md/list-released-versions-from-changelogs.mjs >> $GITHUB_OUTPUT"
            },
            {
                "id": 6,
                "name": "Lint markdown files",
                "run": "echo \"::add-matcher::.github/workflows/remark-lint-problem-matcher.json\"\nNODE=$(command -v node) make lint-md\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 4,
                "name": "Lint Python",
                "run": "make lint-py-build\nmake lint-py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Use Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 4,
                "name": "Lint YAML",
                "run": "make lint-yaml-build || true\nmake lint-yaml\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "shellcheck -V"
            },
            {
                "id": 3,
                "name": "Lint Shell scripts",
                "run": "tools/lint-sh.mjs ."
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "mszostok/codeowners-validator@7f3f5e28c6d7b8dfae5731e54ce2272ca384592f"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git diff HEAD^ HEAD -G\"pr-url:\" -- \"*.md\" | ./tools/lint-pr-url.mjs ${{ github.event.pull_request.html_url }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "tools/lint-readme-lists.mjs"
            },
            {
                "id": 1,
                "name": "Slack Notification",
                "run": "rtCamp/action-slack-notify@4e5fb42d249be6a45a298f3c9543b111b02f7907"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Check commit message",
                "run": "npx -q core-validate-commit ${{ github.event.after }} || echo \"INVALID_COMMIT_MESSAGE=1\" >> $GITHUB_ENV"
            },
            {
                "id": 3,
                "name": "Retrieve PR number if possible",
                "run": "COMMIT_TITLE=$(git --no-pager log --oneline -1 --no-color) node <<'EOF' >> $GITHUB_ENV || true\nconst invalidCommitMessageMatch = /\\s\\(\\#(\\d+)\\)$/.exec(process.env.COMMIT_TITLE);\nif (invalidCommitMessageMatch == null) process.exit(1)\nconsole.log(`PR_ID=${invalidCommitMessageMatch[1]}`)\nEOF\n"
            },
            {
                "id": 4,
                "name": "Comment on the Pull Request",
                "run": "gh pr comment ${{ env.PR_ID }} --repo \"${{ github.repository }}\" \\\n  --body \"A commit referencing this Pull Request was pushed to `${{ github.ref_name }}` by @${{ github.actor }} with an invalid commit message.\"\n"
            },
            {
                "id": 5,
                "name": "Slack Notification",
                "run": "rtCamp/action-slack-notify@4e5fb42d249be6a45a298f3c9543b111b02f7907"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 3,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 4,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 5,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@f079b8493333aace61c81488f8bd40919487bd9f"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Set up sccache",
                "run": "mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd"
            },
            {
                "id": 4,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "make build-ci -j4 V=1"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "make run-ci -j4 V=1 TEST_CI_ARGS=\"-p actions --node-args='--test-reporter=spec' --node-args='--test-reporter-destination=stdout' -t 300 --measure-flakiness 9\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "make build-ci -j4 V=1 CONFIG_FLAGS=\"--error-on-warn\""
            },
            {
                "id": 5,
                "name": "Test Internet",
                "run": "make test-internet -j4 V=1;"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Set up sccache",
                "run": "mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd"
            },
            {
                "id": 4,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "make build-ci -j4 V=1 CONFIG_FLAGS=\"--error-on-warn\""
            },
            {
                "id": 6,
                "name": "Test",
                "run": "make run-ci -j4 V=1 TEST_CI_ARGS=\"-p actions --node-args='--test-reporter=spec' --node-args='--test-reporter-destination=stdout' --measure-flakiness 9\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Set up sccache",
                "run": "mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd"
            },
            {
                "id": 4,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 5,
                "name": "tools/doc/node_modules workaround",
                "run": "make tools/doc/node_modules"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "make build-ci -j$(getconf _NPROCESSORS_ONLN) V=1 CONFIG_FLAGS=\"--error-on-warn\""
            },
            {
                "id": 7,
                "name": "Test",
                "run": "make run-ci -j$(getconf _NPROCESSORS_ONLN) V=1 TEST_CI_ARGS=\"-p actions --node-args='--test-reporter=spec' --node-args='--test-reporter-destination=stdout' --measure-flakiness 9\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Store suppressions path",
                "run": "echo \"UBSAN_OPTIONS=suppressions=$GITHUB_WORKSPACE/suppressions.supp\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 4,
                "name": "Set up sccache",
                "run": "mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd"
            },
            {
                "id": 5,
                "name": "Environment Information",
                "run": "npx envinfo"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "make build-ci -j2 V=1"
            },
            {
                "id": 7,
                "name": "Test",
                "run": "make run-ci -j2 V=1 TEST_CI_ARGS=\"-p actions --node-args='--test-reporter=spec' --node-args='--test-reporter-destination=stdout' -t 300 --measure-flakiness 9\""
            },
            {
                "id": 1,
                "name": "Checkout nodejs/node",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Checkout unicode-org/icu-data",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 3,
                "name": "Record new version",
                "run": "echo \"new_version=$(ls icu-data/tzdata/icunew | tail -1)\" >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Record current version",
                "run": "echo \"current_version=$(cat ./test/fixtures/tz-version.txt)\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Compare versions",
                "run": "echo \"Comparing current version ${{ env.current_version }} to new version ${{ env.new_version }}\"\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "./tools/update-timezone.mjs"
            },
            {
                "id": 7,
                "name": "Update the expected timezone version in test",
                "run": "echo \"${{ env.new_version }}\" > test/fixtures/tz-version.txt"
            },
            {
                "id": 8,
                "name": "Open Pull Request",
                "run": "gr2m/create-or-update-pull-request-action@77596e3166f328b24613f7082ab30bf2d93079d5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "${{ matrix.run }}"
            },
            {
                "id": 4,
                "name": "Generate commit message if not set",
                "run": "echo \"COMMIT_MSG=${{ matrix.subsystem }}: update ${{ matrix.id }} to ${{ env.NEW_VERSION }}\" >> \"$GITHUB_ENV\"\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "gr2m/create-or-update-pull-request-action@86ec1766034c8173518f61d2075cc2a173fb8c97"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Check and download new OpenSSL version",
                "run": "./tools/dep_updaters/update-openssl.sh download > temp-output\ncat temp-output\ntail -n1 temp-output | grep \"NEW_VERSION=\" >> \"$GITHUB_ENV\" || true\nrm temp-output\n"
            },
            {
                "id": 3,
                "name": "Create PR with first commit",
                "run": "gr2m/create-or-update-pull-request-action@77596e3166f328b24613f7082ab30bf2d93079d5"
            },
            {
                "id": 4,
                "name": "Regenerate platform specific files",
                "run": "sudo apt install -y nasm libtext-template-perl\n./tools/dep_updaters/update-openssl.sh regenerate\n"
            },
            {
                "id": 5,
                "name": "Add second commit",
                "run": "gr2m/create-or-update-pull-request-action@77596e3166f328b24613f7082ab30bf2d93079d5"
            },
            {
                "id": 1,
                "name": "Trigger update-links workflow on nodejs/release-cloudflare-worker",
                "run": "gh workflow run update-links.yml --repo nodejs/release-cloudflare-worker\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Cache node modules and update-v8",
                "run": "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 3,
                "name": "Install Node.js",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 4,
                "name": "Install @node-core/utils",
                "run": "npm install -g @node-core/utils"
            },
            {
                "id": 5,
                "name": "Setup Git config",
                "run": "git config --global user.name \"Node.js GitHub Bot\"\ngit config --global user.email \"github-bot@iojs.org\"\n"
            },
            {
                "id": 6,
                "name": "Check and download new V8 version",
                "run": "./tools/dep_updaters/update-v8-patch.sh > temp-output\ncat temp-output\ntail -n1 temp-output | grep \"NEW_VERSION=\" >> \"$GITHUB_ENV\" || true\nrm temp-output\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "peter-evans/create-pull-request@6d6857d36972b65feb161a90e484f2984215f83e"
            }
        ],
        "nodejs/docker-node": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Run automation script",
                "run": "actions/github-script@v7"
            },
            {
                "id": 3,
                "name": "Create update PR",
                "run": "peter-evans/create-pull-request@v6"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Calculate file differences",
                "run": "tj-actions/changed-files@v44"
            },
            {
                "id": 3,
                "name": "Generate testing matrix",
                "run": "actions/github-script@v7"
            },
            {
                "id": 1,
                "name": "Get short node version",
                "run": "actions/github-script@v7"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Build image",
                "run": "docker/build-push-action@v6"
            },
            {
                "id": 4,
                "name": "Test for node version",
                "run": "image_node_version=$(docker run --rm node:${{ matrix.version }}-${{ matrix.variant }} node --print \"process.versions.node\")\necho \"Expected: \\\"${{ matrix.version }}\\\", Got: \\\"${image_node_version}\\\"\"\n[ \"${image_node_version}\" == \"${{ matrix.version }}\" ]\n"
            },
            {
                "id": 5,
                "name": "Verify entrypoint runs regular, non-executable files with node",
                "run": "tmp_file=$(mktemp)\necho 'console.log(\"success\")' > \"${tmp_file}\"\noutput=$(docker run --rm -v \"${tmp_file}:/app/index.js\" node:${{ matrix.version }}-${{ matrix.variant }} app/index.js)\n[ \"${output}\" = 'success' ]\n"
            },
            {
                "id": 6,
                "name": "Test for npm",
                "run": "docker run --rm node:${{ matrix.version }}-${{ matrix.variant }} npm --version"
            },
            {
                "id": 7,
                "name": "Test for yarn",
                "run": "docker run --rm node:${{ matrix.version }}-${{ matrix.variant }} yarn --version"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install doctoc",
                "run": "npm i -g doctoc"
            },
            {
                "id": 4,
                "name": "Create README copy and diff with doctoc",
                "run": "cp README.md README.md.tmp && doctoc --title='## Table of Contents' --github README.md && diff -q README.md README.md.tmp"
            },
            {
                "id": 5,
                "name": "Create \"docs/BestPractices.md\" copy and diff with doctoc",
                "run": "cp docs/BestPractices.md docs/BestPractices.md.tmp && doctoc --title='## Table of Contents' --github docs/BestPractices.md && diff -q docs/BestPractices.md docs/BestPractices.md.tmp"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm i -g eclint"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "eclint check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install markdown-link-check",
                "run": "npm i -g markdown-link-check@3.11.0"
            },
            {
                "id": 4,
                "name": "Run markdown-link-check on MD files",
                "run": "find . -name \"*.md\" | xargs -n 1 markdown-link-check -c markdown_link_check_config.json -q"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Count number of Alpine Dockersfiles without CHECKSUM",
                "run": "git grep -n 'CHECKSUM=\"\"' -- '*alpine*/Dockerfile' | sed -E 's/^([^:]+):([^:]+):\\s*/::error file=\\1,line=\\2::Missing pre-built checksum/'\nif [ \"${PIPESTATUS[0]}\" -eq 0 ]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Checkout the docker-node repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout the official-images repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Generate Stackbrew for diff",
                "run": "cd docker-node\n./stackbrew.js > ../official-images/library/node\n"
            },
            {
                "id": 4,
                "name": "Create PR in official-images",
                "run": "peter-evans/create-pull-request@v6"
            },
            {
                "id": 5,
                "name": "PR details",
                "run": "echo \"Pull Request Number - ${{ steps.create-pr.outputs.pull-request-number }}\"\necho \"Pull Request URL - ${{ steps.create-pr.outputs.pull-request-url }}\"\n"
            },
            {
                "id": 6,
                "name": "Create PR comment",
                "run": "peter-evans/create-or-update-comment@v4"
            },
            {
                "id": 7,
                "name": "Dump context",
                "run": "crazy-max/ghaction-dump-context@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "docker run -v \"$(pwd)\":/sh -w /sh peterdavehello/shfmt:2.6.3 shfmt -sr -i 2 -l -w -ci ."
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "git diff --color --exit-code"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "shellcheck *.sh"
            }
        ],
        "nodejs/diagnostics": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@99c53751e09b9529366343771cc321ec74e9bd3d"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@fdcae64e1484d349b3366718cdfef3d404390e85"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@f7176fd3007623b69d27091f9b9d4ab7995f0a06"
            }
        ],
        "nodejs/nodejs-ko": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/labeler@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "npm install",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Generate",
                "run": "npm run generate"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "npm install",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Generate",
                "run": "npm run generate"
            },
            {
                "id": 6,
                "name": "Publish",
                "run": "npm run publish"
            }
        ],
        "nodejs/changelog-maker": [
            {
                "id": 1,
                "name": "Checkout Repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@v4.0.2"
            },
            {
                "id": 3,
                "name": "Set up ghauth config (Ubuntu)",
                "run": "mkdir -p ~/.config/changelog-maker/\necho '{\"user\": \"nodejs\", \"token\": \"'${{ secrets.GITHUB_TOKEN }}'\"}' > ~/.config/changelog-maker/config.json\n"
            },
            {
                "id": 4,
                "name": "Set up ghauth config (macOS)",
                "run": "mkdir -p ~/Library/Application\\ Support/changelog-maker/\necho '{\"user\": \"nodejs\", \"token\": \"'${{ secrets.GITHUB_TOKEN }}'\"}' > ~/Library/Application\\ Support/changelog-maker/config.json\n"
            },
            {
                "id": 5,
                "name": "Set up ghauth config (Windows)",
                "run": "mkdir \"%LOCALAPPDATA%\\changelog-maker\\\"\necho {\"user\": \"nodejs\", \"token\": \"${{ secrets.GITHUB_TOKEN }}\"} > \"%LOCALAPPDATA%\\changelog-maker\\config.json\"\n"
            },
            {
                "id": 6,
                "name": "Install Dependencies",
                "run": "npm install --no-progress\n"
            },
            {
                "id": 7,
                "name": "Run tests",
                "run": "npm config set script-shell bash\nnpm run test:ci\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4.0.2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm install --no-progress --no-package-lock --no-save\n"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "npm run build\n"
            },
            {
                "id": 5,
                "name": "Install plugins",
                "run": "npm install \\\n  @semantic-release/commit-analyzer \\\n  conventional-changelog-conventionalcommits \\\n  @semantic-release/release-notes-generator \\\n  @semantic-release/npm \\\n  @semantic-release/github \\\n  @semantic-release/git \\\n  @semantic-release/changelog \\\n  --no-progress --no-package-lock --no-save\n"
            },
            {
                "id": 6,
                "name": "Release",
                "run": "npx semantic-release"
            }
        ],
        "nodejs/nodejs.org": [
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10"
            },
            {
                "id": 2,
                "name": "Provide Turborepo Arguments",
                "run": "echo \"turbo_args=--force=true --cache-dir=.turbo/cache\" >> \"$GITHUB_OUTPUT\""
            },
            {
                "id": 3,
                "name": "Use GNU tar instead BSD tar",
                "run": "echo C:\\Program Files\\Git\\usr\\bin>>\"%GITHUB_PATH%\""
            },
            {
                "id": 4,
                "name": "Git Checkout",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 5,
                "name": "Set up Node.js",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 6,
                "name": "Install npm packages",
                "run": "npm i --no-audit --no-fund --userconfig=/dev/null --omit=dev"
            },
            {
                "id": 7,
                "name": "Build Next.js (ISR)",
                "run": "npx --package=turbo@latest -- turbo build ${{ steps.turborepo_arguments.outputs.turbo_args }}"
            },
            {
                "id": 8,
                "name": "Build Next.js (Static)",
                "run": "npx --package=turbo@latest -- turbo deploy ${{ steps.turborepo_arguments.outputs.turbo_args }}"
            },
            {
                "id": 9,
                "name": "Sync Orama Cloud",
                "run": "npm run sync-orama\n"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10"
            },
            {
                "id": 2,
                "name": "Checkout repository",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@f079b8493333aace61c81488f8bd40919487bd9f"
            },
            {
                "id": 4,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@f079b8493333aace61c81488f8bd40919487bd9f"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@f079b8493333aace61c81488f8bd40919487bd9f"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10"
            },
            {
                "id": 2,
                "name": "Git Checkout",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 3,
                "name": "Review Dependencies",
                "run": "actions/dependency-review-action@0c155c5e8556a497adf53f2c18edabf945ed8e70"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10"
            },
            {
                "id": 2,
                "name": "Git Checkout",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 3,
                "name": "Add Comment to PR",
                "run": "thollander/actions-comment-pull-request@fabd468d3a1a0b97feee5f6b9e499eab0dd903f6"
            },
            {
                "id": 4,
                "name": "Capture Vercel Preview",
                "run": "patrickedqvist/wait-for-vercel-preview@dca4940010f36d2d44caa487087a09b57939b24a"
            },
            {
                "id": 5,
                "name": "Audit Preview URL with Lighthouse",
                "run": "treosh/lighthouse-ci-action@1b0e7c33270fbba31a18a0fbb1de7cc5256b6d39"
            },
            {
                "id": 6,
                "name": "Format Lighthouse Score",
                "run": "actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea"
            },
            {
                "id": 7,
                "name": "Add Comment to PR",
                "run": "thollander/actions-comment-pull-request@fabd468d3a1a0b97feee5f6b9e499eab0dd903f6"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10"
            },
            {
                "id": 2,
                "name": "Provide Turborepo Arguments",
                "run": "echo \"turbo_args=--force=true --cache-dir=.turbo/cache\" >> \"$GITHUB_OUTPUT\""
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10"
            },
            {
                "id": 2,
                "name": "Git Checkout",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 3,
                "name": "Restore Lint Cache",
                "run": "actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 4,
                "name": "Set up Node.js",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 5,
                "name": "Install npm packages",
                "run": "npm i --no-audit --no-fund --ignore-scripts --userconfig=/dev/null"
            },
            {
                "id": 6,
                "name": "Run quality checks with `turbo`",
                "run": "npx --package=turbo@latest -- turbo lint:js lint:md lint:css prettier ${{ needs.base.outputs.turbo_args }}"
            },
            {
                "id": 7,
                "name": "Run `tsc build`",
                "run": "npx --package=typescript@latest -- tsc --build ."
            },
            {
                "id": 8,
                "name": "Save Lint Cache",
                "run": "actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10"
            },
            {
                "id": 2,
                "name": "Git Checkout",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 3,
                "name": "Set up Node.js",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 4,
                "name": "Install npm packages",
                "run": "npm i --no-audit --no-fund --userconfig=/dev/null"
            },
            {
                "id": 5,
                "name": "Run Unit Tests",
                "run": "npx --package=turbo@latest -- turbo test:unit ${{ needs.base.outputs.turbo_args }} -- --ci --coverage"
            },
            {
                "id": 6,
                "name": "Start Visual Regression Tests (Chromatic)",
                "run": "chromaui/action@5f6574e351eb055223ae8ea9e1a734d1d695ea9c"
            },
            {
                "id": 7,
                "name": "Jest Coverage Comment",
                "run": "MishaKav/jest-coverage-comment@434e6d2d37116d23d812809b61d499639842fa3b"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10"
            },
            {
                "id": 2,
                "name": "Remove GitHub Actions Label",
                "run": "actions-ecosystem/action-remove-labels@2ce5d41b4b6aa8503e285553f75ed56e0a40bae0"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10"
            },
            {
                "id": 2,
                "name": "Git Checkout",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 3,
                "name": "Run Scorecard Analysis",
                "run": "ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534"
            },
            {
                "id": 4,
                "name": "Upload Artifacts",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 5,
                "name": "Upload Scan Results",
                "run": "github/codeql-action/upload-sarif@f079b8493333aace61c81488f8bd40919487bd9f"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "thollander/actions-comment-pull-request@fabd468d3a1a0b97feee5f6b9e499eab0dd903f6"
            },
            {
                "id": 1,
                "name": "Harden Runner",
                "run": "step-security/harden-runner@f086349bfa2bd1361f7909c78558e816508cdc10"
            },
            {
                "id": 2,
                "name": "Git Checkout",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 3,
                "name": "Restore Lint Cache",
                "run": "actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            },
            {
                "id": 4,
                "name": "Set up Node.js",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 5,
                "name": "Install npm packages",
                "run": "npm i --no-audit --no-fund --ignore-scripts --userconfig=/dev/null"
            },
            {
                "id": 6,
                "name": "Run `npx lint:md --fix`",
                "run": "npx eslint \"pages/**/*.md?(x)\" --fix --cache --cache-strategy=metadata --cache-file=.eslintmdcache"
            },
            {
                "id": 7,
                "name": "Run `npx prettier --write`",
                "run": "npx prettier \"{pages,i18n}/**/*.{json,md,mdx}\" --check --write --cache --cache-strategy=metadata --cache-location=.prettiercache"
            },
            {
                "id": 8,
                "name": "Push Changes back to Pull Request",
                "run": "stefanzweifel/git-auto-commit-action@8621497c8c39c72f3e2a999a26b4ca1b5058a842"
            },
            {
                "id": 9,
                "name": "Save Lint Cache",
                "run": "actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9"
            }
        ],
        "nodejs/commit-stream": [
            {
                "id": 1,
                "name": "Checkout Repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "npm install --no-progress\n"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "npm config set script-shell bash\nnpm run test:ci\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v3.6.0"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm install --no-progress --no-package-lock --no-save\n"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "npm run build\n"
            },
            {
                "id": 5,
                "name": "Install plugins",
                "run": "npm install \\\n  @semantic-release/commit-analyzer \\\n  conventional-changelog-conventionalcommits \\\n  @semantic-release/release-notes-generator \\\n  @semantic-release/npm \\\n  @semantic-release/github \\\n  @semantic-release/git \\\n  @semantic-release/changelog \\\n  --no-progress --no-package-lock --no-save\n"
            },
            {
                "id": 6,
                "name": "Release",
                "run": "npx semantic-release"
            }
        ],
        "nodejs/citgm": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use LTS Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install packages",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Run lint",
                "run": "npm run lint"
            },
            {
                "id": 1,
                "name": "Log workflow parameters",
                "run": "echo \"$WORKFLOW_PARAMETERS\""
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install packages",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Run CITGM",
                "run": "node bin/citgm.js ${{ github.event.inputs.module }}"
            }
        ],
        "nodejs/TSC": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 3,
                "name": "Lint markdown files",
                "run": "echo \"::add-matcher::.github/workflows/remark-lint-problem-matcher.json\"\nnpm test\n"
            },
            {
                "id": 4,
                "name": "Lint YAML files",
                "run": "curl https://raw.githubusercontent.com/nodejs/node/HEAD/.yamllint.yaml -o .yamllint.yaml\nyamllint .\n"
            },
            {
                "id": 1,
                "name": "Get PR URL",
                "run": "echo \"URL=${{ github.event.repository.html_url }}/pull/${{ github.event.inputs.pr || github.event.issue.number }}\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 2,
                "name": "Filter comments",
                "run": "gh pr view ${{ steps.pr-url.outputs.URL }} --json comments --jq '.comments | map(.body | select(contains(\"-----BEGIN SHAMIR KEY PART-----\"))) | \"comments=\" + tostring' >> \"$GITHUB_OUTPUT\""
            },
            {
                "id": 3,
                "name": "Get PR branch",
                "run": "gh pr view ${{ steps.pr-url.outputs.URL }} --json headRefName --jq '\"head=\" + .headRefName' >> \"$GITHUB_OUTPUT\""
            },
            {
                "id": 4,
                "name": "Compute number of commits in the PR",
                "run": "NB_OF_COMMITS=$(gh pr view --json commits --jq '.commits | length' \"${{ steps.pr-url.outputs.URL }}\")\necho \"exact=$NB_OF_COMMITS\" >> $GITHUB_OUTPUT\necho \"minusOne=$(($NB_OF_COMMITS - 1))\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 6,
                "name": "Download nodejs/node mailmap file",
                "run": "curl -L https://raw.githubusercontent.com/nodejs/node/main/.mailmap >> .mailmap"
            },
            {
                "id": 7,
                "name": "Configure git",
                "run": "git config --global user.email \"github-bot@iojs.org\"\ngit config --global user.name \"Node.js GitHub Bot\"\n"
            },
            {
                "id": 8,
                "name": "Load vote branch",
                "run": "git fetch origin '${{ steps.branch.outputs.head }}'\ngit reset FETCH_HEAD --mixed\ngit checkout HEAD -- '${{ steps.branch.outputs.head }}'\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "npm install @node-core/caritat"
            },
            {
                "id": 10,
                "name": "Attempt closing the vote",
                "run": "{\n  EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)\n  echo \"markdown<<$EOF\"\n  ./votes/initiateNewVote/decryptPrivateKeyAndCloseVote.mjs \\\n    --remote origin --branch \"${{ steps.branch.outputs.head }}\" \\\n    --fromCommit \"FETCH_HEAD~${{ steps.nb-of-commits.outputs.minusOne }}\" \\\n    --toCommit \"FETCH_HEAD\" \\\n    --prURL \"${{ steps.pr-url.outputs.URL }}\" \\\n    --save-markdown-summary summaryComment.md \\\n    --comments \"$COMMENTS\" --commit-json-summary\n  echo \"$EOF\"\n} >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 11,
                "name": "Install ghcommit",
                "run": "go install github.com/planetscale/ghcommit@8c6d9af75a7814768ce871cde246224d45bd8c04"
            },
            {
                "id": 12,
                "name": "Push to the PR branch",
                "run": "GH_COMMIT_PATH=\"$(go env GOPATH)/bin/ghcommit\" COMMIT_MESSAGE=\"$(\n  git log -1 HEAD --pretty=format:%B\n)\" SHA=\"$(\n  git rev-parse HEAD^\n)\" DELETED_FILES=\"$(\n  git show HEAD --name-only --diff-filter=D --pretty=format:\n)\" ADDED_FILES=\"$(\n  git show HEAD --name-only --diff-filter=d --pretty=format:\n)\" node --input-type=module <<'EOF'\n  import { spawnSync } from \"node:child_process\";\n  const {GH_COMMIT_PATH, COMMIT_MESSAGE, SHA, DELETED_FILES, ADDED_FILES} = process.env;\n  spawnSync(GH_COMMIT_PATH, [\n    '-r', ${{ toJSON(github.repository) }},\n    '-b', ${{ toJSON(steps.branch.outputs.head) }},\n    '-m', COMMIT_MESSAGE,\n    '--sha', SHA,\n    ...DELETED_FILES.split('\\n').filter(Boolean).flatMap(file => ['--delete', file]),\n    ...ADDED_FILES.split('\\n').filter(Boolean).flatMap(file => ['--add', file]),\n  ], { stdio: 'inherit' });\nEOF\n"
            },
            {
                "id": 13,
                "name": "Publish vote summary comment",
                "run": "gh pr comment \"${{ steps.pr-url.outputs.URL }}\" --body-file summaryComment.md\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "! grep -q \"subject: REPLACEME\" votes/initiateNewVote.yml"
            },
            {
                "id": 3,
                "name": "Validate YAML and ensure there are more than 1 candidate",
                "run": "npx js-yaml votes/initiateNewVote.yml | jq '.candidates | unique | length > 1 or error(\"Not enough candidates\")'"
            },
            {
                "id": 4,
                "name": "Change base branch",
                "run": "gh api \\\n  --method POST \\\n  -H \"Accept: application/vnd.github+json\" \\\n  -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n  /repos/${{ github.repository }}/git/refs \\\n  -f ref='refs/heads/initiateNewVote' \\\n  -f sha='${{ github.event.pull_request.base.sha }}' || true\ngh pr edit ${{ github.event.pull_request.html_url }} --base 'initiateNewVote'\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Extract info from the pushed file",
                "run": "npx js-yaml votes/initiateNewVote/_EDIT_ME.yml > data.json\necho \"json_data<<EOF\" >> \"$GITHUB_OUTPUT\"\ncat data.json >> \"$GITHUB_OUTPUT\"\necho \"EOF\" >> \"$GITHUB_OUTPUT\"\necho \"branchName=votes/$(node -p 'require(\"./data.json\")[\"path-friendly-id\"] || crypto.randomUUID()')\" >> \"$GITHUB_OUTPUT\"\nnode >> \"$GITHUB_ENV\" <<'EOF'\n'use strict';\nconst { createHash } = require('node:crypto');\nconst { candidates } = require(\"./data.json\");\nfor (let i = 0; i < candidates.length; i++) {\n  const delimiter = createHash('sha256').update(candidates[i], 'utf8').digest('base64');\n  console.log(`__CANDIDATES_${i}<<${delimiter}`)\n  process.stdout.write(candidates[i]);\n  process.stdout.write(`\\n${delimiter}\\n`);\n}\nconsole.log('__CANDIDATES<<EOF');\nfor (let i = 0; i < candidates.length; i++) {\n  console.log(`--candidate \"$__CANDIDATES_${i}\" \\\\`);\n}\nif (candidates.length) console.log('');\nconsole.log('EOF');\nEOF\n"
            },
            {
                "id": 3,
                "name": "Reset to the base branch",
                "run": "git fetch origin HEAD && git reset FETCH_HEAD --hard"
            },
            {
                "id": 4,
                "name": "Install npm dependencies",
                "run": "npm install @node-core/caritat"
            },
            {
                "id": 5,
                "name": "Configure git",
                "run": "git config --global user.email \"github-bot@iojs.org\"\ngit config --global user.name \"Node.js GitHub Bot\"\n"
            },
            {
                "id": 6,
                "name": "Configure and (re)start GPG agent",
                "run": "if [ -f /usr/lib/systemd/user/gpg-agent.service ]; then\n  mkdir ~/.gnupg\n  cat <<EOT >> ~/.gnupg/gpg-agent.conf\n  allow-preset-passphrase\n  default-cache-ttl 60\n  max-cache-ttl 50\nEOT\n  chmod 600 ~/.gnupg/*\n  chmod 700 ~/.gnupg\n  systemctl --user restart gpg-agent\nelse\n  gpg-agent --daemon --allow-preset-passphrase \\\n  --default-cache-ttl 60 --max-cache-ttl 60\nfi\n"
            },
            {
                "id": 7,
                "name": "Generate the vote init commit",
                "run": "./votes/initiateNewVote/generateNewVote.mjs \\\n  --remote origin \\\n  --github-repo-name \"$GITHUB_REPOSITORY\" \\\n  --vote-repository-path . \\\n  --branch \"$__BRANCH\" \\\n  --subject \"$__SUBJECT\" \\\n  ${{ env.__CANDIDATES }} \\\n  --shuffle-candidates \"$__SHUFFLE_CANDIDATES\" \\\n  --header-instructions \"$__HEADER_INSTRUCTIONS\" \\\n  --footer-instructions \"$__FOOTER_INSTRUCTIONS\"\n"
            },
            {
                "id": 8,
                "name": "Install ghcommit",
                "run": "go install github.com/planetscale/ghcommit@8c6d9af75a7814768ce871cde246224d45bd8c04"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "git reset HEAD --hard"
            },
            {
                "id": 10,
                "name": "Generate the vote branch",
                "run": "gh api \\\n  --method POST \\\n  -H \"Accept: application/vnd.github+json\" \\\n  -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n  /repos/${{ github.repository }}/git/refs \\\n  -f \"ref=refs/heads/${{ steps.data.outputs.branchName }}\" -f \"sha=$(git rev-parse HEAD^)\"\n\nGH_COMMIT_PATH=\"$(go env GOPATH)/bin/ghcommit\" COMMIT_MESSAGE=\"$(\n  git log -1 HEAD --pretty=format:%B\n)\" SHA=\"$(\n  git rev-parse HEAD^\n)\" DELETED_FILES=\"$(\n  git show HEAD --name-only --diff-filter=D --pretty=format:\n)\" ADDED_FILES=\"$(\n  git show HEAD --name-only --diff-filter=d --pretty=format:\n)\" node --input-type=module <<'EOF'\n  import { spawnSync } from \"node:child_process\";\n  const {GH_COMMIT_PATH, COMMIT_MESSAGE, SHA, DELETED_FILES, ADDED_FILES} = process.env;\n  spawnSync(GH_COMMIT_PATH, [\n    '-r', ${{ toJSON(github.repository) }},\n    '-b', ${{ toJSON(steps.data.outputs.branchName) }},\n    '-m', COMMIT_MESSAGE,\n    '--sha', SHA,\n    ...DELETED_FILES.split('\\n').filter(Boolean).flatMap(file => ['--delete', file]),\n    ...ADDED_FILES.split('\\n').filter(Boolean).flatMap(file => ['--add', file]),\n  ], { stdio: 'inherit' });\nEOF\n"
            },
            {
                "id": 11,
                "name": "Open the vote PR",
                "run": "./votes/initiateNewVote/generateNewVotePR.mjs \\\n  --github-repo-name \"$GITHUB_REPOSITORY\" \\\n  --branch \"$__BRANCH\" \\\n  --subject \"$__SUBJECT\" \\\n  --pr-intro \"$__PR_INTRO\"\n"
            },
            {
                "id": 12,
                "name": "Remove initiateNewVote branch if there are no open PRs, or revert commit",
                "run": "set -x\nif [[ \"$(gh search prs --repo=${{ github.repository }} --state open -B initiateNewVote --jq '. | length' --json id)\" == \"0\" ]]; then\n  gh api \\\n    --method DELETE \\\n    -H \"Accept: application/vnd.github+json\" \\\n    -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n    \"/repos/$GITHUB_REPOSITORY/git/$GITHUB_REF\"\nelse\n  git reset ${{ github.sha }} --hard\n  git revert HEAD --no-edit\n  GH_COMMIT_PATH=\"$(go env GOPATH)/bin/ghcommit\" COMMIT_MESSAGE=\"$(\n    git log -1 HEAD --pretty=format:%B\n  )\" DELETED_FILES=\"$(\n    git show HEAD --name-only --diff-filter=D --pretty=format:\n  )\" ADDED_FILES=\"$(\n    git show HEAD --name-only --diff-filter=d --pretty=format:\n  )\" node --input-type=module <<'EOF'\n    import { spawnSync } from \"node:child_process\";\n    const {GH_COMMIT_PATH, COMMIT_MESSAGE, DELETED_FILES, ADDED_FILES} = process.env;\n    spawnSync(GH_COMMIT_PATH, [\n      '-r', ${{ toJSON(github.repository) }},\n      '-b', 'initiateNewVote',\n      '-m', COMMIT_MESSAGE,\n      '--sha', ${{ toJSON(github.sha) }},\n      ...DELETED_FILES.split('\\n').filter(Boolean).flatMap(file => ['--delete', file]),\n      ...ADDED_FILES.split('\\n').filter(Boolean).flatMap(file => ['--add', file]),\n    ], { stdio: 'inherit' });\nEOF\nfi\n"
            },
            {
                "id": 1,
                "name": "Compute number of commits in the PR",
                "run": "echo \"plusOne=$((${{ github.event.pull_request.commits }} + 1))\" >> $GITHUB_OUTPUT\necho \"minusOne=$((${{ github.event.pull_request.commits }} - 1))\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 3,
                "name": "Download nodejs/node mailmap file",
                "run": "curl -L https://raw.githubusercontent.com/nodejs/node/main/.mailmap >> .mailmap"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm install @node-core/caritat"
            },
            {
                "id": 5,
                "name": "Get PR description",
                "run": "EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)\necho \"markdown<<$EOF\" >> \"$GITHUB_OUTPUT\"\ngh pr view \"${{ github.event.pull_request.html_url }}\" --json body --jq '.body' >> \"$GITHUB_OUTPUT\"\necho \"$EOF\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 6,
                "name": "Get updated vote status",
                "run": "echo \"prStatus=$(./votes/initiateNewVote/getVoteStatus.mjs)\" >> \"$GITHUB_OUTPUT\"; cat \"$GITHUB_OUTPUT\""
            },
            {
                "id": 7,
                "name": "Update PR description",
                "run": "gh pr edit \"${{ github.event.pull_request.html_url }}\" --body \"$BODY\""
            },
            {
                "id": 8,
                "name": "Add comment if some invalid commits were found",
                "run": "gh pr comment \"${{ github.event.pull_request.html_url }}\" -b \"$SUMMARY\""
            },
            {
                "id": 9,
                "name": "Mark workflow as failed if some invalid commits were found",
                "run": "false"
            }
        ],
        "nodejs/branch-diff": [
            {
                "id": 1,
                "name": "Checkout Repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node }}",
                "run": "actions/setup-node@v4.0.2"
            },
            {
                "id": 3,
                "name": "Install Dependencies",
                "run": "npm install --no-progress\n"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "npm config set script-shell bash\nnpm run test:ci\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4.0.2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm install --no-progress --no-package-lock --no-save\n"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "npm run build\n"
            },
            {
                "id": 5,
                "name": "Install plugins",
                "run": "npm install \\\n  @semantic-release/commit-analyzer \\\n  conventional-changelog-conventionalcommits \\\n  @semantic-release/release-notes-generator \\\n  @semantic-release/npm \\\n  @semantic-release/github \\\n  @semantic-release/git \\\n  @semantic-release/changelog \\\n  --no-progress --no-package-lock --no-save\n"
            },
            {
                "id": 6,
                "name": "Release",
                "run": "npx semantic-release"
            }
        ],
        "nodejs/help": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@28ca1036281a5e5922ead5184a1bbf96e5fc984e"
            }
        ],
        "nodejs/full-icu-npm": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm i"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm run lint"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm i"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm t"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v8"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install full-icu",
                "run": "docker run --rm  -v $(pwd):/usr/src/app -w /usr/src/app  ${{ matrix.container }} npm i --no-package-lock --unsafe-perm"
            },
            {
                "id": 4,
                "name": "Test full-icu",
                "run": "docker run --rm -e NODE_ICU_DATA=. -v $(pwd):/usr/src/app -w /usr/src/app  ${{ matrix.container }} node ./full-icu-test/test.js"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install full-icu",
                "run": "docker run --rm  -v $(pwd):/usr/src/app -w /usr/src/app  ${{ matrix.container }} env FULL_ICU_PREFER_NPM=1 npm i --no-package-lock --unsafe-perm"
            },
            {
                "id": 4,
                "name": "Test full-icu",
                "run": "docker run --rm -e NODE_ICU_DATA=. -v $(pwd):/usr/src/app -w /usr/src/app  ${{ matrix.container }} node ./full-icu-test/test.js"
            }
        ],
        "nodejs/llnode": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node.version }} ${{ matrix.node.mirror }}",
                "run": "No9/setup-node@mirror"
            },
            {
                "id": 3,
                "name": "install dependencies Linux",
                "run": "use_llvm_repos=0\n\ncase \"${{ matrix.os }}-${{ matrix.llvm }}\" in\n  ubuntu-18.04-10) use_llvm_repos=1;;\n  ubuntu-18.04-11) use_llvm_repos=1;;\n  ubuntu-18.04-12) use_llvm_repos=1;;\n  ubuntu-18.04-13) use_llvm_repos=1;;\n  ubuntu-18.04-14) use_llvm_repos=1;;\n  ubuntu-20.04-13) use_llvm_repos=1;;\n  ubuntu-20.04-14) use_llvm_repos=1;;\n  *) use_llvm_repos=0;;\nesac\n\nif [[ ${use_llvm_repos} == 1 ]]; then\n  wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -;\n  release=\"$(lsb_release -cs)\"\n  cat << EOF | sudo tee /etc/apt/sources.list.d/llvm-${{ matrix.llvm }}.list\ndeb http://apt.llvm.org/${release}/ llvm-toolchain-${release}-${{ matrix.llvm }} main\ndeb-src http://apt.llvm.org/${release}/ llvm-toolchain-${release}-${{ matrix.llvm }} main\nEOF\nfi\n\nsudo apt-get -qq update\nsudo apt-get install -y --no-install-recommends \\\n  lcov gdb \\\n  lldb-${{ matrix.llvm }} \\\n  liblldb-${{ matrix.llvm }}-dev\n\nif [[ -n \"$(which lldb-${{ matrix.llvm }})\" ]]; then\n  sudo ln -s \"$(which lldb-${{ matrix.llvm }})\" /usr/bin/lldb\n  sudo mkdir -p /usr/lib/lib/python3.8\n  sudo ln -s /usr/lib/llvm-${{ matrix.llvm }}/lib/python3.8/site-packages /usr/lib/lib/python3.8/site-packages\nfi\n\nif [[ -n \"$(which llvm-config-${{ matrix.llvm }})\" ]]; then\n  sudo ln -s \"$(which llvm-config-${{ matrix.llvm }})\" /usr/bin/llvm-config\nfi\n"
            },
            {
                "id": 4,
                "name": "npm install",
                "run": "npm install --llnode_build_addon=true --llnode_coverage=true\n"
            },
            {
                "id": 5,
                "name": "run tests",
                "run": "TEST_LLDB_BINARY=`which lldb-${{ matrix.llvm }}` npm run nyc-test-all"
            },
            {
                "id": 6,
                "name": "run tests (nightly)",
                "run": "TEST_LLDB_BINARY=`which lldb-${{ matrix.llvm }}` npm run nyc-test-all"
            },
            {
                "id": 7,
                "name": "prepare coverage",
                "run": "npm run coverage\ncat ./coverage-js.info > ./coverage.info\ncat ./coverage-cc.info >> ./coverage.info\n"
            },
            {
                "id": 8,
                "name": "Upload coverage report to Codecov",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Use Node.js LTS",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "npm install, build, and test",
                "run": "sudo apt-get -qq update\nsudo apt-get install lldb-6.0 liblldb-6.0-dev lcov -y\nsudo ln -s $(which lldb-6.0) /usr/bin/lldb\nnpm install\nnpm run linter\n"
            }
        ],
        "nodejs/core-validate-commit": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm run build --if-present"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "npm run test-ci"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "bash <(curl -s https://codecov.io/bash)"
            }
        ]
    },
    "Stability-AI": {
        "Stability-AI/gpt-neox": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade Pip",
                "run": "python -m pip install --upgrade pip"
            },
            {
                "id": 4,
                "name": "Install Dependencies",
                "run": "sudo apt-get install libopenmpi-dev -y\npip install torch==1.8.2 torchvision==0.9.2 torchaudio==0.8.2 --extra-index-url https://download.pytorch.org/whl/lts/1.8/cpu\npip install -r requirements/requirements.txt\npip install -r requirements/requirements-dev.txt\npip install -r requirements/requirements-wandb.txt\n"
            },
            {
                "id": 5,
                "name": "Prepare Data",
                "run": "python prepare_data.py"
            },
            {
                "id": 6,
                "name": "Run CPU Tests",
                "run": "PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python pytest tests -m cpu"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Docker meta",
                "run": "crazy-max/ghaction-docker-meta@v1"
            },
            {
                "id": 3,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v1"
            },
            {
                "id": 4,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 5,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v1"
            },
            {
                "id": 6,
                "name": "Build and push",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 7,
                "name": "Image digest",
                "run": "echo ${{ steps.docker_build.outputs.digest }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v2.0.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rm megatron/__init__.py\npip install shortuuid\nrm megatron/neox_arguments/__init__.py\npython configs/gen_docs.py\ngit config user.name github-actions\ngit config user.email github-actions@github.com\ngit add configs/neox_arguments.md\ngit commit -m \"Update NeoXArgs docs automatically\"\ngit push\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "prepare data",
                "run": "python prepare_data.py"
            },
            {
                "id": 3,
                "name": "Run Tests",
                "run": "pytest --forked tests"
            }
        ],
        "Stability-AI/api-interfaces": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "bufbuild/buf-setup-action@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "bufbuild/buf-breaking-action@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 6,
                "name": "Prepare artifacts for commit",
                "run": "cp -r ${{ runner.temp }}/docker-build/gooseai ./\n"
            },
            {
                "id": 7,
                "name": "Commit modified artifacts (if any)",
                "run": "EndBug/add-and-commit@v9"
            }
        ],
        "Stability-AI/diffusers": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install -e .[quality,test]\npython -m pip install -U git+https://github.com/huggingface/transformers\npython -m pip install git+https://github.com/huggingface/accelerate\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 5,
                "name": "Run nightly PyTorch CUDA tests",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 6,
                "name": "Run nightly Flax TPU tests",
                "run": "python -m pytest -n 0 \\\n  -s -v -k \"Flax\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 7,
                "name": "Run nightly ONNXRuntime CUDA tests",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"Onnx\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 8,
                "name": "Failure short reports",
                "run": "cat reports/tests_${{ matrix.config.report }}_failures_short.txt"
            },
            {
                "id": 9,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Clean checkout",
                "run": "git clean -fxd\n"
            },
            {
                "id": 3,
                "name": "Setup miniconda",
                "run": "./.github/actions/setup-miniconda"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "${CONDA_RUN} python -m pip install --upgrade pip\n${CONDA_RUN} python -m pip install -e .[quality,test]\n${CONDA_RUN} python -m pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu\n${CONDA_RUN} python -m pip install git+https://github.com/huggingface/accelerate\n"
            },
            {
                "id": 5,
                "name": "Environment",
                "run": "${CONDA_RUN} python utils/print_env.py\n"
            },
            {
                "id": 6,
                "name": "Run nightly PyTorch tests on M1 (MPS)",
                "run": "${CONDA_RUN} python -m pytest -n 1 -s -v --make-reports=tests_torch_mps tests/\n"
            },
            {
                "id": 7,
                "name": "Failure short reports",
                "run": "cat reports/tests_torch_mps_failures_short.txt"
            },
            {
                "id": 8,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install .[quality]\n"
            },
            {
                "id": 4,
                "name": "Check quality",
                "run": "black --check examples tests src utils scripts\nruff examples tests src utils scripts\ndoc-builder style src/diffusers docs/source --max_len 119 --check_only --path_to_docs docs/source\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install .[quality]\n"
            },
            {
                "id": 4,
                "name": "Check quality",
                "run": "python utils/check_copies.py\npython utils/check_dummies.py\n"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "apt-get update && apt-get install libsndfile1-dev -y\npython -m pip install -e .[quality,test]\npython -m pip install -U git+https://github.com/huggingface/transformers\npython -m pip install git+https://github.com/huggingface/accelerate\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Run fast PyTorch CPU tests",
                "run": "python -m pytest -n 2 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 5,
                "name": "Run fast Flax TPU tests",
                "run": "python -m pytest -n 2 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"Flax\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 6,
                "name": "Run fast ONNXRuntime CPU tests",
                "run": "python -m pytest -n 2 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"Onnx\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 7,
                "name": "Run example PyTorch CPU tests",
                "run": "python -m pytest -n 2 --max-worker-restart=0 --dist=loadfile \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  examples/test_examples.py \n"
            },
            {
                "id": 8,
                "name": "Failure short reports",
                "run": "cat reports/tests_${{ matrix.config.report }}_failures_short.txt"
            },
            {
                "id": 9,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Clean checkout",
                "run": "git clean -fxd\n"
            },
            {
                "id": 3,
                "name": "Setup miniconda",
                "run": "./.github/actions/setup-miniconda"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "${CONDA_RUN} python -m pip install --upgrade pip\n${CONDA_RUN} python -m pip install -e .[quality,test]\n${CONDA_RUN} python -m pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu\n${CONDA_RUN} python -m pip install git+https://github.com/huggingface/accelerate\n${CONDA_RUN} python -m pip install -U git+https://github.com/huggingface/transformers\n"
            },
            {
                "id": 5,
                "name": "Environment",
                "run": "${CONDA_RUN} python utils/print_env.py\n"
            },
            {
                "id": 6,
                "name": "Run fast PyTorch tests on M1 (MPS)",
                "run": "${CONDA_RUN} python -m pytest -n 0 -s -v --make-reports=tests_torch_mps tests/\n"
            },
            {
                "id": 7,
                "name": "Failure short reports",
                "run": "cat reports/tests_torch_mps_failures_short.txt"
            },
            {
                "id": 8,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install -e .[quality,test]\npython -m pip install -U git+https://github.com/huggingface/transformers\npython -m pip install git+https://github.com/huggingface/accelerate\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 5,
                "name": "Run slow PyTorch CUDA tests",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 6,
                "name": "Run slow Flax TPU tests",
                "run": "python -m pytest -n 0 \\\n  -s -v -k \"Flax\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 7,
                "name": "Run slow ONNXRuntime CUDA tests",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"Onnx\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 8,
                "name": "Failure short reports",
                "run": "cat reports/tests_${{ matrix.config.report }}_failures_short.txt"
            },
            {
                "id": 9,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "NVIDIA-SMI",
                "run": "nvidia-smi\n"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install -e .[quality,test,training]\npython -m pip install git+https://github.com/huggingface/accelerate\npython -m pip install -U git+https://github.com/huggingface/transformers\n"
            },
            {
                "id": 4,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 5,
                "name": "Run example tests on GPU",
                "run": "python -m pytest -n 1 --max-worker-restart=0 --dist=loadfile -s -v --make-reports=examples_torch_cuda examples/\n"
            },
            {
                "id": 6,
                "name": "Failure short reports",
                "run": "cat reports/examples_torch_cuda_failures_short.txt"
            },
            {
                "id": 7,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "apt-get update && apt-get install libsndfile1-dev -y\npython -m pip install -e .[quality,test]\npython -m pip install -U git+https://github.com/huggingface/transformers\npython -m pip install git+https://github.com/huggingface/accelerate\n"
            },
            {
                "id": 3,
                "name": "Environment",
                "run": "python utils/print_env.py\n"
            },
            {
                "id": 4,
                "name": "Run fast PyTorch CPU tests",
                "run": "python -m pytest -n 2 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"not Flax and not Onnx\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 5,
                "name": "Run fast Flax TPU tests",
                "run": "python -m pytest -n 2 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"Flax\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 6,
                "name": "Run fast ONNXRuntime CPU tests",
                "run": "python -m pytest -n 2 --max-worker-restart=0 --dist=loadfile \\\n  -s -v -k \"Onnx\" \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  tests/\n"
            },
            {
                "id": 7,
                "name": "Run example PyTorch CPU tests",
                "run": "python -m pytest -n 2 --max-worker-restart=0 --dist=loadfile \\\n  --make-reports=tests_${{ matrix.config.report }} \\\n  examples/test_examples.py \n"
            },
            {
                "id": 8,
                "name": "Failure short reports",
                "run": "cat reports/tests_${{ matrix.config.report }}_failures_short.txt"
            },
            {
                "id": 9,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout diffusers",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Clean checkout",
                "run": "git clean -fxd\n"
            },
            {
                "id": 3,
                "name": "Setup miniconda",
                "run": "./.github/actions/setup-miniconda"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "${CONDA_RUN} python -m pip install --upgrade pip\n${CONDA_RUN} python -m pip install -e .[quality,test]\n${CONDA_RUN} python -m pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu\n${CONDA_RUN} python -m pip install git+https://github.com/huggingface/accelerate\n${CONDA_RUN} python -m pip install -U git+https://github.com/huggingface/transformers\n"
            },
            {
                "id": 5,
                "name": "Environment",
                "run": "${CONDA_RUN} python utils/print_env.py\n"
            },
            {
                "id": 6,
                "name": "Run fast PyTorch tests on M1 (MPS)",
                "run": "${CONDA_RUN} python -m pytest -n 0 -s -v --make-reports=tests_torch_mps tests/\n"
            },
            {
                "id": 7,
                "name": "Failure short reports",
                "run": "cat reports/tests_torch_mps_failures_short.txt"
            },
            {
                "id": 8,
                "name": "Test suite reports artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install requirements",
                "run": "pip install PyGithub\n"
            },
            {
                "id": 4,
                "name": "Close stale issues",
                "run": "python utils/stale.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "typos-action",
                "run": "crate-ci/typos@v1.12.4"
            }
        ],
        "Stability-AI/stability-sdk": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install build dependencies",
                "run": "python -m pip install --upgrade pip\npip install setuptools wheel twine build\n"
            },
            {
                "id": 4,
                "name": "Build package",
                "run": "python -m build\n"
            },
            {
                "id": 5,
                "name": "Install package",
                "run": "python setup.py install\n"
            },
            {
                "id": 6,
                "name": "Test package",
                "run": "python -m stability_sdk A beautiful painting of a happy robot\npython -m stability_sdk.client A nice drawing of a horse\n"
            },
            {
                "id": 7,
                "name": "Publish to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            }
        ],
        "Stability-AI/k-diffusion": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-ecosystem/action-regex-match@v2"
            },
            {
                "id": 3,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install setuptools wheel twine\n"
            },
            {
                "id": 5,
                "name": "Release",
                "run": "softprops/action-gh-release@v1"
            },
            {
                "id": 6,
                "name": "Build and publish",
                "run": "python setup.py sdist bdist_wheel\ntwine upload dist/*\n"
            }
        ],
        "Stability-AI/rest-api-support": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 4,
                "name": "yarn install",
                "run": "yarn install --frozen-lockfile\n"
            },
            {
                "id": 5,
                "name": "yarn generate",
                "run": "yarn generate\n"
            },
            {
                "id": 6,
                "name": "Commit changes (if any)",
                "run": "EndBug/add-and-commit@v9"
            },
            {
                "id": 7,
                "name": "yarn lint",
                "run": "yarn lint\n"
            },
            {
                "id": 8,
                "name": "Checkout base branch",
                "run": "actions/checkout@v2"
            },
            {
                "id": 9,
                "name": "Check v1beta for breaking changes",
                "run": "mvegter/openapi-diff-action@v0.23.5"
            },
            {
                "id": 10,
                "name": "Check v1 for breaking changes",
                "run": "mvegter/openapi-diff-action@v0.23.5"
            }
        ],
        "Stability-AI/lm-evaluation-harness": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v2.0.3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Cache",
                "run": "actions/cache@v2.1.3"
            },
            {
                "id": 3,
                "name": "Set up Python 3.9",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install flake8 pytest pytest-cov\npip install -e .[dev,multilingual]\n# Install optional git dependencies\npip install bleurt@https://github.com/google-research/bleurt/archive/b610120347ef22b494b6d69b4316e303f5932516.zip#egg=bleurt\nif [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n"
            },
            {
                "id": 5,
                "name": "Lint with flake8",
                "run": "# stop the build if there are Python syntax errors or undefined names\nflake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n# exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\nflake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n"
            },
            {
                "id": 6,
                "name": "Test with pytest",
                "run": "pytest -vv --cov=lm_eval/ tests/\n"
            },
            {
                "id": 7,
                "name": "Upload to codecov",
                "run": "bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN\n"
            }
        ],
        "Stability-AI/truss": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "curl -sSL https://install.python-poetry.org | python3 -"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "VERSION=$(poetry version | awk '{print $2}')\necho \"version=$VERSION\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 3,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v1"
            },
            {
                "id": 4,
                "name": "Docker meta",
                "run": "docker/metadata-action@v3"
            },
            {
                "id": 5,
                "name": "Docker Build",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup-python/"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "poetry install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "poetry run pytest truss/tests -m 'integration' --splits 5 --group ${{ matrix.split_group }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup-python/"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "poetry install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "poetry run pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "poetry run isort **/*.py --check-only"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "poetry run flake8 truss"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup-python/"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "poetry install"
            },
            {
                "id": 4,
                "name": "run tests (poetry run pytest...)",
                "run": "poetry run pytest -v --cov=truss -m 'not integration'"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gaurav-nelson/github-action-markdown-link-check@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "curl -sSL https://install.python-poetry.org | python3 -"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "NEW_VERSION=$(poetry version | awk '{print $2}')\nNEW_BASE_IMAGE_VERSION=$(grep TRUSS_BASE_IMAGE_VERSION_TAG truss/contexts/image_builder/util.py | cut -d'=' -f2 | cut -d'\"' -f2)\n\ngit checkout HEAD^1 -- pyproject.toml truss/contexts/image_builder/util.py\nOLD_VERSION=$(poetry version | awk '{print $2}')\nOLD_BASE_IMAGE_VERSION=$(grep TRUSS_BASE_IMAGE_VERSION_TAG truss/contexts/image_builder/util.py | cut -d'=' -f2 | cut -d'\"' -f2)\n\n# Put back things into place\ngit checkout HEAD -- pyproject.toml truss/contexts/image_builder/util.py\n\necho \"new_version=$NEW_VERSION\" >> $GITHUB_OUTPUT\necho \"new_base_image_version=$NEW_BASE_IMAGE_VERSION\" >> $GITHUB_OUTPUT\n\nif [[ \"$NEW_VERSION\" != \"$OLD_VERSION\" ]]; then\n  echo \"version_changed=true\" >> $GITHUB_OUTPUT\n  if [[ \"$NEW_VERSION\" == *\"dev\"* ]]; then\n    echo \"release_version=false\" >> $GITHUB_OUTPUT\n  else\n    echo \"release_version=true\" >> $GITHUB_OUTPUT\n    if [[ \"$NEW_VERSION\" == *\"rc\"* ]]; then\n      echo \"is_prerelease_version=true\" >> $GITHUB_OUTPUT\n    else\n      echo \"is_prerelease_version=false\" >> $GITHUB_OUTPUT\n    fi\n  fi\nelse\n  echo \"version_changed=false\" >> $GITHUB_OUTPUT\nfi\n\nif [[ \"$NEW_BASE_IMAGE_VERSION\" != \"$OLD_BASE_IMAGE_VERSION\" ]]; then\n  echo \"build_base_images=true\" >> $GITHUB_OUTPUT\nelse\n  echo \"build_base_images=false\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 2,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v3"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./.github/actions/setup-python/"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "poetry install"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "poetry run bin/generate_base_images.py \\\n  --use-gpu ${{ matrix.use_gpu }}  \\\n  --python-version ${{ matrix.python_version }} \\\n  --job-type ${{ matrix.job_type }} \\\n  --version-tag ${{ needs.detect-version-changed.outputs.new_base_image_version }} \\\n  --skip-login --push\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup-python/"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "poetry install"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "poetry run pytest truss/tests  -m 'integration' --splits 5 --group ${{ matrix.split_group }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 3,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v1"
            },
            {
                "id": 4,
                "name": "Docker meta",
                "run": "docker/metadata-action@v3"
            },
            {
                "id": 5,
                "name": "Docker Build",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 1,
                "name": "Git tag release",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "NEW_VERSION=v${{ needs.detect-version-changed.outputs.new_version }}\ngit config --global user.name \"Github action\"\ngit config --global user.email \"github.action@baseten.co\"\n\ngit tag -a $NEW_VERSION -m \"Release $NEW_VERSION\"\ngit push origin $NEW_VERSION\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./.github/actions/setup-python/"
            },
            {
                "id": 4,
                "name": "Install poetry packages",
                "run": "poetry install --no-dev"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "poetry build"
            },
            {
                "id": 6,
                "name": "Create Release",
                "run": "ncipollo/release-action@v1.12.0"
            },
            {
                "id": 7,
                "name": "Publish to PyPI",
                "run": "poetry publish -u \"${{ secrets.PYPI_USERNAME }}\" -p \"${{ secrets.PYPI_PASSWORD }}\""
            }
        ],
        "Stability-AI/generative-models": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install venv",
                "run": "sudo apt-get -y install python3.10-venv\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "psf/black@stable"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Symlink checkpoints",
                "run": "ln -s ${{vars.SGM_CHECKPOINTS_PATH}} checkpoints"
            },
            {
                "id": 3,
                "name": "Setup python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Install Hatch",
                "run": "pip install hatch"
            },
            {
                "id": 5,
                "name": "Run inference tests",
                "run": "hatch run ci:test-inference --junit-xml test-results.xml"
            },
            {
                "id": 6,
                "name": "Surface failing tests",
                "run": "pmeier/pytest-results-action@main"
            }
        ],
        "Stability-AI/devcontainer-features": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Validate devcontainer-feature.json files",
                "run": "devcontainers/action@v1"
            }
        ],
        "Stability-AI/DeepSpeed": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip install --cache-dir $TORCH_CACHE torch==1.13.1 torchvision --extra-index-url https://download.pytorch.org/whl/rocm5.1.1\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install transformers",
                "run": "git clone https://github.com/huggingface/transformers\ncd transformers\n# if needed switch to the last known good SHA until transformers@master is fixed\n# git checkout 1cc453d33\ngit rev-parse --short HEAD\npip install .\n"
            },
            {
                "id": 5,
                "name": "Install deepspeed",
                "run": "pip install .[dev,1bit,autotuning]\n#python -c \"from deepspeed.env_report import cli_main; cli_main()\"\nds_report\n"
            },
            {
                "id": 6,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 7,
                "name": "Unit tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\npytest $PYTEST_OPTS -n 4 --verbose unit/\npytest $PYTEST_OPTS -m 'sequential' unit/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip install -U --cache-dir $TORCH_CACHE torch torchvision --extra-index-url https://download.pytorch.org/whl/rocm5.4.2\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install transformers",
                "run": "git clone https://github.com/huggingface/transformers\ncd transformers\n# if needed switch to the last known good SHA until transformers@master is fixed\n# git checkout 1cc453d33\ngit rev-parse --short HEAD\npip install .\n"
            },
            {
                "id": 5,
                "name": "Install (ROCm) apex",
                "run": "git clone https://github.com/ROCmSoftwarePlatform/apex.git\ncd apex\nCURRENT_VER=$(git rev-parse HEAD)\nINSTALLED_VER=$(cat /blob/amd-apex/.venv_installed_version)\nif [[ \"$CURRENT_VER\" != \"$INSTALLED_VER\" ]]; then\n  pip install -v --disable-pip-version-check --no-cache-dir --no-build-isolation --config-settings=\"--global-option=--cpp_ext\" --config-settings=\"--global-option=--cuda_ext\" --target=/blob/amd-apex/ --upgrade .\n  git rev-parse HEAD > /blob/amd-apex/.venv_installed_version\nfi\necho PYTHONPATH=$PYTHONPATH:/blob/amd-apex/ >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "Install deepspeed",
                "run": "pip install .[dev,1bit,autotuning]\n#python -c \"from deepspeed.env_report import cli_main; cli_main()\"\nds_report\n"
            },
            {
                "id": 7,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 8,
                "name": "Unit tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\npytest $PYTEST_OPTS -n 4 --verbose unit/\npytest $PYTEST_OPTS -m 'sequential' unit/\n"
            },
            {
                "id": 9,
                "name": "Open GitHub issue if nightly CI fails",
                "run": "JasonEtco/create-an-issue@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Get PR data",
                "run": "echo \"REPO=${{ github.repository }}\" >> $GITHUB_ENV\necho \"COMMIT_SHA=${{ github.event.after }}\" >> $GITHUB_ENV\necho \"SHORT_SHA=$(echo ${{ github.event.after }} | cut -c1-8)\" >> $GITHUB_ENV\necho \"USERNAME=${{ github.event.head_commit.author.username }}\" >> $GITHUB_ENV\necho \"USER_EMAIL=${{ github.event.head_commit.author.username }}@users.noreply.github.com\" >> $GITHUB_ENV\necho \"PR_NAME=$(echo '${{ github.event.head_commit.message }}' | head -1 | sed 's|#|${{ github.repository }}#|g')\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Cherry pick commit",
                "run": "cd dst-repo\ngit config --global user.name ${{ env.USERNAME }}\ngit config --global user.email ${{ env.USER_EMAIL }}\ngit fetch https://github.com/${{ env.REPO }}.git master\ngit cherry-pick FETCH_HEAD --strategy-option octopus\n"
            },
            {
                "id": 4,
                "name": "Add modified files",
                "run": "cd dst-repo\ngit add .\n"
            },
            {
                "id": 5,
                "name": "Create Pull Request",
                "run": "peter-evans/create-pull-request@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Detect instruction sets on instance",
                "run": "lscpu\npip install cmake\ngit clone https://github.com/intel/intel-extension-for-pytorch\ncd intel-extension-for-pytorch/tests/cpu/isa\ncmake .\nmake\n./cpu_features\n"
            },
            {
                "id": 4,
                "name": "Install numactl",
                "run": "sudo apt-get install -y numactl\n"
            },
            {
                "id": 5,
                "name": "Install oneCCL Bindings for PyTorch",
                "run": "python -m pip install intel_extension_for_pytorch\npython -m pip install oneccl_bind_pt==2.0 -f https://developer.intel.com/ipex-whl-stable-cpu\n"
            },
            {
                "id": 6,
                "name": "Install oneCCL",
                "run": "git clone https://github.com/oneapi-src/oneCCL\ncd oneCCL\nmkdir build\ncd build\ncmake ..\nmake\nmake install\n#source ./_install/env/setvars.sh\n# test whether oneCCL is correctly installed\n#mpirun -n 2 ./examples/benchmark/benchmark\n"
            },
            {
                "id": 7,
                "name": "Install transformers",
                "run": "git clone https://github.com/huggingface/transformers\ncd transformers\ngit rev-parse --short HEAD\npip install .\n"
            },
            {
                "id": 8,
                "name": "Install deepspeed",
                "run": "# check why the host does not have AVX2 support\npip install .[dev,1bit,autotuning,inf]\nds_report\n"
            },
            {
                "id": 9,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 10,
                "name": "Unit tests",
                "run": "source oneCCL/build/_install/env/setvars.sh\nunset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\nTRANSFORMERS_CACHE=~/tmp/transformers_cache/ TORCH_EXTENSIONS_DIR=./torch-extensions pytest -m 'seq_inference' unit/\nTRANSFORMERS_CACHE=~/tmp/transformers_cache/ TORCH_EXTENSIONS_DIR=./torch-extensions pytest -m 'inference_ops' -m 'inference' unit/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "environment",
                "run": "which python\npython --version\n"
            },
            {
                "id": 3,
                "name": "Install deepspeed",
                "run": "pip install .[dev,autotuning,triton]\nds_report\n"
            },
            {
                "id": 4,
                "name": "Formatting checks",
                "run": "pip show pre-commit clang-format\npre-commit run --all-files\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip install -U --cache-dir $TORCH_CACHE torch torchvision --extra-index-url https://download.pytorch.org/whl/cu111\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install deepspeed",
                "run": "pip install .[dev,autotuning]\nds_report\n"
            },
            {
                "id": 5,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 6,
                "name": "HF Accelerate tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ngit clone https://github.com/huggingface/accelerate\ncd accelerate\ngit rev-parse --short HEAD\n# installing dependencies\npip install .[testing]\n# force protobuf version due to issues\npip install \"protobuf<4.21.0\"\n# tmp fix: force newer datasets version\n#pip install \"datasets>=2.0.0\"\npip list\npytest $PYTEST_OPTS --color=yes --durations=0 --verbose tests/deepspeed\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip3 install -U --cache-dir $TORCH_CACHE torch\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install deepspeed",
                "run": "pip install .[dev]\nds_report\n"
            },
            {
                "id": 5,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 6,
                "name": "DS-Chat unit tests",
                "run": "BRANCH=\"master\"\nif [[ ! -z \"${{ github.event.inputs.dse_branch }}\" ]]; then\n    BRANCH=\"${{ github.event.inputs.dse_branch }}\"\nfi\necho \"DeepSpeedExamples Branch: $BRANCH\"\ngit clone -b $BRANCH https://github.com/microsoft/DeepSpeedExamples.git\ncd DeepSpeedExamples/applications/DeepSpeed-Chat\npip install -r requirements.txt\nunset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd training/tests\npytest $PYTEST_OPTS ./\n"
            },
            {
                "id": 7,
                "name": "Open GitHub issue if nightly CI fails",
                "run": "JasonEtco/create-an-issue@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Check container state",
                "run": "nvidia-smi\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 3,
                "name": "Install transformers",
                "run": "git clone https://github.com/huggingface/transformers\ncd transformers\ngit rev-parse --short HEAD\npython -m pip install .\n"
            },
            {
                "id": 4,
                "name": "Install deepspeed",
                "run": "python -m pip install docutils==0.18.1 jinja2==3.0 urllib3==1.26.11 ninja\npython -m pip install .[dev,1bit,autotuning]\nds_report\n"
            },
            {
                "id": 5,
                "name": "Python environment",
                "run": "python -m pip list\n"
            },
            {
                "id": 6,
                "name": "Unit tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\npython -m pytest $PYTEST_OPTS -n 4  unit/ --torch_ver=\"2.0\" --cuda_ver=\"12\"\npython -m pytest $PYTEST_OPTS -m 'sequential' unit/ --torch_ver=\"2.0\" --cuda_ver=\"12\"\n"
            },
            {
                "id": 7,
                "name": "Open GitHub issue if nightly CI fails",
                "run": "JasonEtco/create-an-issue@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip install -U --cache-dir $TORCH_CACHE torch==1.13.1 torchvision --extra-index-url https://download.pytorch.org/whl/cu116\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install transformers",
                "run": "git clone https://github.com/huggingface/transformers\ncd transformers\ngit rev-parse --short HEAD\npip install .\n"
            },
            {
                "id": 5,
                "name": "Install deepspeed",
                "run": "pip install .[dev,1bit,autotuning,inf,triton]\nds_report\n"
            },
            {
                "id": 6,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 7,
                "name": "Unit tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\ncoverage run --concurrency=multiprocessing -m pytest $PYTEST_OPTS -m 'seq_inference' unit/ --torch_ver=\"1.13\" --cuda_ver=\"11.6\"\ncoverage run --concurrency=multiprocessing -m pytest $PYTEST_OPTS -m 'inference_ops' unit/ --torch_ver=\"1.13\" --cuda_ver=\"11.6\"\ncoverage run --concurrency=multiprocessing -m pytest $PYTEST_OPTS --forked -n 4 -m 'inference' unit/ --torch_ver=\"1.13\" --cuda_ver=\"11.6\"\n"
            },
            {
                "id": 8,
                "name": "Coverage report",
                "run": "cd tests\ncoverage combine\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip install -U --cache-dir $TORCH_CACHE torch torchvision --extra-index-url https://download.pytorch.org/whl/cu116\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install deepspeed",
                "run": "pip install .[dev,autotuning]\nds_report\n"
            },
            {
                "id": 5,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 6,
                "name": "PyTorch Lightning Tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\npip install pytorch-lightning\npip install \"protobuf<4.21.0\"\ncd tests\npytest $PYTEST_OPTS lightning/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip install -U --cache-dir $TORCH_CACHE torch==1.13.1 torchvision --extra-index-url https://download.pytorch.org/whl/cu116\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install deepspeed",
                "run": "pip install .[dev]\nds_report\n"
            },
            {
                "id": 5,
                "name": "Install apex",
                "run": "git clone https://github.com/NVIDIA/apex.git\ncd apex\nCURRENT_VER=$(git rev-parse HEAD)\nINSTALLED_VER=$(cat /blob/apex/.venv_installed_version)\nif [[ \"$CURRENT_VER\" != \"$INSTALLED_VER\" ]]; then\n  pip install -v --disable-pip-version-check --no-cache-dir --no-build-isolation --config-settings \"--global-option=--cpp_ext\" --config-settings \"--global-option=--cuda_ext\" --target=/blob/apex/ --upgrade .\n  git rev-parse HEAD > /blob/apex/.venv_installed_version\nfi\necho PYTHONPATH=$PYTHONPATH:/blob/apex/ >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 7,
                "name": "Megatron unit tests",
                "run": "git clone https://github.com/microsoft/Megatron-DeepSpeed.git\ncd Megatron-DeepSpeed\npip install .\nunset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\npytest $PYTEST_OPTS ./\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip3 install -U --cache-dir $TORCH_CACHE torch\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install transformers",
                "run": "git clone https://github.com/huggingface/transformers\ncd transformers\n# if needed switch to the last known good SHA until transformers@master is fixed\n# git checkout 1cc453d33\ngit rev-parse --short HEAD\npip install .\n"
            },
            {
                "id": 5,
                "name": "Install deepspeed",
                "run": "pip install .[dev]\nds_report\n"
            },
            {
                "id": 6,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 7,
                "name": "MII unit tests",
                "run": "git clone https://github.com/microsoft/DeepSpeed-MII.git\ncd DeepSpeed-MII\npip install .[dev]\nunset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\npytest $PYTEST_OPTS --forked -m \"deepspeed\" ./\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip install -U --cache-dir $TORCH_CACHE torch==1.13.1 torchvision --extra-index-url https://download.pytorch.org/whl/cu116\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install transformers",
                "run": "git clone https://github.com/huggingface/transformers\ncd transformers\n# if needed switch to the last known good SHA until transformers@master is fixed\n# git checkout 1cc453d33\ngit rev-parse --short HEAD\npip install .\n"
            },
            {
                "id": 5,
                "name": "Install deepspeed",
                "run": "pip install .[dev,1bit,autotuning,inf]\nds_report\n"
            },
            {
                "id": 6,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 7,
                "name": "Unit tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\npytest $PYTEST_OPTS --forked -m 'nightly' unit/ --torch_ver=\"1.13\" --cuda_ver=\"11.6\"\n"
            },
            {
                "id": 8,
                "name": "Open GitHub issue if nightly CI fails",
                "run": "JasonEtco/create-an-issue@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "environment",
                "run": "which python\npython --version\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\n#python -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 3,
                "name": "Compile DeepSpeed Ops",
                "run": "TORCH_CUDA_ARCH_LIST=\"7.0;7.5;8.0\" DS_BUILD_OPS=1 DS_BUILD_SPARSE_ATTN=0 DS_BUILD_EVOFORMER_ATTN=0 pip3 install .\n"
            },
            {
                "id": 4,
                "name": "DS Report",
                "run": "ds_report\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip install torch==1.12.0+cpu torchvision==0.13.0+cpu torchaudio==0.12.0 --extra-index-url https://download.pytorch.org/whl/cpu\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install deepspeed",
                "run": "pip install .[dev,autotuning]\nds_report\n"
            },
            {
                "id": 5,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 6,
                "name": "Unit tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\nTRANSFORMERS_CACHE=/tmp/transformers_cache/ pytest $PYTEST_OPTS -n 4 unit/ --torch_ver=\"1.12\"\nTRANSFORMERS_CACHE=/tmp/transformers_cache/ pytest $PYTEST_OPTS -m 'sequential' unit/ --torch_ver=\"1.12\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip install -U --cache-dir $TORCH_CACHE torch torchvision --extra-index-url https://download.pytorch.org/whl/cu116\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install transformers",
                "run": "git clone https://github.com/huggingface/transformers\ncd transformers\n# if needed switch to the last known good SHA until transformers@master is fixed\n# git checkout 1cc453d33\ngit rev-parse --short HEAD\npip install .\n"
            },
            {
                "id": 5,
                "name": "Install deepspeed",
                "run": "pip install .[dev,1bit,autotuning]\nds_report\n"
            },
            {
                "id": 6,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 7,
                "name": "Unit tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\ncoverage run --concurrency=multiprocessing -m pytest $PYTEST_OPTS --forked -n 4 unit/ --torch_ver=\"2.0\" --cuda_ver=\"11.7\"\ncoverage run --concurrency=multiprocessing -m pytest $PYTEST_OPTS --forked -m 'sequential' unit/ --torch_ver=\"2.0\" --cuda_ver=\"11.7\"\n"
            },
            {
                "id": 8,
                "name": "Coverage report",
                "run": "cd tests\ncoverage combine\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip install --pre torch torchvision --extra-index-url https://download.pytorch.org/whl/nightly/cu116\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install transformers",
                "run": "git clone https://github.com/huggingface/transformers\ncd transformers\n# if needed switch to the last known good SHA until transformers@master is fixed\n# git checkout 1cc453d33\ngit rev-parse --short HEAD\npip install .\n"
            },
            {
                "id": 5,
                "name": "Install deepspeed",
                "run": "pip install .[dev,1bit,autotuning]\nds_report\n"
            },
            {
                "id": 6,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 7,
                "name": "Unit tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\npytest $PYTEST_OPTS --forked -n 4 unit/\npytest $PYTEST_OPTS --forked -m 'sequential' unit/\n"
            },
            {
                "id": 8,
                "name": "Open GitHub issue if nightly CI fails",
                "run": "JasonEtco/create-an-issue@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip install -U --cache-dir $TORCH_CACHE torch==1.10.0+cu111 torchvision==0.11.0+cu111 -f https://download.pytorch.org/whl/torch_stable.html\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install transformers",
                "run": "git clone https://github.com/huggingface/transformers\ncd transformers\n# if needed switch to the last known good SHA until transformers@master is fixed\n# git checkout 1cc453d33\ngit rev-parse --short HEAD\npip install .\n"
            },
            {
                "id": 5,
                "name": "Install deepspeed",
                "run": "pip install .[dev,1bit,autotuning] --no-build-isolation\nds_report\n"
            },
            {
                "id": 6,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 7,
                "name": "Unit tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\npytest $PYTEST_OPTS --forked -n 4 unit/ --torch_ver=\"1.10\" --cuda_ver=\"11.1\"\n"
            },
            {
                "id": 8,
                "name": "Open GitHub issue if nightly CI fails",
                "run": "JasonEtco/create-an-issue@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "pip install -U --cache-dir $TORCH_CACHE torch==1.10.0+cu111 torchvision==0.11.0+cu111 -f https://download.pytorch.org/whl/torch_stable.html\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install transformers",
                "run": "git clone https://github.com/huggingface/transformers\ncd transformers\n# if needed switch to the last known good SHA until transformers@master is fixed\n# git checkout 1cc453d33\ngit rev-parse --short HEAD\npip install .\n"
            },
            {
                "id": 5,
                "name": "Install deepspeed",
                "run": "pip install .[dev,1bit,autotuning] --no-build-isolation\nds_report\n"
            },
            {
                "id": 6,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 7,
                "name": "Unit tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd tests\npytest $PYTEST_OPTS --forked -n 4  unit/ --torch_ver=\"1.10\" --cuda_ver=\"11\"\npytest $PYTEST_OPTS --forked -m 'sequential' unit/ --torch_ver=\"1.10\" --cuda_ver=\"11\"\n"
            },
            {
                "id": 8,
                "name": "Open GitHub issue if nightly CI fails",
                "run": "JasonEtco/create-an-issue@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/workflows/setup-venv"
            },
            {
                "id": 3,
                "name": "Install pytorch",
                "run": "# use the same pytorch version as transformers CI\n  pip install -U --cache-dir $TORCH_CACHE torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu116\npython -c \"import torch; print('torch:', torch.__version__, torch)\"\npython -c \"import torch; print('CUDA available:', torch.cuda.is_available())\"\n"
            },
            {
                "id": 4,
                "name": "Install transformers",
                "run": "git clone https://github.com/huggingface/transformers\ncd transformers\n# if needed switch to the last known good SHA until transformers@master is fixed\ngit checkout e7e9261a2\ngit rev-parse --short HEAD\npip install .\n"
            },
            {
                "id": 5,
                "name": "Install deepspeed",
                "run": "pip install .[dev,autotuning]\nds_report\n"
            },
            {
                "id": 6,
                "name": "Python environment",
                "run": "pip list\n"
            },
            {
                "id": 7,
                "name": "HF transformers tests",
                "run": "unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch\ncd transformers\npip install .[testing]\n# find reqs used in ds integration tests\nfind examples/pytorch -regextype posix-egrep -regex '.*(language-modeling|question-answering|summarization|image-classification|text-classification|translation).*/requirements.txt' -exec grep -v 'torch' {} \\; | xargs -I {} pip install --upgrade {}\n# force protobuf version due to issues\npip install \"protobuf<4.21.0\"\npip list\nWANDB_DISABLED=true RUN_SLOW=1 pytest $PYTEST_OPTS tests/deepspeed\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "environment",
                "run": "which python\npython --version\n"
            },
            {
                "id": 3,
                "name": "Install deepspeed",
                "run": "pip3 install .\n"
            },
            {
                "id": 4,
                "name": "DS Report",
                "run": "ds_report\n"
            }
        ]
    },
    "termux": {
        "termux/termux-packages": [
            {
                "id": 1,
                "name": "Git clone",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Create bootstrap archive",
                "run": "./scripts/generate-bootstraps.sh --architectures ${{ matrix.arch }}"
            },
            {
                "id": 3,
                "name": "Store artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Git clone",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Fetch bootstrap archives",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Create new tag",
                "run": "new_tag=\"bootstrap-$(date \"+%Y.%m.%d\")\"\nexisting_tag_revision=$(git tag | grep \"$new_tag\" | sort -r | head -n 1 | cut -d- -f3 | cut -dr -f2)\nif [ -n \"$existing_tag_revision\" ]; then\n  tag_rev=$((existing_tag_revision + 1))\nelse\n  tag_rev=1\nfi\nnew_tag=\"${new_tag}-r${tag_rev}+apt-android-7\"\ngit tag \"$new_tag\"\ngit push --tags\necho \"tag_name=$new_tag\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Publish bootstrap zips to GitHub release",
                "run": "termux/upload-release-action@v4.1.0"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Revbump main/command-not-found",
                "run": "git config --global user.name \"Termux Github Actions\"\ngit config --global user.email \"contact@termux.dev\"\n\n./scripts/bin/revbump command-not-found\ngit add .\ngit commit -m \"rebuild(main/command-not-found): to update database\"\ngit push\n"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "cd ./scripts\ndocker build --tag termux/package-builder:latest .\ndocker tag termux/package-builder:latest ghcr.io/termux/package-builder:latest\ndocker build --tag termux/package-builder-cgct:latest --file Dockerfile.cgct .\ndocker tag termux/package-builder-cgct:latest ghcr.io/termux/package-builder-cgct:latest\n"
            },
            {
                "id": 3,
                "name": "Login to GHCR",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 5,
                "name": "Push",
                "run": "# ghcr.io seem to be unstable sometimes. It may suddenly drop connection\n# during docker push when some layers are already uploaded. The workaround\n# is to retry again 1 or 2 more times.\nfor registry in \"ghcr.io/\" \"\"; do\n  for image in package-builder package-builder-cgct; do\n    for t in 1 2 3; do\n      if docker push \"${registry}termux/${image}:latest\"; then\n        break\n      else\n        if [ \"$t\" = \"3\" ]; then\n          echo \"Giving up after 3 attempts\"\n          exit 1\n        fi\n        sleep 20\n      fi\n    done\n  done\ndone\n"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Gather build summary",
                "run": "BASE_COMMIT=$(jq --raw-output .pull_request.base.sha \"$GITHUB_EVENT_PATH\")\nOLD_COMMIT=$(jq --raw-output .commits[0].id \"$GITHUB_EVENT_PATH\")\nHEAD_COMMIT=$(jq --raw-output .commits[-1].id \"$GITHUB_EVENT_PATH\")\nif [ \"$BASE_COMMIT\" = \"null\" ]; then\n  if [ \"$OLD_COMMIT\" = \"$HEAD_COMMIT\" ]; then\n    # Single-commit push.\n    echo \"Processing commit: ${HEAD_COMMIT}\"\n    CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${HEAD_COMMIT}\")\n  else\n    # Multi-commit push.\n    OLD_COMMIT=\"${OLD_COMMIT}~1\"\n    echo \"Processing commit range: ${OLD_COMMIT}..${HEAD_COMMIT}\"\n    CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${OLD_COMMIT}\" \"${HEAD_COMMIT}\")\n  fi\nelse\n  # Pull requests.\n  echo \"Processing pull request #$(jq --raw-output .pull_request.number \"$GITHUB_EVENT_PATH\"): ${BASE_COMMIT}..HEAD\"\n  CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${BASE_COMMIT}\" \"HEAD\")\nfi\nfor repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do\n  repo=$(jq --raw-output '.[\"'${repo_path}'\"].name' repo.json)\n  # Parse changed files and identify new packages and deleted packages.\n  # Create lists of those packages that will be passed to upload job for\n  # further processing.\n  while read -r file; do\n    if ! [[ $file == ${repo_path}/* ]]; then\n      # This file does not belong to a package, so ignore it\n      continue\n    fi\n    if [[ $file =~ ^${repo_path}/([.a-z0-9+-]*)/([.a-z0-9+-]*).subpackage.sh$ ]]; then\n      # A subpackage was modified, check if it was deleted or just updated\n      pkg=${BASH_REMATCH[1]}\n      subpkg=${BASH_REMATCH[2]}\n      if [ ! -f \"${repo_path}/${pkg}/${subpkg}.subpackage.sh\" ]; then\n        echo \"$subpkg\" >> ./deleted_${repo}_packages.txt\n      fi\n    elif [[ $file =~ ^${repo_path}/([.a-z0-9+-]*)/.*$ ]]; then\n      # package, check if it was deleted or updated\n      pkg=${BASH_REMATCH[1]}\n      if [ -d \"${repo_path}/${pkg}\" ]; then\n        echo \"$pkg\" >> ./built_${repo}_packages.txt\n        # If there are subpackages we want to create a list of those\n        # as well\n        for file in $(find \"${repo_path}/${pkg}/\" -maxdepth 1 -type f -name \\*.subpackage.sh | sort); do\n          echo \"$(basename \"${file%%.subpackage.sh}\")\" >> ./built_${repo}_subpackages.txt\n        done\n      else\n        echo \"$pkg\" >> ./deleted_${repo}_packages\n      fi\n    fi\n  done<<<${CHANGED_FILES}\ndone\nfor repo in $(jq --raw-output 'del(.pkg_format) | .[].name' repo.json); do\n  # Fix so that lists do not contain duplicates\n  if [ -f ./built_${repo}_packages.txt ]; then\n    sort ./built_${repo}_packages.txt | uniq > ./built_${repo}_packages.txt.tmp\n    mv ./built_${repo}_packages.txt.tmp ./built_${repo}_packages.txt\n  fi\n  if [ -f ./built_${repo}_subpackages.txt ]; then\n    sort ./built_${repo}_subpackages.txt | uniq > ./built_${repo}_subpackages.txt.tmp\n    mv ./built_${repo}_subpackages.txt.tmp ./built_${repo}_subpackages.txt\n  fi\n  if [ -f ./deleted_${repo}_packages.txt ]; then\n    sort ./deleted_${repo}_packages.txt | uniq > ./deleted_${repo}_packages.txt.tmp\n    mv ./deleted_${repo}_packages.txt.tmp ./deleted_${repo}_packages.txt\n  fi\ndone\n"
            },
            {
                "id": 3,
                "name": "Process package updates",
                "run": "declare -a packages\nfor repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do\n  repo=$(jq --raw-output '.[\"'${repo_path}'\"].name' repo.json)\n  if [ -f ./built_${repo}_packages.txt ]; then\n    packages=\"$packages $(cat ./built_${repo}_packages.txt | tr '\\n' ' ')\"\n  fi\ndone\nif [ -n \"$packages\" ]; then\n  ./scripts/bin/update-packages $packages\nfi\n"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Free additional disk space",
                "run": "sudo apt purge -yq $(dpkg -l | grep '^ii' | awk '{ print $2 }' | grep -P '(aspnetcore|cabal-|dotnet-|ghc-|libmono|mongodb-|mysql-|php)') \\\n  firefox google-chrome-stable google-cloud-cli microsoft-edge-stable mono-devel mono-runtime-common monodoc-manual powershell ruby\nsudo apt autoremove -yq\nsudo apt clean\nsudo rm -fr /opt/ghc /opt/hostedtoolcache /usr/lib/node_modules /usr/local/share/boost /usr/share/dotnet /usr/share/swift\n"
            },
            {
                "id": 3,
                "name": "Process package updates",
                "run": "git config --global user.name \"Termux Github Actions\"\ngit config --global user.email \"contact@termux.dev\"\n\nif [ \"${{ github.event_name }}\" == \"workflow_dispatch\" ]; then\n  ./scripts/bin/update-packages ${{ github.event.inputs.packages }}\nelse\n  ./scripts/bin/update-packages \"@all\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Setup arm and aarch64 CPU emulators",
                "run": "dbhi/qus/action@main"
            },
            {
                "id": 2,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Gather build summary",
                "run": "if [ \"${{ github.event_name }}\" != \"workflow_dispatch\" ]; then\n  BASE_COMMIT=$(jq --raw-output .pull_request.base.sha \"$GITHUB_EVENT_PATH\")\n  OLD_COMMIT=$(jq --raw-output .commits[0].id \"$GITHUB_EVENT_PATH\")\n  HEAD_COMMIT=$(jq --raw-output .commits[-1].id \"$GITHUB_EVENT_PATH\")\n  if [ \"$BASE_COMMIT\" = \"null\" ]; then\n    if [ \"$OLD_COMMIT\" = \"$HEAD_COMMIT\" ]; then\n      # Single-commit push.\n      echo \"Processing commit: ${HEAD_COMMIT}\"\n      CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${HEAD_COMMIT}\")\n    else\n      # Multi-commit push.\n      OLD_COMMIT=\"${OLD_COMMIT}~1\"\n      echo \"Processing commit range: ${OLD_COMMIT}..${HEAD_COMMIT}\"\n      CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${OLD_COMMIT}\" \"${HEAD_COMMIT}\")\n    fi\n  else\n    # Pull requests.\n    echo \"Processing pull request #$(jq --raw-output .pull_request.number \"$GITHUB_EVENT_PATH\"): ${BASE_COMMIT}..HEAD\"\n    CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${BASE_COMMIT}\" \"HEAD\")\n  fi\nfi\nmkdir -p ./artifacts ./debs\ntouch ./debs/.placeholder\n\nif [ \"${{ github.event_name }}\" != \"workflow_dispatch\" ]; then\n  # Process tag '%ci:no-build' that may be added as line to commit message.\n  # Forces CI to cancel current build with status 'passed'\n  if grep -qiP '^\\s*%ci:no-build\\s*$' <(git log --format=\"%B\" -n 1 \"HEAD\"); then\n    tar cf artifacts/debs-${{ matrix.target_arch }}.tar debs\n    echo \"[!] Force exiting as tag '%ci:no-build' was applied to HEAD commit message.\"\n    exit 0\n  fi\n\n  for repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do\n    repo=$(jq --raw-output '.[\"'${repo_path}'\"].name' repo.json)\n    # Parse changed files and identify new packages and deleted packages.\n    # Create lists of those packages that will be passed to upload job for\n    # further processing.\n    while read -r file; do\n      if ! [[ $file == ${repo_path}/* ]]; then\n        # This file does not belong to a package, so ignore it\n        continue\n      fi\n      if [[ $file =~ ^${repo_path}/([.a-z0-9+-]*)/([.a-z0-9+-]*).subpackage.sh$ ]]; then\n        # A subpackage was modified, check if it was deleted or just updated\n        pkg=${BASH_REMATCH[1]}\n        subpkg=${BASH_REMATCH[2]}\n        if [ ! -f \"${repo_path}/${pkg}/${subpkg}.subpackage.sh\" ]; then\n          echo \"$subpkg\" >> ./deleted_${repo}_packages.txt\n        fi\n      elif [[ $file =~ ^${repo_path}/([.a-z0-9+-]*)/.*$ ]]; then\n        # package, check if it was deleted or updated\n        pkg=${BASH_REMATCH[1]}\n        if [ -d \"${repo_path}/${pkg}\" ]; then\n          echo \"$pkg\" >> ./built_${repo}_packages.txt\n          # If there are subpackages we want to create a list of those\n          # as well\n          for file in $(find \"${repo_path}/${pkg}/\" -maxdepth 1 -type f -name \\*.subpackage.sh | sort); do\n            echo \"$(basename \"${file%%.subpackage.sh}\")\" >> ./built_${repo}_subpackages.txt\n          done\n        else\n          echo \"$pkg\" >> ./deleted_${repo}_packages\n        fi\n      fi\n    done<<<${CHANGED_FILES}\n  done\nelse\n  for pkg in ${{ github.event.inputs.packages }}; do\n    repo_paths=$(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json)\n    found=false\n    for repo_path in $repo_paths; do\n      repo=$(jq --raw-output '.[\"'${repo_path}'\"].name' repo.json)\n      if [ -d \"${repo_path}/${pkg}\" ]; then\n        found=true\n        echo \"$pkg\" >> ./built_${repo}_packages.txt\n        for subpkg in $(find \"${repo_path}/${pkg}/\" -maxdepth 1 -type f -name \\*.subpackage.sh | sort); do\n          echo \"$(basename \"${subpkg%%.subpackage.sh}\")\" >> ./built_${repo}_subpackages.txt\n        done\n      fi\n    done\n    if [ \"$found\" != true ]; then\n      echo \"Package '${pkg}' not found in any of the repo\"\n      exit 1\n    fi\n  done\nfi\n\nfor repo in $(jq --raw-output 'del(.pkg_format) | .[].name' repo.json); do\n  # Fix so that lists do not contain duplicates\n  if [ -f ./built_${repo}_packages.txt ]; then\n    sort ./built_${repo}_packages.txt | uniq > ./built_${repo}_packages.txt.tmp\n    mv ./built_${repo}_packages.txt.tmp ./built_${repo}_packages.txt\n  fi\n  if [ -f ./built_${repo}_subpackages.txt ]; then\n    sort ./built_${repo}_subpackages.txt | uniq > ./built_${repo}_subpackages.txt.tmp\n    mv ./built_${repo}_subpackages.txt.tmp ./built_${repo}_subpackages.txt\n  fi\n  if [ -f ./deleted_${repo}_packages.txt ]; then\n    sort ./deleted_${repo}_packages.txt | uniq > ./deleted_${repo}_packages.txt.tmp\n    mv ./deleted_${repo}_packages.txt.tmp ./deleted_${repo}_packages.txt\n  fi\ndone\n\ndeclare -a packages\nfor repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do\n  repo=$(jq --raw-output '.[\"'${repo_path}'\"].name' repo.json)\n  if [ -f ./built_${repo}_packages.txt ]; then\n    packages=\"$packages $(cat ./built_${repo}_packages.txt | tr '\\n' ' ')\"\n  fi\ndone\n\nif [ \"${{ github.event_name }}\" != \"workflow_dispatch\" ]; then\n  # Build local Docker image if setup scripts were changed.\n  # Useful for pull requests submitting changes for both build environment and packages.\n  if grep -qP '^scripts/(Dockerfile|properties\\.sh|setup-android-sdk\\.sh|setup-ubuntu\\.sh)$' <<< \"$CHANGED_FILES\"; then\n    echo \"Detected changes for environment setup scripts. Building custom Docker image now.\"\n    if [ -n \"$packages\" ]; then\n      if grep -qP \"(^|\\\\s)${packages// /($|\\\\s)|(^|\\\\s)}($|\\\\s)\" ./scripts/big-pkgs.list; then\n        echo \"Skipping due to building large packages.\"\n        exit 0\n      fi\n    fi\n    cd ./scripts\n    docker build -t ghcr.io/termux/package-builder:latest .\n    cd ..\n  fi\nfi\n"
            },
            {
                "id": 4,
                "name": "Lint packages",
                "run": "declare -a package_recipes\nfor repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do\n  repo=$(jq --raw-output '.[\"'${repo_path}'\"].name' repo.json)\n  if [ -f ./built_${repo}_packages.txt ]; then\n    package_recipes=\"$package_recipes $(cat ./built_${repo}_packages.txt | repo_path=${repo_path} awk '{print ENVIRON[\"repo_path\"]\"/\"$1\"/build.sh\"}')\"\n  fi\ndone\n\nif [ -n \"$package_recipes\" ]; then\n  ./scripts/lint-packages.sh $package_recipes\nfi\n"
            },
            {
                "id": 5,
                "name": "Free additional disk space (if needed)",
                "run": "declare -a packages\nfor repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do\n  repo=$(jq --raw-output '.[\"'${repo_path}'\"].name' repo.json)\n  if [ -f ./built_${repo}_packages.txt ]; then\n    packages=\"$packages $(cat ./built_${repo}_packages.txt | tr '\\n' ' ')\"\n  fi\ndone\n\nif [ -n \"$packages\" ]; then\n  if grep -qP \"(^|\\\\s)${packages// /($|\\\\s)|(^|\\\\s)}($|\\\\s)\" ./scripts/big-pkgs.list; then\n    ./scripts/setup-ubuntu.sh\n    sudo apt install ninja-build\n    sudo apt purge -yq $(dpkg -l | grep '^ii' | awk '{ print $2 }' | grep -P '(aspnetcore|cabal-|dotnet-|ghc-|libmono|mongodb-|mysql-|php)') \\\n      firefox google-chrome-stable google-cloud-cli microsoft-edge-stable mono-devel mono-runtime-common monodoc-manual powershell ruby\n    sudo apt autoremove -yq\n    sudo apt clean\n    sudo rm -fr /opt/ghc /opt/hostedtoolcache /usr/lib/node_modules /usr/local/share/boost /usr/share/dotnet /usr/share/swift\n  fi\nfi\n"
            },
            {
                "id": 6,
                "name": "Build packages",
                "run": "declare -a packages\nfor repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do\n  repo=$(jq --raw-output '.[\"'${repo_path}'\"].name' repo.json)\n  if [ -f ./built_${repo}_packages.txt ]; then\n    packages=\"$packages $(cat ./built_${repo}_packages.txt | tr '\\n' ' ')\"\n  fi\ndone\n\nif [ -n \"$packages\" ]; then\n  if grep -qP \"(^|\\\\s)${packages// /($|\\\\s)|(^|\\\\s)}($|\\\\s)\" ./scripts/big-pkgs.list; then\n    NDK=$ANDROID_NDK_LATEST_HOME ANDROID_HOME=$ANDROID_SDK_ROOT ./build-package.sh -I -a ${{ matrix.target_arch }} $packages\n  else\n    ./scripts/run-docker.sh ./build-package.sh -I -a ${{ matrix.target_arch }} $packages\n  fi\nfi\n"
            },
            {
                "id": 7,
                "name": "Generate build artifacts",
                "run": "test -d termux-packages/output && mv termux-packages/output/* ./output/\n\nfor repo in $(jq --raw-output 'del(.pkg_format) | .[].name' repo.json); do\n  # Put package lists into directory with *.deb files so they will be transferred to\n  # upload job.\n  test -f ./built_${repo}_packages.txt && mv ./built_${repo}_packages.txt ./debs/\n  test -f ./built_${repo}_subpackages.txt && cat ./built_${repo}_subpackages.txt >> ./debs/built_${repo}_packages.txt \\\n    && rm ./built_${repo}_subpackages.txt\n  test -f ./deleted_${repo}_packages.txt && mv ./deleted_${repo}_packages.txt ./debs/\n\n  # Move only debs from built_packages into debs/ folder before\n  # creating an archive.\n  while read -r pkg; do\n    # Match both $pkg.deb and $pkg-static.deb.\n    find output \\( -name \"$pkg_*.deb\" -o -name \"$pkg-static_*.deb\" \\) -type f -print0 | xargs -0r mv -t debs/\n  done < <(cat ./debs/built_${repo}_packages.txt)\ndone\n\n# Files containing certain symbols (e.g. \":\") will cause failure in actions/upload-artifact.\n# Archiving *.deb files in a tarball to avoid issues with uploading.\ntar cf artifacts/debs-${{ matrix.target_arch }}-${{ github.sha }}.tar debs\n"
            },
            {
                "id": 8,
                "name": "Checksums for built *.deb files",
                "run": "find debs -type f -name \"*.deb\" -exec sha256sum \"{}\" \\; | sort -k2 | tee checksum-${{ matrix.target_arch }}-${{ github.sha }}.txt\n"
            },
            {
                "id": 9,
                "name": "Store checksums for built *.deb files",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 10,
                "name": "Store *.deb files",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Get *.deb files",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Upload to packages.termux.dev",
                "run": "GITHUB_SHA=${{ github.sha }}\nAPTLY_API_AUTH=${{ secrets.APTLY_API_AUTH }}\nGPG_PASSPHRASE=${{ secrets.GPG_PASSPHRASE }}\n\nsource scripts/aptly_api.sh\n\nfor archive in debs-*/debs-{aarch64,arm,i686,x86_64}-${{ github.sha }}.tar; do\n  tar xf \"$archive\"\ndone\n\nfor repo in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do\n  export REPOSITORY_NAME=$(jq --raw-output '.[\"'$repo'\"].name' repo.json)\n  export REPOSITORY_DISTRIBUTION=$(jq --raw-output '.[\"'$repo'\"].distribution' repo.json)\n\n  # Upload file to temporary directory.\n  uploaded_files=false\n  shopt -s nullglob\n\n  if [ -f debs/built_${REPOSITORY_NAME}_packages.txt ]; then\n    for filename in $(cat debs/built_${REPOSITORY_NAME}_packages.txt | sed -E 's/(..*)/debs\\/\\1_\\*.deb debs\\/\\1-static_\\*.deb/g'); do\n      if ! aptly_upload_file \"$filename\"; then\n        exit 1\n      fi\n\n      uploaded_files=true\n    done\n    shopt -u nullglob\n\n    # Publishing repository changes.\n    if [ \"$uploaded_files\" = \"true\" ]; then\n      if ! aptly_add_to_repo; then\n        exit 1\n      fi\n\n      # Usually temporary directory is deleted automatically, but in certain cases it is left.\n      aptly_delete_dir\n\n      # Final part to make changes appear in web root.\n      if ! aptly_publish_repo; then\n        exit 1\n      fi\n    fi\n  fi\ndone\n"
            }
        ],
        "termux/termux-api": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build and attach APK to release",
                "run": "exit_on_error() {\n    echo \"$1\"\n    echo \"Deleting '$RELEASE_VERSION_NAME' release and '$GITHUB_REF' tag\"\n    hub release delete \"$RELEASE_VERSION_NAME\"\n    git push --delete origin \"$GITHUB_REF\"\n    exit 1\n}\n\necho \"Setting vars\"\nRELEASE_VERSION_NAME=\"${GITHUB_REF/refs\\/tags\\//}\"\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  exit_on_error \"The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME+github-debug\"\nAPK_BASENAME_PREFIX=\"termux-api_$APK_VERSION_TAG\"\n\necho \"Building APK for '$RELEASE_VERSION_NAME' release\"\nexport TERMUX_API_APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n\necho \"Validating APK\"\nif ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\"; then\n  files_found=\"$(ls \"$APK_DIR_PATH\")\"\n  exit_on_error \"Failed to find built APK at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: \"$'\\n'\"$files_found\"\nfi\n\necho \"Generating sha25sums file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \"${APK_BASENAME_PREFIX}.apk\" > sha256sums); then\n  exit_on_error \"Generate sha25sums failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n\necho \"Attaching APK to github release\"\nif ! hub release edit \\\n-m \"\" \\\n-a \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\" \\\n-a \"$APK_DIR_PATH/sha256sums\" \\\n\"$RELEASE_VERSION_NAME\"; then\n  exit_on_error \"Attach APK to release failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build APK",
                "run": "exit_on_error() { echo \"$1\"; exit 1; }\n\necho \"Setting vars\"\n# Set RELEASE_VERSION_NAME to \"<CURRENT_VERSION_NAME>+<last_commit_hash>\"\nCURRENT_VERSION_NAME_REGEX='\\s+versionName \"([^\"]+)\"$'\nCURRENT_VERSION_NAME=\"$(grep -m 1 -E \"$CURRENT_VERSION_NAME_REGEX\" ./app/build.gradle | sed -r \"s/$CURRENT_VERSION_NAME_REGEX/\\1/\")\"\nRELEASE_VERSION_NAME=\"v$CURRENT_VERSION_NAME+${GITHUB_SHA:0:7}\" # The \"+\" is necessary so that versioning precedence is not affected\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  exit_on_error \"The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME-github-debug\" # Note the \"-\", GITHUB_SHA will already have \"+\" before it\nAPK_BASENAME_PREFIX=\"termux-api_$APK_VERSION_TAG\"\n\n# Used by attachment steps later\necho \"APK_DIR_PATH=$APK_DIR_PATH\" >> $GITHUB_ENV\necho \"APK_VERSION_TAG=$APK_VERSION_TAG\" >> $GITHUB_ENV\necho \"APK_BASENAME_PREFIX=$APK_BASENAME_PREFIX\" >> $GITHUB_ENV\n\necho \"Building APK for '$RELEASE_VERSION_NAME' build\"\nexport TERMUX_API_APP_VERSION_NAME=\"${RELEASE_VERSION_NAME/v/}\" # Used by app/build.gradle\nexport TERMUX_API_APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$RELEASE_VERSION_NAME' build.\"\nfi\n\necho \"Validating APK\"\nif ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\"; then\n  files_found=\"$(ls \"$APK_DIR_PATH\")\"\n  exit_on_error \"Failed to find built APK at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: \"$'\\n'\"$files_found\"\nfi\n\necho \"Generating sha25sums file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \"${APK_BASENAME_PREFIX}.apk\" > sha256sums); then\n  exit_on_error \"Generate sha25sums failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n"
            },
            {
                "id": 3,
                "name": "Attach files",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "termux/termux-app": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build and attach APKs to release",
                "run": "exit_on_error() {\n    echo \"$1\"\n    echo \"Deleting '$RELEASE_VERSION_NAME' release and '$GITHUB_REF' tag\"\n    hub release delete \"$RELEASE_VERSION_NAME\"\n    git push --delete origin \"$GITHUB_REF\"\n    exit 1\n}\n\necho \"Setting vars\"\nRELEASE_VERSION_NAME=\"${GITHUB_REF/refs\\/tags\\//}\"\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n exit_on_error \"The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME+${{ env.PACKAGE_VARIANT }}-github-debug\"\nAPK_BASENAME_PREFIX=\"termux-app_$APK_VERSION_TAG\"\n\necho \"Building APKs for 'APK_VERSION_TAG' release\"\nexport TERMUX_APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nexport TERMUX_PACKAGE_VARIANT=\"${{ env.PACKAGE_VARIANT }}\" # Used by app/build.gradle\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$APK_VERSION_TAG' release.\"\nfi\n\necho \"Validating APKs\"\nfor abi in universal arm64-v8a armeabi-v7a x86_64 x86; do\n  if ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}_$abi.apk\"; then\n    files_found=\"$(ls \"$APK_DIR_PATH\")\"\n    exit_on_error \"Failed to find built APK at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}_$abi.apk'. Files found: \"$'\\n'\"$files_found\"\n  fi\ndone\n\necho \"Generating sha25sums file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \\\n  \"${APK_BASENAME_PREFIX}_universal.apk\" \\\n  \"${APK_BASENAME_PREFIX}_arm64-v8a.apk\" \\\n  \"${APK_BASENAME_PREFIX}_armeabi-v7a.apk\" \\\n  \"${APK_BASENAME_PREFIX}_x86_64.apk\" \\\n  \"${APK_BASENAME_PREFIX}_x86.apk\" \\\n  > \"${APK_BASENAME_PREFIX}_sha256sums\"); then\n  exit_on_error \"Generate sha25sums failed for '$APK_VERSION_TAG' release.\"\nfi\n\necho \"Attaching APKs to github release\"\nif ! hub release edit \\\n-m \"\" \\\n-a \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}_universal.apk\" \\\n-a \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}_arm64-v8a.apk\" \\\n-a \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}_armeabi-v7a.apk\" \\\n-a \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}_x86_64.apk\" \\\n-a \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}_x86.apk\" \\\n-a \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}_sha256sums\" \\\n\"$RELEASE_VERSION_NAME\"; then\n  exit_on_error \"Attach APKs to release failed for '$APK_VERSION_TAG' release.\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build APKs",
                "run": "exit_on_error() { echo \"$1\"; exit 1; }\n\necho \"Setting vars\"\n\nif [ \"$GITHUB_EVENT_NAME\" == \"pull_request\" ]; then\n    GITHUB_SHA=\"${{ github.event.pull_request.head.sha }}\" # Do not use last merge commit set in GITHUB_SHA\nfi\n\n# Set RELEASE_VERSION_NAME to \"<CURRENT_VERSION_NAME>+<last_commit_hash>\"\nCURRENT_VERSION_NAME_REGEX='\\s+versionName \"([^\"]+)\"$'\nCURRENT_VERSION_NAME=\"$(grep -m 1 -E \"$CURRENT_VERSION_NAME_REGEX\" ./app/build.gradle | sed -r \"s/$CURRENT_VERSION_NAME_REGEX/\\1/\")\"\nRELEASE_VERSION_NAME=\"v$CURRENT_VERSION_NAME+${GITHUB_SHA:0:7}\" # The \"+\" is necessary so that versioning precedence is not affected\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n exit_on_error \"The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME-${{ env.PACKAGE_VARIANT }}-github-debug\" # Note the \"-\", GITHUB_SHA will already have \"+\" before it\nAPK_BASENAME_PREFIX=\"termux-app_$APK_VERSION_TAG\"\n\n# Used by attachment steps later\necho \"APK_DIR_PATH=$APK_DIR_PATH\" >> $GITHUB_ENV\necho \"APK_VERSION_TAG=$APK_VERSION_TAG\" >> $GITHUB_ENV\necho \"APK_BASENAME_PREFIX=$APK_BASENAME_PREFIX\" >> $GITHUB_ENV\n\necho \"Building APKs for 'APK_VERSION_TAG' build\"\nexport TERMUX_APP_VERSION_NAME=\"${RELEASE_VERSION_NAME/v/}\" # Used by app/build.gradle\nexport TERMUX_APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nexport TERMUX_PACKAGE_VARIANT=\"${{ env.PACKAGE_VARIANT }}\" # Used by app/build.gradle\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$APK_VERSION_TAG' build.\"\nfi\n\necho \"Validating APKs\"\nfor abi in universal arm64-v8a armeabi-v7a x86_64 x86; do\n  if ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}_$abi.apk\"; then\n    files_found=\"$(ls \"$APK_DIR_PATH\")\"\n    exit_on_error \"Failed to find built APK at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}_$abi.apk'. Files found: \"$'\\n'\"$files_found\"\n  fi\ndone\n\necho \"Generating sha25sums file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \\\n  \"${APK_BASENAME_PREFIX}_universal.apk\" \\\n  \"${APK_BASENAME_PREFIX}_arm64-v8a.apk\" \\\n  \"${APK_BASENAME_PREFIX}_armeabi-v7a.apk\" \\\n  \"${APK_BASENAME_PREFIX}_x86_64.apk\" \\\n  \"${APK_BASENAME_PREFIX}_x86.apk\" \\\n  > \"${APK_BASENAME_PREFIX}_sha256sums\"); then\n  exit_on_error \"Generate sha25sums failed for '$APK_VERSION_TAG' release.\"\nfi\n"
            },
            {
                "id": 3,
                "name": "Attach universal APK file",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 4,
                "name": "Attach arm64-v8a APK file",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 5,
                "name": "Attach armeabi-v7a APK file",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 6,
                "name": "Attach x86_64 APK file",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Attach x86 APK file",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 8,
                "name": "Attach sha256sums file",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gradle/wrapper-validation-action@v3"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Execute tests",
                "run": "./gradlew test\n"
            },
            {
                "id": 1,
                "name": "Set vars",
                "run": "echo \"TERMUX_LIB_VERSION=${GITHUB_REF/refs\\/tags\\/v/}\" >> $GITHUB_ENV"
            },
            {
                "id": 2,
                "name": "Echo release",
                "run": "echo \"Triggering termux library builds on jitpack for '$TERMUX_LIB_VERSION' release after waiting for 3 mins\""
            },
            {
                "id": 3,
                "name": "Trigger termux library builds on jitpack",
                "run": "sleep 180 # It will take some time for the new tag to be detected by Jitpack\ncurl --max-time 600 --no-progress-meter \"https://jitpack.io/com/termux/termux-app/terminal-emulator/$TERMUX_LIB_VERSION/terminal-emulator-$TERMUX_LIB_VERSION.pom\"\ncurl --max-time 600 --no-progress-meter \"https://jitpack.io/com/termux/termux-app/terminal-view/$TERMUX_LIB_VERSION/terminal-view-$TERMUX_LIB_VERSION.pom\"\ncurl --max-time 600 --no-progress-meter \"https://jitpack.io/com/termux/termux-app/termux-shared/$TERMUX_LIB_VERSION/termux-shared-$TERMUX_LIB_VERSION.pom\"\n"
            }
        ],
        "termux/termux.github.io": [
            {
                "id": 1,
                "name": "Trigger termux.com sync",
                "run": "actions/github-script@v7"
            }
        ],
        "termux/termux-widget": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build and attach APK to release",
                "run": "exit_on_error() {\n    echo \"$1\"\n    echo \"Deleting '$RELEASE_VERSION_NAME' release and '$GITHUB_REF' tag\"\n    hub release delete \"$RELEASE_VERSION_NAME\"\n    git push --delete origin \"$GITHUB_REF\"\n    exit 1\n}\n\necho \"Setting vars\"\nRELEASE_VERSION_NAME=\"${GITHUB_REF/refs\\/tags\\//}\"\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  exit_on_error \"The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME+github-debug\"\nAPK_BASENAME_PREFIX=\"termux-widget_$APK_VERSION_TAG\"\n\necho \"Building APK for '$RELEASE_VERSION_NAME' release\"\nexport TERMUX_WIDGET_APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n\necho \"Validating APK\"\nif ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\"; then\n  files_found=\"$(ls \"$APK_DIR_PATH\")\"\n  exit_on_error \"Failed to find built APK at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: \"$'\\n'\"$files_found\"\nfi\n\necho \"Generating sha25sums file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \"${APK_BASENAME_PREFIX}.apk\" > sha256sums); then\n  exit_on_error \"Generate sha25sums failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n\necho \"Attaching APK to github release\"\nif ! hub release edit \\\n-m \"\" \\\n-a \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\" \\\n-a \"$APK_DIR_PATH/sha256sums\" \\\n\"$RELEASE_VERSION_NAME\"; then\n  exit_on_error \"Attach APK to release failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build APK",
                "run": "exit_on_error() { echo \"$1\"; exit 1; }\n\necho \"Setting vars\"\n# Set RELEASE_VERSION_NAME to \"<CURRENT_VERSION_NAME>+<last_commit_hash>\"\nCURRENT_VERSION_NAME_REGEX='\\s+versionName \"([^\"]+)\"$'\nCURRENT_VERSION_NAME=\"$(grep -m 1 -E \"$CURRENT_VERSION_NAME_REGEX\" ./app/build.gradle | sed -r \"s/$CURRENT_VERSION_NAME_REGEX/\\1/\")\"\nRELEASE_VERSION_NAME=\"v$CURRENT_VERSION_NAME+${GITHUB_SHA:0:7}\" # The \"+\" is necessary so that versioning precedence is not affected\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  exit_on_error \"The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME-github-debug\" # Note the \"-\", GITHUB_SHA will already have \"+\" before it\nAPK_BASENAME_PREFIX=\"termux-widget_$APK_VERSION_TAG\"\n\n# Used by attachment steps later\necho \"APK_DIR_PATH=$APK_DIR_PATH\" >> $GITHUB_ENV\necho \"APK_VERSION_TAG=$APK_VERSION_TAG\" >> $GITHUB_ENV\necho \"APK_BASENAME_PREFIX=$APK_BASENAME_PREFIX\" >> $GITHUB_ENV\n\necho \"Building APK for '$RELEASE_VERSION_NAME' build\"\nexport TERMUX_WIDGET_APP_VERSION_NAME=\"${RELEASE_VERSION_NAME/v/}\" # Used by app/build.gradle\nexport TERMUX_WIDGET_APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$RELEASE_VERSION_NAME' build.\"\nfi\n\necho \"Validating APK\"\nif ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\"; then\n  files_found=\"$(ls \"$APK_DIR_PATH\")\"\n  exit_on_error \"Failed to find built APK at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: \"$'\\n'\"$files_found\"\nfi\n\necho \"Generating sha25sums file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \"${APK_BASENAME_PREFIX}.apk\" > sha256sums); then\n  exit_on_error \"Generate sha25sums failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n"
            },
            {
                "id": 3,
                "name": "Attach files",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "termux/termux-styling": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "exit_on_error() { echo \"$1\"; exit 1; }\n\nif [ -z \"$JAVA_HOME_17_X64\" ] || [ ! -f \"$JAVA_HOME_17_X64/bin/javac\" ] || [ ! -x \"$JAVA_HOME_17_X64/bin/javac\" ]; then\n    exit_on_error \"jdk-17 binary not found at path '$JAVA_HOME_17_X64/bin/javac' or is not executable.\"\nfi\n\necho \"Setting vars\"\n\nif [ \"$GITHUB_EVENT_NAME\" == \"pull_request\" ]; then\n    GITHUB_SHA=\"${{ github.event.pull_request.head.sha }}\" # Do not use last merge commit set in GITHUB_SHA\nfi\n\n# Set RELEASE_VERSION_NAME to \"<CURRENT_VERSION_NAME>+<last_commit_hash>\"\nCURRENT_VERSION_NAME_REGEX='\\s+versionName \"([^\"]+)\"$'\nCURRENT_VERSION_NAME=\"$(grep -m 1 -E \"$CURRENT_VERSION_NAME_REGEX\" ./app/build.gradle | sed -r \"s/$CURRENT_VERSION_NAME_REGEX/\\1/\")\"\nRELEASE_VERSION_NAME=\"v$CURRENT_VERSION_NAME+${GITHUB_SHA:0:7}\" # The \"+\" is necessary so that versioning precedence is not affected\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  exit_on_error \"The release version '${RELEASE_VERSION_NAME/v/}' generated from current version '$CURRENT_VERSION_NAME' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME.github.debug\" # Note the \".\", GITHUB_SHA will already have \"+\" before it\nAPK_BASENAME_PREFIX=\"termux-styling_$APK_VERSION_TAG\"\n\n# Used by upload step later\necho \"APK_DIR_PATH=$APK_DIR_PATH\" >> $GITHUB_ENV\necho \"APK_VERSION_TAG=$APK_VERSION_TAG\" >> $GITHUB_ENV\necho \"APK_BASENAME_PREFIX=$APK_BASENAME_PREFIX\" >> $GITHUB_ENV\n\necho \"Building APK file for '$RELEASE_VERSION_NAME' release with '$APK_VERSION_TAG' tag\"\nexport TERMUX_STYLING_APP_BUILD__APP_VERSION_NAME=\"${RELEASE_VERSION_NAME/v/}\" # Used by app/build.gradle\nexport TERMUX_STYLING_APP_BUILD__APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nexport GRADLE_OPTS=\"-Dorg.gradle.java.home=$JAVA_HOME_17_X64\"\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$RELEASE_VERSION_NAME' release with '$APK_VERSION_TAG' tag.\"\nfi\n\necho \"Validating APK file\"\nif ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\"; then\n  files_found=\"$(ls \"$APK_DIR_PATH\")\"\n  exit_on_error \"Failed to find built APK file at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: \"$'\\n'\"$files_found\"\nfi\n\necho \"Generating checksums-sha256.txt file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \"${APK_BASENAME_PREFIX}.apk\" > checksums-sha256.txt); then\n  exit_on_error \"Generate checksums-sha256.txt file failed for '$RELEASE_VERSION_NAME' release.\"\nfi\necho \"checksums-sha256.txt:\"$'\\n```\\n'\"$(cat \"$APK_DIR_PATH/checksums-sha256.txt\")\"$'\\n```'\n"
            },
            {
                "id": 3,
                "name": "Upload files to action",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build and upload files to release",
                "run": "exit_on_error() {\n    echo \"$1\"\n    echo \"Deleting '$RELEASE_VERSION_NAME' release and '$GITHUB_REF' tag\"\n    hub release delete \"$RELEASE_VERSION_NAME\"\n    git push --delete origin \"$GITHUB_REF\"\n    exit 1\n}\n\nif [ -z \"$JAVA_HOME_17_X64\" ] || [ ! -f \"$JAVA_HOME_17_X64/bin/javac\" ] || [ ! -x \"$JAVA_HOME_17_X64/bin/javac\" ]; then\n    exit_on_error \"jdk-17 binary not found at path '$JAVA_HOME_17_X64/bin/javac' or is not executable.\"\nfi\n\necho \"Setting vars\"\nRELEASE_VERSION_NAME=\"${GITHUB_REF/refs\\/tags\\//}\"\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  exit_on_error \"The release version '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME+github.debug\"\nAPK_BASENAME_PREFIX=\"termux-styling_$APK_VERSION_TAG\"\n\necho \"Building APK file for '$RELEASE_VERSION_NAME' release with '$APK_VERSION_TAG' tag\"\nexport TERMUX_STYLING_APP_BUILD__APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nexport GRADLE_OPTS=\"-Dorg.gradle.java.home=$JAVA_HOME_17_X64\"\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$RELEASE_VERSION_NAME' release with '$APK_VERSION_TAG' tag.\"\nfi\n\necho \"Validating APK file\"\nif ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\"; then\n  files_found=\"$(ls \"$APK_DIR_PATH\")\"\n  exit_on_error \"Failed to find built APK file at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: \"$'\\n'\"$files_found\"\nfi\n\necho \"Generating checksums-sha256.txt file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \"${APK_BASENAME_PREFIX}.apk\" > checksums-sha256.txt); then\n  exit_on_error \"Generate checksums-sha256.txt file failed for '$RELEASE_VERSION_NAME' release.\"\nfi\necho \"checksums-sha256.txt:\"$'\\n```\\n'\"$(cat \"$APK_DIR_PATH/checksums-sha256.txt\")\"$'\\n```'\n\necho \"Uploading files to release\"\nif ! gh release upload \"$RELEASE_VERSION_NAME\" \\\n  \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\" \\\n  \"$APK_DIR_PATH/checksums-sha256.txt\" \\\n; then\n  exit_on_error \"Upload files to release failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Downloads nerd fonts",
                "run": "./setup-nerd-fonts.sh"
            }
        ],
        "termux/termux-create-package": [
            {
                "id": 1,
                "name": "Set vars",
                "run": "echo ::set-output name=tag::${GITHUB_REF/refs\\/tags\\//}"
            },
            {
                "id": 2,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "sha256sums",
                "run": "cd ./src\nsha256sum termux-create-package > sha256sums.txt\n"
            },
            {
                "id": 4,
                "name": "Attach files to release",
                "run": "hub release edit -m \"\" -a ./src/termux-create-package -a ./src/sha256sums.txt $RELEASE_TAG"
            }
        ],
        "termux/termux-tasker": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build and attach APK to release",
                "run": "exit_on_error() {\n    echo \"$1\"\n    echo \"Deleting '$RELEASE_VERSION_NAME' release and '$GITHUB_REF' tag\"\n    hub release delete \"$RELEASE_VERSION_NAME\"\n    git push --delete origin \"$GITHUB_REF\"\n    exit 1\n}\n\necho \"Setting vars\"\nRELEASE_VERSION_NAME=\"${GITHUB_REF/refs\\/tags\\//}\"\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  exit_on_error \"The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME+github-debug\"\nAPK_BASENAME_PREFIX=\"termux-tasker_$APK_VERSION_TAG\"\n\necho \"Building APK for '$RELEASE_VERSION_NAME' release\"\nexport TERMUX_TASKER_APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n\necho \"Validating APK\"\nif ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\"; then\n  files_found=\"$(ls \"$APK_DIR_PATH\")\"\n  exit_on_error \"Failed to find built APK at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: \"$'\\n'\"$files_found\"\nfi\n\necho \"Generating sha25sums file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \"${APK_BASENAME_PREFIX}.apk\" > sha256sums); then\n  exit_on_error \"Generate sha25sums failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n\necho \"Attaching APK to github release\"\nif ! hub release edit \\\n-m \"\" \\\n-a \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\" \\\n-a \"$APK_DIR_PATH/sha256sums\" \\\n\"$RELEASE_VERSION_NAME\"; then\n  exit_on_error \"Attach APK to release failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build APK",
                "run": "exit_on_error() { echo \"$1\"; exit 1; }\n\necho \"Setting vars\"\n# Set RELEASE_VERSION_NAME to \"<CURRENT_VERSION_NAME>+<last_commit_hash>\"\nCURRENT_VERSION_NAME_REGEX='\\s+versionName \"([^\"]+)\"$'\nCURRENT_VERSION_NAME=\"$(grep -m 1 -E \"$CURRENT_VERSION_NAME_REGEX\" ./app/build.gradle | sed -r \"s/$CURRENT_VERSION_NAME_REGEX/\\1/\")\"\nRELEASE_VERSION_NAME=\"v$CURRENT_VERSION_NAME+${GITHUB_SHA:0:7}\" # The \"+\" is necessary so that versioning precedence is not affected\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  exit_on_error \"The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME-github-debug\" # Note the \"-\", GITHUB_SHA will already have \"+\" before it\nAPK_BASENAME_PREFIX=\"termux-tasker_$APK_VERSION_TAG\"\n\n# Used by attachment steps later\necho \"APK_DIR_PATH=$APK_DIR_PATH\" >> $GITHUB_ENV\necho \"APK_VERSION_TAG=$APK_VERSION_TAG\" >> $GITHUB_ENV\necho \"APK_BASENAME_PREFIX=$APK_BASENAME_PREFIX\" >> $GITHUB_ENV\n\necho \"Building APK for '$RELEASE_VERSION_NAME' build\"\nexport TERMUX_TASKER_APP_VERSION_NAME=\"${RELEASE_VERSION_NAME/v/}\" # Used by app/build.gradle\nexport TERMUX_TASKER_APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$RELEASE_VERSION_NAME' build.\"\nfi\n\necho \"Validating APK\"\nif ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\"; then\n  files_found=\"$(ls \"$APK_DIR_PATH\")\"\n  exit_on_error \"Failed to find built APK at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: \"$'\\n'\"$files_found\"\nfi\n\necho \"Generating sha25sums file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \"${APK_BASENAME_PREFIX}.apk\" > sha256sums); then\n  exit_on_error \"Generate sha25sums failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n"
            },
            {
                "id": 3,
                "name": "Attach files",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "termux/termux-boot": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "exit_on_error() { echo \"$1\"; exit 1; }\n\nif [ -z \"$JAVA_HOME_17_X64\" ] || [ ! -f \"$JAVA_HOME_17_X64/bin/javac\" ] || [ ! -x \"$JAVA_HOME_17_X64/bin/javac\" ]; then\n    exit_on_error \"jdk-17 binary not found at path '$JAVA_HOME_17_X64/bin/javac' or is not executable.\"\nfi\n\necho \"Setting vars\"\n\nif [ \"$GITHUB_EVENT_NAME\" == \"pull_request\" ]; then\n    GITHUB_SHA=\"${{ github.event.pull_request.head.sha }}\" # Do not use last merge commit set in GITHUB_SHA\nfi\n\n# Set RELEASE_VERSION_NAME to \"<CURRENT_VERSION_NAME>+<last_commit_hash>\"\nCURRENT_VERSION_NAME_REGEX='\\s+versionName \"([^\"]+)\"$'\nCURRENT_VERSION_NAME=\"$(grep -m 1 -E \"$CURRENT_VERSION_NAME_REGEX\" ./app/build.gradle | sed -r \"s/$CURRENT_VERSION_NAME_REGEX/\\1/\")\"\nRELEASE_VERSION_NAME=\"v$CURRENT_VERSION_NAME+${GITHUB_SHA:0:7}\" # The \"+\" is necessary so that versioning precedence is not affected\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  exit_on_error \"The release version '${RELEASE_VERSION_NAME/v/}' generated from current version '$CURRENT_VERSION_NAME' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME.github.debug\" # Note the \".\", GITHUB_SHA will already have \"+\" before it\nAPK_BASENAME_PREFIX=\"termux-boot_$APK_VERSION_TAG\"\n\n# Used by upload step later\necho \"APK_DIR_PATH=$APK_DIR_PATH\" >> $GITHUB_ENV\necho \"APK_VERSION_TAG=$APK_VERSION_TAG\" >> $GITHUB_ENV\necho \"APK_BASENAME_PREFIX=$APK_BASENAME_PREFIX\" >> $GITHUB_ENV\n\necho \"Building APK file for '$RELEASE_VERSION_NAME' release with '$APK_VERSION_TAG' tag\"\nexport TERMUX_BOOT_APP_BUILD__APP_VERSION_NAME=\"${RELEASE_VERSION_NAME/v/}\" # Used by app/build.gradle\nexport TERMUX_BOOT_APP_BUILD__APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nexport GRADLE_OPTS=\"-Dorg.gradle.java.home=$JAVA_HOME_17_X64\"\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$RELEASE_VERSION_NAME' release with '$APK_VERSION_TAG' tag.\"\nfi\n\necho \"Validating APK file\"\nif ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\"; then\n  files_found=\"$(ls \"$APK_DIR_PATH\")\"\n  exit_on_error \"Failed to find built APK file at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: \"$'\\n'\"$files_found\"\nfi\n\necho \"Generating checksums-sha256.txt file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \"${APK_BASENAME_PREFIX}.apk\" > checksums-sha256.txt); then\n  exit_on_error \"Generate checksums-sha256.txt file failed for '$RELEASE_VERSION_NAME' release.\"\nfi\necho \"checksums-sha256.txt:\"$'\\n```\\n'\"$(cat \"$APK_DIR_PATH/checksums-sha256.txt\")\"$'\\n```'\n"
            },
            {
                "id": 3,
                "name": "Upload files to action",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build and upload files to release",
                "run": "exit_on_error() {\n    echo \"$1\"\n    echo \"Deleting '$RELEASE_VERSION_NAME' release and '$GITHUB_REF' tag\"\n    hub release delete \"$RELEASE_VERSION_NAME\"\n    git push --delete origin \"$GITHUB_REF\"\n    exit 1\n}\n\nif [ -z \"$JAVA_HOME_17_X64\" ] || [ ! -f \"$JAVA_HOME_17_X64/bin/javac\" ] || [ ! -x \"$JAVA_HOME_17_X64/bin/javac\" ]; then\n    exit_on_error \"jdk-17 binary not found at path '$JAVA_HOME_17_X64/bin/javac' or is not executable.\"\nfi\n\necho \"Setting vars\"\nRELEASE_VERSION_NAME=\"${GITHUB_REF/refs\\/tags\\//}\"\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  exit_on_error \"The release version '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME+github.debug\"\nAPK_BASENAME_PREFIX=\"termux-boot_$APK_VERSION_TAG\"\n\necho \"Building APK file for '$RELEASE_VERSION_NAME' release with '$APK_VERSION_TAG' tag\"\nexport TERMUX_BOOT_APP_BUILD__APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nexport GRADLE_OPTS=\"-Dorg.gradle.java.home=$JAVA_HOME_17_X64\"\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$RELEASE_VERSION_NAME' release with '$APK_VERSION_TAG' tag.\"\nfi\n\necho \"Validating APK file\"\nif ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\"; then\n  files_found=\"$(ls \"$APK_DIR_PATH\")\"\n  exit_on_error \"Failed to find built APK file at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: \"$'\\n'\"$files_found\"\nfi\n\necho \"Generating checksums-sha256.txt file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \"${APK_BASENAME_PREFIX}.apk\" > checksums-sha256.txt); then\n  exit_on_error \"Generate checksums-sha256.txt file failed for '$RELEASE_VERSION_NAME' release.\"\nfi\necho \"checksums-sha256.txt:\"$'\\n```\\n'\"$(cat \"$APK_DIR_PATH/checksums-sha256.txt\")\"$'\\n```'\n\necho \"Uploading files to release\"\nif ! gh release upload \"$RELEASE_VERSION_NAME\" \\\n  \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\" \\\n  \"$APK_DIR_PATH/checksums-sha256.txt\" \\\n; then\n  exit_on_error \"Upload files to release failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n"
            }
        ],
        "termux/termux-elf-cleaner": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Check version",
                "run": "RELEASE_VERSION_NAME=\"${GITHUB_REF/refs\\/tags\\//}\"\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  echo \"The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\n  exit 1\nfi\n"
            },
            {
                "id": 3,
                "name": "Install required packages",
                "run": "sudo apt update\nsudo apt upgrade\nsudo apt install cmake ninja-build\n"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "cmake . -Bbuild -GNinja\nninja -C build/\n"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "ninja -C build/ test\n"
            },
            {
                "id": 6,
                "name": "Attach termux-elf-cleaner to release",
                "run": "termux/upload-release-action@v4.1.0"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install required packages",
                "run": "sudo apt update\nsudo apt upgrade\nsudo apt install cmake ninja-build\n"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "cmake . -Bbuild -GNinja\nninja -C build/\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "ninja -C build/ test\n"
            }
        ],
        "termux/termux-float": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build and attach APK to release",
                "run": "exit_on_error() {\n    echo \"$1\"\n    echo \"Deleting '$RELEASE_VERSION_NAME' release and '$GITHUB_REF' tag\"\n    hub release delete \"$RELEASE_VERSION_NAME\"\n    git push --delete origin \"$GITHUB_REF\"\n    exit 1\n}\n\necho \"Setting vars\"\nRELEASE_VERSION_NAME=\"${GITHUB_REF/refs\\/tags\\//}\"\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  exit_on_error \"The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME+github-debug\"\nAPK_BASENAME_PREFIX=\"termux-float_$APK_VERSION_TAG\"\n\necho \"Building APK for '$RELEASE_VERSION_NAME' release\"\nexport TERMUX_FLOAT_APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n\necho \"Validating APK\"\nif ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\"; then\n  files_found=\"$(ls \"$APK_DIR_PATH\")\"\n  exit_on_error \"Failed to find built APK at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: \"$'\\n'\"$files_found\"\nfi\n\necho \"Generating sha25sums file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \"${APK_BASENAME_PREFIX}.apk\" > sha256sums); then\n  exit_on_error \"Generate sha25sums failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n\necho \"Attaching APK to github release\"\nif ! hub release edit \\\n-m \"\" \\\n-a \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\" \\\n-a \"$APK_DIR_PATH/sha256sums\" \\\n\"$RELEASE_VERSION_NAME\"; then\n  exit_on_error \"Attach APK to release failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build APK",
                "run": "exit_on_error() { echo \"$1\"; exit 1; }\n\necho \"Setting vars\"\n# Set RELEASE_VERSION_NAME to \"<CURRENT_VERSION_NAME>+<last_commit_hash>\"\nCURRENT_VERSION_NAME_REGEX='\\s+versionName \"([^\"]+)\"$'\nCURRENT_VERSION_NAME=\"$(grep -m 1 -E \"$CURRENT_VERSION_NAME_REGEX\" ./app/build.gradle | sed -r \"s/$CURRENT_VERSION_NAME_REGEX/\\1/\")\"\nRELEASE_VERSION_NAME=\"v$CURRENT_VERSION_NAME+${GITHUB_SHA:0:7}\" # The \"+\" is necessary so that versioning precedence is not affected\nif ! printf \"%s\" \"${RELEASE_VERSION_NAME/v/}\" | grep -qP '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'; then\n  exit_on_error \"The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.\"\nfi\n\nAPK_DIR_PATH=\"./app/build/outputs/apk/debug\"\nAPK_VERSION_TAG=\"$RELEASE_VERSION_NAME-github-debug\" # Note the \"-\", GITHUB_SHA will already have \"+\" before it\nAPK_BASENAME_PREFIX=\"termux-float_$APK_VERSION_TAG\"\n\n# Used by attachment steps later\necho \"APK_DIR_PATH=$APK_DIR_PATH\" >> $GITHUB_ENV\necho \"APK_VERSION_TAG=$APK_VERSION_TAG\" >> $GITHUB_ENV\necho \"APK_BASENAME_PREFIX=$APK_BASENAME_PREFIX\" >> $GITHUB_ENV\n\necho \"Building APK for '$RELEASE_VERSION_NAME' build\"\nexport TERMUX_FLOAT_APP_VERSION_NAME=\"${RELEASE_VERSION_NAME/v/}\" # Used by app/build.gradle\nexport TERMUX_FLOAT_APK_VERSION_TAG=\"$APK_VERSION_TAG\" # Used by app/build.gradle\nif ! ./gradlew assembleDebug; then\n  exit_on_error \"Build failed for '$RELEASE_VERSION_NAME' build.\"\nfi\n\necho \"Validating APK\"\nif ! test -f \"$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk\"; then\n  files_found=\"$(ls \"$APK_DIR_PATH\")\"\n  exit_on_error \"Failed to find built APK at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: \"$'\\n'\"$files_found\"\nfi\n\necho \"Generating sha25sums file\"\nif ! (cd \"$APK_DIR_PATH\"; sha256sum \"${APK_BASENAME_PREFIX}.apk\" > sha256sums); then\n  exit_on_error \"Generate sha25sums failed for '$RELEASE_VERSION_NAME' release.\"\nfi\n"
            },
            {
                "id": 3,
                "name": "Attach files",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "termux/termux-root-packages": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "if [ \"${{ github.event_name }}\" != \"workflow_dispatch\" ]; then\n  BASE_COMMIT=$(jq --raw-output .pull_request.base.sha \"$GITHUB_EVENT_PATH\")\n  OLD_COMMIT=$(jq --raw-output .commits[0].id \"$GITHUB_EVENT_PATH\")\n  HEAD_COMMIT=$(jq --raw-output .commits[-1].id \"$GITHUB_EVENT_PATH\")\n  if [ \"$BASE_COMMIT\" = \"null\" ]; then\n    if [ \"$OLD_COMMIT\" = \"$HEAD_COMMIT\" ]; then\n      # Single-commit push.\n      echo \"Processing commit: ${HEAD_COMMIT}\"\n      CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${HEAD_COMMIT}\")\n    else\n      # Multi-commit push.\n      OLD_COMMIT=\"${OLD_COMMIT}~1\"\n      echo \"Processing commit range: ${OLD_COMMIT}..${HEAD_COMMIT}\"\n      CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${OLD_COMMIT}\" \"${HEAD_COMMIT}\")\n    fi\n  else\n    # Pull requests.\n    echo \"Processing pull request #$(jq --raw-output .pull_request.number \"$GITHUB_EVENT_PATH\"): ${BASE_COMMIT}..HEAD\"\n    CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${BASE_COMMIT}\" \"HEAD\")\n  fi\nfi\nmkdir -p ./artifacts ./debs\ntouch ./debs/.placeholder\nif [ \"${{ github.event_name }}\" != \"workflow_dispatch\" ]; then\n  # Process tag '%ci:no-build' that may be added as line to commit message.\n  # Forces CI to cancel current build with status 'passed'.\n  if grep -qiP '^\\s*%ci:no-build\\s*$' <(git log --format=\"%B\" -n 1 \"HEAD\"); then\n    tar cf artifacts/debs-${{ matrix.target_arch }}.tar debs\n    echo \"[!] Force exiting as tag '%ci:no-build' was applied to HEAD commit message.\"\n    exit 0\n  fi\n  # Parse changed files and identify new packages and deleted packages.\n  # Create lists of those packages that will be passed to upload job for\n  # further processing.\n  while read -r file; do\n    if ! [[ $file == packages/* ]]; then\n      # This file does not belong to a package, so ignore it\n      continue\n    fi\n    if [[ $file =~ ^packages/([a-z0-9+-]*)/([a-z0-9+-]*).subpackage.sh$ ]]; then\n      # A subpackage was modified, check if it was deleted or just updated\n      pkg=${BASH_REMATCH[1]}\n      subpkg=${BASH_REMATCH[2]}\n      if [ ! -f \"packages/${pkg}/${subpkg}.subpackage.sh\" ]; then\n        echo \"$subpkg\" >> ./deleted_packages.txt\n      fi\n    elif [[ $file =~ ^packages/([a-z0-9+-]*)/.*$ ]]; then\n      # package, check if it was deleted or updated\n      pkg=${BASH_REMATCH[1]}\n      if [ ! -d \"packages/${pkg}\" ]; then\n        echo \"$pkg\" >> ./deleted_packages.txt\n      else\n        echo \"$pkg\" >> ./built_packages.txt\n        # If there are subpackages we want to create a list of those\n        # as well\n        for file in $(find \"packages/${pkg}/\" -maxdepth 1 -type f -name \\*.subpackage.sh | sort); do\n          echo \"$(basename \"${file%%.subpackage.sh}\")\" >> ./built_subpackages.txt\n        done\n      fi\n    fi\n  done<<<${CHANGED_FILES}\nelse\n  for pkg in ${{ github.event.inputs.packages }}; do\n    echo \"$pkg\" >> ./built_packages.txt\n    for subpkg in $(find \"packages/${pkg}/\" -maxdepth 1 -type f -name \\*.subpackage.sh | sort); do\n      echo \"$(basename \"${subpkg%%.subpackage.sh}\")\" >> ./built_subpackages.txt\n    done\n  done\nfi\n\n# Fix so that lists do not contain duplicates\nif [ -f ./built_packages.txt ]; then\n  uniq ./built_packages.txt > ./built_packages.txt.tmp\n  mv ./built_packages.txt.tmp ./built_packages.txt\nfi\nif [ -f ./built_subpackages.txt ]; then\n  uniq ./built_subpackages.txt > ./built_subpackages.txt.tmp\n  mv ./built_subpackages.txt.tmp ./built_subpackages.txt\nfi\nif [ -f ./deleted_packages.txt ]; then\n  uniq ./deleted_packages.txt > ./deleted_packages.txt.tmp\n  mv ./deleted_packages.txt.tmp ./deleted_packages.txt\nfi\n\nif [ -f ./built_packages.txt ]; then\n  ./scripts/lint-packages.sh $(cat ./built_packages.txt | awk '{print \"packages/\"$1\"/build.sh\"}')\n  ./start-builder.sh ./build-package.sh -o ./debs -I -a ${{ matrix.target_arch }} $(cat ./built_packages.txt)\nfi\n\ntest -d ./termux-packages/debs && find ./termux-packages/debs/ -mindepth 1 -maxdepth 1 ! -name \".*\" -exec mv \"{}\" ./debs/ \\;\n# Put package lists into directory with *.deb files so they will be transferred to\n# upload job.\ntest -f ./built_packages.txt && mv ./built_packages.txt ./debs/\ntest -f ./built_subpackages.txt && cat ./built_subpackages.txt >> ./debs/built_packages.txt \\\n  && rm ./built_subpackages.txt\ntest -f ./deleted_packages.txt && mv ./deleted_packages.txt ./debs/\n# Files containing certain symbols (e.g. \":\") will cause failure in actions/upload-artifact.\n# Archiving *.deb files in a tarball to avoid issues with uploading.\ntar cf artifacts/debs-${{ matrix.target_arch }}-${{ github.sha }}.tar debs\n"
            },
            {
                "id": 3,
                "name": "Checksums for built *.deb files",
                "run": "find debs -type f -name \"*.deb\" -exec sha256sum \"{}\" \\; | sort -k2\n"
            },
            {
                "id": 4,
                "name": "Store *.deb files",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Get *.deb files",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 3,
                "name": "Upload to packages.termux.org",
                "run": "GITHUB_SHA=${{ github.sha }}\nAPTLY_API_AUTH=${{ secrets.APTLY_API_AUTH }}\nGPG_PASSPHRASE=${{ secrets.GPG_PASSPHRASE }}\n\ngit submodule update --init\nsource termux-packages/scripts/aptly_api.sh\n\nfor archive in termux-root-packages-*/*.tar; do\n  tar xf \"$archive\"\ndone\n\n# Upload file to temporary directory.\nuploaded_files=false\nshopt -s nullglob\nfor filename in $(cat debs/built_packages.txt | sed -E 's/(..*)/debs\\/\\1_\\*.deb debs\\/\\1-static_\\*.deb/g'); do\n  if ! aptly_upload_file \"$filename\"; then\n    exit 1\n  fi\n\n  uploaded_files=true\ndone\nshopt -u nullglob\n\n# Publishing repository changes.\nif [ \"$uploaded_files\" = \"true\" ]; then\n  if ! aptly_add_to_repo; then\n    exit 1\n  fi\n\n  # Usually temporary directory is deleted automatically, but in certain cases it is left.\n  aptly_delete_dir\n\n  # Final part to make changes appear in web root.\n  if ! aptly_publish_repo; then\n    exit 1\n  fi\nfi\n"
            },
            {
                "id": 4,
                "name": "Upload to grimler.se",
                "run": "GITHUB_SHA=${{ github.sha }}\nAPTLY_API_AUTH=${{ secrets.APTLY_API_AUTH }}\n\nsource termux-packages/scripts/aptly_api.sh\n\n# Upload file to temporary directory.\nuploaded_files=false\nshopt -s nullglob\nfor filename in $(cat debs/built_packages.txt | sed -E 's/(..*)/debs\\/\\1_\\*.deb debs\\/\\1-static_\\*.deb/g'); do\n  if ! aptly_upload_file \"$filename\"; then\n    exit 1\n  fi\n\n  uploaded_files=true\ndone\nshopt -u nullglob\n\n# Publishing repository changes.\nif [ \"$uploaded_files\" = \"true\" ]; then\n  if ! aptly_add_to_repo; then\n    exit 1\n  fi\n\n  # Usually temporary directory is deleted automatically, but in certain cases it is left.\n  aptly_delete_dir\n\n  # grimler.se mirror is signed manually, can't publish\n  # through CI\n  # if ! aptly_publish_repo; then\n  #   exit 1\n  # fi\nfi\n"
            }
        ],
        "termux/x11-packages": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build packages",
                "run": "if [ \"${{ github.event_name }}\" != \"workflow_dispatch\" ]; then\n  BASE_COMMIT=$(jq --raw-output .pull_request.base.sha \"$GITHUB_EVENT_PATH\")\n  OLD_COMMIT=$(jq --raw-output .commits[0].id \"$GITHUB_EVENT_PATH\")\n  HEAD_COMMIT=$(jq --raw-output .commits[-1].id \"$GITHUB_EVENT_PATH\")\n  if [ \"$BASE_COMMIT\" = \"null\" ]; then\n    if [ \"$OLD_COMMIT\" = \"$HEAD_COMMIT\" ]; then\n      # Single-commit push.\n      echo \"Processing commit: ${HEAD_COMMIT}\"\n      CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${HEAD_COMMIT}\")\n    else\n      # Multi-commit push.\n      OLD_COMMIT=\"${OLD_COMMIT}~1\"\n      echo \"Processing commit range: ${OLD_COMMIT}..${HEAD_COMMIT}\"\n      CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${OLD_COMMIT}\" \"${HEAD_COMMIT}\")\n    fi\n  else\n    # Pull requests.\n    echo \"Processing pull request #$(jq --raw-output .pull_request.number \"$GITHUB_EVENT_PATH\"): ${BASE_COMMIT}..HEAD\"\n    CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${BASE_COMMIT}\" \"HEAD\")\n  fi\nfi\nmkdir -p ./artifacts ./debs\ntouch ./debs/.placeholder\nif [ \"${{ github.event_name }}\" != \"workflow_dispatch\" ]; then\n  # Process tag '%ci:no-build' that may be added as line to commit message.\n  # Forces CI to cancel current build with status 'passed'.\n  if grep -qiP '^\\s*%ci:no-build\\s*$' <(git log --format=\"%B\" -n 1 \"HEAD\"); then\n    tar cf artifacts/debs-${{ matrix.target_arch }}.tar debs\n    echo \"[!] Force exiting as tag '%ci:no-build' was applied to HEAD commit message.\"\n    exit 0\n  fi\n  # Parse changed files and identify new packages and deleted packages.\n  # Create lists of those packages that will be passed to upload job for\n  # further processing.\n  while read -r file; do\n    if ! [[ $file == packages/* ]]; then\n      # This file does not belong to a package, so ignore it\n      continue\n    fi\n    if [[ $file =~ ^packages/([a-z0-9+-]*)/([a-z0-9+-]*).subpackage.sh$ ]]; then\n      # A subpackage was modified, check if it was deleted or just updated\n      pkg=${BASH_REMATCH[1]}\n      subpkg=${BASH_REMATCH[2]}\n      if [ ! -f \"packages/${pkg}/${subpkg}.subpackage.sh\" ]; then\n        echo \"$subpkg\" >> ./deleted_packages.txt\n      fi\n    elif [[ $file =~ ^packages/([a-z0-9+-]*)/.*$ ]]; then\n      # package, check if it was deleted or updated\n      pkg=${BASH_REMATCH[1]}\n      if [ ! -d \"packages/${pkg}\" ]; then\n        echo \"$pkg\" >> ./deleted_packages.txt\n      else\n        echo \"$pkg\" >> ./built_packages.txt\n        # If there are subpackages we want to create a list of those\n        # as well\n        for file in $(find \"packages/${pkg}/\" -maxdepth 1 -type f -name \\*.subpackage.sh | sort); do\n          echo \"$(basename \"${file%%.subpackage.sh}\")\" >> ./built_subpackages.txt\n        done\n      fi\n    fi\n  done<<<${CHANGED_FILES}\nelse\n  for pkg in ${{ github.event.inputs.packages }}; do\n    echo \"$pkg\" >> ./built_packages.txt\n    for subpkg in $(find \"packages/${pkg}/\" -maxdepth 1 -type f -name \\*.subpackage.sh | sort); do\n      echo \"$(basename \"${subpkg%%.subpackage.sh}\")\" >> ./built_subpackages.txt\n    done\n  done\nfi\n\n# Fix so that lists do not contain duplicates\nif [ -f ./built_packages.txt ]; then\n  uniq ./built_packages.txt > ./built_packages.txt.tmp\n  mv ./built_packages.txt.tmp ./built_packages.txt\nfi\nif [ -f ./built_subpackages.txt ]; then\n  uniq ./built_subpackages.txt > ./built_subpackages.txt.tmp\n  mv ./built_subpackages.txt.tmp ./built_subpackages.txt\nfi\nif [ -f ./deleted_packages.txt ]; then\n  uniq ./deleted_packages.txt > ./deleted_packages.txt.tmp\n  mv ./deleted_packages.txt.tmp ./deleted_packages.txt\nfi\n\nif [ -f ./built_packages.txt ]; then\n  ./scripts/lint-packages.sh $(cat ./built_packages.txt | awk '{print \"packages/\"$1\"/build.sh\"}')\n  ./start-builder.sh ./build-package.sh -o ./debs -I -a ${{ matrix.target_arch }} $(cat ./built_packages.txt)\nfi\n\ntest -d ./termux-packages/debs && find ./termux-packages/debs/ -mindepth 1 -maxdepth 1 ! -name \".*\" -exec mv \"{}\" ./debs/ \\;\n# Put package lists into directory with *.deb files so they will be transferred to\n# upload job.\ntest -f ./built_packages.txt && mv ./built_packages.txt ./debs/\ntest -f ./built_subpackages.txt && cat ./built_subpackages.txt >> ./debs/built_packages.txt \\\n  && rm ./built_subpackages.txt\ntest -f ./deleted_packages.txt && mv ./deleted_packages.txt ./debs/\n# Files containing certain symbols (e.g. \":\") will cause failure in actions/upload-artifact.\n# Archiving *.deb files in a tarball to avoid issues with uploading.\ntar cf artifacts/debs-${{ matrix.target_arch }}-${{ github.sha }}.tar debs\n"
            },
            {
                "id": 3,
                "name": "Checksums for built *.deb files",
                "run": "find debs -type f -name \"*.deb\" -exec sha256sum \"{}\" \\; | sort -k2\n"
            },
            {
                "id": 4,
                "name": "Store *.deb files",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Get *.deb files",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 3,
                "name": "Upload to packages.termux.org",
                "run": "GITHUB_SHA=${{ github.sha }}\nAPTLY_API_AUTH=${{ secrets.APTLY_API_AUTH }}\nGPG_PASSPHRASE=${{ secrets.GPG_PASSPHRASE }}\n\ngit submodule update --init\nsource termux-packages/scripts/aptly_api.sh\n\nfor archive in x11-packages-*/*.tar; do\n  tar xf \"$archive\"\ndone\n\n# Upload file to temporary directory.\nuploaded_files=false\nshopt -s nullglob\nfor filename in $(cat debs/built_packages.txt | sed -E 's/(..*)/debs\\/\\1_\\*.deb debs\\/\\1-static_\\*.deb/g'); do\n  if ! aptly_upload_file \"$filename\"; then\n    exit 1\n  fi\n\n  uploaded_files=true\ndone\nshopt -u nullglob\n\n# Publishing repository changes.\nif [ \"$uploaded_files\" = \"true\" ]; then\n  if ! aptly_add_to_repo; then\n    exit 1\n  fi\n\n  # Usually temporary directory is deleted automatically, but in certain cases it is left.\n  aptly_delete_dir\n\n  # Final part to make changes appear in web root.\n  if ! aptly_publish_repo; then\n    exit 1\n  fi\nfi\n"
            },
            {
                "id": 4,
                "name": "Upload to grimler.se",
                "run": "GITHUB_SHA=${{ github.sha }}\nAPTLY_API_AUTH=${{ secrets.APTLY_API_AUTH }}\n\nsource termux-packages/scripts/aptly_api.sh\n\n# Upload file to temporary directory.\nuploaded_files=false\nshopt -s nullglob\nfor filename in $(cat debs/built_packages.txt | sed -E 's/(..*)/debs\\/\\1_\\*.deb debs\\/\\1-static_\\*.deb/g'); do\n  if ! aptly_upload_file \"$filename\"; then\n    exit 1\n  fi\n\n  uploaded_files=true\ndone\nshopt -u nullglob\n\n# Publishing repository changes.\nif [ \"$uploaded_files\" = \"true\" ]; then\n  if ! aptly_add_to_repo; then\n   exit 1\n  fi\n\n  # Usually temporary directory is deleted automatically, but in certain cases it is left.\n  aptly_delete_dir\n\n  # grimler.se mirror is signed manually, can't publish\n  # through CI\n  # if ! aptly_publish_repo; then\n  #   exit 1\n  # fi\nfi\n"
            }
        ],
        "termux/termux-packaging": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "hecrj/setup-rust-action@v1"
            },
            {
                "id": 3,
                "name": "Show rust version",
                "run": "rustc --version"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "cargo test"
            },
            {
                "id": 5,
                "name": "Run clippy",
                "run": "cargo clippy -- -D warnings"
            }
        ],
        "termux/game-packages": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "BASE_COMMIT=$(jq --raw-output .pull_request.base.sha \"$GITHUB_EVENT_PATH\")\nOLD_COMMIT=$(jq --raw-output .commits[0].id \"$GITHUB_EVENT_PATH\")\nHEAD_COMMIT=$(jq --raw-output .commits[-1].id \"$GITHUB_EVENT_PATH\")\nif [ \"$BASE_COMMIT\" = \"null\" ]; then\n  if [ \"$OLD_COMMIT\" = \"$HEAD_COMMIT\" ]; then\n    # Single-commit push.\n    echo \"Processing commit: ${HEAD_COMMIT}\"\n    CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${HEAD_COMMIT}\")\n  else\n    # Multi-commit push.\n    OLD_COMMIT=\"${OLD_COMMIT}~1\"\n    echo \"Processing commit range: ${OLD_COMMIT}..${HEAD_COMMIT}\"\n    CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${OLD_COMMIT}\" \"${HEAD_COMMIT}\")\n  fi\nelse\n  # Pull requests.\n  echo \"Processing pull request #$(jq --raw-output .pull_request.number \"$GITHUB_EVENT_PATH\"): ${BASE_COMMIT}..HEAD\"\n  CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${BASE_COMMIT}\" \"HEAD\")\nfi\nmkdir -p ./artifacts ./debs\ntouch ./debs/.placeholder\n# Process tag '%ci:no-build' that may be added as line to commit message.\n# Forces CI to cancel current build with status 'passed'.\nif grep -qiP '^\\s*%ci:no-build\\s*$' <(git log --format=\"%B\" -n 1 \"HEAD\"); then\n  tar cf artifacts/debs-${{ matrix.target_arch }}.tar debs\n  echo \"[!] Force exiting as tag '%ci:no-build' was applied to HEAD commit message.\"\n  exit 0\nfi\n# Parse changed files and identify new packages and deleted packages.\n# Create lists of those packages that will be passed to upload job for\n# further processing.\nwhile read -r file; do\n  if ! [[ $file == packages/* ]]; then\n    # This file does not belong to a package, so ignore it\n    continue\n  fi\n  if [[ $file =~ ^packages/([a-z0-9-]*)/([a-z0-9-]*).subpackage.sh$ ]]; then\n    # A subpackage was modified, check if it was deleted or just updated\n    pkg=${BASH_REMATCH[1]}\n    subpkg=${BASH_REMATCH[2]}\n    if [ ! -f \"packages/${pkg}/${subpkg}.subpackage.sh\" ]; then\n      echo \"$subpkg\" >> ./deleted_packages.txt\n    fi\n  elif [[ $file =~ ^packages/([a-z0-9-]*)/.*$ ]]; then\n    # package, check if it was deleted or updated\n    pkg=${BASH_REMATCH[1]}\n    if [ ! -d \"packages/${pkg}\" ]; then\n      echo \"$pkg\" >> ./deleted_packages.txt\n    else\n      echo \"$pkg\" >> ./built_packages.txt\n      # If there are subpackages we want to create a list of those\n      # as well\n      for file in $(find \"packages/${pkg}/\" -maxdepth 1 -type f -name \\*.subpackage.sh | sort); do\n        echo \"$(basename \"${file%%.subpackage.sh}\")\" >> ./built_subpackages.txt\n      done\n    fi\n  fi\ndone<<<${CHANGED_FILES}\n\n# Fix so that lists do not contain duplicates\nif [ -f ./built_packages.txt ]; then\n  uniq ./built_packages.txt > ./built_packages.txt.tmp\n  mv ./built_packages.txt.tmp ./built_packages.txt\nfi\nif [ -f ./built_subpackages.txt ]; then\n  uniq ./built_subpackages.txt > ./built_subpackages.txt.tmp\n  mv ./built_subpackages.txt.tmp ./built_subpackages.txt\nfi\nif [ -f ./deleted_packages.txt ]; then\n  uniq ./deleted_packages.txt > ./deleted_packages.txt.tmp\n  mv ./deleted_packages.txt.tmp ./deleted_packages.txt\nfi\n\nif [ -f ./built_packages.txt ]; then\n  ./scripts/lint-packages.sh $(cat ./built_packages.txt | awk '{print \"packages/\"$1\"/build.sh\"}')\n  ./start-builder.sh ./build-package.sh -o ./debs -I -a ${{ matrix.target_arch }} $(cat ./built_packages.txt)\nfi\n\ntest -d ./termux-packages/debs && mv ./termux-packages/debs/* ./debs/\n# Put package lists into directory with *.deb files so they will be transferred to\n# upload job.\ntest -f ./built_packages.txt && mv ./built_packages.txt ./debs/\ntest -f ./built_subpackages.txt && cat ./built_subpackages.txt >> ./debs/built_packages.txt \\\n  && rm ./built_subpackages.txt\ntest -f ./deleted_packages.txt && mv ./deleted_packages.txt ./debs/\n# Files containing certain symbols (e.g. \":\") will cause failure in actions/upload-artifact.\n# Archiving *.deb files in a tarball to avoid issues with uploading.\ntar cf artifacts/debs-${{ matrix.target_arch }}-${{ github.sha }}.tar debs\n"
            },
            {
                "id": 3,
                "name": "Checksums for built *.deb files",
                "run": "find debs -type f -name \"*.deb\" -exec sha256sum \"{}\" \\; | sort -k2\n"
            },
            {
                "id": 4,
                "name": "Store *.deb files",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Get *.deb files",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 3,
                "name": "Upload to packages.termux.org",
                "run": "for archive in *.tar; do\n  tar xf \"$archive\"\ndone\n\n# Function for deleting temporary directory with uploaded files from\n# the server.\naptly_delete_dir() {\n  echo \"[*] Deleting uploads temporary directory.\"\n\n  curl_response=$(\n    curl \\\n      --silent \\\n      --user \"${{ secrets.APTLY_API_AUTH }}\" \\\n      --request DELETE \\\n      --write-out \"|%{http_code}\" \\\n      https://packages.termux.org/aptly-api/files/${REPOSITORY_NAME}-${{ github.sha }}\n  )\n\n  http_status_code=$(echo \"$curl_response\" | cut -d'|' -f2)\n\n  if [ \"$http_status_code\" != \"200\" ]; then\n    echo \"[!] Server returned $http_status_code code while deleting temporary directory.\"\n  fi\n}\n\n# Upload file to temporary directory.\nuploaded_files=false\nshopt -s nullglob\nfor filename in $(cat debs/built_packages.txt | sed -E 's/(..*)/debs\\/\\1_\\*.deb debs\\/\\1-static_\\*.deb/g'); do\n  curl_response=$(\n    curl \\\n      --silent \\\n      --user \"${{ secrets.APTLY_API_AUTH }}\" \\\n      --request POST \\\n      --form file=@${filename} \\\n      --write-out \"|%{http_code}\" \\\n      https://packages.termux.org/aptly-api/files/${REPOSITORY_NAME}-${{ github.sha }}\n  )\n\n  http_status_code=$(echo \"$curl_response\" | cut -d'|' -f2)\n\n  if [ \"$http_status_code\" = \"200\" ]; then\n    echo \"[*] Uploaded: $(echo \"$curl_response\" | cut -d'|' -f1 | jq -r '.[]' | cut -d'/' -f2)\"\n  else\n    # Manually cleaning up the temporary directory to reclaim disk space.\n    # Don't rely on scheduled server-side scripts.\n    echo \"[!] Failed to upload '$filename'. Server returned $http_status_code code.\"\n    echo \"[!] Aborting any further uploads.\"\n    aptly_delete_dir\n    exit 1\n  fi\n\n  uploaded_files=true\ndone\nshopt -u nullglob\n\n# Publishing repository changes.\nif [ \"$uploaded_files\" = \"true\" ]; then\n  echo \"[*] Adding packages to repository '$REPOSITORY_NAME'...\"\n\n  curl_response=$(\n    curl \\\n      --silent \\\n      --user \"${{ secrets.APTLY_API_AUTH }}\" \\\n      --request POST \\\n      --write-out \"|%{http_code}\" \\\n      https://packages.termux.org/aptly-api/repos/${REPOSITORY_NAME}/file/${REPOSITORY_NAME}-${{ github.sha }}\n  )\n\n  http_status_code=$(echo \"$curl_response\" | cut -d'|' -f2)\n\n  if [ \"$http_status_code\" = \"200\" ]; then\n    warnings=$(echo \"$curl_response\" | cut -d'|' -f1 | jq '.Report.Warnings' | jq -r '.[]')\n    if [ -n \"$warnings\" ]; then\n      echo \"[!] WARNINGS (NON-CRITICAL):\"\n      echo\n      echo \"$warnings\"\n      echo\n    fi\n\n    # Upload directory is usually deleted automatically once all deb\n    # files were added without issues. Attempting to do this manually\n    # in case it left for some reason (e.g. some debs not added due to\n    # conflicts).\n    aptly_delete_dir\n  else\n    echo \"[*] Server returned $http_status_code. Not publishing repository!\"\n    aptly_delete_dir\n    exit 1\n  fi\n\n  # Final part to make changes appear in web root.\n  echo \"[*] Publishing repository changes...\"\n  set +e\n  curl \\\n    --silent \\\n    --user \"${{ secrets.APTLY_API_AUTH }}\" \\\n    --header 'Content-Type: application/json' \\\n    --request PUT \\\n    --data '{\"Signing\": {\"Passphrase\": \"${{ secrets.GPG_PASSPHRASE }}\"}}' \\\n    https://packages.termux.org/aptly-api/publish/${REPOSITORY_NAME}/${REPOSITORY_DISTRIBUTION}\n  exit_code=$?\n  echo\n\n  if [ \"$exit_code\" = 0 ]; then\n    echo \"[*] Repository updated successfully.\"\n  elif [ \"$exit_code\" = 52 ]; then\n    echo \"[!] Repository update takes more time than expected, server returned empty response.\"\n    echo \"[!] This is expected if large amount of data has been submitted.\"\n  else\n    echo \"[!] curl exited with error code $exit_status.\"\n    exit \"$exit_code\"\n  fi\nfi\n"
            }
        ],
        "termux/science-packages": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "BASE_COMMIT=$(jq --raw-output .pull_request.base.sha \"$GITHUB_EVENT_PATH\")\nOLD_COMMIT=$(jq --raw-output .commits[0].id \"$GITHUB_EVENT_PATH\")\nHEAD_COMMIT=$(jq --raw-output .commits[-1].id \"$GITHUB_EVENT_PATH\")\nif [ \"$BASE_COMMIT\" = \"null\" ]; then\n  if [ \"$OLD_COMMIT\" = \"$HEAD_COMMIT\" ]; then\n    # Single-commit push.\n    echo \"Processing commit: ${HEAD_COMMIT}\"\n    CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${HEAD_COMMIT}\")\n  else\n    # Multi-commit push.\n    OLD_COMMIT=\"${OLD_COMMIT}~1\"\n    echo \"Processing commit range: ${OLD_COMMIT}..${HEAD_COMMIT}\"\n    CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${OLD_COMMIT}\" \"${HEAD_COMMIT}\")\n  fi\nelse\n  # Pull requests.\n  echo \"Processing pull request #$(jq --raw-output .pull_request.number \"$GITHUB_EVENT_PATH\"): ${BASE_COMMIT}..HEAD\"\n  CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${BASE_COMMIT}\" \"HEAD\")\nfi\nmkdir -p ./artifacts ./debs\ntouch ./debs/.placeholder\n# Process tag '%ci:no-build' that may be added as line to commit message.\n# Forces CI to cancel current build with status 'passed'.\nif grep -qiP '^\\s*%ci:no-build\\s*$' <(git log --format=\"%B\" -n 1 \"HEAD\"); then\n  tar cf artifacts/debs-${{ matrix.target_arch }}.tar debs\n  echo \"[!] Force exiting as tag '%ci:no-build' was applied to HEAD commit message.\"\n  exit 0\nfi\n# Parse changed files and identify new packages and deleted packages.\n# Create lists of those packages that will be passed to upload job for\n# further processing.\nwhile read -r file; do\n  if ! [[ $file == packages/* ]]; then\n    # This file does not belong to a package, so ignore it\n    continue\n  fi\n  if [[ $file =~ ^packages/([a-z0-9-]*)/([a-z0-9-]*).subpackage.sh$ ]]; then\n    # A subpackage was modified, check if it was deleted or just updated\n    pkg=${BASH_REMATCH[1]}\n    subpkg=${BASH_REMATCH[2]}\n    if [ ! -f \"packages/${pkg}/${subpkg}.subpackage.sh\" ]; then\n      echo \"$subpkg\" >> ./deleted_packages.txt\n    fi\n  elif [[ $file =~ ^packages/([a-z0-9-]*)/.*$ ]]; then\n    # package, check if it was deleted or updated\n    pkg=${BASH_REMATCH[1]}\n    if [ ! -d \"packages/${pkg}\" ]; then\n      echo \"$pkg\" >> ./deleted_packages.txt\n    else\n      echo \"$pkg\" >> ./built_packages.txt\n      # If there are subpackages we want to create a list of those\n      # as well\n      for file in $(find \"packages/${pkg}/\" -maxdepth 1 -type f -name \\*.subpackage.sh | sort); do\n        echo \"$(basename \"${file%%.subpackage.sh}\")\" >> ./built_subpackages.txt\n      done\n    fi\n  fi\ndone<<<${CHANGED_FILES}\n\n# Fix so that lists do not contain duplicates\nif [ -f ./built_packages.txt ]; then\n  uniq ./built_packages.txt > ./built_packages.txt.tmp\n  mv ./built_packages.txt.tmp ./built_packages.txt\nfi\nif [ -f ./built_subpackages.txt ]; then\n  uniq ./built_subpackages.txt > ./built_subpackages.txt.tmp\n  mv ./built_subpackages.txt.tmp ./built_subpackages.txt\nfi\nif [ -f ./deleted_packages.txt ]; then\n  uniq ./deleted_packages.txt > ./deleted_packages.txt.tmp\n  mv ./deleted_packages.txt.tmp ./deleted_packages.txt\nfi\n\nif grep -qP '^texlive-full$' ./built_packages.txt || grep -qP '^openfoam$' ./built_packages.txt; then\n  echo \"Free additional disk space on host\"\n  sudo apt purge -yq $(dpkg -l | grep '^ii' | awk '{ print $2 }' | grep -P '(cabal-|dotnet-|ghc-|libmono|php)') \\\n    liblldb-6.0 libllvm6.0:amd64 mono-runtime-common monodoc-manual powershell ruby\n  sudo apt autoremove -yq\n  sudo rm -rf /opt/hostedtoolcache /usr/local /usr/share/dotnet /usr/share/swift\nfi\n\nif [ -f ./built_packages.txt ]; then\n  ./scripts/lint-packages.sh $(cat ./built_packages.txt | awk '{print \"packages/\"$1\"/build.sh\"}')\n  ./start-builder.sh ./build-package.sh -o ./debs -I -a ${{ matrix.target_arch }} $(cat ./built_packages.txt)\nfi\n\ntest -d ./termux-packages/debs && mv ./termux-packages/debs/* ./debs/\n# Put package lists into directory with *.deb files so they will be transferred to\n# upload job.\ntest -f ./built_packages.txt && mv ./built_packages.txt ./debs/\ntest -f ./built_subpackages.txt && cat ./built_subpackages.txt >> ./debs/built_packages.txt \\\n  && rm ./built_subpackages.txt\ntest -f ./deleted_packages.txt && mv ./deleted_packages.txt ./debs/\n# Files containing certain symbols (e.g. \":\") will cause failure in actions/upload-artifact.\n# Archiving *.deb files in a tarball to avoid issues with uploading.\ntar cf artifacts/debs-${{ matrix.target_arch }}-${{ github.sha }}.tar debs\n"
            },
            {
                "id": 3,
                "name": "Checksums for built *.deb files",
                "run": "find debs -type f -name \"*.deb\" -exec sha256sum \"{}\" \\; | sort -k2\n"
            },
            {
                "id": 4,
                "name": "Store *.deb files",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Get *.deb files",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 3,
                "name": "Upload to packages.termux.org",
                "run": "for archive in *.tar; do\n  tar xf \"$archive\"\ndone\n\n# Function for deleting temporary directory with uploaded files from\n# the server.\naptly_delete_dir() {\n  echo \"[*] Deleting uploads temporary directory.\"\n\n  curl_response=$(\n    curl \\\n      --silent \\\n      --user \"${{ secrets.APTLY_API_AUTH }}\" \\\n      --request DELETE \\\n      --write-out \"|%{http_code}\" \\\n      https://packages.termux.org/aptly-api/files/${REPOSITORY_NAME}-${{ github.sha }}\n  )\n\n  http_status_code=$(echo \"$curl_response\" | cut -d'|' -f2)\n\n  if [ \"$http_status_code\" != \"200\" ]; then\n    echo \"[!] Server returned $http_status_code code while deleting temporary directory.\"\n  fi\n}\n\n# Upload file to temporary directory.\nuploaded_files=false\nshopt -s nullglob\nfor filename in $(cat debs/built_packages.txt | sed -E 's/(..*)/debs\\/\\1_\\*.deb debs\\/\\1-static_\\*.deb/g'); do\n  curl_response=$(\n    curl \\\n      --silent \\\n      --user \"${{ secrets.APTLY_API_AUTH }}\" \\\n      --request POST \\\n      --form file=@${filename} \\\n      --write-out \"|%{http_code}\" \\\n      https://packages.termux.org/aptly-api/files/${REPOSITORY_NAME}-${{ github.sha }}\n  )\n\n  http_status_code=$(echo \"$curl_response\" | cut -d'|' -f2)\n\n  if [ \"$http_status_code\" = \"200\" ]; then\n    echo \"[*] Uploaded: $(echo \"$curl_response\" | cut -d'|' -f1 | jq -r '.[]' | cut -d'/' -f2)\"\n  else\n    # Manually cleaning up the temporary directory to reclaim disk space.\n    # Don't rely on scheduled server-side scripts.\n    echo \"[!] Failed to upload '$filename'. Server returned $http_status_code code.\"\n    echo \"[!] Aborting any further uploads.\"\n    aptly_delete_dir\n    exit 1\n  fi\n\n  uploaded_files=true\ndone\nshopt -u nullglob\n\n# Publishing repository changes.\nif [ \"$uploaded_files\" = \"true\" ]; then\n  echo \"[*] Adding packages to repository '$REPOSITORY_NAME'...\"\n\n  curl_response=$(\n    curl \\\n      --silent \\\n      --user \"${{ secrets.APTLY_API_AUTH }}\" \\\n      --request POST \\\n      --write-out \"|%{http_code}\" \\\n      https://packages.termux.org/aptly-api/repos/${REPOSITORY_NAME}/file/${REPOSITORY_NAME}-${{ github.sha }} || true\n  )\n\n  http_status_code=$(echo \"$curl_response\" | cut -d'|' -f2)\n\n  if [ \"$http_status_code\" = \"200\" ]; then\n    warnings=$(echo \"$curl_response\" | cut -d'|' -f1 | jq '.Report.Warnings' | jq -r '.[]')\n    if [ -n \"$warnings\" ]; then\n      echo \"[!] WARNINGS (NON-CRITICAL):\"\n      echo\n      echo \"$warnings\"\n      echo\n    fi\n  fi\n  # Usually temporary directory is deleted automatically, but in certain cases it is left.\n  aptly_delete_dir\n\n  # Final part to make changes appear in web root.\n  echo \"[*] Publishing repository changes...\"\n  set +e\n  curl \\\n    --silent \\\n    --user \"${{ secrets.APTLY_API_AUTH }}\" \\\n    --header 'Content-Type: application/json' \\\n    --request PUT \\\n    --data '{\"Signing\": {\"Passphrase\": \"${{ secrets.GPG_PASSPHRASE }}\"}}' \\\n    https://packages.termux.org/aptly-api/publish/${REPOSITORY_NAME}/${REPOSITORY_DISTRIBUTION}\n  exit_code=$?\n  echo\n\n  if [ \"$exit_code\" = 0 ]; then\n    echo \"[*] Repository updated successfully.\"\n  elif [ \"$exit_code\" = 52 ]; then\n    echo \"[!] Repository update takes more time than expected, server returned empty response.\"\n    echo \"[!] This is expected if large amount of data has been submitted.\"\n  else\n    echo \"[!] curl exited with error code $exit_status.\"\n    exit \"$exit_code\"\n  fi\nfi\n"
            }
        ],
        "termux/termux-x11": [
            {
                "id": 1,
                "name": "Install dependencies",
                "run": "sudo apt update && sudo apt install -y libarchive-tools\n"
            },
            {
                "id": 2,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Validation",
                "run": "gradle/actions/wrapper-validation@v3"
            },
            {
                "id": 4,
                "name": "Java setup",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 5,
                "name": "Restore cache",
                "run": "actions/cache@v4"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "./gradlew assembleDebug"
            },
            {
                "id": 7,
                "name": "Build companion package",
                "run": "./build_termux_package"
            },
            {
                "id": 8,
                "name": "Copy loader to target directory",
                "run": "cp ./shell-loader/build/outputs/apk/debug/shell-loader-debug.apk ./app/build/outputs/apk/debug/shell-loader-nightly.apk"
            },
            {
                "id": 9,
                "name": "Store app-arm64-v8a-debug",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 10,
                "name": "Store app-armeabi-v7a-debug",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 11,
                "name": "Store app-universal-debug",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 12,
                "name": "Store app-x86_64-debug",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 13,
                "name": "Store app-x86-debug",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 14,
                "name": "Store companion package",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 15,
                "name": "Store unstripped libraries with debug symbols",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 16,
                "name": "Update Nightly Release",
                "run": "andelf/nightly-release@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Update Gradle Wrapper",
                "run": "gradle-update/update-gradle-wrapper-action@v1"
            }
        ],
        "termux/termux-docker": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup binfmt_misc",
                "run": "docker run --rm --privileged aptman/qus -s -- -p aarch64 arm"
            },
            {
                "id": 3,
                "name": "Build images",
                "run": "case '${{ matrix.CPU_ARCH }}' in\n  arm)     SYSTEM_TYPE=arm; PLATFORM_TAG=\"linux/arm/v7\";;\n  aarch64) SYSTEM_TYPE=arm; PLATFORM_TAG=\"linux/arm64\";;\n  i686)    SYSTEM_TYPE=x86; PLATFORM_TAG=\"linux/386\";;\n  *)       SYSTEM_TYPE=x86; PLATFORM_TAG=\"linux/amd64\";;\nesac\ndocker buildx build -t \\\n  termux/termux-docker:${{ matrix.CPU_ARCH }} \\\n  --platform \"$PLATFORM_TAG\" \\\n  --build-arg BOOTSTRAP_ARCH=${{ matrix.CPU_ARCH }} \\\n  --build-arg SYSTEM_TYPE=\"${SYSTEM_TYPE}\" \\\n  .\n"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 5,
                "name": "Push to Docker Hub",
                "run": "docker push termux/termux-docker:${{ matrix.CPU_ARCH }}\nif [ ${{ matrix.CPU_ARCH }} = i686 ]; then\n  docker tag termux/termux-docker:i686 termux/termux-docker:latest\n  docker push termux/termux-docker:latest\nfi\n"
            },
            {
                "id": 6,
                "name": "Export container as tar archive",
                "run": "docker run \\\n  --privileged \\\n  --name termux-docker-${{ matrix.CPU_ARCH }} \\\n  termux/termux-docker:${{ matrix.CPU_ARCH }} \\\n  uname -a\ndocker stop termux-docker-${{ matrix.CPU_ARCH }}\ndocker export -o termux-docker-${{ matrix.CPU_ARCH }}.tar \\\n  termux-docker-${{ matrix.CPU_ARCH }}\nsha256sum termux-docker-${{ matrix.CPU_ARCH }}.tar\n"
            },
            {
                "id": 7,
                "name": "Store tar archive",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "termux/proot-distro": [
            {
                "id": 1,
                "name": "Checkout Repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Gather distributions that is needed to be built",
                "run": "if [ \"${{ github.event_name }}\" != \"workflow_dispatch\" ]; then\n  # gather files changed on the latest HEAD commit\n  if [ \"${{ github.event_name }}\" == \"pull_request\" ]; then\n    # process latest commit made from the PR through github.event.pull_request.head.sha context\n    git diff-tree --no-commit-id --name-only ${{ github.event.pull_request.head.sha }} -r > ./files_changed.txt\n  else\n    git diff-tree --no-commit-id --name-only HEAD -r > ./files_changed.txt\n  fi\n\n  # check if files are changed or created are in distro-build directory\n  if ! grep -q distro-build ./files_changed.txt; then\n    echo \"The latest commit does not have any distribution build script changed or added\"\n    exit 1\n  fi\n\n  # filter only files from distro-build directory only\n  grep distro-build ./files_changed.txt | sed 's@\\(distro-build/\\|.sh\\)@@g' > ./distributions.txt\nelse\n  echo \"${{ github.event.inputs.distributions }}\" > ./distributions.txt\nfi\n\n# Remove distro plugins to filter and upload built distributions and its plugins later on\nrm -rf ./distro-plugins/*\n"
            },
            {
                "id": 3,
                "name": "Install Needed Dependencies",
                "run": "sudo apt-get update && sudo apt-get install -yq curl debian-archive-keyring jq mmdebstrap qemu-user-static binfmt-support multistrap"
            },
            {
                "id": 4,
                "name": "Build distribution rootfs",
                "run": "distros_to_be_built=$(cat ./distributions.txt)\nfor d in ${distros_to_be_built}; do\n  # check if a specified distribution build recipe exists in case for workflow dispatch inputs\n  if [ ! -f ./distro-build/${d}.sh ]; then\n    echo \"Cannot build distribution ${d}: ./distro-build/${d}.sh: no such file exist\"\n    exit 2\n  fi\ndone\n./bootstrap-rootfs.sh ${distros_to_be_built}\n"
            },
            {
                "id": 5,
                "name": "Upload Artifacts (aarch64)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 6,
                "name": "Upload Artifacts (arm)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 7,
                "name": "Upload Artifacts (i686)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 8,
                "name": "Upload Artifacts (x86_64)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 9,
                "name": "Upload Artifacts (distro plugins)",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "termux/repology-metadata": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install json tools",
                "run": "sudo apt update\nsudo apt install -yq jq\n"
            },
            {
                "id": 3,
                "name": "Clone termux-packages",
                "run": "mkdir -p /tmp/repos\ngit clone https://github.com/termux/termux-packages.git /tmp/repos/termux-packages\n"
            },
            {
                "id": 4,
                "name": "Generate packages.json",
                "run": "export TERMUX_SCRIPTDIR=/tmp/repos/termux-packages\nbash ./generate-repology-metadata.sh /tmp/repos/termux-packages > ./packages.json\n\nif ! jq . ./packages.json > /dev/null; then\n  echo \"Error: invalid packages.json\" > /dev/stderr\n  exit 1\nfi\n\nif [ $(git diff ./packages.json | wc -l) -gt 0 ]; then\n  git config --global user.name \"Termux Github Actions\"\n  git config --global user.email \"contact@termux.org\"\n  git add ./packages.json\n  git commit -m \"Generate new metadata for Repology\"\n  git push\nfi\n"
            }
        ],
        "termux/openjdk-mobile-termux": [
            {
                "id": 1,
                "name": "Check if submit tests should actually run depending on secrets and manual triggering",
                "run": "echo \"::set-output name=should_run::${{ github.event.inputs.platforms != '' || (!secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs/heads/submit/')) }}\""
            },
            {
                "id": 2,
                "name": "Check which platforms should be included",
                "run": "echo \"::set-output name=platform_linux_additional::${{ contains(github.event.inputs.platforms, 'linux additional (hotspot only)') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux additional (hotspot only)'))) }}\"\necho \"::set-output name=platform_linux_x64::${{ contains(github.event.inputs.platforms, 'linux x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux x64'))) }}\"\necho \"::set-output name=platform_linux_x86::${{ contains(github.event.inputs.platforms, 'linux x86') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux x86'))) }}\"\necho \"::set-output name=platform_windows_aarch64::${{ contains(github.event.inputs.platforms, 'windows aarch64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'windows aarch64'))) }}\"\necho \"::set-output name=platform_windows_x64::${{ contains(github.event.inputs.platforms, 'windows x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'windows x64'))) }}\"\necho \"::set-output name=platform_macos_x64::${{ contains(github.event.inputs.platforms, 'macos x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'macos x64'))) }}\"\necho \"::set-output name=platform_macos_aarch64::${{ contains(github.event.inputs.platforms, 'macos aarch64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'macos aarch64'))) }}\"\n"
            },
            {
                "id": 3,
                "name": "Determine unique bundle identifier",
                "run": "echo \"::set-output name=bundle_id::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}\""
            },
            {
                "id": 4,
                "name": "Checkout the source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 5,
                "name": "Determine versions and locations to be used for dependencies",
                "run": "echo ::set-output name=dependencies::`cat make/conf/version-numbers.conf make/conf/test-dependencies | sed -e '1i {' -e 's/#.*//g' -e 's/\"//g' -e 's/\\(.*\\)=\\(.*\\)/\"\\1\": \"\\2\",/g' -e '$s/,\\s\\{0,\\}$/\\}/'`"
            },
            {
                "id": 6,
                "name": "Print extracted dependencies to the log",
                "run": "echo '${{ steps.check_deps.outputs.dependencies }}'"
            },
            {
                "id": 7,
                "name": "Determine the jtreg ref to checkout",
                "run": "echo JTREG_REF=jtreg-${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_VERSION }}+${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_BUILD }} >> $GITHUB_ENV"
            },
            {
                "id": 8,
                "name": "Check if a jtreg image is present in the cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 9,
                "name": "Checkout the jtreg source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 10,
                "name": "Build jtreg",
                "run": "bash make/build.sh --jdk ${JAVA_HOME_8_X64}"
            },
            {
                "id": 11,
                "name": "Move jtreg image to destination folder",
                "run": "mv build/images/jtreg ~/"
            },
            {
                "id": 12,
                "name": "Store jtreg for use by later steps",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout the source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Restore boot JDK from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Download boot JDK",
                "run": "mkdir -p \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nwget -O \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\necho \"${BOOT_JDK_SHA256} ${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" | sha256sum -c >/dev/null -\ntar -xf \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" -C \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nmv \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"*/* \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"\n"
            },
            {
                "id": 4,
                "name": "Restore jtreg artifact",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 5,
                "name": "Restore jtreg artifact (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 6,
                "name": "Checkout gtest sources",
                "run": "actions/checkout@v2"
            },
            {
                "id": 7,
                "name": "Install dependencies",
                "run": "sudo apt-get update\nsudo apt-get install gcc-10=10.2.0-5ubuntu1~20.04 g++-10=10.2.0-5ubuntu1~20.04 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev\nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10\n"
            },
            {
                "id": 8,
                "name": "Configure",
                "run": "bash configure --with-conf-name=linux-x64 ${{ matrix.flags }} --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA} --with-version-build=0 --with-boot-jdk=${HOME}/bootjdk/${BOOT_JDK_VERSION} --with-jtreg=${HOME}/jtreg --with-gtest=${GITHUB_WORKSPACE}/gtest --with-default-make-target=\"product-bundles test-bundles\" --with-zlib=system --enable-jtreg-failure-handler\n"
            },
            {
                "id": 9,
                "name": "Build",
                "run": "make CONF_NAME=linux-x64"
            },
            {
                "id": 10,
                "name": "Persist test bundles",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout the source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Restore boot JDK from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Download boot JDK",
                "run": "mkdir -p \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nwget -O \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\necho \"${BOOT_JDK_SHA256} ${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" | sha256sum -c >/dev/null -\ntar -xf \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" -C \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nmv \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"*/* \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"\n"
            },
            {
                "id": 4,
                "name": "Restore jtreg artifact",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 5,
                "name": "Restore jtreg artifact (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 6,
                "name": "Restore build artifacts",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 7,
                "name": "Restore build artifacts (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 8,
                "name": "Unpack jdk",
                "run": "mkdir -p \"${HOME}/jdk-linux-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact\u00a0}}\"\ntar -xf \"${HOME}/jdk-linux-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact\u00a0}}.tar.gz\" -C \"${HOME}/jdk-linux-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact\u00a0}}\"\n"
            },
            {
                "id": 9,
                "name": "Unpack tests",
                "run": "mkdir -p \"${HOME}/jdk-linux-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin-tests${{ matrix.artifact\u00a0}}\"\ntar -xf \"${HOME}/jdk-linux-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin-tests${{ matrix.artifact\u00a0}}.tar.gz\" -C \"${HOME}/jdk-linux-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin-tests${{ matrix.artifact\u00a0}}\"\n"
            },
            {
                "id": 10,
                "name": "Find root of jdk image dir",
                "run": "imageroot=`find ${HOME}/jdk-linux-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact\u00a0}} -name release -type f`\necho \"imageroot=`dirname ${imageroot}`\" >> $GITHUB_ENV\n"
            },
            {
                "id": 11,
                "name": "Run tests",
                "run": "JDK_IMAGE_DIR=${{ env.imageroot }} TEST_IMAGE_DIR=${HOME}/jdk-linux-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin-tests${{ matrix.artifact\u00a0}} BOOT_JDK=${HOME}/bootjdk/${BOOT_JDK_VERSION} JT_HOME=${HOME}/jtreg make test-prebuilt CONF_NAME=run-test-prebuilt LOG_CMDLINES=true JTREG_VERBOSE=fail,error,time TEST=\"${{ matrix.suites }}\" TEST_OPTS_JAVA_OPTIONS= JTREG_KEYWORDS=\"!headful\" JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n"
            },
            {
                "id": 12,
                "name": "Check that all tests executed successfully",
                "run": "if ! grep --include=test-summary.txt -lqr build/*/test-results -e \"TEST SUCCESS\" ; then\n  cat build/*/test-results/*/text/newfailures.txt ;\n  exit 1 ;\nfi\n"
            },
            {
                "id": 13,
                "name": "Create suitable test log artifact name",
                "run": "echo \"logsuffix=`echo ${{ matrix.test }} | sed -e 's!/!_!'g -e 's! !_!'g`\" >> $GITHUB_ENV"
            },
            {
                "id": 14,
                "name": "Package test results",
                "run": "zip -r9 \"$HOME/linux-x64${{ matrix.artifact\u00a0}}_testresults_${{ env.logsuffix }}.zip\" .\n"
            },
            {
                "id": 15,
                "name": "Package test support",
                "run": "zip -r9 \"$HOME/linux-x64${{ matrix.artifact\u00a0}}_testsupport_${{ env.logsuffix }}.zip\" . -i *.jtr -i */hs_err*.log -i */replay*.log\n"
            },
            {
                "id": 16,
                "name": "Persist test results",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 17,
                "name": "Persist test outputs",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout the source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Restore boot JDK from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Download boot JDK",
                "run": "mkdir -p \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nwget -O \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\necho \"${BOOT_JDK_SHA256} ${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" | sha256sum -c >/dev/null -\ntar -xf \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" -C \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nmv \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"*/* \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"\n"
            },
            {
                "id": 4,
                "name": "Restore build JDK",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 5,
                "name": "Restore build JDK (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 6,
                "name": "Unpack build JDK",
                "run": "mkdir -p \"${HOME}/jdk-linux-x64/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\ntar -xf \"${HOME}/jdk-linux-x64/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin.tar.gz\" -C \"${HOME}/jdk-linux-x64/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n"
            },
            {
                "id": 7,
                "name": "Find root of build JDK image dir",
                "run": "build_jdk_root=`find ${HOME}/jdk-linux-x64/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin -name release -type f`\necho \"build_jdk_root=`dirname ${build_jdk_root}`\" >> $GITHUB_ENV\n"
            },
            {
                "id": 8,
                "name": "Update apt",
                "run": "sudo apt-get update"
            },
            {
                "id": 9,
                "name": "Install native host dependencies",
                "run": "sudo apt-get install gcc-10=10.2.0-5ubuntu1~20.04 g++-10=10.2.0-5ubuntu1~20.04 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev\nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10\n"
            },
            {
                "id": 10,
                "name": "Install cross-compilation host dependencies",
                "run": "sudo apt-get install gcc-10-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}=10.2.0-5ubuntu1~20.04cross1 g++-10-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}=10.2.0-5ubuntu1~20.04cross1"
            },
            {
                "id": 11,
                "name": "Cache sysroot",
                "run": "actions/cache@v2"
            },
            {
                "id": 12,
                "name": "Install sysroot host dependencies",
                "run": "sudo apt-get install debootstrap qemu-user-static"
            },
            {
                "id": 13,
                "name": "Create sysroot",
                "run": "sudo qemu-debootstrap --arch=${{ matrix.debian-arch }} --verbose --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev --resolve-deps buster ~/sysroot-${{ matrix.debian-arch }} http://httpredir.debian.org/debian/\n"
            },
            {
                "id": 14,
                "name": "Prepare sysroot for caching",
                "run": "sudo chroot ~/sysroot-${{ matrix.debian-arch }} symlinks -cr .\nsudo chown ${USER} -R ~/sysroot-${{ matrix.debian-arch }}\nrm -rf ~/sysroot-${{ matrix.debian-arch }}/{dev,proc,run,sys}\n"
            },
            {
                "id": 15,
                "name": "Configure cross compiler",
                "run": "echo \"CC=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-gcc-10\" >> $GITHUB_ENV\necho \"CXX=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-g++-10\" >> $GITHUB_ENV\n"
            },
            {
                "id": 16,
                "name": "Configure cross specific flags",
                "run": "echo \"cross_flags= --openjdk-target=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}} --with-sysroot=${HOME}/sysroot-${{ matrix.debian-arch }}/ \" >> $GITHUB_ENV\n"
            },
            {
                "id": 17,
                "name": "Configure",
                "run": "bash configure --with-conf-name=linux-${{ matrix.gnu-arch }}-hotspot ${{ matrix.flags }} ${{ env.cross_flags }} --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA} --with-version-build=0 --with-boot-jdk=${HOME}/bootjdk/${BOOT_JDK_VERSION} --with-build-jdk=${{ env.build_jdk_root }} --with-default-make-target=\"hotspot\" --with-zlib=system\n"
            },
            {
                "id": 18,
                "name": "Build",
                "run": "make CONF_NAME=linux-${{ matrix.gnu-arch }}-hotspot"
            },
            {
                "id": 1,
                "name": "Checkout the source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Restore boot JDK from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Download boot JDK",
                "run": "mkdir -p \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nwget -O \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\necho \"${BOOT_JDK_SHA256} ${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" | sha256sum -c >/dev/null -\ntar -xf \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" -C \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nmv \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"*/* \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"\n"
            },
            {
                "id": 4,
                "name": "Restore jtreg artifact",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 5,
                "name": "Restore jtreg artifact (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 6,
                "name": "Checkout gtest sources",
                "run": "actions/checkout@v2"
            },
            {
                "id": 7,
                "name": "Install dependencies",
                "run": "sudo dpkg --add-architecture i386\nsudo apt-get update\nsudo apt-get install --only-upgrade apt\nsudo apt-get install gcc-10-multilib g++-10-multilib libfreetype6-dev:i386 libxrandr-dev:i386 libxtst-dev:i386 libtiff-dev:i386 libcupsimage2-dev:i386 libcups2-dev:i386 libasound2-dev:i386\nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10\n"
            },
            {
                "id": 8,
                "name": "Configure",
                "run": "bash configure --with-conf-name=linux-x86 --with-target-bits=32 ${{ matrix.flags }} --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA} --with-version-build=0 --with-boot-jdk=${HOME}/bootjdk/${BOOT_JDK_VERSION} --with-jtreg=${HOME}/jtreg --with-gtest=${GITHUB_WORKSPACE}/gtest --with-default-make-target=\"product-bundles test-bundles\" --with-zlib=system --enable-jtreg-failure-handler\n"
            },
            {
                "id": 9,
                "name": "Build",
                "run": "make CONF_NAME=linux-x86"
            },
            {
                "id": 10,
                "name": "Persist test bundles",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout the source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Restore boot JDK from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Download boot JDK",
                "run": "mkdir -p \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nwget -O \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\necho \"${BOOT_JDK_SHA256} ${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" | sha256sum -c >/dev/null -\ntar -xf \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" -C \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nmv \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"*/* \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"\n"
            },
            {
                "id": 4,
                "name": "Restore jtreg artifact",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 5,
                "name": "Restore jtreg artifact (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 6,
                "name": "Restore build artifacts",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 7,
                "name": "Restore build artifacts (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 8,
                "name": "Unpack jdk",
                "run": "mkdir -p \"${HOME}/jdk-linux-x86${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact\u00a0}}\"\ntar -xf \"${HOME}/jdk-linux-x86${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact\u00a0}}.tar.gz\" -C \"${HOME}/jdk-linux-x86${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact\u00a0}}\"\n"
            },
            {
                "id": 9,
                "name": "Unpack tests",
                "run": "mkdir -p \"${HOME}/jdk-linux-x86${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin-tests${{ matrix.artifact\u00a0}}\"\ntar -xf \"${HOME}/jdk-linux-x86${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin-tests${{ matrix.artifact\u00a0}}.tar.gz\" -C \"${HOME}/jdk-linux-x86${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin-tests${{ matrix.artifact\u00a0}}\"\n"
            },
            {
                "id": 10,
                "name": "Find root of jdk image dir",
                "run": "imageroot=`find ${HOME}/jdk-linux-x86${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact\u00a0}} -name release -type f`\necho \"imageroot=`dirname ${imageroot}`\" >> $GITHUB_ENV\n"
            },
            {
                "id": 11,
                "name": "Run tests",
                "run": "JDK_IMAGE_DIR=${{ env.imageroot }} TEST_IMAGE_DIR=${HOME}/jdk-linux-x86${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin-tests${{ matrix.artifact\u00a0}} BOOT_JDK=${HOME}/bootjdk/${BOOT_JDK_VERSION} JT_HOME=${HOME}/jtreg make test-prebuilt CONF_NAME=run-test-prebuilt LOG_CMDLINES=true JTREG_VERBOSE=fail,error,time TEST=\"${{ matrix.suites }}\" TEST_OPTS_JAVA_OPTIONS= JTREG_KEYWORDS=\"!headful\" JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n"
            },
            {
                "id": 12,
                "name": "Check that all tests executed successfully",
                "run": "if ! grep --include=test-summary.txt -lqr build/*/test-results -e \"TEST SUCCESS\" ; then\n  cat build/*/test-results/*/text/newfailures.txt ;\n  exit 1 ;\nfi\n"
            },
            {
                "id": 13,
                "name": "Create suitable test log artifact name",
                "run": "echo \"logsuffix=`echo ${{ matrix.test }} | sed -e 's!/!_!'g -e 's! !_!'g`\" >> $GITHUB_ENV"
            },
            {
                "id": 14,
                "name": "Package test results",
                "run": "zip -r9 \"$HOME/linux-x86${{ matrix.artifact\u00a0}}_testresults_${{ env.logsuffix }}.zip\" .\n"
            },
            {
                "id": 15,
                "name": "Package test support",
                "run": "zip -r9 \"$HOME/linux-x86${{ matrix.artifact\u00a0}}_testsupport_${{ env.logsuffix }}.zip\" . -i *.jtr -i */hs_err*.log -i */replay*.log\n"
            },
            {
                "id": 16,
                "name": "Persist test results",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 17,
                "name": "Persist test outputs",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Restore cygwin packages from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 2,
                "name": "Install cygwin",
                "run": "New-Item -Force -ItemType directory -Path \"$HOME\\cygwin\"\n& curl -L \"https://www.cygwin.com/setup-x86_64.exe\" -o \"$HOME/cygwin/setup-x86_64.exe\"\nStart-Process -FilePath \"$HOME\\cygwin\\setup-x86_64.exe\" -ArgumentList \"--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\\cygwin\\cygwin64 --local-package-dir $HOME\\cygwin\\packages --site http://mirrors.kernel.org/sourceware/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin\" -Wait -NoNewWindow\n"
            },
            {
                "id": 3,
                "name": "Checkout the source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Restore boot JDK from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Download boot JDK",
                "run": "mkdir -p \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n& curl -L \"$env:BOOT_JDK_URL\" -o \"$HOME/bootjdk/$env:BOOT_JDK_FILENAME\"\n$FileHash = Get-FileHash -Algorithm SHA256 \"$HOME/bootjdk/$env:BOOT_JDK_FILENAME\"\n$FileHash.Hash -eq $env:BOOT_JDK_SHA256\n& tar -xf \"$HOME/bootjdk/$env:BOOT_JDK_FILENAME\" -C \"$HOME/bootjdk/$env:BOOT_JDK_VERSION\"\nGet-ChildItem \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\\*\\*\" | Move-Item -Destination \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n"
            },
            {
                "id": 6,
                "name": "Ensure a specific version of MSVC is installed",
                "run": "Start-Process -FilePath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vs_installer.exe' -Wait -NoNewWindow -ArgumentList 'modify --installPath \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\" --quiet --add Microsoft.VisualStudio.Component.VC.14.28.arm64'\n"
            },
            {
                "id": 7,
                "name": "Configure",
                "run": "$env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ; $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ; $env:BOOT_JDK = cygpath \"$HOME/bootjdk/$env:BOOT_JDK_VERSION\" ; & bash configure --with-conf-name=windows-aarch64 --with-msvc-toolset-version=14.28 --openjdk-target=aarch64-unknown-cygwin ${{ matrix.flags }} --with-version-opt=\"$env:GITHUB_ACTOR-$env:GITHUB_SHA\" --with-version-build=0 --with-boot-jdk=\"$env:BOOT_JDK\" --with-default-make-target=\"hotspot\"\n"
            },
            {
                "id": 8,
                "name": "Build",
                "run": "$env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n$env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n& make CONF_NAME=windows-aarch64\n"
            },
            {
                "id": 1,
                "name": "Restore cygwin packages from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 2,
                "name": "Install cygwin",
                "run": "New-Item -Force -ItemType directory -Path \"$HOME\\cygwin\"\n& curl -L \"https://www.cygwin.com/setup-x86_64.exe\" -o \"$HOME/cygwin/setup-x86_64.exe\"\nStart-Process -FilePath \"$HOME\\cygwin\\setup-x86_64.exe\" -ArgumentList \"--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\\cygwin\\cygwin64 --local-package-dir $HOME\\cygwin\\packages --site http://mirrors.kernel.org/sourceware/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin\" -Wait -NoNewWindow\n"
            },
            {
                "id": 3,
                "name": "Checkout the source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Restore boot JDK from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Download boot JDK",
                "run": "mkdir -p \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n& curl -L \"$env:BOOT_JDK_URL\" -o \"$HOME/bootjdk/$env:BOOT_JDK_FILENAME\"\n$FileHash = Get-FileHash -Algorithm SHA256 \"$HOME/bootjdk/$env:BOOT_JDK_FILENAME\"\n$FileHash.Hash -eq $env:BOOT_JDK_SHA256\n& tar -xf \"$HOME/bootjdk/$env:BOOT_JDK_FILENAME\" -C \"$HOME/bootjdk/$env:BOOT_JDK_VERSION\"\nGet-ChildItem \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\\*\\*\" | Move-Item -Destination \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n"
            },
            {
                "id": 6,
                "name": "Checkout gtest sources",
                "run": "actions/checkout@v2"
            },
            {
                "id": 7,
                "name": "Restore jtreg artifact",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 8,
                "name": "Restore jtreg artifact (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 9,
                "name": "Ensure a specific version of MSVC is installed",
                "run": "Start-Process -FilePath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vs_installer.exe' -Wait -NoNewWindow -ArgumentList 'modify --installPath \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\" --quiet --add Microsoft.VisualStudio.Component.VC.14.28.x86.x64'\n"
            },
            {
                "id": 10,
                "name": "Configure",
                "run": "$env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ; $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ; $env:BOOT_JDK = cygpath \"$HOME/bootjdk/$env:BOOT_JDK_VERSION\" ; $env:JT_HOME = cygpath \"$HOME/jtreg\" ; $env:GTEST = cygpath \"$env:GITHUB_WORKSPACE/gtest\" ; & bash configure --with-conf-name=windows-x64 --with-msvc-toolset-version=14.28 ${{ matrix.flags }} --with-version-opt=\"$env:GITHUB_ACTOR-$env:GITHUB_SHA\" --with-version-build=0 --with-boot-jdk=\"$env:BOOT_JDK\" --with-jtreg=\"$env:JT_HOME\" --with-gtest=\"$env:GTEST\" --with-default-make-target=\"product-bundles test-bundles\" --enable-jtreg-failure-handler\n"
            },
            {
                "id": 11,
                "name": "Build",
                "run": "$env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n$env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n& make CONF_NAME=windows-x64\n"
            },
            {
                "id": 12,
                "name": "Persist test bundles",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout the source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Restore boot JDK from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Download boot JDK",
                "run": "mkdir -p \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n& curl -L \"$env:BOOT_JDK_URL\" -o \"$HOME/bootjdk/$env:BOOT_JDK_FILENAME\"\n$FileHash = Get-FileHash -Algorithm SHA256 \"$HOME/bootjdk/$env:BOOT_JDK_FILENAME\"\n$FileHash.Hash -eq $env:BOOT_JDK_SHA256\n& tar -xf \"$HOME/bootjdk/$env:BOOT_JDK_FILENAME\" -C \"$HOME/bootjdk/$env:BOOT_JDK_VERSION\"\nGet-ChildItem \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\\*\\*\" | Move-Item -Destination \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n"
            },
            {
                "id": 4,
                "name": "Restore cygwin packages from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Install cygwin",
                "run": "New-Item -Force -ItemType directory -Path \"$HOME\\cygwin\"\n& curl -L \"https://www.cygwin.com/setup-x86_64.exe\" -o \"$HOME/cygwin/setup-x86_64.exe\"\nStart-Process -FilePath \"$HOME\\cygwin\\setup-x86_64.exe\" -ArgumentList \"--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\\cygwin\\cygwin64 --local-package-dir $HOME\\cygwin\\packages --site http://mirrors.kernel.org/sourceware/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin\" -Wait -NoNewWindow\n"
            },
            {
                "id": 6,
                "name": "Restore jtreg artifact",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 7,
                "name": "Restore jtreg artifact (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 8,
                "name": "Restore build artifacts",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 9,
                "name": "Restore build artifacts (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 10,
                "name": "Unpack jdk",
                "run": "mkdir -p \"${HOME}/jdk-windows-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact\u00a0}}\"\ntar -xf \"${HOME}/jdk-windows-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact\u00a0}}.zip\" -C \"${HOME}/jdk-windows-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact\u00a0}}\"\n"
            },
            {
                "id": 11,
                "name": "Unpack symbols",
                "run": "mkdir -p \"${HOME}/jdk-windows-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact\u00a0}}-symbols\"\ntar -xf \"${HOME}/jdk-windows-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact\u00a0}}-symbols.tar.gz\" -C \"${HOME}/jdk-windows-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact\u00a0}}-symbols\"\n"
            },
            {
                "id": 12,
                "name": "Unpack tests",
                "run": "mkdir -p \"${HOME}/jdk-windows-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact\u00a0}}\"\ntar -xf \"${HOME}/jdk-windows-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact\u00a0}}.tar.gz\" -C \"${HOME}/jdk-windows-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact\u00a0}}\"\n"
            },
            {
                "id": 13,
                "name": "Find root of jdk image dir",
                "run": "echo (\"imageroot=\" + (Get-ChildItem -Path $HOME/jdk-windows-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact\u00a0}} -Filter release -Recurse -ErrorAction SilentlyContinue -Force).DirectoryName) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8"
            },
            {
                "id": 14,
                "name": "Run tests",
                "run": "$env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ; $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ; $env:JDK_IMAGE_DIR = cygpath \"${{ env.imageroot }}\" ; $env:SYMBOLS_IMAGE_DIR = cygpath \"${{ env.imageroot }}\" ; $env:TEST_IMAGE_DIR = cygpath \"$HOME/jdk-windows-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin-tests${{ matrix.artifact\u00a0}}\" ; $env:BOOT_JDK = cygpath \"$HOME/bootjdk/$env:BOOT_JDK_VERSION\" ; $env:JT_HOME = cygpath \"$HOME/jtreg\" ; & make test-prebuilt CONF_NAME=run-test-prebuilt LOG_CMDLINES=true JTREG_VERBOSE=fail,error,time TEST=${{ matrix.suites }} TEST_OPTS_JAVA_OPTIONS= JTREG_KEYWORDS=\"!headful\" JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n"
            },
            {
                "id": 15,
                "name": "Check that all tests executed successfully",
                "run": "if ((Get-ChildItem -Path build\\*\\test-results\\test-summary.txt -Recurse | Select-String -Pattern \"TEST SUCCESS\" ).Count -eq 0) {\n  Get-Content -Path build\\*\\test-results\\*\\*\\newfailures.txt ;\n  exit 1\n}\n"
            },
            {
                "id": 16,
                "name": "Create suitable test log artifact name",
                "run": "echo (\"logsuffix=\" + (\"${{ matrix.test }}\" -replace \"/\", \"_\" -replace \" \", \"_\")) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8"
            },
            {
                "id": 17,
                "name": "Package test results",
                "run": "$env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ; zip -r9 \"$HOME/windows-x64${{ matrix.artifact\u00a0}}_testresults_${{ env.logsuffix }}.zip\" .\n"
            },
            {
                "id": 18,
                "name": "Package test support",
                "run": "$env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ; zip -r9 \"$HOME/windows-x64${{ matrix.artifact\u00a0}}_testsupport_${{ env.logsuffix }}.zip\" . -i *.jtr -i */hs_err*.log -i */replay*.log\n"
            },
            {
                "id": 19,
                "name": "Persist test results",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 20,
                "name": "Persist test outputs",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout the source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Restore boot JDK from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Download boot JDK",
                "run": "mkdir -p ${HOME}/bootjdk/${BOOT_JDK_VERSION} || true\nwget -O \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\necho \"${BOOT_JDK_SHA256}  ${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" | shasum -a 256 -c >/dev/null -\ntar -xf \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" -C \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nmv \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"*/* \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"\n"
            },
            {
                "id": 4,
                "name": "Restore jtreg artifact",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 5,
                "name": "Restore jtreg artifact (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 6,
                "name": "Checkout gtest sources",
                "run": "actions/checkout@v2"
            },
            {
                "id": 7,
                "name": "Install dependencies",
                "run": "brew install make"
            },
            {
                "id": 8,
                "name": "Select Xcode version",
                "run": "sudo xcode-select --switch /Applications/Xcode_11.3.1.app/Contents/Developer"
            },
            {
                "id": 9,
                "name": "Configure",
                "run": "bash configure --with-conf-name=macos-x64 ${{ matrix.flags }} --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA} --with-version-build=0 --with-boot-jdk=${HOME}/bootjdk/${BOOT_JDK_VERSION}/Contents/Home --with-jtreg=${HOME}/jtreg --with-gtest=${GITHUB_WORKSPACE}/gtest --with-default-make-target=\"product-bundles test-bundles\" --with-zlib=system --enable-jtreg-failure-handler\n"
            },
            {
                "id": 10,
                "name": "Build",
                "run": "make CONF_NAME=macos-x64"
            },
            {
                "id": 11,
                "name": "Persist test bundles",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout the source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Restore boot JDK from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Download boot JDK",
                "run": "mkdir -p ${HOME}/bootjdk/${BOOT_JDK_VERSION} || true\nwget -O \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\necho \"${BOOT_JDK_SHA256}  ${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" | shasum -a 256 -c >/dev/null -\ntar -xf \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" -C \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nmv \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"*/* \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"\n"
            },
            {
                "id": 4,
                "name": "Restore jtreg artifact",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 5,
                "name": "Restore jtreg artifact (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 6,
                "name": "Checkout gtest sources",
                "run": "actions/checkout@v2"
            },
            {
                "id": 7,
                "name": "Install dependencies",
                "run": "brew install make"
            },
            {
                "id": 8,
                "name": "Select Xcode version",
                "run": "sudo xcode-select --switch /Applications/Xcode_12.4.app/Contents/Developer"
            },
            {
                "id": 9,
                "name": "Configure",
                "run": "bash configure --with-conf-name=macos-aarch64 --openjdk-target=aarch64-apple-darwin ${{ matrix.flags }} --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA} --with-version-build=0 --with-boot-jdk=${HOME}/bootjdk/${BOOT_JDK_VERSION}/Contents/Home --with-jtreg=${HOME}/jtreg --with-gtest=${GITHUB_WORKSPACE}/gtest --with-default-make-target=\"product-bundles test-bundles\" --with-zlib=system --enable-jtreg-failure-handler\n"
            },
            {
                "id": 10,
                "name": "Build",
                "run": "make CONF_NAME=macos-aarch64"
            },
            {
                "id": 11,
                "name": "Persist test bundles",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Checkout the source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Restore boot JDK from cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 3,
                "name": "Download boot JDK",
                "run": "mkdir -p ${HOME}/bootjdk/${BOOT_JDK_VERSION} || true\nwget -O \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\necho \"${BOOT_JDK_SHA256}  ${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" | shasum -a 256 -c >/dev/null -\ntar -xf \"${HOME}/bootjdk/${BOOT_JDK_FILENAME}\" -C \"${HOME}/bootjdk/${BOOT_JDK_VERSION}\"\nmv \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"*/* \"${HOME}/bootjdk/${BOOT_JDK_VERSION}/\"\n"
            },
            {
                "id": 4,
                "name": "Restore jtreg artifact",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 5,
                "name": "Restore jtreg artifact (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 6,
                "name": "Restore build artifacts",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 7,
                "name": "Restore build artifacts (retry)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 8,
                "name": "Unpack jdk",
                "run": "mkdir -p \"${HOME}/jdk-macos-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_macos-x64_bin${{ matrix.artifact\u00a0}}\"\ntar -xf \"${HOME}/jdk-macos-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_macos-x64_bin${{ matrix.artifact\u00a0}}.tar.gz\" -C \"${HOME}/jdk-macos-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_macos-x64_bin${{ matrix.artifact\u00a0}}\"\n"
            },
            {
                "id": 9,
                "name": "Unpack tests",
                "run": "mkdir -p \"${HOME}/jdk-macos-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_macos-x64_bin-tests${{ matrix.artifact\u00a0}}\"\ntar -xf \"${HOME}/jdk-macos-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_macos-x64_bin-tests${{ matrix.artifact\u00a0}}.tar.gz\" -C \"${HOME}/jdk-macos-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_macos-x64_bin-tests${{ matrix.artifact\u00a0}}\"\n"
            },
            {
                "id": 10,
                "name": "Install dependencies",
                "run": "brew install make"
            },
            {
                "id": 11,
                "name": "Select Xcode version",
                "run": "sudo xcode-select --switch /Applications/Xcode_11.3.1.app/Contents/Developer"
            },
            {
                "id": 12,
                "name": "Find root of jdk image dir",
                "run": "imageroot=`find ${HOME}/jdk-macos-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_macos-x64_bin${{ matrix.artifact\u00a0}} -name release -type f`\necho \"imageroot=`dirname ${imageroot}`\" >> $GITHUB_ENV\n"
            },
            {
                "id": 13,
                "name": "Run tests",
                "run": "JDK_IMAGE_DIR=${{ env.imageroot }} TEST_IMAGE_DIR=${HOME}/jdk-macos-x64${{ matrix.artifact\u00a0}}/jdk-${{ env.JDK_VERSION }}-internal+0_macos-x64_bin-tests${{ matrix.artifact\u00a0}} BOOT_JDK=${HOME}/bootjdk/${BOOT_JDK_VERSION}/Contents/Home JT_HOME=${HOME}/jtreg gmake test-prebuilt CONF_NAME=run-test-prebuilt LOG_CMDLINES=true JTREG_VERBOSE=fail,error,time TEST=${{ matrix.suites }} TEST_OPTS_JAVA_OPTIONS= JTREG_KEYWORDS=\"!headful\" JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n"
            },
            {
                "id": 14,
                "name": "Check that all tests executed successfully",
                "run": "if ! grep --include=test-summary.txt -lqr build/*/test-results -e \"TEST SUCCESS\" ; then\n  cat build/*/test-results/*/text/newfailures.txt ;\n  exit 1 ;\nfi\n"
            },
            {
                "id": 15,
                "name": "Create suitable test log artifact name",
                "run": "echo \"logsuffix=`echo ${{ matrix.test }} | sed -e 's!/!_!'g -e 's! !_!'g`\" >> $GITHUB_ENV"
            },
            {
                "id": 16,
                "name": "Package test results",
                "run": "zip -r9 \"$HOME/macos-x64${{ matrix.artifact\u00a0}}_testresults_${{ env.logsuffix }}.zip\" .\n"
            },
            {
                "id": 17,
                "name": "Package test support",
                "run": "zip -r9 \"$HOME/macos-x64${{ matrix.artifact\u00a0}}_testsupport_${{ env.logsuffix }}.zip\" . -i *.jtr -i */hs_err*.log -i */replay*.log\n"
            },
            {
                "id": 18,
                "name": "Persist test results",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 19,
                "name": "Persist test outputs",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Determine current artifacts endpoint",
                "run": "actions/github-script@v3"
            },
            {
                "id": 2,
                "name": "Display current artifacts",
                "run": "curl -s -H 'Accept: application/json;api-version=6.0-preview' -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}' '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis/pipelines/workflows/${{ github.run_id }}/artifacts?api-version=6.0-preview'\n"
            },
            {
                "id": 3,
                "name": "Delete transient artifacts",
                "run": "for url in ` curl -s -H 'Accept: application/json;api-version=6.0-preview' -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}' '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis/pipelines/workflows/${{ github.run_id }}/artifacts?api-version=6.0-preview' | jq -r -c '.value | map(select(.name|startswith(\"transient_\"))) | .[].url'`; do curl -s -H 'Accept: application/json;api-version=6.0-preview' -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}' -X DELETE \"${url}\"; done\n"
            },
            {
                "id": 4,
                "name": "Fetch remaining artifacts (test results)",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 5,
                "name": "Delete remaining artifacts",
                "run": "for url in ` curl -s -H 'Accept: application/json;api-version=6.0-preview' -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}' '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis/pipelines/workflows/${{ github.run_id }}/artifacts?api-version=6.0-preview' | jq -r -c '.value | .[].url'`; do curl -s -H 'Accept: application/json;api-version=6.0-preview' -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}' -X DELETE \"${url}\"; done\n"
            },
            {
                "id": 6,
                "name": "Upload a combined test results artifact",
                "run": "actions/upload-artifact@v2"
            }
        ],
        "termux/termux-gui": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "./gradlew assembleDebugMinify"
            },
            {
                "id": 3,
                "name": "Upload APK",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gradle/wrapper-validation-action@v1"
            }
        ],
        "termux/create-conventional-changelog": [
            {
                "id": 1,
                "name": "Set vars",
                "run": "echo ::set-output name=tag::${GITHUB_REF/refs\\/tags\\//}"
            },
            {
                "id": 2,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "sha256sums",
                "run": "sha256sum create-conventional-changelog > sha256sums.txt\n"
            },
            {
                "id": 4,
                "name": "Attach files to release",
                "run": "hub release edit -m \"\" -a ./create-conventional-changelog -a ./sha256sums.txt $RELEASE_TAG"
            }
        ],
        "termux/termux.com": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Sync termux.com",
                "run": "git config --global user.name 'agnostic-apollo'\ngit config --global user.email 'agnosticapollo@gmail.com'\n\n# Add termux/termux.github.io as upstrem and fetch it\necho \"Adding upstream\"\ngit remote add upstream https://github.com/termux/termux.github.io.git\ngit fetch upstream\n\n# Switch to mirror branch\necho \"Checking out mirror branch\"\ngit checkout mirror\n\n# Rebase upstream/master over mirror branch and keep CNAME(termux.com) file\necho \"Rebase upstream/master\"\ngit rebase --strategy-option=theirs upstream/master\n\n# Push branch\necho \"Pushing mirror branch\"\ngit push -f origin mirror\n"
            }
        ],
        "termux/termux-tools": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install host dependencies",
                "run": "sudo apt-get install pandoc\n"
            },
            {
                "id": 3,
                "name": "Prepare",
                "run": "autoreconf -vfi\nmkdir build\n"
            },
            {
                "id": 4,
                "name": "Configure",
                "run": "cd build\n../configure --prefix $(pwd)/prefix\n"
            },
            {
                "id": 5,
                "name": "Make",
                "run": "cd build\nmake\n"
            },
            {
                "id": 6,
                "name": "Make install",
                "run": "cd build\nmake install\n"
            }
        ],
        "termux/glibc-packages": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v3.0.0"
            },
            {
                "id": 3,
                "name": "Get files from termux-packages repository",
                "run": "./get-build-package.sh"
            },
            {
                "id": 4,
                "name": "Gather build summary",
                "run": "if [ \"${{ github.event_name }}\" != \"workflow_dispatch\" ]; then\n  BASE_COMMIT=$(jq --raw-output .pull_request.base.sha \"$GITHUB_EVENT_PATH\")\n  OLD_COMMIT=$(jq --raw-output .commits[0].id \"$GITHUB_EVENT_PATH\")\n  HEAD_COMMIT=$(jq --raw-output .commits[-1].id \"$GITHUB_EVENT_PATH\")\n  if [ \"$BASE_COMMIT\" = \"null\" ]; then\n    if [ \"$OLD_COMMIT\" = \"$HEAD_COMMIT\" ]; then\n      # Single-commit push.\n      echo \"Processing commit: ${HEAD_COMMIT}\"\n      CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${HEAD_COMMIT}\")\n    else\n      # Multi-commit push.\n      OLD_COMMIT=\"${OLD_COMMIT}~1\"\n      echo \"Processing commit range: ${OLD_COMMIT}..${HEAD_COMMIT}\"\n      CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${OLD_COMMIT}\" \"${HEAD_COMMIT}\")\n    fi\n  else\n    # Pull requests.\n    echo \"Processing pull request #$(jq --raw-output .pull_request.number \"$GITHUB_EVENT_PATH\"): ${BASE_COMMIT}..HEAD\"\n    CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r \"${BASE_COMMIT}\" \"HEAD\")\n  fi\nfi\nmkdir -p ./artifacts ./debs\ntouch ./debs/.placeholder\n\nif [ \"${{ github.event_name }}\" != \"workflow_dispatch\" ]; then\n  # Process tag '%ci:no-build' that may be added as line to commit message.\n  # Forces CI to cancel current build with status 'passed'\n  if grep -qiP '^\\s*%ci:no-build\\s*$' <(git log --format=\"%B\" -n 1 \"HEAD\"); then\n    tar cf artifacts/debs-${{ matrix.target_arch }}.tar debs\n    echo \"[!] Force exiting as tag '%ci:no-build' was applied to HEAD commit message.\"\n    exit 0\n  fi\n\n  # Build local Docker image if setup scripts were changed.\n  # Useful for pull requests submitting changes for both build environment and packages.\n  if grep -qP '^scripts/(Dockerfile|properties\\.sh|setup-android-sdk\\.sh|setup-cgct\\.sh|setup-ubuntu\\.sh)$' <<< \"$CHANGED_FILES\"; then\n    echo \"Detected changes for environment setup scripts. Building custom Docker image now.\"\n    docker build -t ghcr.io/termux/package-builder-cgct:latest .\n  fi\n\n  for repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do\n    repo=$(jq --raw-output '.[\"'${repo_path}'\"].name' repo.json)\n    # Parse changed files and identify new packages and deleted packages.\n    # Create lists of those packages that will be passed to upload job for\n    # further processing.\n    while read -r file; do\n      if ! [[ $file == ${repo_path}/* ]]; then\n        # This file does not belong to a package, so ignore it\n        continue\n      fi\n      if [[ $file =~ ^${repo_path}/([.a-z0-9+-]*)/([.a-z0-9+-]*).subpackage.sh$ ]]; then\n        # A subpackage was modified, check if it was deleted or just updated\n        pkg=${BASH_REMATCH[1]}\n        subpkg=${BASH_REMATCH[2]}\n        if [ ! -f \"${repo_path}/${pkg}/${subpkg}.subpackage.sh\" ]; then\n          echo \"$subpkg\" >> ./deleted_${repo}_packages.txt\n        fi\n      elif [[ $file =~ ^${repo_path}/([.a-z0-9+-]*)/.*$ ]]; then\n        # package, check if it was deleted or updated\n        pkg=${BASH_REMATCH[1]}\n        if [ -d \"${repo_path}/${pkg}\" ]; then\n          echo \"$pkg\" >> ./built_${repo}_packages.txt\n          # If there are subpackages we want to create a list of those\n          # as well\n          for file in $(find \"${repo_path}/${pkg}/\" -maxdepth 1 -type f -name \\*.subpackage.sh | sort); do\n            echo \"$(basename \"${file%%.subpackage.sh}\")\" >> ./built_${repo}_subpackages.txt\n          done\n        else\n          echo \"$pkg\" >> ./deleted_${repo}_packages\n        fi\n      fi\n    done<<<${CHANGED_FILES}\n  done\nelse\n  for pkg in ${{ github.event.inputs.packages }}; do\n    repo_paths=$(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json)\n    found=false\n    for repo_path in $repo_paths; do\n      repo=$(jq --raw-output '.[\"'${repo_path}'\"].name' repo.json)\n      if [ -d \"${repo_path}/${pkg}\" ]; then\n        found=true\n        echo \"$pkg\" >> ./built_${repo}_packages.txt\n        for subpkg in $(find \"${repo_path}/${pkg}/\" -maxdepth 1 -type f -name \\*.subpackage.sh | sort); do\n          echo \"$(basename \"${subpkg%%.subpackage.sh}\")\" >> ./built_${repo}_subpackages.txt\n        done\n      fi\n    done\n    if [ \"$found\" != true ]; then\n      echo \"Package '${pkg}' not found in any of the repo\"\n      exit 1\n    fi\n  done\nfi\n\nfor repo in $(jq --raw-output 'del(.pkg_format) | .[].name' repo.json); do\n  # Fix so that lists do not contain duplicates\n  if [ -f ./built_${repo}_packages.txt ]; then\n    sort ./built_${repo}_packages.txt | uniq > ./built_${repo}_packages.txt.tmp\n    mv ./built_${repo}_packages.txt.tmp ./built_${repo}_packages.txt\n  fi\n  if [ -f ./built_${repo}_subpackages.txt ]; then\n    sort ./built_${repo}_subpackages.txt | uniq > ./built_${repo}_subpackages.txt.tmp\n    mv ./built_${repo}_subpackages.txt.tmp ./built_${repo}_subpackages.txt\n  fi\n  if [ -f ./deleted_${repo}_packages.txt ]; then\n    sort ./deleted_${repo}_packages.txt | uniq > ./deleted_${repo}_packages.txt.tmp\n    mv ./deleted_${repo}_packages.txt.tmp ./deleted_${repo}_packages.txt\n  fi\ndone\n"
            },
            {
                "id": 5,
                "name": "Lint packages",
                "run": "declare -a package_recipes\nfor repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do\n  repo=$(jq --raw-output '.[\"'${repo_path}'\"].name' repo.json)\n  if [ -f ./built_${repo}_packages.txt ]; then\n    package_recipes=\"$package_recipes $(cat ./built_${repo}_packages.txt | repo_path=${repo_path} awk '{print ENVIRON[\"repo_path\"]\"/\"$1\"/build.sh\"}')\"\n  fi\ndone\n\nif [ ! -z \"$package_recipes\" ]; then\n  ./scripts/lint-packages.sh $package_recipes\nfi\n"
            },
            {
                "id": 6,
                "name": "Build packages",
                "run": "declare -a packages\nfor repo_path in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do\n  repo=$(jq --raw-output '.[\"'${repo_path}'\"].name' repo.json)\n\n  if [ -f ./built_${repo}_packages.txt ]; then\n    packages=\"$packages $(cat ./built_${repo}_packages.txt)\"\n  fi\ndone\n\nif [ ! -z \"$packages\" ]; then\n  if grep -qP \"(^|\\s)${packages// /($|\\s)|(^|\\s)}($|\\s)\" ./big-pkgs.list; then\n    ./scripts/setup-ubuntu.sh\n    ./scripts/setup-cgct.sh\n    sudo apt install ninja-build\n    sudo apt purge -yq $(dpkg -l | grep '^ii' | awk '{ print $2 }' | grep -P '(aspnetcore|cabal-|dotnet-|ghc-|libmono|php)') \\\n      firefox google-chrome-stable microsoft-edge-stable mono-runtime-common monodoc-manual ruby\n    sudo apt autoremove -yq\n    sudo rm -fr /opt/hostedtoolcache /usr/share/dotnet /usr/share/swift\n    NDK=$ANDROID_NDK_LATEST_HOME ANDROID_HOME=$ANDROID_SDK_ROOT ./build-package.sh -I -a ${{ matrix.target_arch }} --library glibc $packages\n  else\n    TERMUX_BUILDER_IMAGE_NAME=\"ghcr.io/termux/package-builder-cgct\" ./scripts/run-docker.sh ./build-package.sh -I -a ${{ matrix.target_arch }} --library glibc $packages\n  fi\nfi\n"
            },
            {
                "id": 7,
                "name": "Generate build artifacts",
                "run": "for repo in $(jq --raw-output 'del(.pkg_format) | .[].name' repo.json); do\n  # Put package lists into directory with *.pkg.* files so they will be transferred to\n  # upload job.\n  test -f ./built_${repo}_packages.txt && mv ./built_${repo}_packages.txt ./debs/\n  test -f ./built_${repo}_subpackages.txt && cat ./built_${repo}_subpackages.txt >> ./debs/built_${repo}_packages.txt \\\n    && rm ./built_${repo}_subpackages.txt\n  test -f ./deleted_${repo}_packages.txt && mv ./deleted_${repo}_packages.txt ./debs/\n\n  # Move only pkgs from built_packages into pkgs/ folder before\n  # creating an archive.\n  while read -r pkg; do\n    # Match both $pkg.pkg.* and $pkg-static.pkg.*.\n    find output \\( -name \"$pkg_*.deb\" -o -name \"$pkg-static_*.deb\" \\) -type f -print0 | xargs -0r mv -t debs/\n  done < <(cat ./debs/built_${repo}_packages.txt)\ndone\n\n# Files containing certain symbols (e.g. \":\") will cause failure in actions/upload-artifact.\n# Archiving *.deb files in a tarball to avoid issues with uploading.\ntar cf artifacts/debs-${{ matrix.target_arch }}-${{ github.sha }}.tar debs\n"
            },
            {
                "id": 8,
                "name": "Checksums for built *.deb files",
                "run": "find debs -type f -name \"*.deb\" -exec sha256sum \"{}\" \\; | sort -k2\n"
            },
            {
                "id": 9,
                "name": "Store *.deb files",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Get *.deb files",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Get files from termux-packages repository",
                "run": "./get-build-package.sh"
            },
            {
                "id": 4,
                "name": "Upload to packages.termux.dev",
                "run": "GITHUB_SHA=${{ github.sha }}\nAPTLY_API_AUTH=${{ secrets.APTLY_API_AUTH }}\nGPG_PASSPHRASE=${{ secrets.GPG_PASSPHRASE }}\n\nsource scripts/aptly_api.sh\nsource scripts/utils/package/package.sh\n\nget_list_pkgs() {\n  for i in $(cat debs/built_${REPOSITORY_NAME}_packages.txt | sed -E 's/(..*)/\\1\\n\\1-static/g'); do\n    local pkgname=\"${i}\"\n    if ! package__is_package_name_have_glibc_prefix \"$pkgname\"; then\n      pkgname=$(package__add_prefix_glibc_to_package_name \"$pkgname\")\n    fi\n    ls debs/${pkgname}_*.deb 2>/dev/null\n  done\n}\n\nfor archive in debs-*/debs-{aarch64,arm,i686,x86_64}-${{ github.sha }}.tar; do\n  tar xf \"$archive\"\ndone\n\nfor repo in $(jq --raw-output 'del(.pkg_format) | keys | .[]' repo.json); do\n  export REPOSITORY_NAME=$(jq --raw-output '.[\"'$repo'\"].name' repo.json)\n  export REPOSITORY_DISTRIBUTION=$(jq --raw-output '.[\"'$repo'\"].distribution' repo.json)\n\n  # Upload file to temporary directory.\n  uploaded_files=false\n  shopt -s nullglob\n\n  if [ -f debs/built_${REPOSITORY_NAME}_packages.txt ]; then\n    for filename in $(get_list_pkgs); do\n      if ! aptly_upload_file \"$filename\"; then\n        continue\n      fi\n\n      uploaded_files=true\n    done\n    shopt -u nullglob\n\n    # Publishing repository changes.\n    if [ \"$uploaded_files\" = \"true\" ]; then\n      #if ! aptly_add_to_repo; then\n      #  exit 1\n      #fi\n      aptly_add_to_repo || true\n\n      # Usually temporary directory is deleted automatically, but in certain cases it is left.\n      aptly_delete_dir\n\n      # Final part to make changes appear in web root.\n      if ! aptly_publish_repo; then\n        exit 1\n      fi\n    fi\n  fi\ndone\n"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Running a scan",
                "run": "./scripts-checking/start.sh '${{ matrix.arch }}'"
            },
            {
                "id": 3,
                "name": "Creating a result list",
                "run": "result_file=\"./result-checking/RESULT-${{ matrix.arch }}\"\ntouch \"${result_file}\"\nfor i in PKG_NOT_FOUND VER_NOT_FOUND; do\n  path_log_file=\"./result-checking/${i}.${{ matrix.arch }}\"\n  if [ -f \"${path_log_file}\" ]; then\n    cat \"${path_log_file}\" >> \"${result_file}\"\n  fi\ndone\n"
            },
            {
                "id": 4,
                "name": "Store RESULT-* files",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "git clone https://github.com/termux/glibc-packages.git glibc-packages-mirror"
            },
            {
                "id": 2,
                "name": "Clone root repository",
                "run": "git clone https://github.com/termux-pacman/glibc-packages.git"
            },
            {
                "id": 3,
                "name": "Get RESULT-* files",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "Creating a REBUILD-LIST",
                "run": "touch REBUILD-LIST\ncd glibc-packages-mirror\nfor i in $(sort ../result-*/RESULT-* | uniq); do\n  BUILD_SOURCE=$(ls gpkg/${i}/build.sh 2> /dev/null) || true\n  if [ -z \"${BUILD_SOURCE}\" ]; then\n    BUILD_SOURCE=$(ls gpkg/*/${i}.subpackage.sh 2> /dev/null) || true\n    if [ -n \"${BUILD_SOURCE}\" ]; then\n      BUILD_SOURCE=\"$(dirname ${BUILD_SOURCE})/build.sh\"\n    else\n      echo \"Source package '${i}' was not found, skip\"\n      continue\n    fi\n  fi\n  if ! $(grep -q \"^${BUILD_SOURCE}$\" ../REBUILD-LIST) && [ $(($(expr $(expr $(date +%s) - $(git log -n 1 --date=format:'%s' --format=%cd -- $(dirname ${BUILD_SOURCE}))) / 3600) > 7)) = 1 ]; then\n    echo \"${BUILD_SOURCE}\" >> ../REBUILD-LIST\n  fi\ndone\ncd ..\ncat REBUILD-LIST\n"
            },
            {
                "id": 5,
                "name": "Update repo",
                "run": "info() {\n  echo \"==> $1\"\n}\ncommit() {\n  echo \"-> $1\"\n}\ninstall_list_issues() {\n  if [ -f ../LIST-ISSUES ]; then\n    rm ../LIST-ISSUES\n  fi\n  curl --header \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -s -X GET -G \\\n    \"https://api.github.com/repos/${{ github.repository }}/issues\" -o ../LIST-ISSUES\n}\n\n# Edit\ninfo \"Edit\"\ncd glibc-packages-mirror\nrm -fr */\ngit checkout -- scripts-checking/\ncd ../glibc-packages\ncp -r * ../glibc-packages-mirror\n\n# Get list pkg\ninfo \"Get list pkg\"\ncd ../glibc-packages-mirror\nlist_files=\" \"\nfor i in $(git status -s gpkg | awk '{print $2}'); do\n  dir_sp=(${i//// })\n  if [[ ! $(echo \"$list_files\" | grep \" ${dir_sp[0]}/${dir_sp[1]} \") ]]; then\n    list_files+=\"${dir_sp[0]}/${dir_sp[1]} \"\n    source_build=\"${dir_sp[0]}/${dir_sp[1]}/build.sh\"\n    echo \"${source_build}\"\n    if $(grep -q '^'${source_build}'$' ../REBUILD-LIST); then\n      sed -i \"/^${source_build////'\\/'}$/d\" ../REBUILD-LIST\n    fi\n  fi\ndone\nlist_files=($list_files)\n\n# Sort list pkg\ninfo \"Sort list pkg\"\ncd ../glibc-packages\ndeclare -A list_values\nlist_sort=\"\"\nlist_sha=\"\"\nfor i in ${list_files[@]}; do\n  sha_file=$(git log -n 1 --pretty=format:%H -- $i)\n  value=\"$(git rev-list --count $sha_file)\"\n  list_values[${value}]=$((${list_values[${value}]}+1))\n  list_sort+=\"${value}-${list_values[${value}]} \"\n  list_sha+=\"${sha_file} \"\ndone\nlist_sort=($list_sort)\nlist_sha=($list_sha)\ncopy_list_sort=($(sort -n <(printf \"%s\\n\" \"${list_sort[@]}\")))\nsearch_index() {\n  for i in \"${!list_sort[@]}\"; do\n    if [[ \"${list_sort[$i]}\" = \"${1}\" ]]; then\n      echo \"${i}\";\n    fi\n  done\n}\nsort_list_files=\"\"\nfor i in ${copy_list_sort[@]}; do\n  index=$(search_index \"$i\")\n  if [[ \"${i#*-}\" = \"1\" ]]; then\n    sort_list_files+=\" ${list_sha[$index]}###\"\n  else\n    sort_list_files+=\"&&\"\n  fi\n  sort_list_files+=\"${list_files[$index]}\"\ndone\n\n# Start upload\ninfo \"Start upload\"\ncd ../glibc-packages-mirror\nneedbuild=false\nif $(git log -1 --pretty=%B | grep -q '%needbuild'); then\n  needbuild=true\nfi\ngit config --global user.name \"Termux Github Actions\"\ngit config --global user.email \"contact@termux.dev\"\ngit remote set-url origin \"https://termuxbot2:${{ secrets.TERMUXBOT2_TOKEN }}@github.com/${{ github.repository }}.git\"\ncommit \"Update system repo\"\ngit add .\ngit reset README.md README-old.md repo.json gpkg-dev script gpkg\n{\n  git commit -m \"update repo contents\"\n  if [ \"${{ github.event_name }}\" != \"pull_request\" ]; then\n    git push origin main\n  fi\n} || true\ncommit \"Update repo packages\"\ninstall_list_issues\nfor i in $sort_list_files; do\n  i_sp=(${i//###/ })\n  commit \"    ${i_sp[1]}\"\n  cd ../glibc-packages\n  commit_file=\"$(git show -s --format=%B ${i_sp[0]})\"\n  cd ../glibc-packages-mirror\n  git add $(echo ${i_sp[1]} | sed 's/&&/ /g')\n  {\n    # TEST\n    commit \"$commit_file\"\n    if $needbuild; then\n      git commit -m \"$(echo $commit_file | sed '/%ci:no-build/d; /\\[skip ci\\]/d')\"\n    else\n      git commit -m \"$commit_file\"\n    fi\n    if [ \"${{ github.event_name }}\" != \"pull_request\" ]; then\n      git push origin main\n    fi\n  } || true\n  for j in $(echo ${i_sp[1]} | sed 's/&&/ /g'); do\n    while read LINE; do\n      USER=$(echo \"$LINE\" | awk -F ' // ' '{printf $1}')\n      STATE=$(echo \"$LINE\" | awk -F ' // ' '{printf $2}')\n      TITLE=$(echo \"$LINE\" | awk -F ' // ' '{printf $4}')\n      if [ $STATE != \"open\" ] || [ $USER != \"termuxbot2\" ] || [[ $TITLE != \"[AUTO-CHECK]: failed to recompile ${j}\" ]]; then\n        continue\n      fi\n      NUMBER=$(echo \"$LINE\" | awk -F ' // ' '{printf $3}')\n      GH_TOKEN=\"${{ secrets.TERMUXBOT2_TOKEN }}\" gh issue close ${NUMBER} \\\n        -c \"The package has been updated - https://github.com/${{ github.repository }}/commit/$(git log -n 1 --format=%H -- ${j}).\"\n      install_list_issues\n      break\n    done <<< $(jq -r '.[] | \"\\(.user.login) \\(\"//\") \\(.state) \\(\"//\") \\(.number) \\(\"//\") \\(.title)\"' ../LIST-ISSUES)\n  done\ndone\n\nif [ -n \"$(cat ../REBUILD-LIST)\" ]; then\n  info \"Rebuild packages\"\n  listchanged=\"\"\n  for i in $(cat ../REBUILD-LIST); do\n    if [[ $(git log -n 1 --format=%B -- \"${i}\") = \"rebuild($(dirname ${i})): auto check by @termuxbot2\" ]] && \\\n      [[ $(git log -n 1 --format=%an -- \"${i}\") = \"Termux Github Actions\" ]] && \\\n      [[ $(git log -n 1 --format=%ae -- \"${i}\") = \"contact@termux.dev\" ]]; then\n      if ! $(jq -r '.[] | \"\\(.user.login) \\(\"/\") \\(.state) \\(\"/\") \\(.title)\"' ../LIST-ISSUES | grep -q \"^termuxbot2 / open / \\[AUTO-CHECK\\]:.*$(dirname ${i})$\"); then\n        commit \"Create an issue on $(dirname ${i})\"\n        GH_TOKEN=\"${{ secrets.TERMUXBOT2_TOKEN }}\" gh issue create \\\n          --title \"[AUTO-CHECK]: failed to recompile $(dirname ${i})\" \\\n          --body \"$(echo -e \"This issue was automatically generated because the '$(dirname ${i})' package was not recompiled successfully.\\n\\nCommit by recompilation - https://github.com/${{ github.repository }}/commit/$(git log -n 1 --format=%H -- ${i})\")\" \\\n          --label \"auto recompilation failed\" \\\n          --assignee Maxython\n      fi\n      continue\n    fi\n    echo \"\" >> ./${i}\n    git add ./${i}\n    listchanged+=\" ${i}\"\n  done\n  if [ -n \"${listchanged}\" ]; then\n    git commit -m \"$(echo -e \"termux/auto-check-repo: do not rebuild these packages again\\n[skip ci]\")\"\n    if [ \"${{ github.event_name }}\" != \"pull_request\" ]; then\n      git push origin main\n    fi\n    for i in ${listchanged}; do\n      sed -i '$d' ./${i}\n      git add ./${i}\n      git commit -m \"rebuild($(dirname ${i})): auto check by @termuxbot2\"\n      if [ \"${{ github.event_name }}\" != \"pull_request\" ]; then\n        git push origin main\n      fi\n    done\n  fi\nfi\n"
            }
        ],
        "termux/termux-language-server": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install -e '.[dev]'\n"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "pytest --cov\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install build\n"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "pyproject-build\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "softprops/action-gh-release@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "Freed-Wu/update-aur-package@v1.0.11"
            },
            {
                "id": 1,
                "name": "Trigger Workflow",
                "run": "curl -X POST -d '{\"ref\":\"main\"}' -H \"Accept: application/vnd.github.v3+json\" -H \"Authorization: Bearer ${{secrets.GH_TOKEN}}\" https://api.github.com/repos/Freed-Wu/nur-packages/actions/workflows/version.yml/dispatches\n"
            }
        ]
    },
    "twbs": {
        "twbs/bootstrap": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Run dist",
                "run": "npm run dist"
            },
            {
                "id": 5,
                "name": "Run BrowserStack tests",
                "run": "npm run js-test-cloud"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Run dist",
                "run": "npm run dist"
            },
            {
                "id": 5,
                "name": "Run bundlewatch",
                "run": "npm run bundlewatch"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Compress Images",
                "run": "calibreapp/image-actions@1.1.0"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v3"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Run cspell",
                "run": "streetsidesoftware/cspell-action@v6"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Build CSS",
                "run": "npm run css"
            },
            {
                "id": 5,
                "name": "Run CSS tests",
                "run": "npm run css-test"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "java -version"
            },
            {
                "id": 4,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Build docs",
                "run": "npm run docs-build"
            },
            {
                "id": 6,
                "name": "Validate HTML",
                "run": "npm run docs-vnu"
            },
            {
                "id": 7,
                "name": "Run linkinator",
                "run": "JustinBeckwith/linkinator-action@v1"
            },
            {
                "id": 1,
                "name": "awaiting reply",
                "run": "actions-cool/issues-helper@v3"
            },
            {
                "id": 1,
                "name": "awaiting reply",
                "run": "actions-cool/issues-helper@v3"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Run dist",
                "run": "npm run js"
            },
            {
                "id": 5,
                "name": "Run JS tests",
                "run": "npm run js-test"
            },
            {
                "id": 6,
                "name": "Run Coveralls",
                "run": "coverallsapp/github-action@v2"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "npm run lint"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Build CSS with node-sass",
                "run": "npx --package node-sass@latest node-sass --version\nnpx --package node-sass@latest node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 scss/ -o dist-sass/css/\nls -Al dist-sass/css\n"
            },
            {
                "id": 4,
                "name": "Check built CSS files for Sass variables",
                "run": "SASS_VARS_FOUND=$(find \"dist-sass/css/\" -type f -name \"*.css\" -print0 | xargs -0 --no-run-if-empty grep -F \"\\$\" || true)\nif [[ -z \"$SASS_VARS_FOUND\" ]]; then\n  echo \"All good, no Sass variables found!\"\n  exit 0\nelse\n  echo \"Found $(echo \"$SASS_VARS_FOUND\" | wc -l | bc) Sass variables:\"\n  echo \"$SASS_VARS_FOUND\"\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "release-drafter/release-drafter@v6"
            }
        ],
        "twbs/blog": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Compress Images",
                "run": "calibreapp/image-actions@1.1.0"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "java -version"
            },
            {
                "id": 4,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Build and test docs",
                "run": "npm test"
            },
            {
                "id": 6,
                "name": "Upload docs",
                "run": "actions/upload-pages-artifact@v3"
            },
            {
                "id": 1,
                "name": "Deploy to GitHub Pages",
                "run": "actions/deploy-pages@v4"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v3"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            }
        ],
        "twbs/bootstrap-expo": [
            {
                "id": 1,
                "name": "Checkout Repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Compress Images",
                "run": "calibreapp/image-actions@1.1.0"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "bundle exec jekyll build"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "bundle exec jekyll doctor"
            },
            {
                "id": 5,
                "name": "Run html-proofer",
                "run": "bundle exec htmlproofer ./_site --allow-hash-href --assume-extension --check-external-hash --check-favicon --check-img-http --check-opengraph --disable-external --empty-alt-ignore --internal-domains \"expo.getbootstrap.com\""
            },
            {
                "id": 6,
                "name": "Upload docs",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Download docs",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 3,
                "name": "Deploy",
                "run": "peaceiris/actions-gh-pages@v3"
            }
        ],
        "twbs/bootlint": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v1"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v1"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Clone twbs/bootstrap repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 4,
                "name": "Set up Ruby",
                "run": "actions/setup-ruby@v1"
            },
            {
                "id": 5,
                "name": "Set up Ruby cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "Disable gem docs",
                "run": "echo \"gem: --no-document\" > ~/.gemrc"
            },
            {
                "id": 7,
                "name": "Set up Bundler",
                "run": "gem install bundler -v \"~> 1.17\""
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "ruby --version"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "gem --version"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "bundle --version"
            },
            {
                "id": 11,
                "name": "Install npm dependencies",
                "run": "npm install"
            },
            {
                "id": 12,
                "name": "Set up Bootstrap repo, doc deps and build docs",
                "run": "bundle install --deployment --path \"$(pwd)/vendor/bundle\" --gemfile bootstrap/Gemfile --jobs=3 --retry=3\npushd bootstrap && bundle exec jekyll build && popd\n"
            },
            {
                "id": 13,
                "name": "Run tests with Coveralls",
                "run": "npm run nyc -- npm run test && npm run qunit"
            },
            {
                "id": 14,
                "name": "Run tests",
                "run": "npm test"
            },
            {
                "id": 15,
                "name": "Run extra tests",
                "run": "node ./src/cli-main.js --disable W003,W005 \"bootstrap/_gh_pages/**/index.html\"\nnode ./src/cli-main.js test/fixtures/x-ua-compatible/missing.html &> x-ua-compatible-missing.output.actual.txt || true\ndiff test/fixtures/cli/x-ua-compatible-missing.output.txt x-ua-compatible-missing.output.actual.txt\n"
            },
            {
                "id": 16,
                "name": "Run Coveralls",
                "run": "coverallsapp/github-action@master"
            }
        ],
        "twbs/grunt-bootlint": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "npm test"
            }
        ],
        "twbs/bootstrap-rubygem": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Build and test with Rake",
                "run": "bundle exec rake --trace"
            }
        ],
        "twbs/rfs": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v3"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "npm run lint"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Run examples",
                "run": "npm run examples"
            },
            {
                "id": 5,
                "name": "Run uvu tests",
                "run": "npm run uvu"
            }
        ],
        "twbs/stylelint-config-twbs-bootstrap": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v3"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Clone twbs/bootstrap repo",
                "run": "npm run clone-repo"
            },
            {
                "id": 3,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "npm test"
            },
            {
                "id": 6,
                "name": "Test against the bootstrap repo",
                "run": "npm run test-ci"
            }
        ],
        "twbs/icons": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v3"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Prepare release",
                "run": "npm run release"
            },
            {
                "id": 5,
                "name": "Deploy docs",
                "run": "peaceiris/actions-gh-pages@v4"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Publish on npm",
                "run": "npm publish"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "npm run test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "release-drafter/release-drafter@v6"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "java -version"
            },
            {
                "id": 4,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Build the icons",
                "run": "npm run icons"
            },
            {
                "id": 6,
                "name": "Build and test docs",
                "run": "npm run docs-test"
            },
            {
                "id": 7,
                "name": "Run linkinator",
                "run": "JustinBeckwith/linkinator-action@v1"
            }
        ],
        "twbs/bootlint-server": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v1"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v1"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v1"
            },
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "npm test"
            }
        ],
        "twbs/bootstrap-npm-starter": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "npm test"
            }
        ],
        "twbs/examples": [
            {
                "id": 1,
                "name": "Clone repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Install npm dependencies",
                "run": "npm ci"
            },
            {
                "id": 4,
                "name": "Build and test",
                "run": "npm run test --if-present"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v3"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            }
        ]
    },
    "spring-projects": {
        "spring-projects/spring-data-commons": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-data-jpa": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-amqp": [
            {
                "id": 1,
                "name": "Start RabbitMQ",
                "run": "namoshek/rabbitmq-github-action@v1"
            },
            {
                "id": 2,
                "name": "Checkout Samples Repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set up JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "jfrog/setup-jfrog-cli@v4"
            },
            {
                "id": 5,
                "name": "Configure JFrog Cli",
                "run": "jf mvnc --repo-resolve-releases=libs-release-staging --repo-resolve-snapshots=snapshot"
            },
            {
                "id": 6,
                "name": "Verify samples against staged release",
                "run": "mvn versions:set -DnewVersion=${{ inputs.releaseVersion }} -DgenerateBackupPoms=false -DprocessAllModules=true -B -ntp\njf mvn verify -B -ntp\n"
            },
            {
                "id": 7,
                "name": "Capture Test Results",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "spring-projects/spring-batch": [
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Capture release version",
                "run": "echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Update release version",
                "run": "mvn versions:set -DgenerateBackupPoms=false -DnewVersion=$RELEASE_VERSION"
            },
            {
                "id": 5,
                "name": "Enforce release rules",
                "run": "mvn org.apache.maven.plugins:maven-enforcer-plugin:enforce -Drules=requireReleaseDeps"
            },
            {
                "id": 6,
                "name": "Build with Maven and deploy to Artifactory's milestone repository",
                "run": "mvn -P artifactory-milestone -s settings.xml --batch-mode -Dmaven.test.skip=true deploy"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Capture release version",
                "run": "echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Update release version",
                "run": "mvn versions:set -DgenerateBackupPoms=false -DnewVersion=$RELEASE_VERSION"
            },
            {
                "id": 5,
                "name": "Enforce release rules",
                "run": "mvn org.apache.maven.plugins:maven-enforcer-plugin:enforce -Drules=requireReleaseDeps"
            },
            {
                "id": 6,
                "name": "Build with Maven and deploy to Artifactory staging repository",
                "run": "mvn -P artifactory-staging -s settings.xml --batch-mode -Dmaven.test.skip=true deploy"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Analyse test coverage with Jacoco",
                "run": "mvn -P test-coverage verify"
            },
            {
                "id": 4,
                "name": "Analyse code quality with Sonar",
                "run": "mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build with Maven and deploy to Artifactory",
                "run": "mvn -s settings.xml --batch-mode --update-snapshots deploy"
            },
            {
                "id": 4,
                "name": "Generate Java docs",
                "run": "mvn javadoc:aggregate"
            },
            {
                "id": 5,
                "name": "Generate Assembly",
                "run": "mvn assembly:single"
            },
            {
                "id": 6,
                "name": "Capture project version",
                "run": "echo PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version --quiet -DforceStdout) >> $GITHUB_ENV"
            },
            {
                "id": 7,
                "name": "Setup SSH key",
                "run": "mkdir \"$HOME/.ssh\"\necho \"$DOCS_SSH_KEY\" > \"$HOME/.ssh/key\"\nchmod 600 \"$HOME/.ssh/key\"\necho \"$DOCS_SSH_HOST_KEY\" > \"$HOME/.ssh/known_hosts\"\n"
            },
            {
                "id": 8,
                "name": "Deploy Java docs",
                "run": "unzip spring-batch-$PROJECT_VERSION-javadocs.zip\nssh -i $HOME/.ssh/key $DOCS_USERNAME@$DOCS_HOST \"cd $DOCS_PATH && mkdir -p $PROJECT_VERSION\"\nscp -i $HOME/.ssh/key -r api $DOCS_USERNAME@$DOCS_HOST:$DOCS_PATH/$PROJECT_VERSION\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "Capture release version",
                "run": "echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> $GITHUB_ENV"
            },
            {
                "id": 2,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 4,
                "name": "Update release version",
                "run": "mvn versions:set -DgenerateBackupPoms=false -DnewVersion=$RELEASE_VERSION"
            },
            {
                "id": 5,
                "name": "Generate Java docs",
                "run": "mvn javadoc:aggregate"
            },
            {
                "id": 6,
                "name": "Generate Assembly",
                "run": "mvn assembly:single"
            },
            {
                "id": 7,
                "name": "Setup SSH key",
                "run": "mkdir \"$HOME/.ssh\"\necho \"$DOCS_SSH_KEY\" > \"$HOME/.ssh/key\"\nchmod 600 \"$HOME/.ssh/key\"\necho \"$DOCS_SSH_HOST_KEY\" > \"$HOME/.ssh/known_hosts\"\n"
            },
            {
                "id": 8,
                "name": "Deploy Java docs and xsd schemas",
                "run": "unzip spring-batch-$RELEASE_VERSION-javadocs.zip\nssh -i $HOME/.ssh/key $DOCS_USERNAME@$DOCS_HOST \"cd $DOCS_PATH && mkdir -p $RELEASE_VERSION\"\nscp -i $HOME/.ssh/key -r api $DOCS_USERNAME@$DOCS_HOST:$DOCS_PATH/$RELEASE_VERSION\n\nunzip spring-batch-$RELEASE_VERSION-schemas.zip\nscp -i $HOME/.ssh/key batch/*.xsd $DOCS_USERNAME@$DOCS_HOST:$BATCH_SCHEMA_PATH\nscp -i $HOME/.ssh/key batch-integration/*.xsd $DOCS_USERNAME@$DOCS_HOST:$INTEGRATION_SCHEMA_PATH\n"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93"
            },
            {
                "id": 3,
                "name": "Build extension with Maven",
                "run": "mvn -B package --file pom.xml"
            },
            {
                "id": 1,
                "name": "Capture release version",
                "run": "echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> $GITHUB_ENV"
            },
            {
                "id": 2,
                "name": "Prepare directory structure",
                "run": "mkdir -p nexus/org/springframework/batch/spring-batch-bom/$RELEASE_VERSION\nmkdir -p nexus/org/springframework/batch/spring-batch-infrastructure/$RELEASE_VERSION\nmkdir -p nexus/org/springframework/batch/spring-batch-core/$RELEASE_VERSION\nmkdir -p nexus/org/springframework/batch/spring-batch-test/$RELEASE_VERSION\nmkdir -p nexus/org/springframework/batch/spring-batch-integration/$RELEASE_VERSION\n"
            },
            {
                "id": 3,
                "name": "Download release files from Artifactory",
                "run": "echo \"Downloading BOM artifacts\"\ncd nexus/org/springframework/batch/spring-batch-bom/$RELEASE_VERSION\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-bom/$RELEASE_VERSION/spring-batch-bom-$RELEASE_VERSION.pom\n\necho \"Downloading infrastructure artifacts\"\ncd ../../../../../..\ncd nexus/org/springframework/batch/spring-batch-infrastructure/$RELEASE_VERSION\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-infrastructure/$RELEASE_VERSION/spring-batch-infrastructure-$RELEASE_VERSION.pom\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-infrastructure/$RELEASE_VERSION/spring-batch-infrastructure-$RELEASE_VERSION.jar\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-infrastructure/$RELEASE_VERSION/spring-batch-infrastructure-$RELEASE_VERSION-javadoc.jar\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-infrastructure/$RELEASE_VERSION/spring-batch-infrastructure-$RELEASE_VERSION-sources.jar\n\necho \"Downloading core artifacts\"\ncd ../../../../../..\ncd nexus/org/springframework/batch/spring-batch-core/$RELEASE_VERSION\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-core/$RELEASE_VERSION/spring-batch-core-$RELEASE_VERSION.pom\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-core/$RELEASE_VERSION/spring-batch-core-$RELEASE_VERSION.jar\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-core/$RELEASE_VERSION/spring-batch-core-$RELEASE_VERSION-javadoc.jar\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-core/$RELEASE_VERSION/spring-batch-core-$RELEASE_VERSION-sources.jar\n\necho \"Downloading test artifacts\"\ncd ../../../../../..\ncd nexus/org/springframework/batch/spring-batch-test/$RELEASE_VERSION\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-test/$RELEASE_VERSION/spring-batch-test-$RELEASE_VERSION.pom\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-test/$RELEASE_VERSION/spring-batch-test-$RELEASE_VERSION.jar\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-test/$RELEASE_VERSION/spring-batch-test-$RELEASE_VERSION-javadoc.jar\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-test/$RELEASE_VERSION/spring-batch-test-$RELEASE_VERSION-sources.jar\n\necho \"Downloading integration artifacts\"\ncd ../../../../../..\ncd nexus/org/springframework/batch/spring-batch-integration/$RELEASE_VERSION\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-integration/$RELEASE_VERSION/spring-batch-integration-$RELEASE_VERSION.pom\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-integration/$RELEASE_VERSION/spring-batch-integration-$RELEASE_VERSION.jar\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-integration/$RELEASE_VERSION/spring-batch-integration-$RELEASE_VERSION-javadoc.jar\nwget --user=\"$ARTIFACTORY_USERNAME\" --password=\"$ARTIFACTORY_PASSWORD\" $ARTIFACTORY_URL/spring-batch-integration/$RELEASE_VERSION/spring-batch-integration-$RELEASE_VERSION-sources.jar\n"
            },
            {
                "id": 4,
                "name": "Sign artifacts and release them to Maven Central",
                "run": "jvalkeal/nexus-sync@v0"
            },
            {
                "id": 1,
                "name": "Capture milestone number and generator version",
                "run": "echo MILESTONE_NUMBER=${{ github.event.inputs.milestoneNumber }} >> $GITHUB_ENV\necho GENERATOR_VERSION=${{ github.event.inputs.generatorVersion }} >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Download changelog generator",
                "run": "wget https://github.com/spring-io/github-changelog-generator/releases/download/v$GENERATOR_VERSION/github-changelog-generator.jar"
            },
            {
                "id": 3,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 4,
                "name": "Prepare configuration file",
                "run": "cat << EOF > application.yml\nchangelog:\n  repository: spring-projects/spring-batch\n  sections:\n    - title: \":star: New features\"\n      labels: [ \"type: feature\" ]\n    - title: \":rocket: Enhancements\"\n      labels: [ \"type: enhancement\" ]\n    - title: \":lady_beetle: Bug fixes\"\n      labels: [ \"type: bug\" ]\n    - title: \":notebook_with_decorative_cover: Documentation\"\n      labels: [ \"in: documentation\" ]\n    - title: \":hammer: Tasks\"\n      labels: [ \"type: task\" ]\nEOF\n"
            },
            {
                "id": 5,
                "name": "Generate release notes",
                "run": "java -jar github-changelog-generator.jar $MILESTONE_NUMBER release-notes.md"
            },
            {
                "id": 6,
                "name": "Print release notes",
                "run": "cat release-notes.md"
            }
        ],
        "spring-projects/spring-framework": [
            {
                "id": 1,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Java",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Download BackportBot",
                "run": "wget https://github.com/spring-io/backport-bot/releases/download/latest/backport-bot-0.0.1-SNAPSHOT.jar"
            },
            {
                "id": 4,
                "name": "Backport",
                "run": "java -jar backport-bot-0.0.1-SNAPSHOT.jar --github.accessToken=\"$GITHUB_TOKEN\" --github.event_name \"$GITHUB_EVENT_NAME\" --github.event \"$GITHUB_EVENT\""
            },
            {
                "id": 1,
                "name": "Set up Java",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set up Gradle",
                "run": "gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5"
            },
            {
                "id": 4,
                "name": "Configure Gradle properties",
                "run": "mkdir -p $HOME/.gradle\necho 'systemProp.user.name=spring-builds+github' >> $HOME/.gradle/gradle.properties\necho 'systemProp.org.gradle.internal.launcher.welcomeMessageEnabled=false' >> $HOME/.gradle/gradle.properties\necho 'org.gradle.daemon=false' >> $HOME/.gradle/gradle.properties\necho 'org.gradle.daemon=4' >> $HOME/.gradle/gradle.properties\n"
            },
            {
                "id": 5,
                "name": "Build and publish",
                "run": "./gradlew -PdeploymentRepository=$(pwd)/deployment-repository build publishAllPublicationsToDeploymentRepository"
            },
            {
                "id": 6,
                "name": "Deploy",
                "run": "spring-io/artifactory-deploy-action@v0.0.1"
            },
            {
                "id": 7,
                "name": "Send notification",
                "run": "./.github/actions/send-notification"
            },
            {
                "id": 1,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Validate Gradle wrapper",
                "run": "gradle/wrapper-validation-action@699bb18358f12c5b78b37bb0111d3a0e2276e0e2"
            },
            {
                "id": 4,
                "name": "Set up Gradle",
                "run": "gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "./gradlew -Dorg.gradle.internal.launcher.welcomeMessageEnabled=false --no-daemon --no-parallel --continue build"
            },
            {
                "id": 6,
                "name": "Print JVM thread dumps when cancelled",
                "run": "./.github/actions/print-jvm-thread-dumps"
            },
            {
                "id": 7,
                "name": "Upload build reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Set up Java",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 2,
                "name": "Prepare Windows runner",
                "run": "git config --global core.autocrlf true\ngit config --global core.longPaths true\nStop-Service -name Docker\n"
            },
            {
                "id": 3,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Set up Gradle",
                "run": "gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5"
            },
            {
                "id": 5,
                "name": "Configure Gradle properties",
                "run": "mkdir -p $HOME/.gradle\necho 'systemProp.user.name=spring-builds+github' >> $HOME/.gradle/gradle.properties\necho 'systemProp.org.gradle.internal.launcher.welcomeMessageEnabled=false' >> $HOME/.gradle/gradle.properties\necho 'org.gradle.daemon=false' >> $HOME/.gradle/gradle.properties\necho 'org.gradle.daemon=4' >> $HOME/.gradle/gradle.properties\n"
            },
            {
                "id": 6,
                "name": "Configure toolchain properties",
                "run": "echo toolchainVersion=${{ matrix.java.version }} >> $HOME/.gradle/gradle.properties\necho systemProp.org.gradle.java.installations.auto-detect=false >> $HOME/.gradle/gradle.properties\necho systemProp.org.gradle.java.installations.auto-download=false >> $HOME/.gradle/gradle.properties\necho systemProp.org.gradle.java.installations.paths=${{ format('$JAVA_HOME_{0}_X64', matrix.java.version) }} >> $HOME/.gradle/gradle.properties\n"
            },
            {
                "id": 7,
                "name": "Build",
                "run": "./gradlew check antora"
            },
            {
                "id": 8,
                "name": "Send notification",
                "run": "./.github/actions/send-notification"
            },
            {
                "id": 1,
                "name": "Check out code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gradle/wrapper-validation-action@v2"
            },
            {
                "id": 1,
                "name": "Update",
                "run": "spring-io/spring-doc-actions/update-antora-spring-ui@5a57bcc6a0da2a1474136cf29571b277850432bc"
            },
            {
                "id": 1,
                "name": "Update",
                "run": "spring-io/spring-doc-actions/update-antora-spring-ui@5a57bcc6a0da2a1474136cf29571b277850432bc"
            }
        ],
        "spring-projects/spring-retry": [
            {
                "id": 1,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./mvnw --batch-mode --update-snapshots verify"
            }
        ],
        "spring-projects/spring-data-redis": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-integration": [
            {
                "id": 1,
                "name": "Checkout Samples Repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Gradle",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Prepare Samples project against Staging",
                "run": "printf \"allprojects {\n        repositories {\n          maven { \n            url 'https://repo.spring.io/libs-staging-local'\n            credentials {\n              username = '$ARTIFACTORY_USERNAME'\n              password = '$ARTIFACTORY_PASSWORD'\n            }\n          }\n        }\n      }\" > staging-repo-init.gradle\n\nsed -i \"1,/springIntegrationVersion.*/s/springIntegrationVersion.*/springIntegrationVersion='${{ inputs.releaseVersion }}'/\" build.gradle  \n"
            },
            {
                "id": 4,
                "name": "Verify Spring Integration Samples against staged release",
                "run": "gradle check --init-script staging-repo-init.gradle"
            }
        ],
        "spring-projects/spring-integration-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Gradle",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew check"
            }
        ],
        "spring-projects/spring-data-cassandra": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-net": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Run './build.cmd ci'",
                "run": "./build.cmd ci"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Run './build.cmd ci'",
                "run": "./build.sh ci"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Publish",
                "run": "./build.cmd test publish"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Pages",
                "run": "actions/configure-pages@v2"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./build.sh website"
            },
            {
                "id": 4,
                "name": "Upload artifact",
                "run": "actions/upload-pages-artifact@v1"
            },
            {
                "id": 1,
                "name": "Deploy to GitHub Pages",
                "run": "actions/deploy-pages@v1"
            }
        ],
        "spring-projects/spring-data-mongodb": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-security": [
            {
                "id": 1,
                "name": "Delete artifacts in cron job",
                "run": "echo \"Running clean build artifacts logic\"\noutput=$(curl -X GET -H \"Authorization: token $GH_ACTIONS_REPO_TOKEN\" https://api.github.com/repos/spring-projects/spring-security/actions/artifacts | grep '\"id\"' | cut -d : -f2 | sed 's/,*$//g')\necho Output is $output\nfor id in $output; do curl -X DELETE -H \"Authorization: token $GH_ACTIONS_REPO_TOKEN\" https://api.github.com/repos/spring-projects/spring-security/actions/artifacts/$id; done;\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up gradle",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Check samples project",
                "run": "# Extract version from gradle.properties\nversion=$(cat gradle.properties | grep \"version=\" | awk -F'=' '{print $2}')\n# Extract samplesBranch from gradle.properties\nsamples_branch=$(cat gradle.properties | grep \"samplesBranch=\" | awk -F'=' '{print $2}')\n./gradlew publishMavenJavaPublicationToLocalRepository\n./gradlew cloneRepository -PrepositoryName=\"spring-projects/spring-security-samples\" -Pref=\"$samples_branch\" -PcloneOutputDirectory=\"$SAMPLES_DIR\"\n./gradlew --project-dir \"$SAMPLES_DIR\" --init-script spring-security-ci.gradle -PlocalRepositoryPath=\"$LOCAL_REPOSITORY_PATH\" -PspringSecurityVersion=\"$version\" :runAllTests\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up gradle",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Check for package tangles",
                "run": "./gradlew check s101 -Ps101.licenseId=\"$STRUCTURE101_LICENSEID\" --stacktrace\n"
            },
            {
                "id": 1,
                "name": "Send Slack message",
                "run": "sjohnr/slack-workflow-status@v1-beta"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup GitHub User",
                "run": "git config user.name 'github-actions[bot]'\ngit config user.email 'github-actions[bot]@users.noreply.github.com'\n"
            },
            {
                "id": 3,
                "name": "Run Auto Merge Forward",
                "run": "spring-io/spring-security-release-tools/.github/actions/auto-merge-forward@actions-v1"
            },
            {
                "id": 1,
                "name": "Send Slack message",
                "run": "Gamesight/slack-workflow-status@v1.3.0"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "Set up Git configuration",
                "run": "git config --global url.\"https://unused-username:${TOKEN}@github.com/\".insteadOf \"https://github.com/\"\ngit config --global user.name 'github-actions[bot]'\ngit config --global user.email 'github-actions[bot]@users.noreply.github.com'\n"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Set up Gradle",
                "run": "gradle/gradle-build-action@v2"
            },
            {
                "id": 5,
                "name": "Upgrade Wrappers",
                "run": "./gradlew clean upgradeGradleWrapperAll --continue -Porg.gradle.java.installations.auto-download=false"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Set Milestone to Dependabot Pull Request",
                "run": "if test -f pom.xml\nthen\n  CURRENT_VERSION=$(mvn help:evaluate -Dexpression=\"project.version\" -q -DforceStdout)\nelse\n  CURRENT_VERSION=$(cat gradle.properties | sed -n '/^version=/ { s/^version=//;p }')\nfi\nexport CANDIDATE_VERSION=${CURRENT_VERSION/-SNAPSHOT}\nMILESTONE=$(gh api repos/$GITHUB_REPOSITORY/milestones --jq 'map(select(.due_on != null and (.title | startswith(env.CANDIDATE_VERSION)))) | .[0] | .title')\n\nif [ -z $MILESTONE ]\nthen\n  gh run cancel ${{ github.run_id }}\n  echo \"::warning title=Cannot merge::No scheduled milestone for $CURRENT_VERSION version\"\nelse\n  gh pr edit ${{ github.event.pull_request.number }} --milestone $MILESTONE\n  echo mergeEnabled=true >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 4,
                "name": "Merge Dependabot pull request",
                "run": "gh pr merge ${{ github.event.pull_request.number }} --auto --rebase"
            },
            {
                "id": 1,
                "name": "Print Milestone Being Checked",
                "run": "echo \"Validating DueOn '$DUE_ON' for milestone '$TITLE'\""
            },
            {
                "id": 2,
                "name": "Validate DueOn",
                "run": "export TOOL_VERSION=0.1.1\nwget \"https://repo.maven.apache.org/maven2/io/spring/releasetrain/spring-release-train-tools/$TOOL_VERSION/spring-release-train-tools-$TOOL_VERSION.jar\"\njava -cp \"spring-release-train-tools-$TOOL_VERSION.jar\" io.spring.releasetrain.CheckMilestoneDueOnMain --dueOn \"$DUE_ON\" --expectedDayOfWeek MONDAY --expectedMondayCount 3\n"
            },
            {
                "id": 1,
                "name": "Send Slack message",
                "run": "Gamesight/slack-workflow-status@v1.3.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up gradle",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew clean build --continue"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up gradle",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Run Antora",
                "run": "./gradlew -PbuildSrc.skipTests=true :spring-security-docs:antora"
            },
            {
                "id": 4,
                "name": "Upload Docs",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch",
                "run": "gh workflow run update-scheduled-release-version.yml -r ${{ matrix.branch }}"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gh workflow run dependabot-auto-merge-forward.yml -r main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Update dependabot.yml",
                "run": "spring-io/spring-security-release-tools/.github/actions/generate-dependabot-yml@actions-v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "stefanzweifel/git-auto-commit-action@v5"
            }
        ],
        "spring-projects/spring-security-kerberos": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r docs-build -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch",
                "run": "gh workflow run update-scheduled-release-version.yml -r ${{ matrix.branch }}"
            }
        ],
        "spring-projects/spring-shell": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "spring-io/nexus-sync-action@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "spring-io/nexus-sync-action@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew build"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./gradlew build"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "jfrog/setup-jfrog-cli@v3"
            },
            {
                "id": 4,
                "name": "Configure JFrog Cli",
                "run": "jf rt gradlec \\\n  --use-wrapper \\\n  --uses-plugin \\\n  --deploy-ivy-desc=false \\\n  --server-id-resolve repo.spring.io \\\n  --server-id-deploy repo.spring.io \\\n  --repo-resolve snapshot \\\n  --repo-deploy snapshot\necho JFROG_CLI_BUILD_NAME=spring-shell-main >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "Build and Publish",
                "run": "jf rt gradle build distZip artifactoryPublish\njf rt build-publish\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "macos info",
                "run": "sysctl machdep.cpu\n"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "graalvm/setup-graalvm@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./gradlew clean build nativeCompile -PspringShellSampleMusl=${{ matrix.musl }} -PspringShellSampleNative=true -PspringShellSampleE2E=true\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 7,
                "name": "Upload Build Logs",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "macos info",
                "run": "sysctl machdep.cpu\n"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 4,
                "name": "Use Python 3.11",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 6,
                "name": "compile e2e module",
                "run": "npm install\nnpm run build\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 8,
                "name": "fix artifacts",
                "run": "chmod +x spring-shell-samples/spring-shell-sample-commands/build/native/nativeCompile/spring-shell-sample-commands\nchmod +x spring-shell-samples/spring-shell-sample-e2e/build/native/nativeCompile/spring-shell-sample-e2e\n"
            },
            {
                "id": 9,
                "name": "run e2e tests",
                "run": "npm install\nnpm test\n"
            },
            {
                "id": 10,
                "name": "Publish Test Results",
                "run": "EnricoMi/publish-unit-test-result-action/composite@v2"
            },
            {
                "id": 1,
                "name": "Handle Issues",
                "run": "jvalkeal/issue-handler@v0.0.6"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Mangle Labels",
                "run": "crazy-max/ghaction-github-labeler@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "graalvm/setup-graalvm@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./gradlew build nativeCompile -PspringShellSampleMusl=${{ matrix.musl }} -x test\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Change Version",
                "run": "snapshotVersion=$( awk -F '=' '$1 == \"version\" { print $2 }' gradle.properties )\nplainVersion=${snapshotVersion%-SNAPSHOT}\nnextPlainVersion=$( echo $plainVersion | awk -F. '/[0-9]+\\./{$NF++;print}' OFS=. )\nnextVersion=${nextPlainVersion}-SNAPSHOT\nsed -i \"s/version=$snapshotVersion/version=$nextVersion/\" gradle.properties\n"
            },
            {
                "id": 3,
                "name": "Commit Next Dev Changes",
                "run": "jvalkeal/build-zoo-handler@v0.0.4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "jvalkeal/setup-maven@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "jfrog/setup-jfrog-cli@v3"
            },
            {
                "id": 5,
                "name": "Configure JFrog Cli",
                "run": "jf rt gradlec \\\n  --use-wrapper \\\n  --uses-plugin \\\n  --deploy-ivy-desc=false \\\n  --server-id-resolve repo.spring.io \\\n  --server-id-deploy repo.spring.io \\\n  --repo-resolve release \\\n  --repo-deploy libs-staging-local\necho JFROG_CLI_BUILD_NAME=spring-shell-main-release >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "Configure Release Version",
                "run": "snapshotVersion=$( awk -F '=' '$1 == \"version\" { print $2 }' gradle.properties )\nplainVersion=${snapshotVersion%-SNAPSHOT}\nsed -i \"s/version=$snapshotVersion/version=$plainVersion/\" gradle.properties\necho PROJECT_VERSION=$plainVersion >> $GITHUB_ENV\n"
            },
            {
                "id": 7,
                "name": "Tag Release",
                "run": "git config --global user.name github-actions[bot]\ngit config --global user.email 41898282+github-actions[bot]@users.noreply.github.com\ngit checkout -b $PROJECT_VERSION\ngit commit -a -m \"Release $PROJECT_VERSION\"\ngit tag \"v$PROJECT_VERSION\"\n"
            },
            {
                "id": 8,
                "name": "Build and Publish",
                "run": "jf rt gradle build distZip artifactoryPublish\njf rt build-publish\n"
            },
            {
                "id": 9,
                "name": "Push Release",
                "run": "git push origin $PROJECT_VERSION\ngit push --tags origin\n"
            },
            {
                "id": 10,
                "name": "Output",
                "run": "echo \"project-version=$PROJECT_VERSION\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jfrog/setup-jfrog-cli@v3"
            },
            {
                "id": 3,
                "name": "Configure JFrog Cli",
                "run": "echo JFROG_CLI_BUILD_NAME=spring-shell-main-release >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Promote Build",
                "run": "jf rt build-promote libs-release-local\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Tooling",
                "run": "curl -sSL https://github.com/cbroglie/mustache/releases/download/v1.2.2/mustache_1.2.2_linux_amd64.tar.gz | sudo tar -C /usr/local/bin/ --no-same-owner -xzv mustache\n"
            },
            {
                "id": 3,
                "name": "GitHub Release",
                "run": "gh issue list \\\n  --repo spring-projects/spring-shell \\\n  --search milestone:$PROJECT_VERSION \\\n  --label automation/rlnotes-header  \\\n  --state all --json title,body \\\n  --jq '{headers:map(.),headerslength:(length)}' \\\n  > $RELEASE_NOTES_HEADERS\ngh issue list \\\n  --repo spring-projects/spring-shell \\\n  --search milestone:$PROJECT_VERSION \\\n  --label automation/rlnotes-footer  \\\n  --state all --json title,body \\\n  --jq '{footers:map(.),footerslength:(length)}' \\\n  > $RELEASE_NOTES_FOOTERS\ngh issue list \\\n  --repo spring-projects/spring-shell \\\n  --search milestone:$PROJECT_VERSION \\\n  --state all --json number,title,labels \\\n  --jq '{issues:map(select((.labels | length == 0) or (any(.labels[].name; startswith(\"automation/rlnotes\")|not))))}' \\\n  > $RELEASE_NOTES_ISSUES\ngh pr list \\\n  --repo spring-projects/spring-shell \\\n  --search milestone:$PROJECT_VERSION \\\n  --state all --json number,title,labels \\\n  --jq '{prs:map(.),prslength:(length)}' \\\n  > $RELEASE_NOTES_PRS\njq -s '{issues:(.[0].issues),prs:(.[1].prs),prslength:(.[1].prslength),headers:(.[2].headers),headerslength:(.[2].headerslength),footers:(.[3].footers), footerslength:(.[3].footerslength)}' \\\n  $RELEASE_NOTES_ISSUES \\\n  $RELEASE_NOTES_PRS \\\n  $RELEASE_NOTES_HEADERS \\\n  $RELEASE_NOTES_FOOTERS \\\n  > $RELEASE_NOTES_DATA\nmustache $RELEASE_NOTES_DATA .github/rlnotes.mustache > $RELEASE_NOTES_FILE\ngh release create v$PROJECT_VERSION \\\n  --draft \\\n  --title \"$PROJECT_VERSION\" \\\n  --notes-file $RELEASE_NOTES_FILE\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jfrog/setup-jfrog-cli@v3"
            },
            {
                "id": 3,
                "name": "Configure JFrog Cli",
                "run": "echo JFROG_CLI_BUILD_NAME=spring-shell-main-release >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Download Release Files",
                "run": "jf rt download \\\n  --spec .github/release-files-spec.json \\\n  --spec-vars \"buildname=$JFROG_CLI_BUILD_NAME;buildnumber=$JFROG_CLI_BUILD_NUMBER\"\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "spring-io/nexus-sync-action@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "jvalkeal/setup-maven@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "jfrog/setup-jfrog-cli@v3"
            },
            {
                "id": 5,
                "name": "Configure JFrog Cli",
                "run": "jf rt gradlec \\\n  --use-wrapper \\\n  --uses-plugin \\\n  --deploy-ivy-desc=false \\\n  --server-id-resolve repo.spring.io \\\n  --server-id-deploy repo.spring.io \\\n  --repo-resolve milestone \\\n  --repo-deploy libs-staging-local\necho JFROG_CLI_BUILD_NAME=spring-shell-main-milestone >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "Configure Milestone Version",
                "run": "snapshotVersion=$( awk -F '=' '$1 == \"version\" { print $2 }' gradle.properties )\nplainVersion=${snapshotVersion%-SNAPSHOT}\nmilestoneVersion=\"$plainVersion-${{ github.event.inputs.milestone }}\"\nsed -i \"s/version=$snapshotVersion/version=$milestoneVersion/\" gradle.properties\necho PROJECT_VERSION=$milestoneVersion >> $GITHUB_ENV\n"
            },
            {
                "id": 7,
                "name": "Tag Release",
                "run": "git config --global user.name github-actions[bot]\ngit config --global user.email 41898282+github-actions[bot]@users.noreply.github.com\ngit checkout -b $PROJECT_VERSION\ngit commit -a -m \"Release $PROJECT_VERSION\"\ngit tag \"v$PROJECT_VERSION\"\n"
            },
            {
                "id": 8,
                "name": "Build and Publish",
                "run": "jf rt gradle build distZip artifactoryPublish\njf rt build-publish\n"
            },
            {
                "id": 9,
                "name": "Push Release",
                "run": "git push origin $PROJECT_VERSION\ngit push --tags origin\n"
            },
            {
                "id": 10,
                "name": "Output",
                "run": "echo \"project-version=$PROJECT_VERSION\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jfrog/setup-jfrog-cli@v3"
            },
            {
                "id": 3,
                "name": "Configure JFrog Cli",
                "run": "echo JFROG_CLI_BUILD_NAME=spring-shell-main-milestone >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Promote Build",
                "run": "jf rt build-promote libs-milestone-local\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Tooling",
                "run": "curl -sSL https://github.com/cbroglie/mustache/releases/download/v1.2.2/mustache_1.2.2_linux_amd64.tar.gz | sudo tar -C /usr/local/bin/ --no-same-owner -xzv mustache\n"
            },
            {
                "id": 3,
                "name": "GitHub Release",
                "run": "gh issue list \\\n  --repo spring-projects/spring-shell \\\n  --search milestone:$PROJECT_VERSION \\\n  --label automation/rlnotes-header  \\\n  --state all --json title,body \\\n  --jq '{headers:map(.),headerslength:(length)}' \\\n  > $RELEASE_NOTES_HEADERS\ngh issue list \\\n  --repo spring-projects/spring-shell \\\n  --search milestone:$PROJECT_VERSION \\\n  --label automation/rlnotes-footer  \\\n  --state all --json title,body \\\n  --jq '{footers:map(.),footerslength:(length)}' \\\n  > $RELEASE_NOTES_FOOTERS\ngh issue list \\\n  --repo spring-projects/spring-shell \\\n  --search milestone:$PROJECT_VERSION \\\n  --state all --json number,title,labels \\\n  --jq '{issues:map(select((.labels | length == 0) or (any(.labels[].name; startswith(\"automation/rlnotes\")|not))))}' \\\n  > $RELEASE_NOTES_ISSUES\ngh pr list \\\n  --repo spring-projects/spring-shell \\\n  --search milestone:$PROJECT_VERSION \\\n  --state all --json number,title,labels \\\n  --jq '{prs:map(.),prslength:(length)}' \\\n  > $RELEASE_NOTES_PRS\njq -s '{issues:(.[0].issues),prs:(.[1].prs),prslength:(.[1].prslength),headers:(.[2].headers),headerslength:(.[2].headerslength),footers:(.[3].footers), footerslength:(.[3].footerslength)}' \\\n  $RELEASE_NOTES_ISSUES \\\n  $RELEASE_NOTES_PRS \\\n  $RELEASE_NOTES_HEADERS \\\n  $RELEASE_NOTES_FOOTERS \\\n  > $RELEASE_NOTES_DATA\nmustache $RELEASE_NOTES_DATA .github/rlnotes.mustache > $RELEASE_NOTES_FILE\ngh release create v$PROJECT_VERSION \\\n  --draft \\\n  --prerelease \\\n  --title \"$PROJECT_VERSION\" \\\n  --notes-file $RELEASE_NOTES_FILE\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Dispatch",
                "run": "gh workflow run e2e.yml -r ${{ matrix.branch }}"
            }
        ],
        "spring-projects/spring-data-rest": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-data-envers": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-boot": [
            {
                "id": 1,
                "name": "Check Out Code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build and Publish",
                "run": "./.github/actions/build"
            },
            {
                "id": 3,
                "name": "Deploy",
                "run": "spring-io/artifactory-deploy-action@26bbe925a75f4f863e1e529e85be2d0093cac116"
            },
            {
                "id": 4,
                "name": "Trigger Docs Build Workflow",
                "run": "gh workflow run deploy-docs.yml -r docs-build -f build-refname=${{ github.ref_name }} -f build-version=${{ steps.build.outputs.version }}"
            },
            {
                "id": 5,
                "name": "Send Notification",
                "run": "./.github/actions/send-notification"
            },
            {
                "id": 1,
                "name": "Free Disk Space",
                "run": "jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be"
            },
            {
                "id": 2,
                "name": "Set Up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Check Out",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Validate Gradle Wrapper",
                "run": "gradle/actions/wrapper-validation@dbbdc275be76ac10734476cc723d82dfe7ec6eda"
            },
            {
                "id": 5,
                "name": "Set Up Gradle",
                "run": "gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "./gradlew -Dorg.gradle.internal.launcher.welcomeMessageEnabled=false --no-daemon --no-parallel --continue build"
            },
            {
                "id": 7,
                "name": "Print JVM Thread Dumps When Cancelled",
                "run": "./.github/actions/print-jvm-thread-dumps"
            },
            {
                "id": 8,
                "name": "Upload Build Reports",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Prepare Windows runner",
                "run": "git config --global core.autocrlf true\ngit config --global core.longPaths true\nStop-Service -name Docker\n"
            },
            {
                "id": 2,
                "name": "Check Out Code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./.github/actions/build"
            },
            {
                "id": 4,
                "name": "Send Notification",
                "run": "./.github/actions/send-notification"
            },
            {
                "id": 1,
                "name": "Check Out Code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build and Publish",
                "run": "./.github/actions/build"
            },
            {
                "id": 3,
                "name": "Stage Release",
                "run": "spring-io/artifactory-deploy-action@26bbe925a75f4f863e1e529e85be2d0093cac116"
            },
            {
                "id": 1,
                "name": "Check Out Code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Sync to Maven Central",
                "run": "./.github/actions/sync-to-maven-central"
            },
            {
                "id": 1,
                "name": "Set up JFrog CLI",
                "run": "jfrog/setup-jfrog-cli@7c95feb32008765e1b4e626b078dfd897c4340ad"
            },
            {
                "id": 2,
                "name": "Promote build",
                "run": "jfrog rt build-promote ${{ format('spring-boot-{0}', needs.build-and-stage-release.outputs.version)}} ${{ github.run_number }} libs-release-local"
            },
            {
                "id": 1,
                "name": "Check Out Code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Publish",
                "run": "./.github/actions/publish-gradle-plugin"
            },
            {
                "id": 1,
                "name": "Check Out Code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Publish to SDKMAN!",
                "run": "./.github/actions/publish-to-sdkman"
            },
            {
                "id": 1,
                "name": "Check Out Code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Update Homebrew Tap",
                "run": "./.github/actions/update-homebrew-tap"
            },
            {
                "id": 1,
                "name": "Check Out Code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Create GitHub Release",
                "run": "./.github/actions/create-github-release"
            },
            {
                "id": 1,
                "name": "Check Out Code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Prepare Gradle Build",
                "run": "./.github/actions/prepare-gradle-build"
            },
            {
                "id": 3,
                "name": "Run System Tests",
                "run": "./gradlew systemTest"
            },
            {
                "id": 4,
                "name": "Send Notification",
                "run": "./.github/actions/send-notification"
            },
            {
                "id": 1,
                "name": "Check Out",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Trigger Workflow",
                "run": "gh workflow run deploy-docs.yml -r docs-build -f build-refname=${{ github.event.inputs.build-refname }} -f build-version=${{ github.event.inputs.build-version }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gradle/actions/wrapper-validation@dbbdc275be76ac10734476cc723d82dfe7ec6eda"
            },
            {
                "id": 1,
                "name": "Check Out Release Verification Tests",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Check Out Send Notification Action",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set Up Java",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Set Up Homebrew",
                "run": "Homebrew/actions/setup-homebrew@7657c9512f50e1c35b640971116425935bab3eea"
            },
            {
                "id": 5,
                "name": "Set Up Gradle",
                "run": "gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda"
            },
            {
                "id": 6,
                "name": "Configure Gradle Properties",
                "run": "mkdir -p $HOME/.gradle\necho 'org.gradle.daemon=false' >> $HOME/.gradle/gradle.properties\n"
            },
            {
                "id": 7,
                "name": "Run Release Verification Tests",
                "run": "./gradlew spring-boot-release-verification-tests:test"
            },
            {
                "id": 8,
                "name": "Upload Build Reports on Failure",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 9,
                "name": "Send Notification",
                "run": "./spring-boot/.github/actions/send-notification"
            }
        ],
        "spring-projects/spring-data-build": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-petclinic": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{matrix.java}}",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Build with Maven Wrapper",
                "run": "./mvnw -B package"
            }
        ],
        "spring-projects/spring-data-couchbase": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 4,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            }
        ],
        "spring-projects/spring-ldap": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.jdk }}",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Cache Gradle packages",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Build with Gradle",
                "run": "./gradlew clean build --no-daemon --stacktrace"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch",
                "run": "gh workflow run update-scheduled-release-version.yml -r ${{ matrix.branch }}"
            }
        ],
        "spring-projects/spring-data-examples": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-batch-extensions": [
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn -B package --file pom.xml"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn -B package --file pom.xml"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn -B package --file pom.xml"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn -B package --file pom.xml"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.8",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn -B package --file pom.xml"
            }
        ],
        "spring-projects/spring-guice": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up JDK 11",
                "run": "actions/setup-java@v2"
            },
            {
                "id": 3,
                "name": "Build with Maven",
                "run": "mvn -B package --file pom.xml"
            }
        ],
        "spring-projects/spring-session": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup GitHub User",
                "run": "git config user.name 'github-actions[bot]'\ngit config user.email 'github-actions[bot]@users.noreply.github.com'\n"
            },
            {
                "id": 3,
                "name": "Run Auto Merge Forward",
                "run": "spring-io/spring-security-release-tools/.github/actions/auto-merge-forward@actions-v1"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gradle/wrapper-validation-action@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Set Milestone to Dependabot Pull Request",
                "run": "if test -f pom.xml\nthen\n  CURRENT_VERSION=$(mvn help:evaluate -Dexpression=\"project.version\" -q -DforceStdout)\nelse\n  CURRENT_VERSION=$(cat gradle.properties | sed -n '/^version=/ { s/^version=//;p }')\nfi\nexport CANDIDATE_VERSION=${CURRENT_VERSION/-SNAPSHOT}\nMILESTONE=$(gh api repos/$GITHUB_REPOSITORY/milestones --jq 'map(select(.due_on != null and (.title | startswith(env.CANDIDATE_VERSION)))) | .[0] | .title')\n\nif [ -z $MILESTONE ]\nthen\n  gh run cancel ${{ github.run_id }}\n  echo \"::warning title=Cannot merge::No scheduled milestone for $CURRENT_VERSION version\"\nelse\n  gh pr edit ${{ github.event.pull_request.number }} --milestone $MILESTONE\n  echo mergeEnabled=true >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 4,
                "name": "Merge Dependabot pull request",
                "run": "gh pr merge ${{ github.event.pull_request.number }} --auto --rebase"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.jdk }}",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Cache Gradle packages",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Build with Gradle",
                "run": "./gradlew clean build --no-daemon --stacktrace"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch",
                "run": "gh workflow run rebuild-search-index.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch",
                "run": "gh workflow run update-scheduled-release-version.yml -r ${{ matrix.branch }}"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gh workflow run dependabot-auto-merge-forward.yml -r main"
            },
            {
                "id": 1,
                "name": "Update",
                "run": "spring-io/spring-doc-actions/update-antora-spring-ui@5a57bcc6a0da2a1474136cf29571b277850432bc"
            }
        ],
        "spring-projects/spring-restdocs": [
            {
                "id": 1,
                "name": "Set Up Java",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 2,
                "name": "Check Out Code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 3,
                "name": "Set Up Gradle",
                "run": "gradle/actions/setup-gradle@750cdda3edd6d51b7fdfc069d2e2818cf3c44f4c"
            },
            {
                "id": 4,
                "name": "Configure Gradle Properties",
                "run": "mkdir -p $HOME/.gradle\necho 'systemProp.user.name=spring-builds+github' >> $HOME/.gradle/gradle.properties\necho 'systemProp.org.gradle.internal.launcher.welcomeMessageEnabled=false' >> $HOME/.gradle/gradle.properties\necho 'org.gradle.daemon=false' >> $HOME/.gradle/gradle.properties\n"
            },
            {
                "id": 5,
                "name": "Build and Publish",
                "run": "./gradlew -PdeploymentRepository=$(pwd)/distribution-repository build publishAllPublicationsToDeploymentRepository"
            },
            {
                "id": 6,
                "name": "Deploy",
                "run": "spring-io/artifactory-deploy-action@26bbe925a75f4f863e1e529e85be2d0093cac116"
            },
            {
                "id": 1,
                "name": "Set Up Java",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 2,
                "name": "Check Out Code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 3,
                "name": "Set Up Gradle",
                "run": "gradle/actions/setup-gradle@750cdda3edd6d51b7fdfc069d2e2818cf3c44f4c"
            },
            {
                "id": 4,
                "name": "Configure Gradle Properties",
                "run": "mkdir -p $HOME/.gradle\necho 'systemProp.user.name=spring-builds+github' >> $HOME/.gradle/gradle.properties\necho 'systemProp.org.gradle.internal.launcher.welcomeMessageEnabled=false' >> $HOME/.gradle/gradle.properties\necho 'org.gradle.daemon=false' >> $HOME/.gradle/gradle.properties\n"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "./gradlew build"
            }
        ],
        "spring-projects/spring-integration-aws": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "jfrog/setup-jfrog-cli@v4"
            },
            {
                "id": 2,
                "name": "Download Artifact from Staging Repo",
                "run": "fileToDownload=org/springframework/integration/spring-integration-aws/${{ inputs.releaseVersion }}/spring-integration-aws-${{ inputs.releaseVersion }}.jar\njfrog rt download libs-staging-local/$fileToDownload\nif [ ! -f $fileToDownload ]\nthen\n  echo \"::error title=No staged artifact::No spring-integration-aws-${{ inputs.releaseVersion }}.jar in staging repository\"\n  exit 1\nfi"
            }
        ],
        "spring-projects/spring-data-keyvalue": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-statemachine": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "spring-io/nexus-sync-action@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jfrog/setup-jfrog-cli@v4"
            },
            {
                "id": 3,
                "name": "Extract Build Id",
                "run": "echo JFROG_CLI_BUILD_NAME=${{ github.event.inputs.buildName }} >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=${{ github.event.inputs.buildNumber }} >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Download Release Files",
                "run": "jf rt download \\\n  --spec .github/release-files-spec.json \\\n  --spec-vars \"buildname=$JFROG_CLI_BUILD_NAME;buildnumber=$JFROG_CLI_BUILD_NUMBER\"\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "spring-io/nexus-sync-action@main"
            },
            {
                "id": 6,
                "name": "Print Staging Repo Id",
                "run": "echo ${{ steps.nexus.outputs.staged-repository-id }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "spring-io/nexus-sync-action@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Build boot ${{ matrix.boot }} java ${{ matrix.java }}",
                "run": "./gradlew clean build -PspringBootVersion=${{ matrix.boot }}"
            },
            {
                "id": 4,
                "name": "Tar Build Logs",
                "run": "mkdir -p build\ntar \\\n  -zc \\\n  --ignore-failed-read \\\n  --file build/buildlogs.tar.gz \\\n  */build/reports \\\n  */*/build/reports\n"
            },
            {
                "id": 5,
                "name": "Upload Build Logs",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew clean build"
            },
            {
                "id": 4,
                "name": "Tar Build Logs",
                "run": "mkdir -p build\ntar \\\n  -zc \\\n  --ignore-failed-read \\\n  --file build/buildlogs.tar.gz \\\n  */build/reports \\\n  */*/build/reports\n"
            },
            {
                "id": 5,
                "name": "Upload Build Logs",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "jfrog/setup-jfrog-cli@v4"
            },
            {
                "id": 4,
                "name": "Configure JFrog Cli",
                "run": "jf gradlec \\\n  --use-wrapper \\\n  --uses-plugin \\\n  --deploy-ivy-desc=false \\\n  --server-id-resolve=repo.spring.io \\\n  --server-id-deploy=repo.spring.io \\\n  --repo-resolve=snapshot \\\n  --repo-deploy=snapshot\necho JFROG_CLI_BUILD_NAME=spring-statemachine-main >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "Build and Publish Snapshot",
                "run": "jf gradle clean build -x test artifactoryPublish\n"
            },
            {
                "id": 6,
                "name": "Publish Build Info",
                "run": "jf rt build-publish\n"
            },
            {
                "id": 1,
                "name": "Handle Issues",
                "run": "jvalkeal/issue-handler@v0.0.6"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Mangle Labels",
                "run": "crazy-max/ghaction-github-labeler@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Rename Labels",
                "run": "crazy-max/ghaction-github-labeler@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew clean build -PstatemachineIncludeTags=mongodb"
            },
            {
                "id": 4,
                "name": "Tar Build Logs",
                "run": "mkdir -p build\ntar -zc --ignore-failed-read --file build/buildlogs.tar.gz */build/reports */*/build/reports\n"
            },
            {
                "id": 5,
                "name": "Upload Build Logs",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup JDK",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew clean build"
            },
            {
                "id": 4,
                "name": "Tar Build Logs",
                "run": "mkdir -p build\ntar \\\n  -zc \\\n  --ignore-failed-read \\\n  --file build/buildlogs.tar.gz \\\n  */build/reports \\\n  */*/build/reports\n"
            },
            {
                "id": 5,
                "name": "Upload Build Logs",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew clean build -PstatemachineIncludeTags=redis"
            },
            {
                "id": 4,
                "name": "Tar Build Logs",
                "run": "mkdir -p build\ntar -zc --ignore-failed-read --file build/buildlogs.tar.gz */build/reports */*/build/reports\n"
            },
            {
                "id": 5,
                "name": "Upload Build Logs",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "jfrog/setup-jfrog-cli@v4"
            },
            {
                "id": 4,
                "name": "Configure JFrog Cli",
                "run": "jf gradlec \\\n  --use-wrapper \\\n  --deploy-ivy-desc=false \\\n  --server-id-resolve=repo.spring.io \\\n  --server-id-deploy=repo.spring.io \\\n  --repo-resolve=libs-release \\\n  --repo-deploy=libs-staging-local\necho JFROG_CLI_BUILD_NAME=spring-statemachine-main-release >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "Configure Release Version",
                "run": "jf gradle releaseVersion\necho PROJECT_VERSION=$(cat gradle.properties | grep \"version=\" | awk -F'=' '{print $2}') >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "Build and Publish",
                "run": "jf gradle clean build artifactoryPublish\njf rt build-publish\n"
            },
            {
                "id": 7,
                "name": "Tag Release",
                "run": "jvalkeal/build-zoo-handler@v0.0.4"
            },
            {
                "id": 8,
                "name": "Output",
                "run": "echo \"::set-output name=project-version::$PROJECT_VERSION\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jfrog/setup-jfrog-cli@v4"
            },
            {
                "id": 3,
                "name": "Configure JFrog Cli",
                "run": "jf gradlec \\\n  --use-wrapper \\\n  --deploy-ivy-desc=false \\\n  --server-id-resolve=repo.spring.io \\\n  --server-id-deploy=repo.spring.io \\\n  --repo-resolve=libs-release \\\n  --repo-deploy=libs-staging-local\necho JFROG_CLI_BUILD_NAME=spring-statemachine-main-release >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Promote Build",
                "run": "jf rt build-promote libs-release-local\n"
            },
            {
                "id": 5,
                "name": "Switch to Next Dev Version",
                "run": "jf gradle nextVersion\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "jvalkeal/build-zoo-handler@v0.0.4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Tooling",
                "run": "curl -sSL https://github.com/cbroglie/mustache/releases/download/v1.2.2/mustache_1.2.2_linux_amd64.tar.gz | sudo tar -C /usr/local/bin/ --no-same-owner -xzv mustache\n"
            },
            {
                "id": 3,
                "name": "GitHub Release",
                "run": "gh issue list \\\n  --repo spring-projects/spring-statemachine \\\n  --milestone $PROJECT_VERSION \\\n  --label automation/rlnotes-header  \\\n  --state all --json title,body \\\n  --jq '{headers:map(.),headerslength:(length)}' \\\n  > $RELEASE_NOTES_HEADERS\ngh issue list \\\n  --repo spring-projects/spring-statemachine \\\n  --milestone $PROJECT_VERSION \\\n  --label automation/rlnotes-footer  \\\n  --state all --json title,body \\\n  --jq '{footers:map(.),footerslength:(length)}' \\\n  > $RELEASE_NOTES_FOOTERS\ngh issue list \\\n  --repo spring-projects/spring-statemachine \\\n  --milestone $PROJECT_VERSION \\\n  --state all --json number,title,labels \\\n  --jq '{issues:map(select((.labels | length == 0) or (any(.labels[].name; startswith(\"automation/rlnotes\")|not))))}' \\\n  > $RELEASE_NOTES_ISSUES\njq -s '{issues:(.[0].issues),headers:(.[1].headers),headerslength:(.[1].headerslength),footers:(.[2].footers), footerslength:(.[2].footerslength)}' \\\n  $RELEASE_NOTES_ISSUES \\\n  $RELEASE_NOTES_HEADERS \\\n  $RELEASE_NOTES_FOOTERS \\\n  > $RELEASE_NOTES_DATA\nmustache $RELEASE_NOTES_DATA .github/rlnotes.mustache > $RELEASE_NOTES_FILE\ngh release create v$PROJECT_VERSION \\\n  --draft \\\n  --title \"$PROJECT_VERSION\" \\\n  --notes-file $RELEASE_NOTES_FILE\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jfrog/setup-jfrog-cli@v4"
            },
            {
                "id": 3,
                "name": "Configure JFrog Cli",
                "run": "echo JFROG_CLI_BUILD_NAME=spring-statemachine-main-release >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Download Release Files",
                "run": "jf rt download \\\n  --spec .github/release-files-spec.json \\\n  --spec-vars \"buildname=$JFROG_CLI_BUILD_NAME;buildnumber=$JFROG_CLI_BUILD_NUMBER\"\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "spring-io/nexus-sync-action@main"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "jfrog/setup-jfrog-cli@v4"
            },
            {
                "id": 4,
                "name": "Configure JFrog Cli",
                "run": "jf gradlec \\\n  --use-wrapper \\\n  --deploy-ivy-desc=false \\\n  --server-id-resolve=repo.spring.io \\\n  --server-id-deploy=repo.spring.io \\\n  --repo-resolve=libs-milestone \\\n  --repo-deploy=libs-staging-local\necho JFROG_CLI_BUILD_NAME=spring-statemachine-main-milestone >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "Configure Milestone Version",
                "run": "jf gradle milestoneVersion -PstatemachineMilestone=${{ github.event.inputs.milestone }}\necho PROJECT_VERSION=$(cat gradle.properties | grep \"version=\" | awk -F'=' '{print $2}') >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "Build and Publish",
                "run": "jf gradle clean build artifactoryPublish\njf rt build-publish\n"
            },
            {
                "id": 7,
                "name": "Tag Release",
                "run": "jvalkeal/build-zoo-handler@v0.0.4"
            },
            {
                "id": 8,
                "name": "Output",
                "run": "echo \"::set-output name=project-version::$PROJECT_VERSION\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jfrog/setup-jfrog-cli@v4"
            },
            {
                "id": 3,
                "name": "Configure JFrog Cli",
                "run": "jf gradlec \\\n  --use-wrapper \\\n  --deploy-ivy-desc=false \\\n  --server-id-resolve=repo.spring.io \\\n  --server-id-deploy=repo.spring.io \\\n  --repo-resolve=libs-milestone \\\n  --repo-deploy=libs-staging-local\necho JFROG_CLI_BUILD_NAME=spring-statemachine-main-milestone >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Promote Build",
                "run": "jf rt build-promote libs-milestone-local\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Tooling",
                "run": "curl -sSL https://github.com/cbroglie/mustache/releases/download/v1.2.2/mustache_1.2.2_linux_amd64.tar.gz | sudo tar -C /usr/local/bin/ --no-same-owner -xzv mustache\n"
            },
            {
                "id": 3,
                "name": "GitHub Release",
                "run": "gh issue list \\\n  --repo spring-projects/spring-statemachine \\\n  --milestone $PROJECT_VERSION \\\n  --label automation/rlnotes-header  \\\n  --state all --json title,body \\\n  --jq '{headers:map(.),headerslength:(length)}' \\\n  > $RELEASE_NOTES_HEADERS\ngh issue list \\\n  --repo spring-projects/spring-statemachine \\\n  --milestone $PROJECT_VERSION \\\n  --label automation/rlnotes-footer  \\\n  --state all --json title,body \\\n  --jq '{footers:map(.),footerslength:(length)}' \\\n  > $RELEASE_NOTES_FOOTERS\ngh issue list \\\n  --repo spring-projects/spring-statemachine \\\n  --milestone $PROJECT_VERSION \\\n  --state all --json number,title,labels \\\n  --jq '{issues:map(select((.labels | length == 0) or (any(.labels[].name; startswith(\"automation/rlnotes\")|not))))}' \\\n  > $RELEASE_NOTES_ISSUES\njq -s '{issues:(.[0].issues),headers:(.[1].headers),headerslength:(.[1].headerslength),footers:(.[2].footers), footerslength:(.[2].footerslength)}' \\\n  $RELEASE_NOTES_ISSUES \\\n  $RELEASE_NOTES_HEADERS \\\n  $RELEASE_NOTES_FOOTERS \\\n  > $RELEASE_NOTES_DATA\nmustache $RELEASE_NOTES_DATA .github/rlnotes.mustache > $RELEASE_NOTES_FILE\ngh release create v$PROJECT_VERSION \\\n  --draft \\\n  --prerelease \\\n  --title \"$PROJECT_VERSION\" \\\n  --notes-file $RELEASE_NOTES_FILE\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup JDK",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew clean build -PstatemachineIncludeTags=smoke"
            },
            {
                "id": 4,
                "name": "Tar Build Logs",
                "run": "mkdir -p build\ntar -zc --ignore-failed-read --file build/buildlogs.tar.gz */build/reports */*/build/reports\n"
            },
            {
                "id": 5,
                "name": "Upload Build Logs",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Handle Stale Issues",
                "run": "jvalkeal/issue-handler@v0.0.6"
            }
        ],
        "spring-projects/spring-data-dev-tools": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Setup Maven Action",
                "run": "s4u/setup-maven-action@v1.13.0"
            },
            {
                "id": 4,
                "name": "Set up refname build",
                "run": "git fetch --depth 1 https://github.com/spring-projects/spring-data-${{ github.event.inputs.module }} ${{ github.event.inputs.build-refname }}\nexport BUILD_REFNAME=${{ github.event.inputs.build-refname }}\necho \"BUILD_REFNAME=$BUILD_REFNAME\" >> $GITHUB_ENV\nexport BUILD_VERSION=$(git cat-file --textconv FETCH_HEAD:pom.xml | python3 -c \"import xml.etree.ElementTree as xml; from sys import stdin; print(xml.parse(stdin).getroot().find('{http://maven.apache.org/POM/4.0.0}version').text)\")\necho BUILD_VERSION=$BUILD_VERSION >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "Cache nodejs",
                "run": "actions/cache@v4"
            },
            {
                "id": 6,
                "name": "Cache Maven",
                "run": "actions/cache@v3"
            },
            {
                "id": 7,
                "name": "Run Antora",
                "run": "./mvnw -B antora -Dspring-data.module=${{ github.event.inputs.module }}"
            },
            {
                "id": 8,
                "name": "Publish Docs",
                "run": "spring-io/spring-doc-actions/rsync-antora-reference@v0.0.17"
            },
            {
                "id": 9,
                "name": "Bust Cloudflare Cache",
                "run": "spring-io/spring-doc-actions/bust-cloudflare-antora-cache@v0.0.17"
            }
        ],
        "spring-projects/spring-kafka": [
            {
                "id": 1,
                "name": "Checkout Spring Integration Repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Gradle",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Prepare Spring Integration project against Staging",
                "run": "printf \"allprojects {\n        repositories {\n          maven { \n            url 'https://repo.spring.io/libs-staging-local'\n            credentials {\n              username = '$ARTIFACTORY_USERNAME'\n              password = '$ARTIFACTORY_PASSWORD'\n            }\n          }\n        }\n      }\" > staging-repo-init.gradle\n\nsed -i \"1,/springKafkaVersion.*/s/springKafkaVersion.*/springKafkaVersion='${{ inputs.releaseVersion }}'/\" build.gradle  \n"
            },
            {
                "id": 4,
                "name": "Verify Spring Integration Kafka module against staged release",
                "run": "gradle :spring-integration-kafka:check --init-script staging-repo-init.gradle"
            },
            {
                "id": 5,
                "name": "Capture Test Results",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "spring-projects/spring-vault": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run docs-build.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run docs-build.yml -r $(git rev-parse --abbrev-ref HEAD)"
            }
        ],
        "spring-projects/spring-data-ldap": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-data-relational": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 4,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-data-geode": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-session-bom": [
            {
                "id": 1,
                "name": "Delete artifacts in cron job",
                "run": "echo \"Running clean build artifacts logic\"\noutput=$(curl -X GET -H \"Authorization: token $GH_ACTIONS_REPO_TOKEN\" https://api.github.com/repos/spring-projects/spring-security/actions/artifacts | grep '\"id\"' | cut -d : -f2 | sed 's/,*$//g')\necho Output is $output\nfor id in $output; do curl -X DELETE -H \"Authorization: token $GH_ACTIONS_REPO_TOKEN\" https://api.github.com/repos/spring-projects/spring-security/actions/artifacts/$id; done;\n"
            },
            {
                "id": 1,
                "name": "Determine if should continue",
                "run": "echo \"::set-output name=runjobs::true\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Setup gradle user name",
                "run": "mkdir -p ~/.gradle\necho 'systemProp.user.name=spring-builds+github' >> ~/.gradle/gradle.properties\n"
            },
            {
                "id": 4,
                "name": "Deploy artifacts",
                "run": "./gradlew publishArtifacts finalizeDeployArtifacts -PossrhUsername=\"$OSSRH_TOKEN_USERNAME\" -PossrhPassword=\"$OSSRH_TOKEN_PASSWORD\" -PartifactoryUsername=\"$ARTIFACTORY_USERNAME\" -PartifactoryPassword=\"$ARTIFACTORY_PASSWORD\" --stacktrace\n"
            },
            {
                "id": 1,
                "name": "Send Slack message",
                "run": "Gamesight/slack-workflow-status@v1.0.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v1"
            },
            {
                "id": 3,
                "name": "Cache Gradle packages",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Build with Gradle",
                "run": "./gradlew clean build --continue --scan"
            }
        ],
        "spring-projects/spring-data-r2dbc": [
            {
                "id": 1,
                "name": "Create or Update Issue Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Create or Update Pull Request Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            },
            {
                "id": 1,
                "name": "Update Project Card",
                "run": "peter-evans/create-or-update-project-card@v1.1.2"
            }
        ],
        "spring-projects/spring-authorization-server": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK ${{ matrix.jdk }}",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew clean build"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch",
                "run": "gh workflow run update-scheduled-release-version.yml -r ${{ matrix.branch }}"
            }
        ],
        "spring-projects/spring-graphql": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Download BackportBot",
                "run": "wget https://github.com/spring-io/backport-bot/releases/download/latest/backport-bot-0.0.1-SNAPSHOT.jar"
            },
            {
                "id": 4,
                "name": "Backport",
                "run": "java -jar backport-bot-0.0.1-SNAPSHOT.jar --github.accessToken=\"$GITHUB_TOKEN\" --github.event_name \"$GITHUB_EVENT_NAME\" --github.event \"$GITHUB_EVENT\""
            },
            {
                "id": 1,
                "name": "Set up Java",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 2,
                "name": "Check out code",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 3,
                "name": "Set up Gradle",
                "run": "gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5"
            },
            {
                "id": 4,
                "name": "Configure Gradle properties",
                "run": "mkdir -p $HOME/.gradle\necho 'systemProp.user.name=spring-builds+github' >> $HOME/.gradle/gradle.properties\necho 'systemProp.org.gradle.internal.launcher.welcomeMessageEnabled=false' >> $HOME/.gradle/gradle.properties\necho 'org.gradle.daemon=false' >> $HOME/.gradle/gradle.properties\n"
            },
            {
                "id": 5,
                "name": "Build and publish",
                "run": "./gradlew -PdeploymentRepository=$(pwd)/deployment-repository build publishAllPublicationsToDeploymentRepository"
            },
            {
                "id": 6,
                "name": "Deploy",
                "run": "spring-io/artifactory-deploy-action@26bbe925a75f4f863e1e529e85be2d0093cac116"
            },
            {
                "id": 7,
                "name": "Send notification",
                "run": "./.github/actions/send-notification"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "Update",
                "run": "spring-io/spring-doc-actions/update-antora-spring-ui@5a57bcc6a0da2a1474136cf29571b277850432bc"
            },
            {
                "id": 1,
                "name": "Update",
                "run": "spring-io/spring-doc-actions/update-antora-spring-ui@5a57bcc6a0da2a1474136cf29571b277850432bc"
            }
        ],
        "spring-projects/spring-security-samples": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "echo \"prs_count=$(gh pr list --app dependabot --state open --json number --jq length)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup GitHub User",
                "run": "git config user.name 'github-actions[bot]'\ngit config user.email 'github-actions[bot]@users.noreply.github.com'\n"
            },
            {
                "id": 3,
                "name": "Run Merge Forward",
                "run": "marcusdacoregio/auto-merge-forward@9eac812bc73673e1a358766ac2ce319bd31ce0f8"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up JDK",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build with Gradle",
                "run": "./gradlew check --continue"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gh workflow run auto-merge-forward.yml -r main"
            }
        ],
        "spring-projects/spring-cli": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./gradlew build --no-daemon"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Dispatch early access",
                "run": "gh workflow run jr-ea.yml -r main"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "graalvm/setup-graalvm@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./gradlew build nativeCompile -x test"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "graalvm/setup-graalvm@v1"
            },
            {
                "id": 3,
                "name": "Use Python 3.11",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./gradlew clean build nativeBuild -x test\n"
            },
            {
                "id": 6,
                "name": "run e2e tests",
                "run": "npm install\nnpm run build-spring-shell-e2e\nnpm test\n"
            },
            {
                "id": 7,
                "name": "Publish Test Results",
                "run": "EnricoMi/publish-unit-test-result-action/composite@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Download fatjar",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Download completion",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 5,
                "name": "JR Assemble",
                "run": "jreleaser/release-action@v2"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Download fatjar",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Download completion",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 5,
                "name": "Jdks",
                "run": "./gradlew copyJdksFromCache setupJdks -PcliRelease=true"
            },
            {
                "id": 6,
                "name": "JR Assemble",
                "run": "jreleaser/release-action@v2"
            },
            {
                "id": 7,
                "name": "Upload jlink",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Download fatjar",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Jdks",
                "run": "./gradlew copyJdksFromCache setupJdks -PcliRelease=true"
            },
            {
                "id": 5,
                "name": "Download jlink",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 6,
                "name": "Expand jlink",
                "run": "cd out/jreleaser/assemble/spring-cli-standalone/jlink\nls -l\nunzip -q -d work-${{ matrix.job.platform }} spring-cli-standalone-${{ inputs.version }}-${{ matrix.job.platform }}.zip\n"
            },
            {
                "id": 7,
                "name": "JR Assemble",
                "run": "jreleaser/release-action@v2"
            },
            {
                "id": 8,
                "name": "JReleaser output",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 9,
                "name": "Upload jpackage",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Gradle Build",
                "run": "./gradlew build -x test --no-daemon -PcliRelease=true"
            },
            {
                "id": 4,
                "name": "Completion Files",
                "run": "mkdir -p build/completion/bash\nmkdir -p build/completion/zsh\njava -jar build/libs/spring-cli-${{ inputs.version }}.jar completion bash > build/completion/bash/spring\njava -jar build/libs/spring-cli-${{ inputs.version }}.jar completion zsh > build/completion/zsh/_spring\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Download fatjar",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 3,
                "name": "Download javaarchive",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Download jpackage",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 5,
                "name": "Download jlink",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 6,
                "name": "Release",
                "run": "jreleaser/release-action@v2"
            },
            {
                "id": 7,
                "name": "JReleaser release output",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "snapshotVersion=$( awk -F '=' '$1 == \"version\" { print $2 }' gradle.properties )\nif [ \"${{ inputs.version }}\" != '' ]; then\n  plainVersion=${snapshotVersion%-SNAPSHOT}\n  releaseVersion=${{ inputs.version }}\n  sed -i \"s/version=$snapshotVersion/version=$releaseVersion/\" gradle.properties\n  echo \"ref=$releaseVersion\" >> $GITHUB_OUTPUT\n  echo \"version=$releaseVersion\" >> $GITHUB_OUTPUT\n  git config --global user.name github-actions[bot]\n  git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com\n  git checkout -b $releaseVersion\n  git commit -a -m \"Release $releaseVersion\"\n  git tag \"v$releaseVersion\"\n  git push origin $releaseVersion --tags\nelse\n  echo \"ref=$(git rev-parse --abbrev-ref HEAD)\" >> $GITHUB_OUTPUT\n  echo \"version=$snapshotVersion\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Mangle Labels",
                "run": "crazy-max/ghaction-github-labeler@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./gradlew build --no-daemon"
            }
        ],
        "spring-projects/spring-pulsar": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Release Sonatype repo to Maven Central",
                "run": "./gradlew findOssrhStagingRepository releaseOssrhStagingRepository \\\n    --stacktrace \\\n    -PossrhUsername=\"$OSSRH_TOKEN_USERNAME\" -PossrhPassword=\"$OSSRH_TOKEN_PASSWORD\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Determine if should continue",
                "run": "# Run jobs if in upstream repository\necho \"runjobs=true\" >>$GITHUB_OUTPUT\n# Extract version from gradle.properties\nversion=$(cat gradle.properties | grep \"version=\" | awk -F'=' '{print $2}')\necho \"project_version=$version\" >>$GITHUB_OUTPUT\nbootVersion=$(cat gradle/libs.versions.toml | grep \"spring-boot = \\\"\" | cut -d '\"' -f2)\necho \"boot_version=$bootVersion\" >>$GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Check samples project",
                "run": "./gradlew publishMavenJavaPublicationToLocalRepository\n./gradlew \\\n  --init-script ./spring-pulsar-sample-apps/sample-apps-check-ci.gradle \\\n  -PlocalRepositoryPath=\"$LOCAL_REPOSITORY_PATH\" \\\n  -PspringPulsarVersion=\"$VERSION\" \\\n  -PspringBootVersion=\"$BOOT_VERSION\" \\\n  -PtestToolchain=\"$JAVA_VERSION\" \\\n  -PsampleTests \\\n  ${{ matrix.samplesTarget }}\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch",
                "run": "gh workflow run ci.yml -r ${{ matrix.branch }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Determine if should continue",
                "run": "# Run jobs if in upstream repository\necho \"runjobs=true\" >>$GITHUB_OUTPUT\n# Extract version from gradle.properties\nversion=$(cat gradle.properties | grep \"version=\" | awk -F'=' '{print $2}')\necho \"project_version=$version\" >>$GITHUB_OUTPUT\nbootVersion=$(cat gradle/libs.versions.toml | grep \"spring-boot = \\\"\" | cut -d '\"' -f2)\necho \"boot_version=$bootVersion\" >>$GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Check format (short circuit)",
                "run": "./gradlew checkFormat\n"
            },
            {
                "id": 4,
                "name": "Build and run unit tests",
                "run": "./gradlew clean build -x integrationTest --continue --scan\n"
            },
            {
                "id": 5,
                "name": "Upload Test Results",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 6,
                "name": "Create Aggregated Jacoco Report",
                "run": "./gradlew aggregateJacocoTestReport --info\n"
            },
            {
                "id": 7,
                "name": "Verify Code Coverage",
                "run": "./gradlew jacocoTestCoverageVerification --info\n"
            },
            {
                "id": 8,
                "name": "Upload Aggregated Jacoco Report",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Run integration tests",
                "run": "./gradlew integrationTest --rerun-tasks -DdownloadRabbitConnector=true --scan\n"
            },
            {
                "id": 4,
                "name": "Capture Test Results",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Run all sample app tests",
                "run": "./gradlew publishMavenJavaPublicationToLocalRepository\n./gradlew \\\n    --init-script ./spring-pulsar-sample-apps/sample-apps-check-ci.gradle \\\n    -PlocalRepositoryPath=\"$LOCAL_REPOSITORY_PATH\" \\\n    -PspringPulsarVersion=\"$VERSION\" \\\n    -PspringBootVersion=\"$BOOT_VERSION\" \\\n    -PsampleTests \\\n    :runAllSampleTests\n"
            },
            {
                "id": 1,
                "name": "Done",
                "run": "echo \"::info ::Done\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Determine if should continue",
                "run": "# Run jobs if in upstream repository\necho \"runjobs=true\" >>$GITHUB_OUTPUT\n# Extract version from gradle.properties\nversion=$(cat gradle.properties | grep \"version=\" | awk -F'=' '{print $2}')\necho \"project_version=$version\" >>$GITHUB_OUTPUT\nbootVersion=$(cat gradle/libs.versions.toml | grep \"spring-boot = \\\"\" | cut -d '\"' -f2)\necho \"boot_version=$bootVersion\" >>$GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Build and run unit tests",
                "run": "./gradlew clean build -x integrationTest \\\n    --continue --scan \\\n    -PartifactoryUsername=\"$ARTIFACTORY_USERNAME\" -PartifactoryPassword=\"$ARTIFACTORY_PASSWORD\"\n"
            },
            {
                "id": 4,
                "name": "Run integration tests",
                "run": "./gradlew integrationTest --rerun-tasks -DdownloadRabbitConnector=true --scan\n"
            },
            {
                "id": 5,
                "name": "Capture test results",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Run all sample app tests",
                "run": "./gradlew publishMavenJavaPublicationToLocalRepository\n./gradlew \\\n    --init-script ./spring-pulsar-sample-apps/sample-apps-check-ci.gradle \\\n    -PlocalRepositoryPath=\"$LOCAL_REPOSITORY_PATH\" \\\n    -PspringPulsarVersion=\"$VERSION\" \\\n    -PspringBootVersion=\"$BOOT_VERSION\" \\\n    -PsampleTests \\\n    :runAllSampleTests\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Deploy artifacts",
                "run": "./gradlew publishArtifacts finalizeDeployArtifacts \\\n    --stacktrace \\\n    -PossrhUsername=\"$OSSRH_TOKEN_USERNAME\" -PossrhPassword=\"$OSSRH_TOKEN_PASSWORD\" \\\n    -PartifactoryUsername=\"$ARTIFACTORY_USERNAME\" -PartifactoryPassword=\"$ARTIFACTORY_PASSWORD\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Run Antora",
                "run": "./gradlew antora\n"
            },
            {
                "id": 4,
                "name": "Publish Docs",
                "run": "spring-io/spring-doc-actions/rsync-antora-reference@v0.0.17"
            },
            {
                "id": 5,
                "name": "Bust Clouflare Cache",
                "run": "spring-io/spring-doc-actions/bust-cloudflare-antora-cache@v0.0.17"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Wait for Artifactory artifacts (milestone)",
                "run": "echo \"Wait for artifacts of $REPO@$VERSION to appear on Artifactory.\"\nuntil curl -f -s https://repo.spring.io/artifactory/milestone/org/springframework/pulsar/spring-pulsar/$VERSION/ > /dev/null\ndo\n  sleep 30\n  echo \".\"\ndone\necho \"Artifacts for $REPO@$VERSION have been released to Artifactory.\"\n"
            },
            {
                "id": 4,
                "name": "Wait for Maven Central artifacts (GA)",
                "run": "echo \"Wait for artifacts of $REPO@$VERSION to appear on Maven Central.\"\nuntil curl -f -s https://repo1.maven.org/maven2/org/springframework/pulsar/spring-pulsar/$VERSION/ > /dev/null\ndo\n  sleep 30\n  echo \".\"\ndone\necho \"Artifacts for $REPO@$VERSION have been released to Maven Central.\"\n"
            },
            {
                "id": 5,
                "name": "Setup git for release tagging",
                "run": "git config user.name 'github-actions[bot]'\ngit config user.email 'github-actions[bot]@users.noreply.github.com'\n"
            },
            {
                "id": 6,
                "name": "Tag release",
                "run": "echo \"Tagging $REPO@$VERSION release.\"\ngit tag v$VERSION\ngit push --tags origin\n"
            },
            {
                "id": 7,
                "name": "Install tooling for Github release",
                "run": "curl -sSL -O https://github.com/spring-io/github-changelog-generator/releases/download/v0.0.10/github-changelog-generator.jar\n"
            },
            {
                "id": 8,
                "name": "Create Github release",
                "run": "java -jar github-changelog-generator.jar \\\n  --spring.config.location=.github/changelog-generator.yml \\\n  $VERSION $RELEASE_NOTES_FILE\ncat $RELEASE_NOTES_FILE\ngh release create v$VERSION \\\n--draft \\\n--title \"Spring Pulsar $VERSION\" \\\n--generate-notes \\\n--notes-file $RELEASE_NOTES_FILE\n"
            },
            {
                "id": 9,
                "name": "Announce Release on Slack",
                "run": "slackapi/slack-github-action@v1.26.0"
            },
            {
                "id": 10,
                "name": "Update next snapshot version",
                "run": "echo \"Updating $REPO@$VERSION to next snapshot version.\"\n./gradlew :updateToSnapshotVersion\ngit commit -am \"[Release $VERSION] Next development version\"\ngit push\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 4,
                "name": "Build and run unit tests",
                "run": "./gradlew clean build -x test -x integrationTest\n"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Gradle",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Check for open issues",
                "run": "echo \"TODO actually check for open issues\"\necho \"is_open_issues=false\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Validate release state",
                "run": "echo \"There are open issues\"\nexit 1\n"
            },
            {
                "id": 5,
                "name": "Update version and push",
                "run": "git config user.name 'github-actions[bot]'\ngit config user.email 'github-actions[bot]@users.noreply.github.com'\nreleaseVersion=\"${{ inputs.releaseVersion }}\"\nreleaseBranch=\"release-initiate/$releaseVersion\"\ngit checkout -b $releaseBranch\n./gradlew :updateToReleaseVersion -PreleaseVersion=$releaseVersion        \ngit commit -am \"[Release $releaseVersion] Update version\"\ngit push origin $releaseBranch\ngh pr create --title \"[Release $releaseVersion] Update version\" --body \"Merge to initiate release.\"\n"
            },
            {
                "id": 1,
                "name": "Show environment v1",
                "run": "env | grep ^GITHUB"
            },
            {
                "id": 2,
                "name": "Show ref v1",
                "run": "echo \"===============> Version from $GITHUB_REF\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "spring-io/spring-gradle-build-action@v2"
            },
            {
                "id": 3,
                "name": "Publish to local repo (poms)",
                "run": "./gradlew publishMavenJavaPublicationToLocalRepository\n"
            },
            {
                "id": 4,
                "name": "Run Trivy scan in repo mode (fs)",
                "run": "aquasecurity/trivy-action@master"
            },
            {
                "id": 5,
                "name": "Upload Trivy scan results to GitHub Security tab",
                "run": "github/codeql-action/upload-sarif@v3"
            }
        ],
        "spring-projects/spring-aot-smoke-tests": [
            {
                "id": 1,
                "name": "Check out",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up GraalVM",
                "run": "graalvm/setup-graalvm@2f25c0caae5b220866f732832d5e3e29ff493338"
            },
            {
                "id": 3,
                "name": "Set up Java",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Set up Gradle",
                "run": "gradle/actions/setup-gradle@db19848a5fa7950289d3668fb053140cf3028d43"
            },
            {
                "id": 5,
                "name": "Configure Gradle user.name",
                "run": "mkdir -p ~/.gradle\necho 'systemProp.user.name=spring-builds+github' >> ~/.gradle/gradle.properties\n"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "./gradlew ${{ inputs.project }}:${{ inputs.task }}"
            },
            {
                "id": 7,
                "name": "Check out send notification action",
                "run": "actions/checkout@v4"
            },
            {
                "id": 8,
                "name": "Determine owner ID secret names",
                "run": "projectName=$(echo ${{ inputs.project }} | tr '[:lower:]:-' '[:upper:]__')\ngroupName=$(echo $projectName | awk '{print substr($1, 0, index($1, \"_\") - 1)}')\necho SECRET_NAME_OWNER_IDS_PROJECT=OWNER_IDS_${projectName} >> $GITHUB_ENV\necho SECRET_NAME_OWNER_IDS_GROUP=OWNER_IDS_${groupName} >> $GITHUB_ENV\n"
            },
            {
                "id": 9,
                "name": "Send notification",
                "run": "./ci/.github/actions/send-notification"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gradle/actions/wrapper-validation@db19848a5fa7950289d3668fb053140cf3028d43"
            }
        ],
        "spring-projects/spring-modulith": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            }
        ],
        "spring-projects/spring-ai": [
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Capture release version",
                "run": "echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Update release version",
                "run": "mvn versions:set -DgenerateBackupPoms=false -DnewVersion=$RELEASE_VERSION"
            },
            {
                "id": 5,
                "name": "Enforce release rules",
                "run": "mvn org.apache.maven.plugins:maven-enforcer-plugin:enforce -Drules=requireReleaseDeps"
            },
            {
                "id": 6,
                "name": "Build with Maven and deploy to Artifactory's milestone repository",
                "run": "mvn -P artifactory-milestone -s settings.xml --batch-mode -Dmaven.test.skip=true deploy"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Capture release version",
                "run": "echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Update release version",
                "run": "mvn versions:set -DgenerateBackupPoms=false -DnewVersion=$RELEASE_VERSION"
            },
            {
                "id": 5,
                "name": "Enforce release rules",
                "run": "mvn org.apache.maven.plugins:maven-enforcer-plugin:enforce -Drules=requireReleaseDeps"
            },
            {
                "id": 6,
                "name": "Build with Maven and deploy to Artifactory staging repository",
                "run": "mvn -P artifactory-staging -s settings.xml --batch-mode -Dmaven.test.skip=true deploy"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Analyse test coverage with Jacoco",
                "run": "mvn -P test-coverage verify"
            },
            {
                "id": 4,
                "name": "Analyse code quality with Sonar",
                "run": "mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 3,
                "name": "Build with Maven and deploy to Artifactory",
                "run": "mvn -s settings.xml -Pintegration-tests -Dfailsafe.rerunFailingTestsCount=3 --batch-mode --update-snapshots deploy"
            },
            {
                "id": 4,
                "name": "Generate Java docs",
                "run": "mvn javadoc:aggregate"
            },
            {
                "id": 5,
                "name": "Generate assembly",
                "run": "mvn assembly:single"
            },
            {
                "id": 6,
                "name": "Capture project version",
                "run": "echo PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version --quiet -DforceStdout) >> $GITHUB_ENV"
            },
            {
                "id": 7,
                "name": "Setup SSH key",
                "run": "mkdir \"$HOME/.ssh\"\necho \"$DOCS_SSH_KEY\" > \"$HOME/.ssh/key\"\nchmod 600 \"$HOME/.ssh/key\"\necho \"$DOCS_SSH_HOST_KEY\" > \"$HOME/.ssh/known_hosts\"\n"
            },
            {
                "id": 8,
                "name": "Deploy docs",
                "run": "unzip spring-ai-$PROJECT_VERSION-docs.zip\nssh -i $HOME/.ssh/key $DOCS_USERNAME@$DOCS_HOST \"cd $DOCS_PATH && mkdir -p $PROJECT_VERSION/api\"\nscp -i $HOME/.ssh/key -r api $DOCS_USERNAME@$DOCS_HOST:$DOCS_PATH/$PROJECT_VERSION/api\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Dispatch (partial build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}"
            },
            {
                "id": 3,
                "name": "Dispatch (full build)",
                "run": "gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)"
            },
            {
                "id": 1,
                "name": "Capture release version",
                "run": "echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> $GITHUB_ENV"
            },
            {
                "id": 2,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 4,
                "name": "Generate Java docs",
                "run": "mvn javadoc:aggregate"
            },
            {
                "id": 5,
                "name": "Generate assembly",
                "run": "mvn assembly:single"
            },
            {
                "id": 6,
                "name": "Setup SSH key",
                "run": "mkdir \"$HOME/.ssh\"\necho \"$DOCS_SSH_KEY\" > \"$HOME/.ssh/key\"\nchmod 600 \"$HOME/.ssh/key\"\necho \"$DOCS_SSH_HOST_KEY\" > \"$HOME/.ssh/known_hosts\"\n"
            },
            {
                "id": 7,
                "name": "Deploy docs",
                "run": "unzip spring-ai-$RELEASE_VERSION-docs.zip\nssh -i $HOME/.ssh/key $DOCS_USERNAME@$DOCS_HOST \"cd $DOCS_PATH && mkdir -p $RELEASE_VERSION/api\"\nscp -i $HOME/.ssh/key -r api $DOCS_USERNAME@$DOCS_HOST:$DOCS_PATH/$RELEASE_VERSION\n"
            },
            {
                "id": 1,
                "name": "Capture release version",
                "run": "echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> $GITHUB_ENV"
            },
            {
                "id": 2,
                "name": "Prepare directory structure",
                "run": "mkdir -p nexus/org/springframework/ai/spring-ai-core/$RELEASE_VERSION\nmkdir -p nexus/org/springframework/ai/spring-ai-openai/$RELEASE_VERSION\nmkdir -p nexus/org/springframework/ai/spring-ai-azure-openai/$RELEASE_VERSION\nmkdir -p nexus/org/springframework/ai/spring-ai-spring-boot-autoconfigure/$RELEASE_VERSION\n"
            },
            {
                "id": 3,
                "name": "Download release files from Artifactory",
                "run": "echo \"Downloading core artifacts\"\ncd ../../../../../..\ncd nexus/org/springframework/ai/spring-ai-core/$RELEASE_VERSION\nwget $ARTIFACTORY_URL/spring-ai-core/$RELEASE_VERSION/spring-ai-core-$RELEASE_VERSION.pom\nwget $ARTIFACTORY_URL/spring-ai-core/$RELEASE_VERSION/spring-ai-core-$RELEASE_VERSION.jar\nwget $ARTIFACTORY_URL/spring-ai-core/$RELEASE_VERSION/spring-ai-core-$RELEASE_VERSION-javadoc.jar\nwget $ARTIFACTORY_URL/spring-ai-core/$RELEASE_VERSION/spring-ai-core-$RELEASE_VERSION-sources.jar\n\necho \"Downloading openai artifacts\"\ncd ../../../../../..\ncd nexus/org/springframework/batch/spring-ai-openai/$RELEASE_VERSION\nwget $ARTIFACTORY_URL/spring-ai-openai/$RELEASE_VERSION/spring-ai-openai-$RELEASE_VERSION.pom\nwget $ARTIFACTORY_URL/spring-ai-openai/$RELEASE_VERSION/spring-ai-openai-$RELEASE_VERSION.jar\nwget $ARTIFACTORY_URL/spring-ai-openai/$RELEASE_VERSION/spring-ai-openai-$RELEASE_VERSION-javadoc.jar\nwget $ARTIFACTORY_URL/spring-ai-openai/$RELEASE_VERSION/spring-ai-openai-$RELEASE_VERSION-sources.jar\n\necho \"Downloading azure openai artifacts\"\ncd ../../../../../..\ncd nexus/org/springframework/batch/spring-ai-azure-openai/$RELEASE_VERSION\nwget $ARTIFACTORY_URL/spring-ai-azure-openai/$RELEASE_VERSION/spring-ai-azure-openai-$RELEASE_VERSION.pom\nwget $ARTIFACTORY_URL/spring-ai-azure-openai/$RELEASE_VERSION/spring-ai-azure-openai-$RELEASE_VERSION.jar\nwget $ARTIFACTORY_URL/spring-ai-azure-openai/$RELEASE_VERSION/spring-ai-azure-openai-$RELEASE_VERSION-javadoc.jar\nwget $ARTIFACTORY_URL/spring-ai-azure-openai/$RELEASE_VERSION/spring-ai-azure-openai-$RELEASE_VERSION-sources.jar\n\necho \"Downloading autoconfiguration artifacts\"\ncd ../../../../../..\ncd nexus/org/springframework/batch/spring-ai-spring-boot-autoconfigure/$RELEASE_VERSION\nwget $ARTIFACTORY_URL/spring-ai-spring-boot-autoconfigure/$RELEASE_VERSION/spring-ai-spring-boot-autoconfigure-$RELEASE_VERSION.pom\nwget $ARTIFACTORY_URL/spring-ai-spring-boot-autoconfigure/$RELEASE_VERSION/spring-ai-spring-boot-autoconfigure-$RELEASE_VERSION.jar\nwget $ARTIFACTORY_URL/spring-ai-spring-boot-autoconfigure/$RELEASE_VERSION/spring-ai-spring-boot-autoconfigure-$RELEASE_VERSION-javadoc.jar\nwget $ARTIFACTORY_URL/spring-ai-spring-boot-autoconfigure/$RELEASE_VERSION/spring-ai-spring-boot-autoconfigure-$RELEASE_VERSION-sources.jar\n"
            },
            {
                "id": 4,
                "name": "Sign artifacts and release them to Maven Central",
                "run": "jvalkeal/nexus-sync@v0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jfrog/setup-jfrog-cli@v1"
            },
            {
                "id": 3,
                "name": "Extract Build Id",
                "run": "echo JFROG_CLI_BUILD_NAME=${{ github.event.inputs.buildName }} >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=${{ github.event.inputs.buildNumber }} >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Download Release Files",
                "run": "jfrog rt download \\\n  --spec .github/release-files-spec.json \\\n  --spec-vars \"buildname=$JFROG_CLI_BUILD_NAME;buildnumber=$JFROG_CLI_BUILD_NUMBER\"\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "jvalkeal/nexus-sync@v0"
            },
            {
                "id": 6,
                "name": "Print Staging Repo Id",
                "run": "echo ${{ steps.nexus.outputs.staged-repository-id }}"
            },
            {
                "id": 1,
                "name": "Capture milestone number and generator version",
                "run": "echo MILESTONE_NUMBER=${{ github.event.inputs.milestoneNumber }} >> $GITHUB_ENV\necho GENERATOR_VERSION=${{ github.event.inputs.generatorVersion }} >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Download changelog generator",
                "run": "wget https://github.com/spring-io/github-changelog-generator/releases/download/v$GENERATOR_VERSION/github-changelog-generator.jar"
            },
            {
                "id": 3,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v3"
            },
            {
                "id": 4,
                "name": "Prepare configuration file",
                "run": "cat << EOF > application.yml\nchangelog:\n  repository: spring-exprimental/spring-ai\n  sections:\n    - title: \":star: New features\"\n      labels: [ \"type: feature\" ]\n    - title: \":rocket: Enhancements\"\n      labels: [ \"type: enhancement\" ]\n    - title: \":lady_beetle: Bug fixes\"\n      labels: [ \"type: bug\" ]\n    - title: \":notebook_with_decorative_cover: Documentation\"\n      labels: [ \"in: documentation\" ]\n    - title: \":hammer: Tasks\"\n      labels: [ \"type: task\" ]\nEOF\n"
            },
            {
                "id": 5,
                "name": "Generate release notes",
                "run": "java -jar github-changelog-generator.jar $MILESTONE_NUMBER release-notes.md"
            },
            {
                "id": 6,
                "name": "Print release notes",
                "run": "cat release-notes.md"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Source code formatting check",
                "run": "./mvnw spring-javaformat:validate\n"
            }
        ],
        "spring-projects/spring-rewrite-commons": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jvalkeal/setup-maven@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Verify formatting",
                "run": "./mvnw  -B -Pfunctional-tests spring-javaformat:validate"
            },
            {
                "id": 5,
                "name": "Build (Windows and MacOS, no functional tests)",
                "run": "./mvnw -B clean install"
            },
            {
                "id": 6,
                "name": "Build (Linux)",
                "run": "./mvnw -B -Pfunctional-tests,javadoc clean install"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jvalkeal/setup-maven@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 4,
                "name": "Verify formatting",
                "run": "./mvnw  -B -Pfunctional-tests spring-javaformat:validate"
            },
            {
                "id": 5,
                "name": "Build (Windows and MacOS, no functional tests)",
                "run": "./mvnw -B clean install"
            },
            {
                "id": 6,
                "name": "Build (Linux)",
                "run": "./mvnw -B -Pfunctional-tests clean install"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-java@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "jfrog/setup-jfrog-cli@v3"
            },
            {
                "id": 4,
                "name": "Deploy Snapshot",
                "run": "\njf mvnc \\\n--server-id-deploy repo.spring.io \\\n--repo-deploy-releases release \\\n--repo-deploy-snapshots snapshot \\\n--exclude-patterns=\"*-example*.*,*-tests-*.*,*-docs-*.*\"\necho JFROG_CLI_BUILD_NAME=spring-rewrite-commons-main >> $GITHUB_ENV\necho JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV\n\njf mvn clean -f ./pom.xml install -B -Pjavadoc -DskipTests\njf rt build-publish"
            }
        ]
    },
    "google-deepmind": {
        "google-deepmind/lab": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "install infrastructure",
                "run": "sudo apt-get update\nsudo apt-get install gettext python3-dev libsdl2-dev libosmesa6-dev python3-numpy-dev python3-pil\nsudo find /usr -type f -name Python.h -o -name arrayobject.h -o -name functional -o -name -filesystem\nsudo ln -s /usr/lib/llvm-10/include/c++/v1 /usr/include/c++/v1\n"
            },
            {
                "id": 3,
                "name": "build",
                "run": "bazel --bazelrc=.precommit.bazelrc build ${{matrix.cfg.config}} --copt=-Wno-sign-compare //... //:python_game_py3\n"
            },
            {
                "id": 4,
                "name": "run-tests",
                "run": "bazel --bazelrc=.precommit.bazelrc test  ${{matrix.cfg.config}} --copt=-Wno-sign-compare //...\nbazel --bazelrc=.precommit.bazelrc test  ${{matrix.cfg.config}} --copt=-Wno-sign-compare //python/tests:python_module_test --test_tag_filters=\"\"\nbazel --bazelrc=.precommit.bazelrc test  ${{matrix.cfg.config}} --copt=-Wno-sign-compare //python/tests:dmenv_module_test --test_tag_filters=\"\"\n"
            },
            {
                "id": 5,
                "name": "run-agent",
                "run": "bazel --bazelrc=.precommit.bazelrc run   ${{matrix.cfg.config}} --copt=-Wno-sign-compare --define headless=osmesa //:python_random_agent\n"
            }
        ],
        "google-deepmind/open_spiel": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "julia-actions/setup-julia@v2"
            },
            {
                "id": 3,
                "name": "Ad-hoc fix",
                "run": "# workaround for https://github.com/deepmind/open_spiel/issues/606\nsudo cp /usr/lib/x86_64-linux-gnu/libstdc++.so.6 $(julia --startup-file=no -e 'using Libdl;print(abspath(joinpath(Libdl.dlpath(\"libjulia\"), \"..\", \"julia\")))')\n"
            },
            {
                "id": 4,
                "name": "Install",
                "run": "pwd\nchmod +x install.sh\n./install.sh\n"
            },
            {
                "id": 5,
                "name": "Build and test",
                "run": "python3 --version\n./open_spiel/scripts/ci_script.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install",
                "run": "pwd\nuname -a\n[[ \"${OS_TYPE}\" = \"Darwin\" ]] && brew install python@${OS_PYTHON_VERSION}\n[[ \"${OS_TYPE}\" = \"Darwin\" ]] && brew link --force python@${OS_PYTHON_VERSION}\nwhich g++\ng++ --version\nchmod +x install.sh\n# This is needed to grab OpenSpiel dependencies.\n[[ \"${OS_TYPE}\" = \"Darwin\" ]] && ./install.sh `which python${OS_PYTHON_VERSION}`\n[[ \"${OS_TYPE}\" = \"Linux\" ]] && ./install.sh `which python3`\n# These are necessary to install what is necessary for the build and for the full tests below.\n${CI_PYBIN} -m pip install --upgrade pip\n${CI_PYBIN} -m pip --version\n[[ \"${OS_TYPE}\" = \"Darwin\" ]] && ${CI_PYBIN} -m pip install pipx\n${CI_PYBIN} -m pip install --upgrade setuptools\n${CI_PYBIN} -m pip install --upgrade -r requirements.txt -q\nsource ./open_spiel/scripts/python_extra_deps.sh ${CI_PYBIN}\n${CI_PYBIN} -m pip install --no-cache-dir --upgrade $OPEN_SPIEL_PYTHON_JAX_DEPS\n${CI_PYBIN} -m pip install --no-cache-dir --upgrade $OPEN_SPIEL_PYTHON_PYTORCH_DEPS\n${CI_PYBIN} -m pip install --no-cache-dir --upgrade $OPEN_SPIEL_PYTHON_TENSORFLOW_DEPS\n${CI_PYBIN} -m pip install --no-cache-dir --upgrade $OPEN_SPIEL_PYTHON_MISC_DEPS\n${CI_PYBIN} -m pip install twine\n${CI_PYBIN} -m pip install cibuildwheel==2.16.2\n"
            },
            {
                "id": 3,
                "name": "Build sdist",
                "run": "pipx run build --sdist\ntwine check dist/*.tar.gz\n"
            },
            {
                "id": 4,
                "name": "Build bdist_wheel and run tests",
                "run": "[[ \"${OS_TYPE}\" = \"Darwin\" ]] && xcodebuild -version\n${CI_PYBIN} -m cibuildwheel --output-dir wheelhouse\nls -l wheelhouse\n"
            },
            {
                "id": 5,
                "name": "Install bdist_wheel and full tests",
                "run": "./open_spiel/scripts/test_wheel.sh full `pwd` ${CI_PYBIN}"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "google-deepmind/bsuite": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install --upgrade pip setuptools\npip install .\npip install .[baselines_jax]\npip install .[baselines]\npip install .[testing]\n"
            },
            {
                "id": 4,
                "name": "Check types with pytype",
                "run": "pytype -j \"$(grep -c ^processor /proc/cpuinfo)\" bsuite\n"
            },
            {
                "id": 5,
                "name": "Test with pytest",
                "run": "pytest -n \"$(grep -c ^processor /proc/cpuinfo)\" bsuite\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install --upgrade pip setuptools twine\n"
            },
            {
                "id": 4,
                "name": "Build and publish",
                "run": "python setup.py sdist\ntwine upload dist/*\n"
            }
        ],
        "google-deepmind/tree": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Create sdist",
                "run": "python -m pip install --upgrade pip setuptools\npython setup.py sdist\n"
            },
            {
                "id": 4,
                "name": "Directory listing",
                "run": "ls -lh dist/dm-tree*.tar.gz"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install prerequisites",
                "run": "set -xe\npwd\npython --version\npython -m pip install --upgrade pip setuptools wheel\npython -m pip install cibuildwheel\n"
            },
            {
                "id": 4,
                "name": "Build and test",
                "run": "set -xe && python -m cibuildwheel --output-dir wheelhouse"
            },
            {
                "id": 5,
                "name": "Directory listing",
                "run": "ls -lh wheelhouse/dm_tree*.whl"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install prerequisites",
                "run": "set -xe\npwd\npython --version\npython -m pip install --upgrade pip setuptools wheel\npython -m pip install cibuildwheel\n"
            },
            {
                "id": 4,
                "name": "Build and test",
                "run": "set -xe && python -m cibuildwheel --output-dir wheelhouse"
            },
            {
                "id": 5,
                "name": "Directory listing",
                "run": "ls -lh wheelhouse/dm_tree*.whl"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 4,
                "name": "Install prerequisites",
                "run": "set -xe\npwd\npython --version\npython -m pip install --upgrade pip setuptools wheel\npython -m pip install cibuildwheel\n"
            },
            {
                "id": 5,
                "name": "Build and test",
                "run": "set -xe && python -m cibuildwheel --output-dir wheelhouse"
            },
            {
                "id": 6,
                "name": "Directory listing",
                "run": "ls -lh wheelhouse/dm_tree*.whl"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v2"
            }
        ],
        "google-deepmind/dm_env_rpc": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Add repository sub-modules",
                "run": "git submodule init\ngit submodule update\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install setuptools wheel twine\n"
            },
            {
                "id": 5,
                "name": "Build and publish",
                "run": "python setup.py sdist bdist_wheel\ntwine upload dist/*\n"
            }
        ],
        "google-deepmind/dm-haiku": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install -r requirements.txt -r requirements-jax.txt -r requirements-flax.txt -r requirements-test.txt\npip install .\npip install pytest pytest-xdist\n"
            },
            {
                "id": 4,
                "name": "Print installed dependencies",
                "run": "pip freeze\n"
            },
            {
                "id": 5,
                "name": "Test with pytest",
                "run": "pytest -n auto haiku --ignore=haiku/_src/integration/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "sudo apt install -y pandoc\npython -m pip install --upgrade pip\npip install -r requirements.txt -r requirements-jax.txt -r requirements-flax.txt -r docs/requirements.txt\npip install .\n"
            },
            {
                "id": 4,
                "name": "Print installed dependencies",
                "run": "pip freeze\n"
            },
            {
                "id": 5,
                "name": "Test coverage",
                "run": "cd docs\nmake coverage_check\n"
            },
            {
                "id": 6,
                "name": "Test docs to HTML",
                "run": "cd docs\nmake html\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install -r requirements.txt -r requirements-jax.txt -r requirements-flax.txt -r requirements-test.txt\npip install .\npip install pytest pytest-xdist\n"
            },
            {
                "id": 4,
                "name": "Print installed dependencies",
                "run": "pip freeze\n"
            },
            {
                "id": 5,
                "name": "Test with pytest (integration tests)",
                "run": "# Isolate the float64 test because it needs to set a flag at start-up,\n# so no other tests can be run before it.\npytest haiku/_src/integration/float64_test.py\npytest -n auto haiku/_src/integration/ --ignore=haiku/_src/integration/float64_test.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install setuptools wheel twine\n"
            },
            {
                "id": 4,
                "name": "Build and publish",
                "run": "python setup.py sdist bdist_wheel\ntwine upload dist/*\n"
            }
        ],
        "google-deepmind/rlax": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Run CI tests",
                "run": "bash test.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install setuptools wheel twine\n"
            },
            {
                "id": 4,
                "name": "Check consistency between the package version and release tag",
                "run": "RELEASE_VER=${GITHUB_REF#refs/*/}\nPACKAGE_VER=\"v`python setup.py --version`\"\nif [ $RELEASE_VER != $PACKAGE_VER ]\nthen\n  echo \"package ver. ($PACKAGE_VER) != release ver. ($RELEASE_VER)\"; exit 1\nfi\n"
            },
            {
                "id": 5,
                "name": "Build and publish",
                "run": "python setup.py sdist bdist_wheel\ntwine upload dist/*\n"
            }
        ],
        "google-deepmind/acme": [
            {
                "id": 1,
                "name": "Checkout acme",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run tests in docker",
                "run": "docker run --mount \"type=bind,src=$(pwd),dst=/tmp/acme\" \\\n    -w \"/tmp/acme\" --rm ${{ matrix.docker-image }} /bin/bash test.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "pip install --upgrade pip setuptools twine\n"
            },
            {
                "id": 4,
                "name": "Build and publish",
                "run": "python setup.py sdist\ntwine upload dist/*\n"
            }
        ],
        "google-deepmind/optax": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install setuptools wheel twine build\n"
            },
            {
                "id": 4,
                "name": "Check consistency between the package version and release tag",
                "run": "pip install .\nRELEASE_VER=${GITHUB_REF#refs/*/}\nPACKAGE_VER=\"v`python -c 'import optax; print(optax.__version__)'`\"\nif [ $RELEASE_VER != $PACKAGE_VER ]\nthen\n  echo \"package ver. ($PACKAGE_VER) != release ver. ($RELEASE_VER)\"; exit 1\nfi\n"
            },
            {
                "id": 5,
                "name": "Build and publish",
                "run": "python -m build\ntwine upload dist/*\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Run CI tests",
                "run": "JAX_VERSION=\"${{ matrix.jax-version }}\" bash test.sh"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Check links",
                "run": "gaurav-nelson/github-action-markdown-link-check@v1"
            }
        ],
        "google-deepmind/chex": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Run CI tests",
                "run": "bash test.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install setuptools wheel twine\n"
            },
            {
                "id": 4,
                "name": "Check consistency between the package version and release tag",
                "run": "RELEASE_VER=${GITHUB_REF#refs/*/}\nPACKAGE_VER=\"v`python setup.py --version`\"\nif [ $RELEASE_VER != $PACKAGE_VER ]\nthen\n  echo \"package ver. ($PACKAGE_VER) != release ver. ($RELEASE_VER)\"; exit 1\nfi\n"
            },
            {
                "id": 5,
                "name": "Build and publish",
                "run": "python setup.py sdist bdist_wheel\ntwine upload dist/*\n"
            }
        ],
        "google-deepmind/jaxline": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "set -xe\npython -m pip install --upgrade pip setuptools wheel\npython -m pip install pytest\n"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "if [[ `uname` == \"Darwin\" ]]\nthen\n  echo \"build --macos_minimum_os=10.9\" >> ${HOME}/.bazelrc\nfi\nset -xe\npython -VV\nbazel --version\npython setup.py sdist\npip wheel --verbose --no-deps --no-clean dist/jaxline*.tar.gz\npip install jaxline*.whl\n"
            },
            {
                "id": 5,
                "name": "Run tests",
                "run": "set -xe\n# Change directory to avoid importing jaxline from repo root.\nmkdir tests && pushd tests\npython -m pytest -vv --pyargs jaxline\npopd\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v2"
            }
        ],
        "google-deepmind/lab2d": [
            {
                "id": 1,
                "name": "Create Release",
                "run": "actions/create-release@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Install Python Dependencies",
                "run": "pip3 install --upgrade pip packaging check-wheel-contents"
            },
            {
                "id": 4,
                "name": "Build for Python ${{ matrix.python-version }}",
                "run": "bazel --bazelrc=.bazelrc build --compilation_mode=opt --dynamic_mode=off --config=luajit ${{ matrix.cfg.config }} //dmlab2d:dmlab2d_wheel"
            },
            {
                "id": 5,
                "name": "Get built wheel name",
                "run": "WHEEL_NAME=\"$(ls *.whl)\"\necho WHEEL_NAME=\"${WHEEL_NAME}\" >> \"${GITHUB_ENV}\"\n"
            },
            {
                "id": 6,
                "name": "Check wheel contents",
                "run": "check-wheel-contents bazel-bin/dmlab2d/${{ env.WHEEL_NAME }}"
            },
            {
                "id": 7,
                "name": "Test wheel",
                "run": "pip install bazel-bin/dmlab2d/${{ env.WHEEL_NAME }}\npython -I - <<'____HERE'\nimport dmlab2d\nimport dmlab2d.runfiles_helper\n\nlab = dmlab2d.Lab2d(dmlab2d.runfiles_helper.find(), {\"levelName\": \"chase_eat\"})\nenv = dmlab2d.Environment(lab, [\"WORLD.RGB\"])\nenv.step({})\n____HERE\n"
            },
            {
                "id": 8,
                "name": "Upload Release Asset",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "install infrastructure (Linux)",
                "run": "sudo apt-get install python3-dev python3-numpy python3-packaging\nsudo ln -s /usr/lib/llvm-10/include/c++/v1 /usr/include/c++/v1\n"
            },
            {
                "id": 3,
                "name": "install infrastructure (MacOS)",
                "run": "sudo -H pip3 install numpy packaging"
            },
            {
                "id": 4,
                "name": "build-lua5.1",
                "run": "bazel --bazelrc=.bazelrc build --config=lua5_1 ${{ matrix.config }} //...\n"
            },
            {
                "id": 5,
                "name": "test-lua5.1",
                "run": "bazel --bazelrc=.bazelrc test  --config=lua5_1 ${{ matrix.config }} --test_output=errors //...\n"
            },
            {
                "id": 6,
                "name": "build-lua5.2",
                "run": "bazel --bazelrc=.bazelrc build --config=lua5_2 ${{ matrix.config }} //...\n"
            },
            {
                "id": 7,
                "name": "test-lua5.2",
                "run": "bazel --bazelrc=.bazelrc test  --config=lua5_2 ${{ matrix.config }} --test_output=errors //...\n"
            },
            {
                "id": 8,
                "name": "build-luajit",
                "run": "bazel --bazelrc=.bazelrc build --config=luajit ${{ matrix.config }} //...\n"
            },
            {
                "id": 9,
                "name": "test-luajit",
                "run": "bazel --bazelrc=.bazelrc test  --config=luajit ${{ matrix.config }} --test_output=errors //...\n"
            },
            {
                "id": 10,
                "name": "build-luajit-internal_unwind",
                "run": "bazel --bazelrc=.bazelrc build --config=luajit ${{ matrix.config }} --copt=-fno-asynchronous-unwind-tables --luajit_external_unwinder=False //...\n"
            },
            {
                "id": 11,
                "name": "test-luajit-internal_unwind",
                "run": "bazel --bazelrc=.bazelrc test  --config=luajit ${{ matrix.config }} --copt=-fno-asynchronous-unwind-tables --luajit_external_unwinder=False --test_output=errors //...\n"
            },
            {
                "id": 1,
                "name": "Download release assets",
                "run": "gh release download ${{ inputs.release || github.ref_name }} -D dist -R ${{ github.repository }}"
            },
            {
                "id": 2,
                "name": "Publish to TestPyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            },
            {
                "id": 3,
                "name": "Publish to PyPI",
                "run": "pypa/gh-action-pypi-publish@release/v1"
            }
        ],
        "google-deepmind/jraph": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Check consistency between the package version and release tag",
                "run": "RELEASE_VER=${GITHUB_REF#refs/*/}\nPACKAGE_VER=\"v`python setup.py --version`\"\nif [ $RELEASE_VER != $PACKAGE_VER ]\nthen\n  echo \"package ver. ($PACKAGE_VER) != release ver. ($RELEASE_VER)\"; exit 1\nfi\n"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install setuptools wheel twine\n"
            },
            {
                "id": 5,
                "name": "Build and publish",
                "run": "python setup.py sdist bdist_wheel\ntwine upload dist/*\n"
            }
        ],
        "google-deepmind/tensor_annotations": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pip3 install tensorflow jax[cpu] pytype"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pip3 install ."
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cd tensorflow-stubs && pip3 install ."
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cd jax-stubs && pip3 install ."
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "python -m tensor_annotations.tests.pytype"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "python -m tensor_annotations.tests.templates"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "python -m tensor_annotations.tests.tensorflow"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "python -m tensor_annotations.tests.jax"
            }
        ],
        "google-deepmind/distrax": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install setuptools wheel twine\n"
            },
            {
                "id": 4,
                "name": "Check consistency between the package version and release tag",
                "run": "RELEASE_VER=${GITHUB_REF#refs/*/}\nPACKAGE_VER=\"v`python setup.py --version`\"\nif [ $RELEASE_VER != $PACKAGE_VER ]\nthen\n  echo \"package ver. ($PACKAGE_VER) != release ver. ($RELEASE_VER)\"; exit 1\nfi\n"
            },
            {
                "id": 5,
                "name": "Build and publish",
                "run": "python setup.py sdist bdist_wheel\ntwine upload dist/*\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Run CI tests",
                "run": "bash test.sh"
            }
        ]
    },
    "rust-lang": {
        "rust-lang/rust": [
            {
                "id": 1,
                "name": "Checkout the source code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Calculate the CI job matrix",
                "run": "python3 src/ci/github-actions/calculate-job-matrix.py >> $GITHUB_OUTPUT"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "msys2/setup-msys2@v2.22.0"
            },
            {
                "id": 2,
                "name": "disable git crlf conversion",
                "run": "git config --global core.autocrlf false"
            },
            {
                "id": 3,
                "name": "checkout the source code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "configure the PR in which the error message will be posted",
                "run": "echo \"[CI_PR_NUMBER=$num]\""
            },
            {
                "id": 5,
                "name": "add extra environment variables",
                "run": "src/ci/scripts/setup-environment.sh"
            },
            {
                "id": 6,
                "name": "ensure the channel matches the target branch",
                "run": "src/ci/scripts/verify-channel.sh"
            },
            {
                "id": 7,
                "name": "collect CPU statistics",
                "run": "src/ci/scripts/collect-cpu-stats.sh"
            },
            {
                "id": 8,
                "name": "show the current environment",
                "run": "src/ci/scripts/dump-environment.sh"
            },
            {
                "id": 9,
                "name": "install awscli",
                "run": "src/ci/scripts/install-awscli.sh"
            },
            {
                "id": 10,
                "name": "install sccache",
                "run": "src/ci/scripts/install-sccache.sh"
            },
            {
                "id": 11,
                "name": "select Xcode",
                "run": "src/ci/scripts/select-xcode.sh"
            },
            {
                "id": 12,
                "name": "install clang",
                "run": "src/ci/scripts/install-clang.sh"
            },
            {
                "id": 13,
                "name": "install tidy",
                "run": "src/ci/scripts/install-tidy.sh"
            },
            {
                "id": 14,
                "name": "install WIX",
                "run": "src/ci/scripts/install-wix.sh"
            },
            {
                "id": 15,
                "name": "disable git crlf conversion",
                "run": "src/ci/scripts/disable-git-crlf-conversion.sh"
            },
            {
                "id": 16,
                "name": "checkout submodules",
                "run": "src/ci/scripts/checkout-submodules.sh"
            },
            {
                "id": 17,
                "name": "install MinGW",
                "run": "src/ci/scripts/install-mingw.sh"
            },
            {
                "id": 18,
                "name": "install ninja",
                "run": "src/ci/scripts/install-ninja.sh"
            },
            {
                "id": 19,
                "name": "enable ipv6 on Docker",
                "run": "src/ci/scripts/enable-docker-ipv6.sh"
            },
            {
                "id": 20,
                "name": "disable git crlf conversion",
                "run": "src/ci/scripts/disable-git-crlf-conversion.sh"
            },
            {
                "id": 21,
                "name": "ensure line endings are correct",
                "run": "src/ci/scripts/verify-line-endings.sh"
            },
            {
                "id": 22,
                "name": "ensure backported commits are in upstream branches",
                "run": "src/ci/scripts/verify-backported-commits.sh"
            },
            {
                "id": 23,
                "name": "ensure the stable version number is correct",
                "run": "src/ci/scripts/verify-stable-version-number.sh"
            },
            {
                "id": 24,
                "name": "run the build",
                "run": "src/ci/scripts/run-build-from-ci.sh 2>&1"
            },
            {
                "id": 25,
                "name": "create github artifacts",
                "run": "src/ci/scripts/create-doc-artifacts.sh"
            },
            {
                "id": 26,
                "name": "upload artifacts to github",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 27,
                "name": "upload artifacts to S3",
                "run": "src/ci/scripts/upload-artifacts.sh"
            },
            {
                "id": 1,
                "name": "checkout the source code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "calculate the correct exit status",
                "run": "jq --exit-status 'all(.result == \"success\" or .result == \"skipped\")' <<< '${{ toJson(needs) }}'"
            },
            {
                "id": 3,
                "name": "publish toolstate",
                "run": "src/ci/publish_toolstate.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "# Fetch state and labels of PR\n# Or exit successfully if PR does not exist\nJSON=$(gh pr view cargo_update --repo $GITHUB_REPOSITORY --json labels,state || exit 0)\nSTATE=$(echo \"$JSON\" | jq -r '.state')\nWAITING_ON_BORS=$(echo \"$JSON\" | jq '.labels[] | any(.name == \"S-waiting-on-bors\"; .)')\n\n# Exit with error if open and S-waiting-on-bors\nif [[ \"$STATE\" == \"OPEN\" && \"$WAITING_ON_BORS\" == \"true\" ]]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "checkout the source code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "install the bootstrap toolchain",
                "run": "# Extract the stage0 version\nTOOLCHAIN=$(awk -F= '{a[$1]=$2} END {print(a[\"compiler_version\"] \"-\" a[\"compiler_date\"])}' src/stage0)\n# Install and set as default\nrustup toolchain install --no-self-update --profile minimal $TOOLCHAIN\nrustup default $TOOLCHAIN\n"
            },
            {
                "id": 3,
                "name": "cargo update",
                "run": "cargo update 2>&1 | sed '/crates.io index/d' | tee -a cargo_update.log"
            },
            {
                "id": 4,
                "name": "upload Cargo.lock artifact for use in PR",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 5,
                "name": "upload cargo-update log artifact for use in PR",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "checkout the source code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "download Cargo.lock from update job",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "download cargo-update log from update job",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "craft PR body and commit message",
                "run": "echo \"${COMMIT_MESSAGE}\" > commit.txt\ncat cargo_update.log >> commit.txt\n\necho \"${PR_MESSAGE}\" > body.md\necho '```txt' >> body.md\ncat cargo_update.log >> body.md\necho '```' >> body.md\n"
            },
            {
                "id": 5,
                "name": "commit",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit switch --force-create cargo_update\ngit add ./Cargo.lock\ngit commit --no-verify --file=commit.txt\n"
            },
            {
                "id": 6,
                "name": "push",
                "run": "git push --no-verify --force --set-upstream origin cargo_update"
            },
            {
                "id": 7,
                "name": "edit existing open pull request",
                "run": "# Exit with error if PR is closed\nSTATE=$(gh pr view cargo_update --repo $GITHUB_REPOSITORY --json state --jq '.state')\nif [[ \"$STATE\" != \"OPEN\" ]]; then\n  exit 1\nfi\n\ngh pr edit cargo_update --title \"${PR_TITLE}\" --body-file body.md --repo $GITHUB_REPOSITORY\n"
            },
            {
                "id": 8,
                "name": "open new pull request",
                "run": "gh pr create --title \"${PR_TITLE}\" --body-file body.md --repo $GITHUB_REPOSITORY"
            }
        ],
        "rust-lang/rust-enhanced": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "bash ci/install-rust.sh ${{ matrix.rust }}"
            },
            {
                "id": 3,
                "name": "Fix macOS OpenSSL",
                "run": "brew unlink openssl"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "SublimeText/UnitTesting/actions/setup@v1"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "SublimeText/UnitTesting/actions/run-syntax-tests@v1"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "SublimeText/UnitTesting/actions/run-tests@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install mdbook",
                "run": "mkdir mdbook\ncurl -Lf https://github.com/rust-lang/mdBook/releases/download/v0.4.11/mdbook-v0.4.11-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook\necho `pwd`/mdbook >> $GITHUB_PATH\n"
            },
            {
                "id": 3,
                "name": "Deploy docs",
                "run": "cd docs\nmdbook build\ngit worktree add gh-pages gh-pages\ngit config user.name \"Deploy from CI\"\ngit config user.email \"\"\ncd gh-pages\n# Delete the ref to avoid keeping history.\ngit update-ref -d refs/heads/gh-pages\nrm -rf *\nmv ../book/* .\ngit add .\ngit commit -m \"Deploy $GITHUB_SHA to gh-pages\"\ngit push --force\n"
            }
        ],
        "rust-lang/cargo": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "EmbarkStudios/cargo-deny-action@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install mdbook",
                "run": "mkdir mdbook\ncurl -Lf https://github.com/rust-lang/mdBook/releases/download/v0.4.37/mdbook-v0.4.37-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook\necho `pwd`/mdbook >> $GITHUB_PATH\n"
            },
            {
                "id": 3,
                "name": "Deploy docs",
                "run": "GENERATE_PY=\"$(pwd)/ci/generate.py\"\n\ncd src/doc/contrib\nmdbook build\n\n# Override previous ref to avoid keeping history.\ngit worktree add --orphan -B gh-pages gh-pages\ngit config user.name \"Deploy from CI\"\ngit config user.email \"\"\ncd gh-pages\nmv ../book contrib\ngit add contrib\n\n# Generate HTML for link redirections.\npython3 \"$GENERATE_PY\"\ngit add *.html\n# WARN: The CNAME file is for GitHub to redirect requests to the custom domain.\n# Missing this may entail security hazard and domain takeover.\n# See <https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#securing-your-custom-domain>\ngit add CNAME\n\ngit commit -m \"Deploy $GITHUB_SHA to gh-pages\"\ngit push origin +gh-pages\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "echo ok"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup component add rustfmt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo fmt --all --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup component add clippy"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo clippy --workspace --all-targets --no-deps -- -D warnings"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo stale-label"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo lint-docs --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo update -p cargo --locked"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Install cargo-semver-checks",
                "run": "mkdir installed-bins\ncurl -Lf https://github.com/obi1kenobi/cargo-semver-checks/releases/download/v0.31.0/cargo-semver-checks-x86_64-unknown-linux-gnu.tar.gz \\\n  | tar -xz --directory=./installed-bins\necho `pwd`/installed-bins >> $GITHUB_PATH\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "ci/validate-version-bump.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Dump Environment",
                "run": "ci/dump-environment.sh"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup update --no-self-update stable"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "rustup update --no-self-update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "rustup target add ${{ matrix.other }}"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "rustup component add rustc-dev llvm-tools-preview rust-docs"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "sudo apt update -y && sudo apt install lldb gcc-multilib libsecret-1-0 libsecret-1-dev -y"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "rustup component add rustfmt || echo \"rustfmt not available\""
            },
            {
                "id": 9,
                "name": "Configure extra test environment",
                "run": "echo CARGO_CONTAINER_TESTS=1 >> $GITHUB_ENV"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "cargo test -p cargo"
            },
            {
                "id": 11,
                "name": "Clear intermediate test output",
                "run": "ci/clean-test-output.sh"
            },
            {
                "id": 12,
                "name": "gitoxide tests (all git-related tests)",
                "run": "cargo test -p cargo git"
            },
            {
                "id": 13,
                "name": "Clear test output",
                "run": "ci/clean-test-output.sh"
            },
            {
                "id": 14,
                "name": "Check operability of rustc invocation with argfile",
                "run": "cargo test -p cargo --test testsuite -- fix::"
            },
            {
                "id": 15,
                "name": "Step 15",
                "run": "cargo test --workspace --exclude cargo --exclude benchsuite --exclude resolver-tests"
            },
            {
                "id": 16,
                "name": "Check benchmarks",
                "run": "# This only tests one benchmark since it can take over 10 minutes to\n# download all workspaces.\ncargo test -p benchsuite --all-targets -- cargo\ncargo check -p capture\n"
            },
            {
                "id": 17,
                "name": "Clear benchmark output",
                "run": "ci/clean-test-output.sh"
            },
            {
                "id": 18,
                "name": "Fetch smoke test",
                "run": "ci/fetch-smoke-test.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo test -p resolver-tests"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup update --no-self-update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup target add i686-unknown-linux-gnu"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "sudo apt update -y && sudo apt install gcc-multilib libsecret-1-0 libsecret-1-dev -y"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "rustup component add rustfmt || echo \"rustfmt not available\""
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo test -p cargo"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup update nightly && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup component add rust-src"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo build"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo test -p cargo --test build-std"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup update nightly && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup update stable"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "rustup component add rust-docs"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "ci/validate-man.sh"
            },
            {
                "id": 6,
                "name": "Run semver-check",
                "run": "cargo +stable run -p semver-check"
            },
            {
                "id": 7,
                "name": "Ensure intradoc links are valid",
                "run": "cargo doc --workspace --document-private-items --no-deps"
            },
            {
                "id": 8,
                "name": "Install mdbook",
                "run": "mkdir mdbook\ncurl -Lf https://github.com/rust-lang/mdBook/releases/download/v0.4.37/mdbook-v0.4.37-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook\necho `pwd`/mdbook >> $GITHUB_PATH\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "cd src/doc && mdbook build --dest-dir ../../target/doc"
            },
            {
                "id": 10,
                "name": "Run linkchecker.sh",
                "run": "cd target\ncurl -sSLO https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/linkcheck.sh\nsh linkcheck.sh --all --path ../src/doc cargo\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo hack check --all-targets --rust-version --workspace --ignore-private --locked"
            }
        ],
        "rust-lang/rfcs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29"
            },
            {
                "id": 2,
                "name": "Install mdbook",
                "run": "mkdir mdbook\ncurl -Lf https://github.com/rust-lang/mdBook/releases/download/v${{ env.MDBOOK_VERSION }}/mdbook-v${{ env.MDBOOK_VERSION }}-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook\necho `pwd`/mdbook >> $GITHUB_PATH\n"
            },
            {
                "id": 3,
                "name": "Generate Book",
                "run": "./generate-book.py\n"
            },
            {
                "id": 4,
                "name": "Upload Artifact",
                "run": "actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e"
            }
        ],
        "rust-lang/rust-by-example": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Update rustup",
                "run": "rustup self update"
            },
            {
                "id": 3,
                "name": "Install Rust",
                "run": "rustup set profile minimal\nrustup toolchain install nightly -c rust-docs\nrustup default nightly\n"
            },
            {
                "id": 4,
                "name": "Install mdbook",
                "run": "mkdir bin\ncurl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.37/mdbook-v0.4.37-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=bin\necho \"$(pwd)/bin\" >> ${GITHUB_PATH}\n"
            },
            {
                "id": 5,
                "name": "Install mdbook-i18n-helpers",
                "run": "cargo install mdbook-i18n-helpers --locked --version 0.3.4\n"
            },
            {
                "id": 6,
                "name": "Report versions",
                "run": "rustup --version\nrustc -Vv\nmdbook --version\n"
            },
            {
                "id": 7,
                "name": "Run tests",
                "run": "mdbook test"
            },
            {
                "id": 8,
                "name": "Build HTML",
                "run": "mdbook build"
            },
            {
                "id": 9,
                "name": "Check for broken links",
                "run": "curl -sSLo linkcheck.sh \\\n  https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/linkcheck.sh\nsh linkcheck.sh --all rust-by-example\n"
            },
            {
                "id": 10,
                "name": "Build all translations",
                "run": "for po_lang in ${{ env.LANGUAGES }}; do\n  echo \"::group::Building $po_lang translation\"\n  # Set language and adjust site URL. Clear the redirects\n  # since they are in sync with the source files, not the\n  # translation.\n  MDBOOK_BOOK__LANGUAGE=$po_lang \\\n  mdbook build -d book/$po_lang\n  echo \"::endgroup::\"\ndone\n"
            },
            {
                "id": 11,
                "name": "Check all translations for broken links",
                "run": "for po_lang in ${{ env.LANGUAGES }}; do\n  MDBOOK_BOOK__LANGUAGE=$po_lang \\\n  sh linkcheck.sh --all rust-by-example\ndone\n"
            },
            {
                "id": 12,
                "name": "Upload Artifact",
                "run": "actions/upload-artifact@v3"
            }
        ],
        "rust-lang/crates.io": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "tj-actions/changed-files@d6babd6899969df1a11d14c368283ea4436bca78"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "tj-actions/changed-files@d6babd6899969df1a11d14c368283ea4436bca78"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "tj-actions/changed-files@d6babd6899969df1a11d14c368283ea4436bca78"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup component add rustfmt"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup component add clippy"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo fmt --check --all"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo clippy --all-targets --all-features --workspace"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo doc --no-deps --document-private-items"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo install cargo-deny --vers ${{ env.CARGO_DENY_VERSION }}"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo deny check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -v ${{ env.POSTGRES_VERSION }} -i -p"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "sudo systemctl start postgresql.service"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "sudo -u postgres psql -c \"ALTER USER postgres WITH PASSWORD 'postgres'\""
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo build --tests --workspace"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo test --workspace"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "curl -sL https://github.com/mozilla/grcov/releases/download/v${{ env.GRCOV_VERSION }}/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar xjf -"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "rustup component add llvm-tools"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "./grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore \"/*\" --ignore \"target/debug/build/**\" -o target/coverage.lcov"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm lint:hbs"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "pnpm lint:js"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "pnpm lint:deps"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "pnpm prettier:check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm percy exec -- pnpm test-coverage"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "pnpm test-coverage"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "pnpm install"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "pnpm playwright install chromium"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "pnpm percy exec -- pnpm e2e"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo build --package crates_io_smoke_test"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo run --package crates_io_smoke_test --quiet"
            }
        ],
        "rust-lang/flate2-rs": [
            {
                "id": 1,
                "name": "Build Fuzzers",
                "run": "google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master"
            },
            {
                "id": 2,
                "name": "Run Fuzzers",
                "run": "google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master"
            },
            {
                "id": 3,
                "name": "Upload Crash",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust (rustup)",
                "run": "rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo build"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "rustdoc --test README.md -L target/debug/deps --extern flate2=target/debug/libflate2.rlib --edition=2018"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo test"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo test --features zlib"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo test --features zlib --no-default-features"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "cargo test --features zlib-default --no-default-features"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "cargo test --features zlib-ng-compat --no-default-features"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "cargo test --features zlib-ng --no-default-features"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "cargo test --features zlib-rs --no-default-features"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "cargo test --features cloudflare_zlib --no-default-features"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "if ! cargo check --no-default-features 2>&1 | grep \"You need to choose\"; then \n  echo \"expected message stating a zlib backend must be chosen\"\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable && rustup default stable && rustup component add rustfmt"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo fmt -- --check"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo doc --all-features"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable && rustup default stable && rustup target add ${{ matrix.target }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo build --target ${{ matrix.target }}"
            }
        ],
        "rust-lang/git2-rs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust (rustup)",
                "run": "rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo test --no-default-features"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo test"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo run -p systest"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo test -p git2-curl"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable && rustup default stable && rustup component add rustfmt"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo fmt -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "jq --exit-status 'all(.result == \"success\")' <<< '${{ toJson(needs) }}'"
            },
            {
                "id": 2,
                "name": "Done",
                "run": "exit 0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Publish",
                "run": "./ci/publish.sh"
            }
        ],
        "rust-lang/glob": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Update rust",
                "run": "rustup update ${{ matrix.channel }} --no-self-update"
            },
            {
                "id": 3,
                "name": "Tests",
                "run": "cargo +${{ matrix.channel }} test --all"
            }
        ],
        "rust-lang/blog.rust-lang.org": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup override set ${{ env.RUST_VERSION }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup component add clippy"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "rustup component add rustfmt"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo clippy --workspace -- -D warnings"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo fmt --check --all"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup override set ${{ env.RUST_VERSION }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo run"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cp CNAME ./site/"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "touch site/.nojekyll"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e"
            }
        ],
        "rust-lang/cc-rs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust (rustup)",
                "run": "set -euxo pipefail\nrustup toolchain install ${{ matrix.rust }} --no-self-update --profile minimal --target ${{ matrix.target }}\nrustup default ${{ matrix.rust }}\n"
            },
            {
                "id": 3,
                "name": "Install g++-multilib",
                "run": "set -e\n# Remove the ubuntu-toolchain-r/test PPA, which is added by default.\n# Some packages were removed, and this is causing the g++multilib\n# install to fail. Similar issue:\n# https://github.com/scikit-learn/scikit-learn/issues/13928.\nsudo add-apt-repository --remove ppa:ubuntu-toolchain-r/test\nsudo apt-get update\nsudo apt-get install g++-multilib\n"
            },
            {
                "id": 4,
                "name": "add clang to path",
                "run": "echo \"C:\\msys64\\mingw64\\bin\" >> \"$GITHUB_PATH\"\necho -e \"AR=llvm-ar\\nRUSTFLAGS=-Clinker=lld-link\\nCC=${CC}\\nCXX=${CXX}\" >> \"$GITHUB_ENV\"\n"
            },
            {
                "id": 5,
                "name": "setup dev environment",
                "run": "ilammy/msvc-dev-cmd@v1"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo test ${{ matrix.no_run }} --workspace --target ${{ matrix.target }}"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "cargo test ${{ matrix.no_run }} --workspace --target ${{ matrix.target }} --release"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "cargo test ${{ matrix.no_run }} --workspace --target ${{ matrix.target }} --features parallel"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust (rustup)",
                "run": "set -euxo pipefail\nrustup toolchain install ${{ matrix.rust }} --no-self-update --profile minimal\nrustup component add rust-src --toolchain ${{ matrix.rust }}\nrustup default ${{ matrix.rust }}\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo test -Z build-std=std ${{ matrix.no_run }} --workspace --target ${{ matrix.target }}"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo test -Z build-std=std ${{ matrix.no_run }} --workspace --target ${{ matrix.target }} --release"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo test -Z build-std=std ${{ matrix.no_run }} --workspace --target ${{ matrix.target }} --features parallel"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install cuda-minimal-build-11-8",
                "run": "# https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=20.04&target_type=deb_network\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb\nsudo dpkg -i cuda-keyring_1.0-1_all.deb\nsudo apt-get update\nsudo apt-get -y install cuda-minimal-build-11-8\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Test 'cudart' feature",
                "run": "PATH=\"/usr/local/cuda/bin:$PATH\" cargo test --manifest-path dev-tools/cc-test/Cargo.toml --features test_cuda\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup toolchain install 1.63.0 --no-self-update --profile minimal\nrustup toolchain install nightly --no-self-update --profile minimal\nrustup default 1.63.0\n"
            },
            {
                "id": 3,
                "name": "Create Cargo.lock with minimal version",
                "run": "cargo +nightly update -Zminimal-versions"
            },
            {
                "id": 4,
                "name": "Cache downloaded crates since 1.63 is really slow in fetching",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo check --lib -p cc --locked"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo check --lib -p cc --locked --all-features"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup toolchain install stable --no-self-update --profile minimal --component rustfmt\nrustup default stable\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo clippy"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup toolchain install stable --no-self-update --profile minimal --component rustfmt\nrustup default stable\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo fmt -- --check"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Check semver",
                "run": "obi1kenobi/cargo-semver-checks-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Publish to crates.io",
                "run": "cargo publish\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Generate branch name",
                "run": "git checkout -b regenerate-target-info-${{ github.run_id }}\n"
            },
            {
                "id": 3,
                "name": "Install rust",
                "run": "rustup toolchain install stable nightly --no-self-update --profile minimal\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Regenerate target info",
                "run": "cargo run -p gen-target-info"
            },
            {
                "id": 6,
                "name": "Detect changes",
                "run": "echo \"count=$(git status --porcelain=v1 | wc -l)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 7,
                "name": "Commit and push changes",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit commit -am \"Regenerate target info\"\ngit push origin HEAD\n"
            },
            {
                "id": 8,
                "name": "Open pull request if needed",
                "run": "gh pr create --base main --title \"Update src/target_info.rs\" --body \"Automatically regenerated in CI\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Generate branch name",
                "run": "git checkout -b regenerate-windows-sys-${{ github.run_id }}\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Regenerate windows sys bindings",
                "run": "cargo run -p gen-windows-sys-binding"
            },
            {
                "id": 5,
                "name": "Detect changes",
                "run": "echo \"count=$(git status --porcelain=v1 | wc -l)\" >> $GITHUB_OUTPUT"
            },
            {
                "id": 6,
                "name": "Commit and push changes",
                "run": "git config user.name github-actions\ngit config user.email github-actions@github.com\ngit commit -am \"Regenerate windows sys bindings\"\ngit push origin HEAD\n"
            },
            {
                "id": 7,
                "name": "Open pull request if needed",
                "run": "gh pr create --base main --title \"Regenerate windows sys bindings\" --body \"Automatically regenerated in CI\"\n"
            }
        ],
        "rust-lang/libz-sys": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "XAMPPRocky/get-github-release@f014caa45687655545637a005866289b3af8c69e"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "msys2/setup-msys2@7efe20baefed56359985e327d329042cde2434ff"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "ci/set_rust_version.bash ${{ matrix.channel }} ${{ matrix.target }}"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "ci/test.bash cargo ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "ci/set_rust_version.bash ${{ matrix.channel }} ${{ matrix.target }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "ci/test.bash cargo ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "cargo test --all-features\ncargo run --manifest-path systest/Cargo.toml --all-features\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo test --no-default-features --features zlib-ng-no-cmake-experimental-community-maintained || echo \"::warning::failed to build libz-ng with --features zlib-ng-no-cmake-experimental-community-maintained\"\ncargo run --manifest-path systest/Cargo.toml --no-default-features --features zlib-ng-no-cmake-experimental-community-maintained || echo \"::warning::failed to run systest with --features zlib-ng-no-cmake-experimental-community-maintained\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "cargo package --all-features\ncargo package --no-default-features --features zlib-ng-no-cmake-experimental-community-maintained\ncargo package --no-default-features --features zlib-ng\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11"
            },
            {
                "id": 2,
                "name": "Download Cross",
                "run": "actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "chmod +x /tmp/cross"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "echo RUSTFLAGS=${RUSTFLAGS}\\ -Zlinker-features=-lld >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "ci/set_rust_version.bash ${{ matrix.channel }} ${{ matrix.target }}"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "ci/test.bash /tmp/cross ${{ matrix.target }}"
            }
        ],
        "rust-lang/pkg-config-rs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup component add rustfmt-preview"
            },
            {
                "id": 4,
                "name": "cargo fmt --all -- --check if stable",
                "run": "if [ \"${{ matrix.rust }}\" = \"stable\" ]; then\n  cargo fmt --all -- --check\nfi\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo build --verbose\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo test --verbose\n"
            }
        ],
        "rust-lang/cmake-rs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo test"
            },
            {
                "id": 4,
                "name": "Integration test",
                "run": "cargo test --manifest-path test-crate/Cargo.toml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable && rustup default stable && rustup component add rustfmt"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo fmt -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "taiki-e/install-action@v1"
            },
            {
                "id": 4,
                "name": "cross test",
                "run": "cross test -vv --target ${{ matrix.platform.target }}"
            },
            {
                "id": 5,
                "name": "cross build",
                "run": "cross build -vv --target ${{ matrix.platform.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "build",
                "run": "cargo build -vv --target ${{ matrix.platform.target }}"
            }
        ],
        "rust-lang/crates.io-index": [
            {
                "id": 1,
                "name": "Clone the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Switch the download endpoint",
                "run": "set -euo pipefail\n\n# Dynamically fetch the URL based on the choice the user made. The\n# first line calculates the environment variable name by\n# concatenating \"URL_\" and the part of the input before \":\". Then the\n# second line fetches the value of the variable with that name.\nvar_name=\"URL_$(echo \"${{ github.event.inputs.url }}\" | sed \"s/:.*//\")\"\nurl=\"${!var_name}\"\n\n# Use `jq` to update the `dl` field of the configuration file while\n# preserving the rest of the contents.\njq --arg url \"${url}\" '.dl = $url' config.json > updated-config.json\n\n# The GitHub API is used instead of `git commit`/`git push` to sign\n# the commit with GitHub's key. The sha of the previous `config.json`\n# is provided to make sure we don't override concurrent changes.\ncurl \\\n  --fail \\\n  -X PUT \\\n  -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n  -d \"{\n    \\\"message\\\": \\\"Switching download endpoint\\\",\n    \\\"content\\\": \\\"$(base64 -w0 updated-config.json)\\\",\n    \\\"sha\\\": \\\"$(git hash-object config.json)\\\"\n  }\" \\\n  https://api.github.com/repos/${{ github.repository }}/contents/config.json\n"
            }
        ],
        "rust-lang/this-week-in-rust": [
            {
                "id": 1,
                "name": "checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Python dependencies",
                "run": "py-actions/py-dependency-install@v3"
            },
            {
                "id": 3,
                "name": "inspect_links",
                "run": "python3 tools/inspect_links.py --num-warn 5"
            },
            {
                "id": 4,
                "name": "inspect_markdown",
                "run": "python3 tools/inspect_markdown.py --num-recent 5"
            }
        ],
        "rust-lang/rust-clippy": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install toolchain",
                "run": "rustup show active-toolchain"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "cargo build --tests --features deny-warnings,internal"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "cargo test --features deny-warnings,internal"
            },
            {
                "id": 5,
                "name": "Test clippy_lints",
                "run": "cargo test --features deny-warnings,internal"
            },
            {
                "id": 6,
                "name": "Test clippy_utils",
                "run": "cargo test --features deny-warnings"
            },
            {
                "id": 7,
                "name": "Test rustc_tools_util",
                "run": "cargo test --features deny-warnings"
            },
            {
                "id": 8,
                "name": "Test clippy_dev",
                "run": "cargo test --features deny-warnings"
            },
            {
                "id": 9,
                "name": "Test clippy-driver",
                "run": ".github/driver.sh"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Check Changelog",
                "run": "MESSAGE=$(git log --format=%B -n 1)\nPR=$(echo \"$MESSAGE\" | grep -o \"#[0-9]*\" | head -1 | sed -e 's/^#//')\nbody=$(curl -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -s \"https://api.github.com/repos/rust-lang/rust-clippy/pulls/$PR\" | \\\n  python -c \"import sys, json; print(json.load(sys.stdin)['body'])\")\noutput=$(grep \"^changelog:\\s*\\S\" <<< \"$body\" | sed \"s/changelog:\\s*//g\") || {\n  echo \"ERROR: PR body must contain 'changelog: ...'\"\n  exit 1\n}\nif [[ \"$output\" = \"none\" ]]; then\n  echo \"WARNING: changelog is 'none'\"\nelse\n  echo \"changelog: $output\"\nfi\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install i686 dependencies",
                "run": "sudo dpkg --add-architecture i386\nsudo apt-get update\nsudo apt-get install gcc-multilib zlib1g-dev:i386\n"
            },
            {
                "id": 3,
                "name": "Install toolchain",
                "run": "rustup set default-host ${{ matrix.host }}\nrustup show active-toolchain\n"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "cargo build --tests --features deny-warnings,internal"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "cargo test --features deny-warnings,internal"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "cargo test --features deny-warnings,internal -- --skip dogfood"
            },
            {
                "id": 7,
                "name": "Test clippy_lints",
                "run": "cargo test --features deny-warnings,internal"
            },
            {
                "id": 8,
                "name": "Test clippy_utils",
                "run": "cargo test --features deny-warnings"
            },
            {
                "id": 9,
                "name": "Test clippy_config",
                "run": "cargo test --features deny-warnings"
            },
            {
                "id": 10,
                "name": "Test rustc_tools_util",
                "run": "cargo test --features deny-warnings"
            },
            {
                "id": 11,
                "name": "Test clippy_dev",
                "run": "cargo test --features deny-warnings"
            },
            {
                "id": 12,
                "name": "Test clippy-driver",
                "run": ".github/driver.sh"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install toolchain",
                "run": "rustup show active-toolchain"
            },
            {
                "id": 3,
                "name": "Test metadata collection",
                "run": "cargo collect-metadata"
            },
            {
                "id": 4,
                "name": "Test lint_configuration.md is up-to-date",
                "run": "echo \"run \\`cargo collect-metadata\\` if this fails\"\ngit update-index --refresh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install toolchain",
                "run": "rustup show active-toolchain"
            },
            {
                "id": 3,
                "name": "Build Integration Test",
                "run": "cargo test --test integration --features integration --no-run"
            },
            {
                "id": 4,
                "name": "Extract Binaries",
                "run": "DIR=$CARGO_TARGET_DIR/debug\nfind $DIR/deps/integration-* -executable ! -type d | xargs -I {} mv {} $DIR/integration\nfind $DIR ! -executable -o -type d ! -path $DIR | xargs rm -rf\n"
            },
            {
                "id": 5,
                "name": "Upload Binaries",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install toolchain",
                "run": "rustup show active-toolchain"
            },
            {
                "id": 3,
                "name": "Download target dir",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 4,
                "name": "Make Binaries Executable",
                "run": "chmod +x $CARGO_TARGET_DIR/debug/*"
            },
            {
                "id": 5,
                "name": "Test ${{ matrix.integration }}",
                "run": "TOOLCHAIN=$(rustup show active-toolchain | cut -f1 -d' ')\nrustup run $TOOLCHAIN $CARGO_TARGET_DIR/debug/integration --show-output\n"
            },
            {
                "id": 1,
                "name": "Mark the job as successful",
                "run": "exit 0"
            },
            {
                "id": 1,
                "name": "Mark the job as a failure",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "cargo build --features deny-warnings"
            },
            {
                "id": 3,
                "name": "Test update_lints",
                "run": "cargo dev update_lints --check"
            },
            {
                "id": 4,
                "name": "Test fmt",
                "run": "cargo dev fmt --check"
            },
            {
                "id": 5,
                "name": "Test cargo dev new lint",
                "run": "cargo dev new_lint --name new_early_pass --pass early\ncargo dev new_lint --name new_late_pass --pass late\ncargo check\ngit reset --hard HEAD\n"
            },
            {
                "id": 1,
                "name": "Mark the job as successful",
                "run": "exit 0"
            },
            {
                "id": 1,
                "name": "Mark the job as a failure",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set tag name",
                "run": "TAG=$(basename ${{ github.ref }})\necho \"TAG_NAME=$TAG\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Set beta to true",
                "run": "echo \"BETA=true\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Use deploy files from master branch",
                "run": "git fetch --no-tags --prune --depth=1 origin master\ngit checkout origin/master -- .github/deploy.sh util/versions.py util/gh-pages/versions.html\n"
            },
            {
                "id": 6,
                "name": "cargo generate-lockfile",
                "run": "cargo generate-lockfile"
            },
            {
                "id": 7,
                "name": "Cache",
                "run": "Swatinem/rust-cache@v2.7.0"
            },
            {
                "id": 8,
                "name": "cargo collect-metadata",
                "run": "cargo collect-metadata"
            },
            {
                "id": 9,
                "name": "Deploy",
                "run": "eval \"$(ssh-agent -s)\"\nssh-add - <<< \"${{ secrets.DEPLOY_KEY }}\"\nbash .github/deploy.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Checkout base",
                "run": "git checkout HEAD^"
            },
            {
                "id": 3,
                "name": "Checkout current lintcheck",
                "run": "rm -rf lintcheck\ngit checkout ${{ github.sha }} -- lintcheck\n"
            },
            {
                "id": 4,
                "name": "Create cache key",
                "run": "echo \"key=lintcheck-base-${{ hashfiles('lintcheck/**') }}-$(git rev-parse HEAD)\" >> \"$GITHUB_OUTPUT\""
            },
            {
                "id": 5,
                "name": "Cache results",
                "run": "actions/cache@v4"
            },
            {
                "id": 6,
                "name": "Run lintcheck",
                "run": "cargo lintcheck --format json"
            },
            {
                "id": 7,
                "name": "Rename JSON file",
                "run": "mv lintcheck-logs/lintcheck_crates_logs.json lintcheck-logs/base.json"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Create cache key",
                "run": "echo \"key=lintcheck-head-${{ github.sha }}\" >> \"$GITHUB_OUTPUT\""
            },
            {
                "id": 3,
                "name": "Cache results",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Run lintcheck",
                "run": "cargo lintcheck --format json"
            },
            {
                "id": 5,
                "name": "Rename JSON file",
                "run": "mv lintcheck-logs/lintcheck_crates_logs.json lintcheck-logs/head.json"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Restore base JSON",
                "run": "actions/cache/restore@v4"
            },
            {
                "id": 3,
                "name": "Restore head JSON",
                "run": "actions/cache/restore@v4"
            },
            {
                "id": 4,
                "name": "Diff results",
                "run": "cargo lintcheck diff lintcheck-logs/base.json lintcheck-logs/head.json >> $GITHUB_STEP_SUMMARY"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install remark",
                "run": "npm install remark-cli remark-lint remark-lint-maximum-line-length@^3.1.3 remark-preset-lint-recommended remark-gfm"
            },
            {
                "id": 4,
                "name": "Install mdbook",
                "run": "mkdir mdbook\ncurl -Lf https://github.com/rust-lang/mdBook/releases/download/v0.4.34/mdbook-v0.4.34-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook\necho `pwd`/mdbook >> $GITHUB_PATH\n"
            },
            {
                "id": 5,
                "name": "Check *.md files",
                "run": "./node_modules/.bin/remark -u lint -f ."
            },
            {
                "id": 6,
                "name": "Linkcheck book",
                "run": "rustup toolchain install nightly --component rust-docs\ncurl https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/linkcheck.sh -o linkcheck.sh\nsh linkcheck.sh clippy --path ./book\n"
            },
            {
                "id": 7,
                "name": "Build mdbook",
                "run": "mdbook build book"
            },
            {
                "id": 1,
                "name": "Mark the job as successful",
                "run": "exit 0"
            },
            {
                "id": 1,
                "name": "Mark the job as a failure",
                "run": "exit 1"
            }
        ],
        "rust-lang/rust-installer": [
            {
                "id": 1,
                "name": "Checkout the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust stable",
                "run": "rustup toolchain update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Build the tool",
                "run": "cargo build"
            },
            {
                "id": 4,
                "name": "Execute the test suite",
                "run": "./test.sh"
            }
        ],
        "rust-lang/regex": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Install and configure Cross",
                "run": "# In the past, new releases of 'cross' have broken CI. So for now, we\n# pin it. We also use their pre-compiled binary releases because cross\n# has over 100 dependencies and takes a bit to compile.\ndir=\"$RUNNER_TEMP/cross-download\"\nmkdir \"$dir\"\necho \"$dir\" >> $GITHUB_PATH\ncd \"$dir\"\ncurl -LO \"https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz\"\ntar xf cross-x86_64-unknown-linux-musl.tar.gz\necho \"CARGO=cross\" >> $GITHUB_ENV\necho \"TARGET=--target ${{ matrix.target }}\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Show command used for Cargo",
                "run": "echo \"cargo command is: $CARGO\"\necho \"target flag is: $TARGET\"\n"
            },
            {
                "id": 5,
                "name": "Show CPU info for debugging",
                "run": "lscpu"
            },
            {
                "id": 6,
                "name": "Basic build",
                "run": "${{ env.CARGO }} build --verbose $TARGET"
            },
            {
                "id": 7,
                "name": "Build docs",
                "run": "${{ env.CARGO }} doc --verbose $TARGET"
            },
            {
                "id": 8,
                "name": "Run subset of tests",
                "run": "${{ env.CARGO }} test --verbose --test integration $TARGET"
            },
            {
                "id": 9,
                "name": "Build regex-syntax docs",
                "run": "${{ env.CARGO }} doc --verbose --manifest-path regex-syntax/Cargo.toml $TARGET"
            },
            {
                "id": 10,
                "name": "Run subset of regex-syntax tests",
                "run": "${{ env.CARGO }} test --verbose --manifest-path regex-syntax/Cargo.toml $TARGET"
            },
            {
                "id": 11,
                "name": "Build regex-automata docs",
                "run": "${{ env.CARGO }} doc --verbose --manifest-path regex-automata/Cargo.toml $TARGET"
            },
            {
                "id": 12,
                "name": "Run subset of regex-automata tests",
                "run": "${{ env.CARGO }} test --verbose --manifest-path regex-automata/Cargo.toml $TARGET"
            },
            {
                "id": 13,
                "name": "Run regex-lite tests",
                "run": "${{ env.CARGO }} test --verbose --manifest-path regex-lite/Cargo.toml $TARGET"
            },
            {
                "id": 14,
                "name": "Run regex-cli tests",
                "run": "${{ env.CARGO }} test --verbose --manifest-path regex-cli/Cargo.toml $TARGET"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Basic build",
                "run": "cargo build --verbose"
            },
            {
                "id": 4,
                "name": "Build docs",
                "run": "cargo doc --verbose"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Run full test suite",
                "run": "./test"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Run full test suite",
                "run": "./regex-automata/test"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Run full test suite",
                "run": "./regex-syntax/test"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Run full test suite",
                "run": "./regex-capi/test"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Run full test suite",
                "run": "cargo miri test --manifest-path regex-automata/Cargo.toml"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Check formatting",
                "run": "cargo fmt --all -- --check\n"
            }
        ],
        "rust-lang/log": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update ${{ matrix.rust }} --no-self-update\nrustup default ${{ matrix.rust }}\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo test --verbose"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo test --verbose --no-default-features"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo test --verbose --features std,serde,sval,sval_ref,value-bag,kv,kv_std,kv_sval,kv_serde"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo test --verbose --features serde"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo test --verbose --features std"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "cargo test --verbose --features kv"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "cargo test --verbose --features kv_sval"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "cargo test --verbose --features kv_serde"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "cargo test --verbose --features \"kv kv_std kv_sval kv_serde\""
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "cargo run --verbose --manifest-path test_max_level_features/Cargo.toml"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "cargo run --verbose --manifest-path test_max_level_features/Cargo.toml --release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable --no-self-update\nrustup default stable\nrustup component add rustfmt\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo fmt -- --check"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo fmt --manifest-path test_max_level_features/Cargo.toml -- --check"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo fmt --manifest-path tests/Cargo.toml -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable --no-self-update\nrustup default stable\nrustup component add clippy\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo clippy --verbose"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo clippy --verbose --manifest-path test_max_level_features/Cargo.toml"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo clippy --verbose --manifest-path tests/Cargo.toml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable --no-self-update\nrustup default stable\nrustup component add rust-docs\n"
            },
            {
                "id": 3,
                "name": "Run rustdoc",
                "run": "RUSTDOCFLAGS=\"-D warnings\" cargo doc --verbose --features std,serde,sval,sval_ref,value-bag,kv,kv_std,kv_sval,kv_serde"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly --no-self-update\nrustup default nightly\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo build --verbose -Z avoid-dev-deps --features kv"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo build --verbose -Z avoid-dev-deps --features \"kv std\""
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo build --verbose -Z avoid-dev-deps --features \"kv kv_sval\""
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo build --verbose -Z avoid-dev-deps --features \"kv kv_serde\""
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo build --verbose -Z avoid-dev-deps --features \"kv kv_std\""
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "cargo build --verbose -Z avoid-dev-deps --features \"kv kv_sval kv_serde\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly --no-self-update\nrustup default nightly\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo build --verbose -Z minimal-versions --features kv"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo build --verbose -Z minimal-versions --features \"kv std\""
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo build --verbose -Z minimal-versions --features \"kv kv_sval\""
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo build --verbose -Z minimal-versions --features \"kv kv_serde\""
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo build --verbose -Z minimal-versions --features \"kv kv_std\""
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "cargo build --verbose -Z minimal-versions --features \"kv kv_sval kv_serde\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update 1.60.0 --no-self-update\nrustup default 1.60.0\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo test --verbose --manifest-path tests/Cargo.toml\ncargo test --verbose --manifest-path tests/Cargo.toml --features kv\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable --no-self-update\nrustup default stable\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup target add thumbv6m-none-eabi riscv32imc-unknown-none-elf"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo build --verbose --target=thumbv6m-none-eabi"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo build --verbose --target=riscv32imc-unknown-none-elf"
            }
        ],
        "rust-lang/getopts": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo test"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo doc"
            }
        ],
        "rust-lang/libc": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Rust toolchain",
                "run": "TARGET=${{ matrix.target }} sh ./ci/install-rust.sh"
            },
            {
                "id": 3,
                "name": "Execute run-docker.sh",
                "run": "LIBC_CI=1 sh ./ci/run-docker.sh ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Rust toolchain",
                "run": "TARGET=${{ matrix.target }} sh ./ci/install-rust.sh"
            },
            {
                "id": 3,
                "name": "Execute run.sh",
                "run": "LIBC_CI=1 sh ./ci/run.sh ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Self-update rustup",
                "run": "rustup self update"
            },
            {
                "id": 3,
                "name": "Setup Rust toolchain",
                "run": "TARGET=${{ matrix.target }} sh ./ci/install-rust.sh"
            },
            {
                "id": 4,
                "name": "Execute run.sh",
                "run": "LIBC_CI=1 sh ./ci/run.sh ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Rust toolchain",
                "run": "sh ./ci/install-rust.sh"
            },
            {
                "id": 3,
                "name": "Check style",
                "run": "sh ci/style.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Rust toolchain",
                "run": "TARGET=${{ matrix.target }} sh ./ci/install-rust.sh"
            },
            {
                "id": 3,
                "name": "Execute run-docker.sh",
                "run": "LIBC_CI=1 sh ./ci/run-docker.sh ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Rust toolchain",
                "run": "TOOLCHAIN=nightly INSTALL_RUST_SRC=1 sh ./ci/install-rust.sh"
            },
            {
                "id": 3,
                "name": "Execute run-docker.sh",
                "run": "LIBC_CI=1 TOOLCHAIN=nightly LIBC_CI_ZBUILD_STD=1 sh ./ci/run-docker.sh ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Rust toolchain",
                "run": "sh ./ci/install-rust.sh"
            },
            {
                "id": 3,
                "name": "Execute run-docker.sh",
                "run": "LIBC_CI=1 sh ./ci/run-docker.sh switch"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Rust toolchain",
                "run": "TOOLCHAIN=${{ matrix.toolchain }} sh ./ci/install-rust.sh"
            },
            {
                "id": 3,
                "name": "Execute build.sh",
                "run": "LIBC_CI=1 TOOLCHAIN=${{ matrix.toolchain }} sh ./ci/build.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Rust toolchain",
                "run": "TOOLCHAIN=${{ matrix.target.toolchain }} sh ./ci/install-rust.sh"
            },
            {
                "id": 3,
                "name": "Execute build.sh",
                "run": "LIBC_CI=1 TOOLCHAIN=${{ matrix.target.toolchain }} sh ./ci/build.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Self-update rustup",
                "run": "rustup self update"
            },
            {
                "id": 3,
                "name": "Execute build.sh",
                "run": "LIBC_CI=1 TOOLCHAIN=${{ matrix.toolchain }} sh ./ci/build.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup Rust toolchain",
                "run": "TOOLCHAIN=nightly sh ./ci/install-rust.sh"
            },
            {
                "id": 3,
                "name": "Build with check-cfg",
                "run": "LIBC_CI=1 LIBC_CHECK_CFG=1 cargo build -Z unstable-options -Z check-cfg"
            },
            {
                "id": 1,
                "name": "check if any dependency failed",
                "run": "jq --exit-status 'all(.result == \"success\")' <<< '${{ toJson(needs) }}'"
            }
        ],
        "rust-lang/rust.vim": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Run tests",
                "run": "cd test && ./run-tests"
            }
        ],
        "rust-lang/rust-mode": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "jcs090218/setup-emacs@master"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "emacs-eask/setup-eask@master"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "make ci"
            }
        ],
        "rust-lang/rustc-perf": [
            {
                "id": 1,
                "name": "Checkout the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Run unit tests",
                "run": "cargo test --all"
            },
            {
                "id": 5,
                "name": "Lint check",
                "run": "cargo clippy --all -- -D warnings"
            },
            {
                "id": 6,
                "name": "Formatting check",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 8,
                "name": "Build Docker image",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 9,
                "name": "Deploy to production",
                "run": "rust-lang/simpleinfra/github-actions/upload-docker-image@master"
            },
            {
                "id": 1,
                "name": "Checkout the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install latest beta",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "cargo check",
                "run": "cargo check"
            },
            {
                "id": 5,
                "name": "Run unit tests",
                "run": "cargo test --all"
            },
            {
                "id": 1,
                "name": "Checkout the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install latest beta",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Configure environment",
                "run": "sudo apt-get update\nsudo apt-get install -y linux-tools-common linux-tools-generic linux-tools-`uname -r`\necho -1 | sudo tee /proc/sys/kernel/perf_event_paranoid\n"
            },
            {
                "id": 4,
                "name": "Install servo dependencies",
                "run": "sudo apt-get install -y llvm-dev clang libx11-dev python2.7 autoconf2.13 libjemalloc-dev"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 6,
                "name": "Build collector",
                "run": "cargo build -p collector"
            },
            {
                "id": 7,
                "name": "Check compile benchmarks",
                "run": "sh -x -c \"ci/check-compile-benchmarks.sh\""
            },
            {
                "id": 1,
                "name": "Checkout the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install latest beta",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Configure environment",
                "run": "sudo apt-get update\nsudo apt-get install -y linux-tools-common linux-tools-generic linux-tools-`uname -r`\necho -1 | sudo tee /proc/sys/kernel/perf_event_paranoid\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Build collector",
                "run": "cargo build -p collector"
            },
            {
                "id": 6,
                "name": "Check compile benchmarks",
                "run": "sh -x -c \"ci/check-compile-benchmarks.sh\""
            },
            {
                "id": 1,
                "name": "Checkout the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install latest beta",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Configure environment",
                "run": "sudo apt-get update\nsudo apt-get install -y linux-tools-common linux-tools-generic linux-tools-`uname -r`\necho -1 | sudo tee /proc/sys/kernel/perf_event_paranoid\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Build collector",
                "run": "cargo build -p collector"
            },
            {
                "id": 6,
                "name": "Check runtime benchmarks",
                "run": "sh -x -c \"ci/check-runtime-benchmarks.sh\""
            },
            {
                "id": 1,
                "name": "Checkout the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install latest beta",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Install Valgrind",
                "run": "git clone https://sourceware.org/git/valgrind.git\ncd valgrind\n# Version from May 2022\ngit checkout 74e180e3c4d9e6bb4b2a9cd22eca7703412c5d42\n./autogen.sh\n./configure --prefix=${PWD}/build\nmake -j2\nmake install\necho \"${PWD}/build/bin\" >> $GITHUB_PATH\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Install profilers",
                "run": "cargo install --version 0.4.12 cargo-llvm-lines"
            },
            {
                "id": 6,
                "name": "Configure environment",
                "run": "sudo apt-get update\nsudo apt-get install -y linux-tools-common linux-tools-generic linux-tools-`uname -r`\necho -1 | sudo tee /proc/sys/kernel/perf_event_paranoid\n"
            },
            {
                "id": 7,
                "name": "Build collector",
                "run": "cargo build -p collector"
            },
            {
                "id": 8,
                "name": "Check profiling",
                "run": "sh -x -c \"ci/check-profiling.sh\""
            },
            {
                "id": 1,
                "name": "Check out repository code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install stable",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Build site",
                "run": "cargo build --bin site"
            },
            {
                "id": 5,
                "name": "Connect to PostgreSQL",
                "run": "timeout 5s ./target/debug/site 'postgresql://postgres:postgres@localhost:5432/postgres' 2>&1 | tee -a log || true\ngrep -Fxq \"Loading complete but no data identified; exiting.\" log\n"
            },
            {
                "id": 6,
                "name": "Connect to SQLite",
                "run": "timeout 5s ./target/debug/site 2>&1 | tee -a log || true\ngrep -Fxq \"Loading complete but no data identified; exiting.\" log\n"
            },
            {
                "id": 7,
                "name": "Build Postgres to SQLite exporter",
                "run": "cargo build --bin postgres-to-sqlite"
            },
            {
                "id": 8,
                "name": "Export empty Postgres DB to SQLite",
                "run": "./target/debug/postgres-to-sqlite 'postgresql://postgres:postgres@localhost:5432/postgres' \"$(mktemp)\""
            },
            {
                "id": 9,
                "name": "Export empty Postgres DB to SQLite with date filter",
                "run": "./target/debug/postgres-to-sqlite --since-weeks-ago=1 'postgresql://postgres:postgres@localhost:5432/postgres' \"$(mktemp)\""
            },
            {
                "id": 10,
                "name": "Build SQLite to Postgres exporter",
                "run": "cargo build --bin sqlite-to-postgres"
            },
            {
                "id": 11,
                "name": "Export empty SQLite DB to Postgres",
                "run": "./target/debug/sqlite-to-postgres \"$(mktemp)\" 'postgresql://postgres:postgres@localhost:5432/postgres'"
            },
            {
                "id": 1,
                "name": "Check out repository code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install stable",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Install nightly",
                "run": "rustup install nightly"
            },
            {
                "id": 4,
                "name": "Configure environment",
                "run": "sudo apt-get update\nsudo apt-get install -y linux-tools-common linux-tools-generic linux-tools-`uname -r`\necho -1 | sudo tee /proc/sys/kernel/perf_event_paranoid\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 6,
                "name": "Build collector",
                "run": "cargo build -p collector"
            },
            {
                "id": 7,
                "name": "Gather data",
                "run": "cargo run --bin collector bench_local `which rustc` --include syn --id version1 \\\n  --self-profile \\\n  --db postgresql://postgres:postgres@127.0.0.1:5432/postgres\ncargo run --bin collector bench_local `rustup +nightly which rustc` --include syn --id version2 \\\n  --self-profile \\\n  --db postgresql://postgres:postgres@127.0.0.1:5432/postgres\n"
            },
            {
                "id": 8,
                "name": "Build site",
                "run": "cargo build --bin site"
            },
            {
                "id": 9,
                "name": "Setup Python",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 10,
                "name": "Install Python dependencies",
                "run": "python3 -m pip install msgpack requests"
            },
            {
                "id": 11,
                "name": "Query compare page data",
                "run": "DATABASE_URL=postgresql://postgres:postgres@127.0.0.1:5432/postgres cargo run --bin site &\npython3 ci/check-site.py version1 version2\n"
            },
            {
                "id": 1,
                "name": "Set version",
                "run": "echo \"RUSTC_PERF_VERSION=$(date +'%Y-%m-%d')\" >> $GITHUB_ENV\n"
            },
            {
                "id": 2,
                "name": "Checkout the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install stable toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 6,
                "name": "Compile frontend",
                "run": "cd site/frontend\nnpm ci\nnpm run build\n"
            },
            {
                "id": 7,
                "name": "Compile site",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 8,
                "name": "Prepare archive",
                "run": "export ARCHIVE_NAME=rustc-perf-${{ env.RUSTC_PERF_VERSION }}-linux-x64.tar.gz\ncp target/release/site rustc-perf-site\ntar -czvf $ARCHIVE_NAME rustc-perf-site\necho \"ARCHIVE_NAME=${ARCHIVE_NAME}\" >> $GITHUB_ENV\n"
            },
            {
                "id": 9,
                "name": "Create release",
                "run": "ncipollo/release-action@v1"
            }
        ],
        "rust-lang/rustfmt": [
            {
                "id": 1,
                "name": "checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "install rustup",
                "run": "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh\nsh rustup-init.sh -y --default-toolchain none\nrustup target add x86_64-unknown-linux-gnu\n"
            },
            {
                "id": 3,
                "name": "check diff",
                "run": "bash ${GITHUB_WORKSPACE}/ci/check_diff.sh ${{ github.event.inputs.clone_url }} ${{ github.event.inputs.branch_name }} ${{ github.event.inputs.commit_hash || github.event.inputs.branch_name }} ${{ github.event.inputs.rustfmt_configs }}"
            },
            {
                "id": 1,
                "name": "checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "install rustup",
                "run": "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh\nsh rustup-init.sh -y --default-toolchain none\n"
            },
            {
                "id": 3,
                "name": "run integration tests",
                "run": "./ci/integration.sh"
            },
            {
                "id": 1,
                "name": "checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "install rustup",
                "run": "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh\nsh rustup-init.sh -y --default-toolchain none\nrustup target add ${{ matrix.target }}\n"
            },
            {
                "id": 3,
                "name": "Build and Test",
                "run": "./ci/build_and_test.sh"
            },
            {
                "id": 1,
                "name": "checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "install rustup",
                "run": "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh\nsh rustup-init.sh -y --default-toolchain none\nrustup target add ${{ matrix.target }}\n"
            },
            {
                "id": 3,
                "name": "Build and Test",
                "run": "./ci/build_and_test.sh"
            },
            {
                "id": 1,
                "name": "checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "install rustup",
                "run": "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh\nsh rustup-init.sh -y --default-toolchain none\nrustup target add x86_64-unknown-linux-gnu\n"
            },
            {
                "id": 3,
                "name": "document rustfmt",
                "run": "cargo doc -Zskip-rustdoc-fingerprint --no-deps -p rustfmt-nightly -p rustfmt-config_proc_macro"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "install rustup",
                "run": "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh\nsh rustup-init.sh -y --default-toolchain none\nrustup target add ${{ matrix.target }}\n"
            },
            {
                "id": 3,
                "name": "Add mingw64 to path for x86_64-gnu",
                "run": "echo \"C:\\msys64\\mingw64\\bin\" >> $GITHUB_PATH"
            },
            {
                "id": 4,
                "name": "Build release binaries",
                "run": "cargo build --release"
            },
            {
                "id": 5,
                "name": "Build archive",
                "run": "staging=\"rustfmt_${{ matrix.build }}_${{ github.event.release.tag_name }}\"\nmkdir -p \"$staging\"\n\ncp {README.md,Configurations.md,CHANGELOG.md,LICENSE-MIT,LICENSE-APACHE} \"$staging/\"\n\nif [ \"${{ matrix.os }}\" = \"windows-latest\" ]; then\n  cp target/release/{rustfmt.exe,cargo-fmt.exe,rustfmt-format-diff.exe,git-rustfmt.exe} \"$staging/\"\n  7z a \"$staging.zip\" \"$staging\"\n  echo \"ASSET=$staging.zip\" >> $GITHUB_ENV\nelse\n  cp target/release/{rustfmt,cargo-fmt,rustfmt-format-diff,git-rustfmt} \"$staging/\"\n  tar czf \"$staging.tar.gz\" \"$staging\"\n  echo \"ASSET=$staging.tar.gz\" >> $GITHUB_ENV\nfi\n"
            },
            {
                "id": 6,
                "name": "Upload Release Asset",
                "run": "actions/upload-release-asset@v1"
            },
            {
                "id": 1,
                "name": "disable git eol translation",
                "run": "git config --global core.autocrlf false"
            },
            {
                "id": 2,
                "name": "checkout",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install Rustup using win.rustup.rs",
                "run": "# Disable the download progress bar which can cause perf issues\n$ProgressPreference = \"SilentlyContinue\"\nInvoke-WebRequest https://win.rustup.rs/ -OutFile rustup-init.exe\n.\\rustup-init.exe -y --default-host=x86_64-pc-windows-msvc --default-toolchain=none\ndel rustup-init.exe\nrustup target add ${{ matrix.target }}\n"
            },
            {
                "id": 4,
                "name": "Add mingw32 to path for i686-gnu",
                "run": "echo \"C:\\msys64\\mingw32\\bin\" >> $GITHUB_PATH\n"
            },
            {
                "id": 5,
                "name": "Add mingw64 to path for x86_64-gnu",
                "run": "echo \"C:\\msys64\\mingw64\\bin\" >> $GITHUB_PATH"
            },
            {
                "id": 6,
                "name": "Build and Test",
                "run": "ci\\build_and_test.bat"
            }
        ],
        "rust-lang/backtrace-rs": [
            {
                "id": 1,
                "name": "Print info",
                "run": "echo \"Current SHA: $HEAD_COMMIT\"\necho \"Base SHA: $BASE_COMMIT\"\n"
            },
            {
                "id": 2,
                "name": "Clone backtrace to access Github action",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Clone Rustc",
                "run": "actions/checkout@v3"
            },
            {
                "id": 4,
                "name": "Set up std repository and backtrace submodule for size test",
                "run": "# Bootstrap config\ncat <<EOF > config.toml\n[llvm]\ndownload-ci-llvm = true\n[rust]\nincremental = false\nEOF\n\n# Test program source\ncat <<EOF > $TEST_MAIN_RS\nfn main() {\n  panic!();\n}\nEOF\n\ngit submodule update --init library/backtrace\n\ncd library/backtrace\ngit remote add head-pr \"https://github.com/$PR_SOURCE_REPO\"\ngit fetch --all\n"
            },
            {
                "id": 5,
                "name": "Build binary with base version of backtrace",
                "run": "./backtrace/.github/actions/build-with-patched-std"
            },
            {
                "id": 6,
                "name": "Build binary with PR version of backtrace",
                "run": "./backtrace/.github/actions/build-with-patched-std"
            },
            {
                "id": 7,
                "name": "Write sizes to file",
                "run": "actions/github-script@v6"
            },
            {
                "id": 8,
                "name": "Upload size data",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Download size data",
                "run": "actions/download-artifact@v3"
            },
            {
                "id": 3,
                "name": "Analyze and report size changes",
                "run": "./.github/actions/report-code-size-changes"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust (rustup)",
                "run": "rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "echo RUSTFLAGS=-Dwarnings >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Force frame pointers",
                "run": "echo RUSTFLAGS=\"-Cforce-frame-pointers $RUSTFLAGS\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Enable collapse_debuginfo based on version",
                "run": "echo RUSTFLAGS=\"--cfg dbginfo=\\\"collapsible\\\" $RUSTFLAGS\" >> $GITHUB_ENV"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo build"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo test"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "cargo test --features \"serialize-serde\""
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "cargo test --features \"verify-winapi\""
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "cargo test --features \"cpp_demangle\""
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "cargo test --no-default-features"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "cargo test --no-default-features --features \"std\""
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "cargo test --manifest-path crates/cpp_smoke_test/Cargo.toml"
            },
            {
                "id": 14,
                "name": "Step 14",
                "run": "cargo test --manifest-path crates/macos_frames_test/Cargo.toml"
            },
            {
                "id": 15,
                "name": "Step 15",
                "run": "cargo test --manifest-path crates/without_debuginfo/Cargo.toml"
            },
            {
                "id": 16,
                "name": "Step 16",
                "run": "cargo test --manifest-path crates/line-tables-only/Cargo.toml"
            },
            {
                "id": 17,
                "name": "Step 17",
                "run": "cargo test"
            },
            {
                "id": 18,
                "name": "Step 18",
                "run": "cargo clean && cargo test"
            },
            {
                "id": 19,
                "name": "Step 19",
                "run": "cargo clean && cargo test"
            },
            {
                "id": 20,
                "name": "Step 20",
                "run": "cargo clean && cargo test"
            },
            {
                "id": 21,
                "name": "Step 21",
                "run": "cargo clean && cargo test"
            },
            {
                "id": 22,
                "name": "Step 22",
                "run": "cargo clean && cargo test"
            },
            {
                "id": 23,
                "name": "Step 23",
                "run": "./ci/debuglink-docker.sh"
            },
            {
                "id": 24,
                "name": "Test that backtraces are symbolicated without absolute PDB path",
                "run": "cargo clean && cargo test"
            },
            {
                "id": 25,
                "name": "Step 25",
                "run": "cargo build --manifest-path crates/as-if-std/Cargo.toml"
            },
            {
                "id": 26,
                "name": "Step 26",
                "run": "cargo build --manifest-path crates/as-if-std/Cargo.toml --no-default-features"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable --no-self-update && rustup default stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "echo RUSTFLAGS=-Dwarnings >> $GITHUB_ENV"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "rustup target add aarch64-pc-windows-msvc"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo test --no-run --target aarch64-pc-windows-msvc"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo test --no-run --target aarch64-pc-windows-msvc --features verify-winapi"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup target add ${{ matrix.target }}"
            },
            {
                "id": 3,
                "name": "Build tests",
                "run": "export RUSTFLAGS=-Dwarnings\nexport SDK_PATH=`xcrun --show-sdk-path --sdk ${{ matrix.sdk }}`\nexport RUSTFLAGS=\"-C link-arg=-isysroot -C link-arg=$SDK_PATH\"\ncargo test --no-run --target ${{ matrix.target }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable --no-self-update && rustup default stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup target add ${{ matrix.target }}"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo generate-lockfile"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "echo RUSTFLAGS=-Dwarnings >> $GITHUB_ENV"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "./ci/run-docker.sh ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable --no-self-update && rustup default stable && rustup component add rustfmt"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly --no-self-update && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup target add ${{ matrix.target }}"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "echo RUSTFLAGS=-Dwarnings >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo build --target ${{ matrix.target }}"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo build --manifest-path crates/as-if-std/Cargo.toml --target ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update 1.65.0 --no-self-update && rustup default 1.65.0"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo build"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Miri",
                "run": "rustup toolchain install nightly --component miri\nrustup override set nightly\ncargo miri setup\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "MIRIFLAGS=\"-Zmiri-disable-isolation\" cargo miri test"
            }
        ],
        "rust-lang/mdBook": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "ci/install-rust.sh stable ${{ matrix.target }}"
            },
            {
                "id": 3,
                "name": "Build asset",
                "run": "ci/make-release-asset.sh ${{ matrix.os }} ${{ matrix.target }}"
            },
            {
                "id": 4,
                "name": "Update release with new asset",
                "run": "gh release upload $MDBOOK_TAG $MDBOOK_ASSET"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust (rustup)",
                "run": "rustup update stable --no-self-update && rustup default stable"
            },
            {
                "id": 3,
                "name": "Build book",
                "run": "cargo run -- build guide"
            },
            {
                "id": 4,
                "name": "Deploy to GitHub",
                "run": "touch guide/book/.nojekyll\ncurl -LsSf https://raw.githubusercontent.com/rust-lang/simpleinfra/master/setup-deploy-keys/src/deploy.rs | rustc - -o /tmp/deploy\ncd guide/book\n/tmp/deploy\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust (rustup)",
                "run": "rustup update stable --no-self-update && rustup default stable"
            },
            {
                "id": 3,
                "name": "Publish",
                "run": "cargo publish --no-verify"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "bash ci/install-rust.sh ${{ matrix.rust }} ${{ matrix.target }}"
            },
            {
                "id": 3,
                "name": "Build and run tests",
                "run": "cargo test --locked --target ${{ matrix.target }}"
            },
            {
                "id": 4,
                "name": "Test no default",
                "run": "cargo test --no-default-features --target ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "bash ci/install-rust.sh stable aarch64-unknown-linux-musl"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "cargo build --locked --target aarch64-unknown-linux-musl"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable && rustup default stable && rustup component add rustfmt"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo fmt --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "jq --exit-status 'all(.result == \"success\")' <<< '${{ toJson(needs) }}'"
            },
            {
                "id": 2,
                "name": "Done",
                "run": "exit 0"
            }
        ],
        "rust-lang/cfg-if": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Install Rust ${{ matrix.rust }}",
                "run": "rustup self update\nrustup update ${{ matrix.rust }}\nrustup default ${{ matrix.rust }}\nrustc -vV\n"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "cargo test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Install Rust Stable",
                "run": "rustup update stable\nrustup default stable\nrustup component add rustfmt\n"
            },
            {
                "id": 3,
                "name": "Run rustfmt",
                "run": "cargo fmt -- --check"
            }
        ],
        "rust-lang/stacker": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust ${{ matrix.rust_toolchain }}",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Test ${{ matrix.manifest}} with ${{ matrix.mode }}",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 4,
                "name": "Test ${{ matrix.manifest}} examples with ${{ matrix.mode }}",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "msys2/setup-msys2@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "msys2/setup-msys2@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "echo \"c:/msys64/bin\" | Out-File -FilePath $env:GITHUB_PATH -Append"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "echo \"${{ matrix.mingw_path }}\" | Out-File -FilePath $env:GITHUB_PATH -Append"
            },
            {
                "id": 5,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Build ${{ matrix.rust_target }}",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust nightly",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Build ${{ matrix.rust_target }}",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Add toolchain shims",
                "run": "set -eux\nsudo ln -s clang-12 /usr/bin/clang-cl\nsudo ln -s llvm-ar-12 /usr/bin/llvm-lib\nsudo ln -s lld-link-12 /usr/bin/lld-link\n"
            },
            {
                "id": 4,
                "name": "Install Windows SDK",
                "run": "set -eux\nxwin_version=${{ matrix.xwin_version }}\nxwin_prefix=\"xwin-$xwin_version-x86_64-unknown-linux-musl\"\n\n# Install xwin to cargo/bin via github release. Note you could also just use `cargo install xwin`.\ncurl --fail -L https://github.com/Jake-Shadle/xwin/releases/download/$xwin_version/$xwin_prefix.tar.gz | tar -xzv -C /home/runner/.cargo/bin --strip-components=1 $xwin_prefix/xwin\n\n# Splat the CRT and SDK files to /tmp/xwin/crt and /tmp/xwin/sdk respectively\nxwin --accept-license 1 splat --output /tmp/xwin\n"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "set -eux\ncargo build --target ${{ matrix.rust_target }} --manifest-path ${{ matrix.manifest }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Install Rust nightly",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "curl -Lf https://github.com/bytecodealliance/wasmtime/releases/download/v0.19.0/wasmtime-v0.19.0-x86_64-linux.tar.xz | tar xJf - -C ${{ runner.tool_cache }}\necho \"${{ runner.tool_cache }}/wasmtime-v0.19.0-x86_64-linux\" >> $GITHUB_PATH\necho \"CARGO_TARGET_WASM32_WASI_RUNNER=wasmtime run --\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo test --target wasm32-wasi --all -- --nocapture"
            }
        ],
        "rust-lang/chalk": [
            {
                "id": 1,
                "name": "Checkout the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Build chalk-engine without default features",
                "run": "cd chalk-engine && cargo build --no-default-features"
            },
            {
                "id": 4,
                "name": "Build chalk-engine with all features",
                "run": "cd chalk-engine && cargo build --all-features"
            },
            {
                "id": 5,
                "name": "Execute tests for all crates in the workspace",
                "run": "cargo test --all"
            },
            {
                "id": 6,
                "name": "Install mdbook",
                "run": "cd book\ncurl -L https://github.com/rust-lang/mdBook/releases/download/v0.4.5/mdbook-v0.4.5-x86_64-unknown-linux-gnu.tar.gz | tar xz\n# Add the book directory to the $PATH\necho \"$GITHUB_WORKSPACE/book\" >> $GITHUB_PATH\n"
            },
            {
                "id": 7,
                "name": "Install mdbook-mermaid",
                "run": "cargo install mdbook-mermaid"
            },
            {
                "id": 8,
                "name": "Execute tests for Chalk book",
                "run": "cd book && ./mdbook test"
            },
            {
                "id": 9,
                "name": "Build Chalk book",
                "run": "cd book && ./mdbook build"
            },
            {
                "id": 10,
                "name": "Build documentation for all crates in the workspace",
                "run": "cargo doc --all --document-private-items --no-deps"
            },
            {
                "id": 11,
                "name": "Upload documentation to GitHub Pages",
                "run": "touch target/doc/.nojekyll\ncurl -LsSf https://raw.githubusercontent.com/rust-lang/simpleinfra/master/setup-deploy-keys/src/deploy.rs | rustc - -o /tmp/deploy\ncp -r book/book/html target/doc/book\n(cd target/doc && /tmp/deploy)\n"
            },
            {
                "id": 1,
                "name": "Checkout the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Check formatting of all crates in the workspace",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 1,
                "name": "Checkout the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install mdbook",
                "run": "cd book\ncurl -L https://github.com/rust-lang/mdBook/releases/download/v0.4.5/mdbook-v0.4.5-x86_64-unknown-linux-gnu.tar.gz | tar xz\n# Add the book directory to the $PATH\necho \"$GITHUB_WORKSPACE/book\" >> $GITHUB_PATH\n"
            },
            {
                "id": 3,
                "name": "Install mdbook-linkcheck",
                "run": "cd book && curl -L https://github.com/Michael-F-Bryan/mdbook-linkcheck/releases/download/v0.7.0/mdbook-linkcheck-v0.7.0-x86_64-unknown-linux-gnu.tar.gz | tar xz"
            },
            {
                "id": 4,
                "name": "Build Chalk book",
                "run": "cd book && ./mdbook build"
            },
            {
                "id": 1,
                "name": "Mark the job as successful",
                "run": "exit 0"
            },
            {
                "id": 1,
                "name": "Mark the job as a failure",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Install cargo-workspaces",
                "run": "actions-rs/install@v0.1"
            },
            {
                "id": 4,
                "name": "Install Node (for changelog generation)",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 5,
                "name": "Release",
                "run": "# Check if we can skip releasing a new version\n# (there are no changes and the job was not manually triggered)\nexport CHANGED=$(cargo workspaces changed --include-merged-tags --ignore-changes \"**/Cargo.toml\")\nif [[ -z \"$CHANGED\" && \"$GITHUB_EVENT_NAME\" != \"workflow_dispatch\" ]]; then\n  # Nothing has changed, so don't publish a new version\n  echo \"No changes detected, skipping publish.\"\n  exit 0\nfi\n\n# Update version\ngit config --global user.email \"runner@gha.local\"\ngit config --global user.name \"Github Action\"\ncargo workspaces -v version -ay --force '*' --include-merged-tags --no-git-commit --exact patch\nexport VERSION=$(cargo pkgid | sed -E 's/.*#(.*)/\\1/g')\n\n# Update changelog\nnpm install -g auto-changelog@2.2.1\nauto-changelog --output RELEASES.md \\\n               --starting-version v0.11.0 \\\n               --latest-version \"$VERSION\" \\\n               --merge-pattern 'Auto merge of #(\\d+) - .+\\n\\n(.+)' \\\n               --template releases-template.hbs\n\n# Commit and publish\ngit commit -am \"Release $VERSION\"\ngit tag \"v$VERSION\"\ncargo workspaces -v publish --from-git --skip-published\ngit push --tags\ncargo workspaces -v version -ay --force '*' --include-merged-tags --no-git-tag --pre-id dev preminor\n"
            }
        ],
        "rust-lang/rustlings": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "cargo clippy -- --deny warnings"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "DavidAnson/markdownlint-cli2-action@v9"
            },
            {
                "id": 4,
                "name": "Run cargo fmt",
                "run": "cargo fmt --all -- --check\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Run cargo test",
                "run": "cargo test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Install and run oranda",
                "run": "curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/oranda/releases/download/v0.3.1/oranda-installer.sh | sh\noranda build\n"
            },
            {
                "id": 5,
                "name": "Deploy to Github Pages",
                "run": "JamesIves/github-pages-deploy-action@v4.4.1"
            }
        ],
        "rust-lang/glacier": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Configure Git",
                "run": "git config --global user.name \"rustbot\"\ngit config --global user.email \"rustbot@users.noreply.github.com\"\n"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./.github/actions/build"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./target/release/autofix"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "./.github/actions/build"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./target/release/labeler"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "tab character check",
                "run": "if grep -P '\\t' -rn --color ices fixed; then exit 1; fi"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./.github/actions/build"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./target/release/glacier"
            }
        ],
        "rust-lang/miri": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Show Rust version (stable toolchain)",
                "run": "rustup show\nrustc -Vv\ncargo -V\n"
            },
            {
                "id": 3,
                "name": "Add cache for cargo",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Install tools",
                "run": "cargo install -f rustup-toolchain-install-master hyperfine"
            },
            {
                "id": 5,
                "name": "Install miri toolchain",
                "run": "if [[ ${{ github.event_name }} == 'schedule' ]]; then\n  echo \"Building against latest rustc git version\"\n  git ls-remote https://github.com/rust-lang/rust/ HEAD | cut -f 1 > rust-version\nfi\n./miri toolchain --host ${{ matrix.host_target }}\n"
            },
            {
                "id": 6,
                "name": "Show Rust version (miri toolchain)",
                "run": "rustup show\nrustc -Vv\ncargo -V\n"
            },
            {
                "id": 7,
                "name": "Check clippy",
                "run": "./miri clippy -- -D warnings"
            },
            {
                "id": 8,
                "name": "Test Miri",
                "run": "./ci/ci.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Add cache for cargo",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Install rustup-toolchain-install-master",
                "run": "cargo install -f rustup-toolchain-install-master"
            },
            {
                "id": 4,
                "name": "Install \"master\" toolchain",
                "run": "if [[ ${{ github.event_name }} == 'schedule' ]]; then\n  echo \"Building against latest rustc git version\"\n  git ls-remote https://github.com/rust-lang/rust/ HEAD | cut -f 1 > rust-version\nfi\n./miri toolchain\n"
            },
            {
                "id": 5,
                "name": "Show Rust version",
                "run": "rustup show\nrustc -Vv\ncargo -V\n"
            },
            {
                "id": 6,
                "name": "rustfmt",
                "run": "./miri fmt --check"
            },
            {
                "id": 7,
                "name": "clippy",
                "run": "./miri clippy -- -D warnings"
            },
            {
                "id": 8,
                "name": "clippy (no features)",
                "run": "./miri clippy --no-default-features -- -D warnings"
            },
            {
                "id": 9,
                "name": "clippy (all features)",
                "run": "./miri clippy --all-features -- -D warnings"
            },
            {
                "id": 10,
                "name": "rustdoc",
                "run": "RUSTDOCFLAGS=\"-Dwarnings\" ./miri cargo doc --document-private-items"
            },
            {
                "id": 1,
                "name": "mark the job as a success",
                "run": "exit 0"
            },
            {
                "id": 1,
                "name": "mark the job as a failure",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Install zulip-send",
                "run": "pip3 install zulip"
            },
            {
                "id": 2,
                "name": "Send Zulip notification",
                "run": "~/.local/bin/zulip-send --user $ZULIP_BOT_EMAIL --api-key $ZULIP_API_TOKEN --site https://rust-lang.zulipchat.com \\\n  --stream miri --subject \"Miri Build Failure ($(date -u +%Y-%m))\" \\\n  --message 'Dear @*T-miri*,\n\nIt would appear that the [Miri cron job build]('\"https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"') failed.\n\nThis likely means that rustc changed the miri directory and\nwe now need to do a [`./miri rustc-pull`](https://github.com/rust-lang/miri/blob/master/CONTRIBUTING.md#importing-changes-from-the-rustc-repo).\n\nWould you mind investigating this issue?\n\nThanks in advance!\nSincerely,\nThe Miri Cronjobs Bot'\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "install josh-proxy",
                "run": "RUSTFLAGS=\"--cap-lints warn\" cargo +stable install josh-proxy --git https://github.com/josh-project/josh --tag r23.12.04"
            },
            {
                "id": 5,
                "name": "setup bot git name and email",
                "run": "git config --global user.name 'The Miri Cronjob Bot'\ngit config --global user.email 'miri@cron.bot'\n"
            },
            {
                "id": 6,
                "name": "get changes from rustc",
                "run": "./miri rustc-pull"
            },
            {
                "id": 7,
                "name": "Install rustup-toolchain-install-master",
                "run": "cargo install -f rustup-toolchain-install-master"
            },
            {
                "id": 8,
                "name": "format changes (if any)",
                "run": "./miri toolchain\n./miri fmt --check || (./miri fmt && git commit -am \"fmt\")\n"
            },
            {
                "id": 9,
                "name": "Push changes to a branch",
                "run": "BRANCH=\"rustup-$(date -u +%Y-%m-%d)\"\ngit switch -c $BRANCH\ngit push -u origin $BRANCH\n"
            },
            {
                "id": 10,
                "name": "Create Pull Request",
                "run": "PR=$(gh pr create -B master --title 'Automatic Rustup' --body '')\n~/.local/bin/zulip-send --user $ZULIP_BOT_EMAIL --api-key $ZULIP_API_TOKEN --site https://rust-lang.zulipchat.com \\\n  --stream miri --subject \"Miri Build Failure ($(date -u +%Y-%m))\" \\\n  --message \"A PR doing a rustc-pull [has been automatically created]($PR) for your convenience.\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Build the sysroots",
                "run": "cargo install -f rustup-toolchain-install-master\n./miri toolchain -c rust-docs # Docs are the only place targets are separated by tier\n./miri install\npython3 -m pip install beautifulsoup4\n./ci/build-all-targets.sh\n"
            },
            {
                "id": 3,
                "name": "Upload build errors",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Download build errors",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 2,
                "name": "Install zulip-send",
                "run": "pip3 install zulip"
            },
            {
                "id": 3,
                "name": "Send Zulip notification",
                "run": "tar xf failures.tar.gz\nls failures\n~/.local/bin/zulip-send --user $ZULIP_BOT_EMAIL --api-key $ZULIP_API_TOKEN --site https://rust-lang.zulipchat.com \\\n  --stream miri --subject \"Sysroot Build Errors ($(date -u +%Y-%m))\" \\\n  --message 'It would appear that the [Miri sysroots cron job build]('\"https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"') failed to build these targets:\n'\"$(ls failures)\"'\n\nWould you mind investigating this issue?\n\nThanks in advance!\nSincerely,\nThe Miri Cronjobs Bot'\n"
            }
        ],
        "rust-lang/book": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Update rustup",
                "run": "rustup self update"
            },
            {
                "id": 3,
                "name": "Install Rust",
                "run": "rustup set profile minimal\nrustup toolchain install 1.78 -c rust-docs\nrustup default 1.78\n"
            },
            {
                "id": 4,
                "name": "Install mdbook",
                "run": "mkdir bin\ncurl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.21/mdbook-v0.4.21-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=bin\necho \"$(pwd)/bin\" >> ${GITHUB_PATH}\n"
            },
            {
                "id": 5,
                "name": "Report versions",
                "run": "rustup --version\nrustc -Vv\nmdbook --version\n"
            },
            {
                "id": 6,
                "name": "Run tests",
                "run": "mdbook test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Update rustup",
                "run": "rustup self update"
            },
            {
                "id": 3,
                "name": "Install Rust",
                "run": "rustup set profile minimal\nrustup toolchain install 1.76 -c rust-docs\nrustup default 1.76\n"
            },
            {
                "id": 4,
                "name": "Run `tools` package tests",
                "run": "cargo test\n"
            },
            {
                "id": 5,
                "name": "Run `mdbook-trpl-note` package tests",
                "run": "cargo test\n"
            },
            {
                "id": 6,
                "name": "Run `mdbook-trpl-listing` package tests",
                "run": "cargo test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Update rustup",
                "run": "rustup self update"
            },
            {
                "id": 3,
                "name": "Install Rust",
                "run": "rustup set profile minimal\nrustup toolchain install nightly -c rust-docs\nrustup override set nightly\n"
            },
            {
                "id": 4,
                "name": "Install mdbook",
                "run": "mkdir bin\ncurl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.21/mdbook-v0.4.21-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=bin\necho \"$(pwd)/bin\" >> ${GITHUB_PATH}\n"
            },
            {
                "id": 5,
                "name": "Install mdbook-trpl-note",
                "run": "cargo install --path packages/mdbook-trpl-note"
            },
            {
                "id": 6,
                "name": "Install mdbook-trpl-listing",
                "run": "cargo install --path packages/mdbook-trpl-listing"
            },
            {
                "id": 7,
                "name": "Install aspell",
                "run": "sudo apt-get install aspell"
            },
            {
                "id": 8,
                "name": "Install shellcheck",
                "run": "sudo apt-get install shellcheck"
            },
            {
                "id": 9,
                "name": "Report versions",
                "run": "rustup --version\nrustc -Vv\nmdbook --version\naspell --version\nshellcheck --version\n"
            },
            {
                "id": 10,
                "name": "Shellcheck",
                "run": "find . -name '*.sh' | xargs shellcheck"
            },
            {
                "id": 11,
                "name": "Spellcheck",
                "run": "bash ci/spellcheck.sh list"
            },
            {
                "id": 12,
                "name": "Lint for local file paths",
                "run": "mdbook build\ncargo run --bin lfp src\n"
            },
            {
                "id": 13,
                "name": "Validate references",
                "run": "bash ci/validate.sh"
            },
            {
                "id": 14,
                "name": "Check for broken links",
                "run": "curl -sSLo linkcheck.sh \\\n  https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/linkcheck.sh\n# Cannot use --all here because of the generated redirect pages aren't available.\nsh linkcheck.sh book\n"
            }
        ],
        "rust-lang/rust-forge": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install mdbook",
                "run": "curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.35/mdbook-v0.4.35-x86_64-unknown-linux-gnu.tar.gz | tar -xz"
            },
            {
                "id": 3,
                "name": "Build book",
                "run": "./mdbook build"
            },
            {
                "id": 4,
                "name": "Deploy book",
                "run": "rust-lang/simpleinfra/github-actions/static-websites@master"
            },
            {
                "id": 5,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@v1"
            },
            {
                "id": 6,
                "name": "Invalidate CloudFront cache",
                "run": "aws cloudfront create-invalidation --distribution-id E12A3GKHZSREHP --paths \"/*\""
            }
        ],
        "rust-lang/docs.rs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/audit-check@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup override set stable\nrustup update stable\n"
            },
            {
                "id": 3,
                "name": "install `just`",
                "run": "sudo snap install --edge --classic just"
            },
            {
                "id": 4,
                "name": "restore build & cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "cargo build --workspace --locked"
            },
            {
                "id": 6,
                "name": "Launch postgres",
                "run": "cp .env.sample .env\nmkdir -p ${DOCSRS_PREFIX}/public-html\ndocker-compose up -d db\n# Give the database enough time to start up\nsleep 5\n# Make sure the database is actually working\npsql \"${DOCSRS_DATABASE_URL}\"\n"
            },
            {
                "id": 7,
                "name": "run database migrations",
                "run": "cargo run -- database migrate"
            },
            {
                "id": 8,
                "name": "install SQLX CLI",
                "run": "cargo install sqlx-cli --no-default-features --features postgres"
            },
            {
                "id": 9,
                "name": "run sqlx prepare --check",
                "run": "just sqlx-check"
            },
            {
                "id": 10,
                "name": "test reverse migrations",
                "run": "# --target 0 means \"revert everything\"\ncargo sqlx migrate revert \\\n  --database-url $DOCSRS_DATABASE_URL \\\n  --target-version 0\n"
            },
            {
                "id": 11,
                "name": "Clean up the database",
                "run": "docker-compose down --volumes"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup override set stable\nrustup update stable\n"
            },
            {
                "id": 3,
                "name": "restore build & cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "cargo build --workspace --locked"
            },
            {
                "id": 5,
                "name": "Launch postgres and min.io",
                "run": "cp .env.sample .env\nmkdir -p ${DOCSRS_PREFIX}/public-html\ndocker-compose up -d db s3\n# Give the database enough time to start up\nsleep 5\n# Make sure the database is actually working\npsql \"${DOCSRS_DATABASE_URL}\"\n"
            },
            {
                "id": 6,
                "name": "run workspace tests",
                "run": "cargo test --workspace --locked --no-fail-fast\n"
            },
            {
                "id": 7,
                "name": "run slow tests",
                "run": "cargo test --locked -- --ignored --test-threads=1\n"
            },
            {
                "id": 8,
                "name": "Clean up the database",
                "run": "docker-compose down --volumes"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup override set stable\nrustup update stable\n"
            },
            {
                "id": 3,
                "name": "restore build & cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Launch postgres and min.io",
                "run": "cp .env.sample .env\nmkdir -p ${DOCSRS_PREFIX}/public-html\ndocker-compose up -d db s3\n# Give the database enough time to start up\nsleep 5\n# Make sure the database is actually working\npsql \"${DOCSRS_DATABASE_URL}\"\n"
            },
            {
                "id": 5,
                "name": "Run GUI tests",
                "run": "./dockerfiles/run-gui-tests.sh"
            },
            {
                "id": 6,
                "name": "Clean up the database",
                "run": "docker-compose down --volumes"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup override set stable\nrustup update stable\nrustup component add rustfmt\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo fmt -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup override set stable\nrustup update stable\nrustup component add clippy\n"
            },
            {
                "id": 3,
                "name": "install `just`",
                "run": "sudo snap install --edge --classic just"
            },
            {
                "id": 4,
                "name": "restore build & cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "just lint"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "install `just`",
                "run": "sudo snap install --edge --classic just"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm install -g eslint@8"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "just lint-js"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build the Docker image",
                "run": "docker build -t docs-rs-web -f dockerfiles/Dockerfile --target web-server ."
            },
            {
                "id": 3,
                "name": "Upload the Docker image to ECR (dev)",
                "run": "rust-lang/simpleinfra/github-actions/upload-docker-image@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build the Docker image",
                "run": "docker build -t docs-rs-web -f dockerfiles/Dockerfile --target web-server ."
            },
            {
                "id": 3,
                "name": "Upload the Docker image to ECR (production)",
                "run": "rust-lang/simpleinfra/github-actions/upload-docker-image@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build the Docker image",
                "run": "docker build -t docs-rs -f dockerfiles/Dockerfile ."
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions-ecosystem/action-remove-labels@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions-ecosystem/action-add-labels@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-ecosystem/action-remove-labels@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions-ecosystem/action-add-labels@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-ecosystem/action-remove-labels@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions-ecosystem/action-add-labels@v1"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-ecosystem/action-remove-labels@v1"
            }
        ],
        "rust-lang/arewewebyet": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Zola",
                "run": "wget \"https://github.com/getzola/zola/releases/download/v0.12.2/zola-v0.12.2-x86_64-unknown-linux-gnu.tar.gz\"\nsudo tar xzf ./zola-v0.12.2-x86_64-unknown-linux-gnu.tar.gz\n"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "export CURRENT_TIME=$(date '+%d %B %Y'); ./zola build"
            },
            {
                "id": 4,
                "name": "Deploy",
                "run": "peaceiris/actions-gh-pages@v3"
            }
        ],
        "rust-lang/futures-rs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly --no-self-update && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "taiki-e/setup-cross-toolchain-action@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo test --workspace --all-features $DOCTEST_XCOMPILE"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo test --workspace --all-features --release $DOCTEST_XCOMPILE"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}"
            },
            {
                "id": 3,
                "name": "Install cargo-hack",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo hack --remove-dev-deps --workspace"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo hack build --workspace --ignore-private --no-default-features \\\n  --exclude futures --exclude futures-util --exclude futures-task --exclude futures-macro --exclude futures-executor --exclude futures-channel --exclude futures-test\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo hack build --workspace --ignore-private --no-default-features --features alloc --ignore-unknown-features \\\n  --exclude futures --exclude futures-util --exclude futures-task --exclude futures-macro --exclude futures-executor --exclude futures-channel --exclude futures-test\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo hack build --workspace --ignore-private --no-default-features --features std \\\n  --exclude futures --exclude futures-util --exclude futures-task --exclude futures-macro --exclude futures-executor --exclude futures-channel --exclude futures-test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}"
            },
            {
                "id": 3,
                "name": "Install cargo-hack",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo hack --remove-dev-deps --workspace"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo hack build --workspace --ignore-private"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo hack build --workspace --exclude futures-test --ignore-private --no-default-features"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo hack build --workspace --exclude futures-test --ignore-private --no-default-features --features alloc --ignore-unknown-features"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "cargo hack build --workspace --ignore-private --no-default-features --features std --ignore-unknown-features"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "cargo hack build -p futures -p futures-util --no-default-features --features std,compat"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "cargo hack build -p futures -p futures-executor --no-default-features --features std,thread-pool"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}"
            },
            {
                "id": 3,
                "name": "Install cargo-hack",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo hack build --workspace --no-dev-deps"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo build --tests --features default,thread-pool,io-compat --manifest-path futures/Cargo.toml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Install cargo-hack",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 4,
                "name": "Install cargo-minimal-versions",
                "run": "taiki-e/install-action@cargo-minimal-versions"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo minimal-versions build --workspace --ignore-private --all-features"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup target add ${{ matrix.target }}"
            },
            {
                "id": 4,
                "name": "Install cargo-hack",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo hack --remove-dev-deps --workspace"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo hack build --manifest-path futures/tests/no-std/Cargo.toml \\\n  --each-feature --optional-deps \\\n  --target ${{ matrix.target }}\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo hack build --workspace --ignore-private \\\n  --exclude futures-test --exclude futures-macro \\\n  --no-default-features \\\n  --target ${{ matrix.target }}\n"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "cargo hack build --workspace --ignore-private \\\n  --exclude futures-test --exclude futures-macro \\\n  --no-default-features --features alloc --ignore-unknown-features \\\n  --target ${{ matrix.target }}\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "cargo hack build --workspace --ignore-private \\\n  --exclude futures-test --exclude futures-macro \\\n  --no-default-features --features async-await,alloc --ignore-unknown-features \\\n  --target ${{ matrix.target }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo bench --workspace"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo bench --manifest-path futures-util/Cargo.toml --features=bilock,unstable"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Install cargo-hack",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo hack check \\\n  --feature-powerset --depth 2 --no-dev-deps \\\n  --workspace --exclude futures-test \\\n  --features unstable --ignore-unknown-features\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup toolchain install nightly --component miri && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo miri test --workspace --all-features"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup toolchain install nightly --component rust-src && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "sudo sysctl vm.mmap_rnd_bits=28"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo -Z build-std test --workspace --all-features --target x86_64-unknown-linux-gnu --lib --tests"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup toolchain install nightly --component clippy && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo clippy --workspace --all-features --all-targets"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "taiki-e/checkout-action@v1"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo doc --workspace --no-deps --all-features"
            }
        ],
        "rust-lang/rustc-demangle": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo build --all"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo test --all"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo build --features std"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rustup update nightly && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo install cargo-fuzz --vers \"^0.11\""
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo fuzz build --dev"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable && rustup default stable && rustup component add rustfmt"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo fmt -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Build documentation",
                "run": "cargo doc --no-deps"
            },
            {
                "id": 4,
                "name": "Publish documentation",
                "run": "cd target/doc\ngit init\ngit add .\ngit -c user.name='ci' -c user.email='ci' commit -m init\ngit push -f -q https://git:${{ secrets.github_token }}@github.com/${{ github.repository }} HEAD:gh-pages\n"
            }
        ],
        "rust-lang/rust-bindgen": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install stable",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Run rustfmt",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 4,
                "name": "Run clippy",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install msrv for lib",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Test lib with msrv",
                "run": "cargo +1.70.0 test --package bindgen"
            },
            {
                "id": 4,
                "name": "Install msrv for cli",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 5,
                "name": "Test cli with msrv",
                "run": "cargo +1.70.0 build --package bindgen-cli"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install stable",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Check without default features",
                "run": "cargo check -p bindgen --no-default-features --features=runtime"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install stable",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Generate documentation for `bindgen`",
                "run": "cargo doc --document-private-items --no-deps -p bindgen"
            },
            {
                "id": 4,
                "name": "Generate documentation for `bindgen-cli`",
                "run": "cargo doc --document-private-items --no-deps -p bindgen-cli"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install stable",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Build quickcheck tests",
                "run": "cd bindgen-tests/tests/quickchecking && cargo test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install stable",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Test expectations",
                "run": "cd bindgen-tests/tests/expectations && cargo test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install multiarch packages",
                "run": "sudo apt-get install binfmt-support qemu-user-static gcc-${{matrix.target.cross}} g++-${{matrix.target.cross}}\nsource /etc/lsb-release\nsudo tee /etc/apt/sources.list <<EOF >/dev/null\ndeb [arch=${{matrix.target.debian}}] http://ports.ubuntu.com/ubuntu-ports/ $DISTRIB_CODENAME main\ndeb [arch=${{matrix.target.debian}}] http://ports.ubuntu.com/ubuntu-ports/ $DISTRIB_CODENAME-updates main\ndeb [arch=${{matrix.target.debian}}] http://ports.ubuntu.com/ubuntu-ports/ $DISTRIB_CODENAME-backports main\ndeb [arch=${{matrix.target.debian}}] http://ports.ubuntu.com/ubuntu-ports/ $DISTRIB_CODENAME-security main\nEOF\nsudo dpkg --add-architecture ${{matrix.target.debian}}\nsudo apt-get update\nsudo apt-get install libc6:${{matrix.target.debian}} libstdc++6:${{matrix.target.debian}}\n"
            },
            {
                "id": 3,
                "name": "Install stable",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "Install libtinfo",
                "run": "sudo apt-get update\nsudo apt-get install libtinfo5\n"
            },
            {
                "id": 5,
                "name": "Run all the tests",
                "run": "./ci/test.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install nightly",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Check cfg",
                "run": "cargo check -Z unstable-options -Z check-cfg"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Test book",
                "run": "curl -L https://github.com/rust-lang/mdBook/releases/download/v0.4.5/mdbook-v0.4.5-x86_64-unknown-linux-gnu.tar.gz | tar xz\n./mdbook build book\n./mdbook test book\n"
            },
            {
                "id": 1,
                "name": "check if any dependency failed",
                "run": "jq --exit-status 'all(.result == \"success\")' <<< '${{ toJson(needs) }}'"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Test book",
                "run": "curl -L https://github.com/rust-lang/mdBook/releases/download/v0.4.5/mdbook-v0.4.5-x86_64-unknown-linux-gnu.tar.gz | tar xz\n./mdbook build book\n./mdbook test book\n"
            },
            {
                "id": 3,
                "name": "Deploy book",
                "run": "JamesIves/github-pages-deploy-action@3.7.1"
            },
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install stable toolchain",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Publish bindgen (lib)",
                "run": "cargo publish --package bindgen --token ${CARGO_REGISTRY_TOKEN}"
            },
            {
                "id": 4,
                "name": "Publish bindgen-cli",
                "run": "cargo publish --package bindgen-cli --token ${CARGO_REGISTRY_TOKEN}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install cargo-dist",
                "run": "curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v0.12.0/cargo-dist-installer.sh | sh"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo dist ${{ (!github.event.pull_request && format('host --steps=create --tag={0}', github.ref_name)) || 'plan' }} --output-format=json > plan-dist-manifest.json\necho \"cargo dist ran successfully\"\ncat plan-dist-manifest.json\necho \"manifest=$(jq -c \".\" plan-dist-manifest.json)\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 4,
                "name": "Upload dist-manifest.json",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "swatinem/rust-cache@v2"
            },
            {
                "id": 3,
                "name": "Install cargo-dist",
                "run": "${{ matrix.install_dist }}"
            },
            {
                "id": 4,
                "name": "Fetch local artifacts",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "${{ matrix.packages_install }}\n"
            },
            {
                "id": 6,
                "name": "Build artifacts",
                "run": "# Actually do builds and make zips and whatnot\ncargo dist build ${{ needs.plan.outputs.tag-flag }} --print=linkage --output-format=json ${{ matrix.dist_args }} > dist-manifest.json\necho \"cargo dist ran successfully\"\n"
            },
            {
                "id": 7,
                "name": "Post-build",
                "run": "# Parse out what we just built and upload it to scratch storage\necho \"paths<<EOF\" >> \"$GITHUB_OUTPUT\"\njq --raw-output \".artifacts[]?.path | select( . != null )\" dist-manifest.json >> \"$GITHUB_OUTPUT\"\necho \"EOF\" >> \"$GITHUB_OUTPUT\"\n\ncp dist-manifest.json \"$BUILD_MANIFEST_NAME\"\n"
            },
            {
                "id": 8,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install cargo-dist",
                "run": "curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v0.12.0/cargo-dist-installer.sh | sh"
            },
            {
                "id": 3,
                "name": "Fetch local artifacts",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo dist build ${{ needs.plan.outputs.tag-flag }} --output-format=json \"--artifacts=global\" > dist-manifest.json\necho \"cargo dist ran successfully\"\n\n# Parse out what we just built and upload it to scratch storage\necho \"paths<<EOF\" >> \"$GITHUB_OUTPUT\"\njq --raw-output \".artifacts[]?.path | select( . != null )\" dist-manifest.json >> \"$GITHUB_OUTPUT\"\necho \"EOF\" >> \"$GITHUB_OUTPUT\"\n\ncp dist-manifest.json \"$BUILD_MANIFEST_NAME\"\n"
            },
            {
                "id": 5,
                "name": "Upload artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install cargo-dist",
                "run": "curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v0.12.0/cargo-dist-installer.sh | sh"
            },
            {
                "id": 3,
                "name": "Fetch artifacts",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo dist host ${{ needs.plan.outputs.tag-flag }} --steps=upload --steps=release --output-format=json > dist-manifest.json\necho \"artifacts uploaded and released successfully\"\ncat dist-manifest.json\necho \"manifest=$(jq -c \".\" dist-manifest.json)\" >> \"$GITHUB_OUTPUT\"\n"
            },
            {
                "id": 5,
                "name": "Upload dist-manifest.json",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Download Github Artifacts",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Cleanup",
                "run": "# Remove the granular manifests\nrm -f artifacts/*-dist-manifest.json\n"
            },
            {
                "id": 4,
                "name": "Create Github Release",
                "run": "ncipollo/release-action@v1"
            }
        ],
        "rust-lang/rust-playground": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 3,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Build and push container",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Format server",
                "run": "cargo fmt --manifest-path ui/Cargo.toml --all --check"
            },
            {
                "id": 4,
                "name": "Format top-crates",
                "run": "cargo fmt --manifest-path top-crates/Cargo.toml --check"
            },
            {
                "id": 5,
                "name": "Format orchestrator",
                "run": "cargo fmt --manifest-path compiler/base/orchestrator/Cargo.toml --check"
            },
            {
                "id": 6,
                "name": "Build backend",
                "run": "./ci/build-backend.sh"
            },
            {
                "id": 7,
                "name": "Save backend artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Configure node",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Get pnpm version from package.json",
                "run": "echo \"pnpm_version=$(node -p 'require(`./ui/frontend/package.json`).engines.pnpm')\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Install pnpm",
                "run": "pnpm/action-setup@v3"
            },
            {
                "id": 5,
                "name": "Get pnpm store directory",
                "run": "echo \"dir=$(pnpm store path --silent)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 6,
                "name": "Cache pnpm intermediate products",
                "run": "actions/cache@v4"
            },
            {
                "id": 7,
                "name": "Install dependencies",
                "run": "pnpm --dir ui/frontend/ install"
            },
            {
                "id": 8,
                "name": "Run tests",
                "run": "pnpm --dir ui/frontend/ run test"
            },
            {
                "id": 9,
                "name": "Lint",
                "run": "pnpm --dir ui/frontend/ run test:lint"
            },
            {
                "id": 10,
                "name": "Style",
                "run": "pnpm --dir ui/frontend/ run test:style"
            },
            {
                "id": 11,
                "name": "Build frontend",
                "run": "pnpm --dir ui/frontend/ run build:production"
            },
            {
                "id": 12,
                "name": "Save frontend artifact",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Configure Ruby",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Cache bundler intermediate products",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Install gems",
                "run": "gem install bundler\nbundle config path vendor/bundle\nbundle install --jobs 4 --retry 3"
            },
            {
                "id": 5,
                "name": "Pull containers",
                "run": "echo ghcr.io/integer32llc/rust-playground-ci-rust-{stable,beta,nightly}:${{ github.run_id }} | xargs -n1 docker pull"
            },
            {
                "id": 6,
                "name": "Rename containers",
                "run": "for c in stable beta nightly; do\n  docker tag ghcr.io/integer32llc/rust-playground-ci-rust-$c:${{ github.run_id }} ghcr.io/integer32llc/rust-playground-ci-rust-$c\n  docker tag ghcr.io/integer32llc/rust-playground-ci-rust-$c:${{ github.run_id }} shepmaster/rust-$c\n  docker tag ghcr.io/integer32llc/rust-playground-ci-rust-$c:${{ github.run_id }} rust-$c\ndone"
            },
            {
                "id": 7,
                "name": "Download backend",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 8,
                "name": "Download frontend",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 9,
                "name": "Run orchestrator unit tests",
                "run": "chmod +x ./server/unit_tests_orchestrator && ./server/unit_tests_orchestrator"
            },
            {
                "id": 10,
                "name": "Run ui unit tests",
                "run": "chmod +x ./server/unit_tests_ui && ./server/unit_tests_ui"
            },
            {
                "id": 11,
                "name": "Run tests",
                "run": "killall -q ui || true\nchmod +x ./server/ui && ./server/ui &\nbundle exec rspec"
            },
            {
                "id": 12,
                "name": "Preserve screenshots",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v3"
            },
            {
                "id": 2,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 3,
                "name": "Pull containers",
                "run": "echo ghcr.io/integer32llc/rust-playground-ci-rust-{stable,beta,nightly}:${{ github.run_id }} | xargs -n1 docker pull"
            },
            {
                "id": 4,
                "name": "Rename containers",
                "run": "for c in stable beta nightly; do\n  docker tag ghcr.io/integer32llc/rust-playground-ci-rust-$c:${{ github.run_id }} ghcr.io/integer32llc/rust-playground-ci-rust-$c\n  docker tag ghcr.io/integer32llc/rust-playground-ci-rust-$c:${{ github.run_id }} shepmaster/rust-$c\n  docker tag ghcr.io/integer32llc/rust-playground-ci-rust-$c:${{ github.run_id }} rust-$c\ndone"
            },
            {
                "id": 5,
                "name": "Push containers",
                "run": "for c in stable beta nightly; do\n  docker push ghcr.io/integer32llc/rust-playground-ci-rust-$c\n  docker push shepmaster/rust-$c\ndone"
            },
            {
                "id": 6,
                "name": "Download backend",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 7,
                "name": "Download frontend",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 8,
                "name": "Configure AWS credentials (i32)",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 9,
                "name": "Push backend (i32)",
                "run": "aws s3 cp server/ui s3://playground-artifacts-i32"
            },
            {
                "id": 10,
                "name": "Push frontend (i32)",
                "run": "aws s3 sync server/build/ s3://playground-artifacts-i32/build"
            },
            {
                "id": 11,
                "name": "Configure AWS credentials (rust-lang)",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 12,
                "name": "Push backend (rust-lang)",
                "run": "aws s3 cp server/ui s3://rust-playground-artifacts"
            },
            {
                "id": 13,
                "name": "Push frontend (rust-lang)",
                "run": "aws s3 sync server/build/ s3://rust-playground-artifacts/build"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 3,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 5,
                "name": "Build and push container",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 6,
                "name": "Pull container",
                "run": "docker pull ${{ env.IMAGE_NAME }}:${{ github.run_id }}"
            },
            {
                "id": 7,
                "name": "Rename container",
                "run": "docker tag ${{ env.IMAGE_NAME }}:${{ github.run_id }} ${{ env.IMAGE_NAME }}\ndocker tag ${{ env.IMAGE_NAME }}:${{ github.run_id }} ${{ env.DOCKER_HUB_IMAGE_NAME }}"
            },
            {
                "id": 8,
                "name": "Push container",
                "run": "docker push ${{ env.IMAGE_NAME }}\ndocker push ${{ env.DOCKER_HUB_IMAGE_NAME }}"
            }
        ],
        "rust-lang/rustfix": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust (rustup)",
                "run": "rustup update nightly --no-self-update && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo test --all"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo test --all -- --ignored"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable && rustup default stable && rustup component add rustfmt"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo fmt --check"
            }
        ],
        "rust-lang/compiler-builtins": [
            {
                "id": 1,
                "name": "Print runner information",
                "run": "uname -a"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install Rust (rustup)",
                "run": "rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "rustup target add ${{ matrix.target }}"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "rustup component add llvm-tools-preview"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 7,
                "name": "Cache Docker layers",
                "run": "actions/cache@v2"
            },
            {
                "id": 8,
                "name": "Cache compiler-rt",
                "run": "actions/cache@v4"
            },
            {
                "id": 9,
                "name": "Download compiler-rt reference sources",
                "run": "curl -L -o code.tar.gz \"https://github.com/rust-lang/llvm-project/archive/rustc/${RUST_LLVM_VERSION}.tar.gz\"\ntar xzf code.tar.gz --strip-components 1 llvm-project-rustc-${RUST_LLVM_VERSION}/compiler-rt\n"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "./ci/run.sh ${{ matrix.target }}"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "cargo generate-lockfile && ./ci/run-docker.sh ${{ matrix.target }}"
            },
            {
                "id": 13,
                "name": "Move Docker cache",
                "run": "rm -rf /tmp/.buildx-cache\nmv /tmp/.buildx-cache-new /tmp/.buildx-cache\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install stable `rustfmt`",
                "run": "rustup set profile minimal && rustup default stable && rustup component add rustfmt"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo fmt -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install nightly `clippy`",
                "run": "rustup set profile minimal && rustup default \"nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/clippy)\" && rustup component add clippy\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo clippy -- -D clippy::all"
            },
            {
                "id": 1,
                "name": "check if any dependency failed",
                "run": "jq --exit-status 'all(.result == \"success\")' <<< '${{ toJson(needs) }}'"
            }
        ],
        "rust-lang/rls": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup latest nightly toolchain",
                "run": "bash ci/setup-toolchain.sh"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup component add rust-src rust-analysis rustc-dev llvm-tools-preview"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "rustc -vV"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo build -v"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo test -v"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo test -v test_tooltip_std -- --ignored"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "cargo test -v --no-default-features"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "cargo test -v --manifest-path=rls-analysis/Cargo.toml"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "cargo test -v --manifest-path=rls-data/Cargo.toml"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "cargo test -v --manifest-path=rls-ipc/Cargo.toml"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "cargo test -v --manifest-path=rls-rustc/Cargo.toml"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "cargo test -v --manifest-path=rls-span/Cargo.toml"
            },
            {
                "id": 14,
                "name": "Step 14",
                "run": "cargo test -v --manifest-path=rls-vfs/Cargo.toml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "cargo +stable fmt --manifest-path=Cargo.toml -- --check"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo +stable fmt --manifest-path=rls-analysis/Cargo.toml -- --check"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo +stable fmt --manifest-path=rls-data/Cargo.toml -- --check"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo +stable fmt --manifest-path=rls-ipc/Cargo.toml -- --check"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo +stable fmt --manifest-path=rls-rustc/Cargo.toml -- --check"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo +stable fmt --manifest-path=rls-span/Cargo.toml -- --check"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "cargo +stable fmt --manifest-path=rls-vfs/Cargo.toml -- --check"
            },
            {
                "id": 1,
                "name": "Mark the job as successful",
                "run": "exit 0"
            },
            {
                "id": 2,
                "name": "Mark the job as unsuccessful",
                "run": "exit 1"
            }
        ],
        "rust-lang/vscode-rust": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js ${{ matrix.node-version }}",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Install latest Rust stable toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "npm run prettier -- --list-different"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "npm run compile"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "npm run lint"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "npm audit"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "xvfb-run -a npm test"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "npm test"
            },
            {
                "id": 1,
                "name": "Mark the job as successful",
                "run": "exit 0"
            },
            {
                "id": 2,
                "name": "Mark the job as unsuccessful",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Use Node.js 12.8.1",
                "run": "actions/setup-node@v1"
            },
            {
                "id": 3,
                "name": "Build extension package",
                "run": "npm ci\nnpx vsce package -o rust.vsix\n"
            },
            {
                "id": 4,
                "name": "Create Release",
                "run": "actions/create-release@v1"
            },
            {
                "id": 5,
                "name": "Upload Release Asset",
                "run": "actions/upload-release-asset@v1"
            }
        ],
        "rust-lang/crater": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust nightly",
                "run": "rustup update nightly && rustup default nightly && rustup component add rustfmt clippy"
            },
            {
                "id": 3,
                "name": "Check the code formatting with rustfmt",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 4,
                "name": "Ensure there are no warnings with Clippy",
                "run": "cargo clippy --all -- -Dwarnings"
            },
            {
                "id": 5,
                "name": "Check if the configuration is correct",
                "run": "cargo run -- create-lists\ncargo run -- check-config\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust ${{ matrix.channel }}",
                "run": "rustup update --no-self-update $CHANNEL && rustup default $CHANNEL"
            },
            {
                "id": 3,
                "name": "Build Crater",
                "run": "cargo build"
            },
            {
                "id": 4,
                "name": "Run Crater tests",
                "run": "cargo run -- create-lists\ncargo test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust nightly",
                "run": "rustup update --no-self-update nightly && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Run minicrater",
                "run": "cargo run -- create-lists\ncargo test -- --ignored --nocapture --test-threads 1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build the Docker image",
                "run": "docker build -t crater ."
            },
            {
                "id": 3,
                "name": "Prepare the Docker image to be uploaded",
                "run": "mkdir -p /tmp/docker-images\ndocker save crater | gzip > /tmp/docker-images/crater.tar.gz\n"
            },
            {
                "id": 4,
                "name": "Upload the image to GitHub Actions artifacts",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 1,
                "name": "Download the image from GitHub Actions artifacts",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 2,
                "name": "Load the downloaded image",
                "run": "cat docker-images/crater.tar.gz | gunzip | docker load"
            },
            {
                "id": 3,
                "name": "Upload the Docker image to ECR",
                "run": "rust-lang/simpleinfra/github-actions/upload-docker-image@master"
            },
            {
                "id": 1,
                "name": "Mark the job as successful",
                "run": "exit 0"
            },
            {
                "id": 1,
                "name": "Mark the job as a failure",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust nightly",
                "run": "rustup update nightly && rustup default nightly && rustup component add rustfmt clippy"
            },
            {
                "id": 3,
                "name": "Check the code formatting with rustfmt",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 4,
                "name": "Ensure there are no warnings with Clippy",
                "run": "cargo clippy --all -- -Dwarnings"
            },
            {
                "id": 5,
                "name": "Check if the configuration is correct",
                "run": "cargo run -- create-lists\ncargo run -- check-config\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust nightly",
                "run": "rustup update nightly && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Build Crater",
                "run": "cargo build"
            },
            {
                "id": 4,
                "name": "Run Crater tests",
                "run": "cargo run -- create-lists\ncargo test\n"
            }
        ],
        "rust-lang/stdarch": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly --no-self-update && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "ci/style.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly --no-self-update && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "ci/dox.sh"
            },
            {
                "id": 4,
                "name": "Publish documentation",
                "run": "cd target/doc\ngit init\ngit add .\ngit -c user.name='ci' -c user.email='ci' commit -m init\ngit push -f -q https://git:${{ secrets.github_token }}@github.com/${{ github.repository }} HEAD:gh-pages\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly --no-self-update && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo test --manifest-path crates/stdarch-verify/Cargo.toml"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly --no-self-update && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "RUST_STD_DETECT_UNSTABLE=avx cargo test --features=std_detect_env_override --manifest-path crates/std_detect/Cargo.toml env_override_no_avx"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust (rustup)",
                "run": "rustup update nightly --no-self-update\nrustup default nightly\n"
            },
            {
                "id": 3,
                "name": "Install Rust (macos)",
                "run": "curl https://sh.rustup.rs | sh -s -- -y --default-toolchain nightly\necho \"$HOME/.cargo/bin\" >> $GITHUB_PATH\nrustup update nightly --no-self-update\nrustup default nightly\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "rustup default nightly\nrustup target add ${{ matrix.target }}\n"
            },
            {
                "id": 5,
                "name": "Setup (aarch64-apple-darwin)",
                "run": "echo \"SDKROOT=$(xcrun -sdk macosx11.0 --show-sdk-path)\" >> $GITHUB_ENV\necho \"MACOS_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.0 --show-sdk-platform-version)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo generate-lockfile"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "echo \"NORUN=1\" >> $GITHUB_ENV"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "echo \"STDARCH_TEST_EVERYTHING=1\" >> $GITHUB_ENV"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "echo \"RUSTFLAGS=${{ matrix.rustflags }}\" >> $GITHUB_ENV"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "echo \"STDARCH_DISABLE_ASSERT_INSTR=1\" >> $GITHUB_ENV"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "echo \"NOSTD=1\" >> $GITHUB_ENV"
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "./ci/run.sh"
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "./ci/run-docker.sh ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update nightly && rustup default nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "./ci/build-std-detect.sh"
            },
            {
                "id": 1,
                "name": "check if any dependency failed",
                "run": "jq --exit-status 'all(.result == \"success\")' <<< '${{ toJson(needs) }}'"
            }
        ],
        "rust-lang/api-guidelines": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Get mdBook",
                "run": "export MDBOOK_VERSION=\"v0.4.5\"\nexport MDBOOK_TARBALL=\"mdbook-${MDBOOK_VERSION}-x86_64-unknown-linux-gnu.tar.gz\"\nexport MDBOOK_URL=\"https://github.com/rust-lang/mdBook/releases/download/${MDBOOK_VERSION}/${MDBOOK_TARBALL}\"\ncurl -Lf \"${MDBOOK_URL}\" | tar -xz\n"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "./mdbook build"
            },
            {
                "id": 4,
                "name": "Push to gh-pages",
                "run": "REV=$(git rev-parse --short HEAD)\ngit init\ngit remote add upstream https://x-access-token:${{secrets.GITHUB_TOKEN}}@github.com/rust-lang/api-guidelines\ngit config user.name \"Rust API Guidelines\"\ngit config user.email \"libs@rust-lang.org\"\ngit add -A .\ngit commit -qm \"API Guidelines @ ${{github.repository}}@${REV}\"\ngit push -q upstream HEAD:refs/heads/gh-pages --force\n"
            }
        ],
        "rust-lang/reference": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Update rustup",
                "run": "rustup self update"
            },
            {
                "id": 3,
                "name": "Install Rust",
                "run": "rustup set profile minimal\nrustup toolchain install nightly -c rust-docs\nrustup default nightly\n"
            },
            {
                "id": 4,
                "name": "Install mdbook",
                "run": "mkdir bin\ncurl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.14/mdbook-v0.4.14-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=bin\necho \"$(pwd)/bin\" >> $GITHUB_PATH\n"
            },
            {
                "id": 5,
                "name": "Report versions",
                "run": "rustup --version\nrustc -Vv\nmdbook --version\n"
            },
            {
                "id": 6,
                "name": "Run tests",
                "run": "mdbook test"
            },
            {
                "id": 7,
                "name": "Style checks",
                "run": "(cd style-check && cargo run -- ../src)"
            },
            {
                "id": 8,
                "name": "Check for broken links",
                "run": "curl -sSLo linkcheck.sh \\\n  https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/linkcheck.sh\nsh linkcheck.sh --all reference\n"
            }
        ],
        "rust-lang/nomicon": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Update rustup",
                "run": "rustup self update"
            },
            {
                "id": 3,
                "name": "Install Rust",
                "run": "rustup set profile minimal\nrustup toolchain install nightly -c rust-docs\nrustup default nightly\n"
            },
            {
                "id": 4,
                "name": "Install mdbook",
                "run": "mkdir bin\ncurl -sSL https://github.com/rust-lang/mdBook/releases/download/${{ env.MDBOOK_VER }}/mdbook-${{ env.MDBOOK_VER }}-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=bin\necho \"$(pwd)/bin\" >> $GITHUB_PATH\n"
            },
            {
                "id": 5,
                "name": "Report versions",
                "run": "rustup --version\nrustc -Vv\nmdbook --version\n"
            },
            {
                "id": 6,
                "name": "Run tests",
                "run": "mdbook test"
            },
            {
                "id": 7,
                "name": "Check for broken links",
                "run": "curl -sSLo linkcheck.sh \\\n  https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/linkcheck.sh\nsh linkcheck.sh --all nomicon\n"
            }
        ],
        "rust-lang/socket2": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "cargo hack test --feature-powerset && cargo hack test --feature-powerset --release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Check formatting",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 4,
                "name": "Run check",
                "run": "cargo hack check --feature-powerset --all-targets --examples --bins --tests --target ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 4,
                "name": "Run check",
                "run": "cargo hack check -Z build-std=std,panic_abort --feature-powerset --all-targets --examples --bins --tests --target ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Run Clippy",
                "run": "cargo clippy --all-targets --all-features -- -D warnings"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@nightly"
            },
            {
                "id": 3,
                "name": "Check docs for docs.rs",
                "run": "RUSTDOCFLAGS=\"-D warnings --cfg docsrs\" cargo doc --no-deps --all-features --target ${{ matrix.target }}"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@nightly"
            },
            {
                "id": 3,
                "name": "Check docs for docs.rs",
                "run": "RUSTDOCFLAGS=\"-D warnings --cfg docsrs\" cargo doc -Z build-std=std,panic_abort --no-deps --all-features --target ${{ matrix.target }}"
            }
        ],
        "rust-lang/rust-semverver": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup latest nightly toolchain",
                "run": "bash ci/setup-toolchain.sh"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "sh ci/run.sh ${{ matrix.os }}"
            },
            {
                "id": 1,
                "name": "Create an issue",
                "run": "readarray -t exists < <(gh issue list --state open --label nightly-CI-failed --json number --jq '.[].number' --repo \"$GITHUB_REPOSITORY\")\nif [[ -n \"${exists[@]}\" ]]; then\n  echo \"Not opening another issue, already have ${#exists[@]} issue(s), latest at ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/issues/${exists[0]}.\"\nelse\n  cat << EOF | gh issue create \\\n    --label nightly-CI-failed \\\n    --title \"Nightly CI run failed\" \\\n    --repo \"$GITHUB_REPOSITORY\" \\\n    --body-file -\n  The nightly CI run on $(date +%F) seems to have failed.\n\n  - Check the logs at ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}\n  - Update to the latest 'rustc-nightly' if necessary\n  - Investigate test run failures if any\nEOF\nfi\n"
            },
            {
                "id": 1,
                "name": "Mark the job as successful",
                "run": "exit 0"
            },
            {
                "id": 2,
                "name": "Mark the job as unsuccessful",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "publish",
                "run": "cargo publish --token \"${CRATES_IO_TOKEN}\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Shellcheck",
                "run": "shellcheck --version\nshellcheck ci/*.sh scripts/toolchain-version\n"
            },
            {
                "id": 3,
                "name": "Update nightly",
                "run": "rustup update nightly\n"
            },
            {
                "id": 4,
                "name": "rustfmt",
                "run": "if rustup component add rustfmt; then\n  cargo fmt --all -- --check\nfi\n"
            },
            {
                "id": 5,
                "name": "Clippy",
                "run": "if rustup component add clippy rustc-dev; then\n    cargo clippy --all\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Toolchain version consistency check",
                "run": "scripts/toolchain-version -c"
            }
        ],
        "rust-lang/jobserver-rs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust (rustup)",
                "run": "rustup toolchain install ${{ matrix.rust }} --no-self-update --profile minimal\nrustup default ${{ matrix.rust }}\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo test --locked"
            },
            {
                "id": 5,
                "name": "Compile make 4.4.1",
                "run": "./.github/actions/compile-make"
            },
            {
                "id": 6,
                "name": "Test against GNU Make 4.4.1",
                "run": "cargo test --locked"
            },
            {
                "id": 7,
                "name": "Ensure wasm32-unknown-unknown be buildable",
                "run": "rustup target add wasm32-unknown-unknown\ncargo build --locked --target wasm32-unknown-unknown\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install make dependencies",
                "run": "apk add musl-dev bash curl make tar"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Compile make 4.4.1",
                "run": "./.github/actions/compile-make"
            },
            {
                "id": 5,
                "name": "Test against GNU Make 4.4.1",
                "run": "cargo test --locked"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable && rustup default stable && rustup component add rustfmt"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo fmt -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Build documentation",
                "run": "cargo doc --no-deps --all-features"
            },
            {
                "id": 4,
                "name": "Publish documentation",
                "run": "cd target/doc\ngit init\ngit add .\ngit -c user.name='ci' -c user.email='ci' commit -m init\ngit push -f -q https://git:${{ secrets.github_token }}@github.com/${{ github.repository }} HEAD:gh-pages\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust (rustup)",
                "run": "rustup toolchain install nightly --no-self-update --profile minimal"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo hack check --lib --rust-version --ignore-private --locked"
            }
        ],
        "rust-lang/atom-ide-rust": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "UziTech/action-setup-atom@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "apm install --production\nnpm install --only=dev\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "Run tests \ud83d\udc69\ud83c\udffe\u200d\ud83d\udcbb",
                "run": "npm run test.lint"
            }
        ],
        "rust-lang/simpleinfra": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Install Rust stable",
                "run": "rustup update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Run rustfmt",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 4,
                "name": "Run the test suite",
                "run": "cargo test --all"
            },
            {
                "id": 5,
                "name": "Run clippy",
                "run": "cargo clippy --all -- -Dwarnings"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Ensure the terraform files are formatted correctly",
                "run": "terraform fmt -check -diff -recursive"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Ensure the bundled action is the same as the source code",
                "run": "for action in $(ls github-actions/); do\n  if [[ -f \"github-actions/${action}/package.json\" ]]; then\n    pushd \"github-actions/${action}\"\n    sha256sum dist/* > \"/tmp/sha256-${action}-before\"\n    npm install\n    npm run build\n    sha256sum dist/* > \"/tmp/sha256-${action}-after\"\n    diff -u --color \"/tmp/sha256-${action}-before\" \"/tmp/sha256-${action}-after\"\n    popd\n  fi\ndone\n"
            }
        ],
        "rust-lang/docker-rust": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git clone https://github.com/docker-library/official-images.git ~/official-images"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "docker build -t rust:$RUST_VERSION-${{ matrix.name }} $RUST_VERSION/${{ matrix.variant }}"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "~/official-images/test/run.sh rust:$RUST_VERSION-${{ matrix.name }}"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "docker images"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "docker/setup-qemu-action@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "docker/login-action@v3"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "docker/login-action@v3"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "docker/metadata-action@v5"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "docker/build-push-action@v5"
            }
        ],
        "rust-lang/ferris-says": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cargo check"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo check --features clippy"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo test"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cargo test --features clippy"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "cargo doc"
            }
        ],
        "rust-lang/docker-rust-nightly": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "docker/setup-qemu-action@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "docker/login-action@v1"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "docker/login-action@v1"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "docker/metadata-action@v3"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "docker/build-push-action@v2"
            }
        ],
        "rust-lang/rust-analyzer": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust toolchain",
                "run": "rustup install --profile minimal nightly\n"
            },
            {
                "id": 3,
                "name": "Build fuzzers",
                "run": "cargo install cargo-fuzz\ncd crates/syntax\ncargo +nightly fuzz build\n"
            }
        ],
        "rust-lang/rustc-dev-guide": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache binaries",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Cache linkcheck",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Install latest nightly Rust toolchain",
                "run": "rustup update nightly\nrustup override set nightly\n"
            },
            {
                "id": 5,
                "name": "Install Dependencies",
                "run": "cargo install mdbook --version ${{ env.MDBOOK_VERSION }}\ncargo install mdbook-linkcheck --version ${{ env.MDBOOK_LINKCHECK_VERSION }}\ncargo install mdbook-toc --version ${{ env.MDBOOK_TOC_VERSION }}\ncargo install mdbook-mermaid --version ${{ env.MDBOOK_MERMAID_VERSION }}\n"
            },
            {
                "id": 6,
                "name": "Check build",
                "run": "mdbook build"
            },
            {
                "id": 7,
                "name": "Deploy to gh-pages",
                "run": "touch \"${{ env.DEPLOY_DIR }}/.nojekyll\"\ncp CNAME \"${{ env.DEPLOY_DIR }}\"\ncd \"${{ env.DEPLOY_DIR }}\"\nrm -rf .git\ngit init\ngit config user.name \"Deploy from CI\"\ngit config user.email \"\"\ngit add .\ngit commit -m \"Deploy ${GITHUB_SHA} to gh-pages\"\ngit push --quiet -f \"https://x-token:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}\" HEAD:gh-pages\n"
            },
            {
                "id": 1,
                "name": "Checkout repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Ensure Rust is up-to-date",
                "run": "rustup update stable\n"
            },
            {
                "id": 3,
                "name": "Run `date-check`",
                "run": "cargo run -- ../../src/ > ../../date-check-output.txt\n"
            },
            {
                "id": 4,
                "name": "Open issue",
                "run": "actions/github-script@v7"
            }
        ],
        "rust-lang/www.rust-lang.org": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Formatting",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "set -euo pipefail\nIFS=$'\\n\\t'\n# Check if the code is good\ncargo build --all --locked\ncargo clippy -- --deny warnings\ncargo test --all --locked\n"
            },
            {
                "id": 5,
                "name": "Build the Docker image",
                "run": "docker build -t website ."
            }
        ],
        "rust-lang/rustc-pr-tracking": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v1"
            },
            {
                "id": 2,
                "name": "Run updater",
                "run": "pip install requests\n./ci.sh\n"
            }
        ],
        "rust-lang/infra-team": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Run prettier",
                "run": "creyD/prettier_action@v4.3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Run markdownlint",
                "run": "nosborn/github-action-markdown-cli@v3.3.0"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Run prettier",
                "run": "creyD/prettier_action@v4.3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Run yamllint",
                "run": "actionshub/yamllint@v1.8.2"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Run prettier",
                "run": "creyD/prettier_action@v4.3"
            }
        ],
        "rust-lang/edition-guide": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@master"
            },
            {
                "id": 2,
                "name": "Update rustup",
                "run": "rustup self update"
            },
            {
                "id": 3,
                "name": "Install Rust",
                "run": "rustup set profile minimal\nrustup toolchain install nightly -c rust-docs\nrustup default nightly\n"
            },
            {
                "id": 4,
                "name": "Install mdbook",
                "run": "mkdir bin\ncurl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.7/mdbook-v0.4.7-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=bin\necho \"$(pwd)/bin\" >> $GITHUB_PATH\n"
            },
            {
                "id": 5,
                "name": "Report versions",
                "run": "rustup --version\nrustc -Vv\nmdbook --version\n"
            },
            {
                "id": 6,
                "name": "Run tests",
                "run": "mdbook test"
            },
            {
                "id": 7,
                "name": "Check for broken links",
                "run": "curl -sSLo linkcheck.sh \\\n  https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/linkcheck.sh\nsh linkcheck.sh --all edition-guide\n"
            }
        ],
        "rust-lang/annotate-snippets-rs": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/audit-check@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "EmbarkStudios/cargo-deny-action@v1"
            },
            {
                "id": 1,
                "name": "Failed",
                "run": "exit 1"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "cargo test --workspace --no-run"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "cargo hack test --feature-powerset --workspace"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 5,
                "name": "Default features",
                "run": "cargo hack check --feature-powerset --locked --rust-version --ignore-private --workspace --all-targets"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Is lockfile updated?",
                "run": "cargo update --workspace --locked"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Check documentation",
                "run": "cargo doc --workspace --all-features --no-deps --document-private-items"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Check formatting",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Install SARIF tools",
                "run": "cargo install clippy-sarif --locked"
            },
            {
                "id": 5,
                "name": "Install SARIF tools",
                "run": "cargo install sarif-fmt --locked"
            },
            {
                "id": 6,
                "name": "Check",
                "run": "cargo clippy --workspace --all-features --all-targets --message-format=json -- -D warnings --allow deprecated | clippy-sarif | tee clippy-results.sarif | sarif-fmt\n"
            },
            {
                "id": 7,
                "name": "Upload",
                "run": "github/codeql-action/upload-sarif@v3"
            },
            {
                "id": 8,
                "name": "Report status",
                "run": "cargo clippy --workspace --all-features --all-targets -- -D warnings --allow deprecated"
            },
            {
                "id": 1,
                "name": "Checkout Actions Repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Lint Commits",
                "run": "crate-ci/committed@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v5"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v3.0.1"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "cargo test --workspace --no-run"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "cargo hack test --feature-powerset --workspace"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 5,
                "name": "Update dependencies",
                "run": "cargo update"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "cargo test --workspace --no-run"
            },
            {
                "id": 7,
                "name": "Test",
                "run": "cargo hack test --feature-powerset --workspace"
            },
            {
                "id": 1,
                "name": "Checkout Actions Repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Spell Check Repo",
                "run": "crate-ci/typos@master"
            }
        ],
        "rust-lang/cargo-bisect-rustc": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "cargo test --no-run"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "cargo test"
            },
            {
                "id": 6,
                "name": "Verify that binary works",
                "run": "cargo run -- bisect-rustc --help | grep \"Examples:\"\ncargo run -- --help | grep \"Commands:\"\n"
            },
            {
                "id": 1,
                "name": "Checkout source",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Run rustfmt check",
                "run": "cargo fmt --version\ncargo fmt --check || (echo \"Please reformat your code with 'cargo fmt' (version $(cargo fmt --version))\"; false)\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install mdbook",
                "run": "mkdir mdbook\ncurl -Lf https://github.com/rust-lang/mdBook/releases/download/v${MDBOOK_VERSION}/mdbook-v${MDBOOK_VERSION}-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook\necho `pwd`/mdbook >> $GITHUB_PATH\n"
            },
            {
                "id": 3,
                "name": "Deploy docs",
                "run": "cd guide\nmdbook build\ngit worktree add gh-pages\ngit config user.name \"Deploy from CI\"\ngit config user.email \"\"\ncd gh-pages\n# Delete the ref to avoid keeping history.\ngit update-ref -d refs/heads/gh-pages\nrm -rf *\nmv ../book/* .\ngit add .\ngit commit -m \"Deploy $GITHUB_SHA to gh-pages\"\ngit push --force --set-upstream origin gh-pages\n"
            }
        ],
        "rust-lang/homu": [
            {
                "id": 1,
                "name": "Clone the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ env.PYTHON_VERSION }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install flake8",
                "run": "pip install flake8"
            },
            {
                "id": 4,
                "name": "Ensure the code passes lints",
                "run": "flake8 homu/"
            },
            {
                "id": 5,
                "name": "Install homu on the builder",
                "run": "pip install -e ."
            },
            {
                "id": 6,
                "name": "Run the test suite",
                "run": "python3 setup.py test"
            },
            {
                "id": 7,
                "name": "Build the Docker image",
                "run": "docker build -t homu ."
            },
            {
                "id": 8,
                "name": "Upload the Docker image to AWS ECR",
                "run": "rust-lang/simpleinfra/github-actions/upload-docker-image@master"
            }
        ],
        "rust-lang/rust-log-analyzer": [
            {
                "id": 1,
                "name": "Checkout the source code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install Rust",
                "run": "rustup update stable && rustup default stable"
            },
            {
                "id": 3,
                "name": "Check formatting",
                "run": "cargo fmt -- --check"
            },
            {
                "id": 4,
                "name": "Run the test suite",
                "run": "cargo test"
            },
            {
                "id": 5,
                "name": "Build the Docker container",
                "run": "docker build -t rust-log-analyzer ."
            },
            {
                "id": 6,
                "name": "Deploy to production",
                "run": "rust-lang/simpleinfra/github-actions/upload-docker-image@master"
            }
        ],
        "rust-lang/polonius": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install rust beta toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Check formatting of all crates",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install mdbook",
                "run": "mkdir mdbook\ncurl -Lf https://github.com/rust-lang/mdBook/releases/download/v0.4.8/mdbook-v0.4.8-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook\necho \"$GITHUB_WORKSPACE/mdbook\" >> $GITHUB_PATH\n"
            },
            {
                "id": 3,
                "name": "Build book",
                "run": "mdbook build ./book/"
            },
            {
                "id": 4,
                "name": "Deploy book to GitHub Pages",
                "run": "rust-lang/simpleinfra/github-actions/static-websites@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install rust toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Build polonius",
                "run": "cargo build"
            },
            {
                "id": 4,
                "name": "Execute tests for all crates in the workspace",
                "run": "cargo test --all"
            }
        ],
        "rust-lang/datafrog": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install rust toolchain",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Build datafrog",
                "run": "cargo build"
            },
            {
                "id": 4,
                "name": "Execute tests",
                "run": "cargo test"
            },
            {
                "id": 5,
                "name": "Check examples",
                "run": "cargo check --examples"
            }
        ],
        "rust-lang/rustc-hash": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "rust-lang/simpleinfra/github-actions/simple-ci@master"
            },
            {
                "id": 3,
                "name": "32-bit cross testing",
                "run": "rustup toolchain install nightly\nrustup override set nightly\nrustup component add miri\ncargo +nightly miri test --target i686-unknown-linux-gnu\n"
            }
        ],
        "rust-lang/rustc_codegen_cranelift": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "CPU features",
                "run": "cat /proc/cpuinfo"
            },
            {
                "id": 3,
                "name": "Cache cargo target dir",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Set MinGW as the default toolchain",
                "run": "rustup set default-host x86_64-pc-windows-gnu"
            },
            {
                "id": 5,
                "name": "Use x86_64 compiler on macOS",
                "run": "rustup set default-host x86_64-apple-darwin"
            },
            {
                "id": 6,
                "name": "Select XCode version",
                "run": "sudo xcode-select -s /Applications/Xcode_14.3.1.app"
            },
            {
                "id": 7,
                "name": "Prepare dependencies",
                "run": "./y.sh prepare"
            },
            {
                "id": 8,
                "name": "Build",
                "run": "./y.sh build --sysroot none"
            },
            {
                "id": 9,
                "name": "Test abi-cafe",
                "run": "./y.sh abi-cafe"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "sed -i 's/components.*/components = []/' rust-toolchain\necho 'profile = \"minimal\"' >> rust-toolchain\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustsec/audit-check@v1.4.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Avoid installing rustc-dev",
                "run": "sed -i 's/components.*/components = [\"rustfmt\"]/' rust-toolchain\necho 'profile = \"minimal\"' >> rust-toolchain\nrustfmt -v\n"
            },
            {
                "id": 3,
                "name": "Rustfmt",
                "run": "cargo fmt --check\nrustfmt --check build_system/main.rs\nrustfmt --check example/*\nrustfmt --check scripts/*.rs\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "CPU features",
                "run": "cat /proc/cpuinfo"
            },
            {
                "id": 3,
                "name": "Cache cargo target dir",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Set MinGW as the default toolchain",
                "run": "rustup set default-host x86_64-pc-windows-gnu"
            },
            {
                "id": 5,
                "name": "Use x86_64 compiler on macOS",
                "run": "rustup set default-host x86_64-apple-darwin"
            },
            {
                "id": 6,
                "name": "Install toolchain and emulator",
                "run": "sudo apt-get update\nsudo apt-get install -y ${{ matrix.apt_deps }}\n"
            },
            {
                "id": 7,
                "name": "Select XCode version",
                "run": "sudo xcode-select -s /Applications/Xcode_14.3.1.app"
            },
            {
                "id": 8,
                "name": "Prepare dependencies",
                "run": "./y.sh prepare"
            },
            {
                "id": 9,
                "name": "Build bcryptprimitives.dll shim for Wine",
                "run": "rustup target add x86_64-pc-windows-gnu\nmkdir wine_shims\nrustc patches/bcryptprimitives.rs -Copt-level=3 -Clto=fat --out-dir wine_shims --target x86_64-pc-windows-gnu\necho \"WINEPATH=$(pwd)/wine_shims\" >> $GITHUB_ENV\n"
            },
            {
                "id": 10,
                "name": "Build",
                "run": "./y.sh build --sysroot none"
            },
            {
                "id": 11,
                "name": "Test",
                "run": "./y.sh test"
            },
            {
                "id": 12,
                "name": "Install LLVM standard library",
                "run": "rustup target add ${{ matrix.env.TARGET_TRIPLE }}"
            },
            {
                "id": 13,
                "name": "Test with LLVM sysroot",
                "run": "./y.sh test --sysroot llvm --no-unstable-features"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "CPU features",
                "run": "cat /proc/cpuinfo"
            },
            {
                "id": 3,
                "name": "Prepare dependencies",
                "run": "./y.sh prepare"
            },
            {
                "id": 4,
                "name": "Disable JIT tests",
                "run": "sed -i 's/jit./#jit./' config.txt\n"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "./y.sh test --use-backend llvm"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "CPU features",
                "run": "cat /proc/cpuinfo"
            },
            {
                "id": 3,
                "name": "Cache cargo target dir",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Install hyperfine",
                "run": "sudo apt update\nsudo apt install -y hyperfine\n"
            },
            {
                "id": 5,
                "name": "Prepare dependencies",
                "run": "./y.sh prepare"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "./y.sh build --sysroot none"
            },
            {
                "id": 7,
                "name": "Benchmark",
                "run": "./y.sh bench"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Cache cargo target dir",
                "run": "actions/cache@v4"
            },
            {
                "id": 3,
                "name": "Set MinGW as the default toolchain",
                "run": "rustup set default-host x86_64-pc-windows-gnu"
            },
            {
                "id": 4,
                "name": "Use x86_64 compiler on macOS",
                "run": "rustup set default-host x86_64-apple-darwin"
            },
            {
                "id": 5,
                "name": "Install MinGW toolchain",
                "run": "sudo apt-get update\nsudo apt-get install -y gcc-mingw-w64-x86-64\n"
            },
            {
                "id": 6,
                "name": "Select XCode version",
                "run": "sudo xcode-select -s /Applications/Xcode_14.3.1.app"
            },
            {
                "id": 7,
                "name": "Prepare dependencies",
                "run": "./y.sh prepare"
            },
            {
                "id": 8,
                "name": "Build backend",
                "run": "./y.sh build --sysroot none"
            },
            {
                "id": 9,
                "name": "Build sysroot",
                "run": "./y.sh build"
            },
            {
                "id": 10,
                "name": "Package prebuilt cg_clif",
                "run": "tar cvfJ cg_clif.tar.xz dist"
            },
            {
                "id": 11,
                "name": "Upload prebuilt cg_clif",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 12,
                "name": "Upload prebuilt cg_clif (cross compile)",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Download all built artifacts",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "ls -R artifacts/\nmkdir release/\npushd artifacts/\nfor dir in *; do\n  mv $dir/cg_clif.tar.xz ../release/$dir.tar.xz\n  rmdir $dir/ # verify $dir is empty\ndone\npopd\nrmdir artifacts/ # verify all artifacts are represented in release/\nls -R release/\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm install --production"
            },
            {
                "id": 5,
                "name": "Publish Release",
                "run": "./.github/actions/github-release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "CPU features",
                "run": "cat /proc/cpuinfo"
            },
            {
                "id": 3,
                "name": "Cache cargo target dir",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Prepare dependencies",
                "run": "./y.sh prepare"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "./scripts/test_bootstrap.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "CPU features",
                "run": "cat /proc/cpuinfo"
            },
            {
                "id": 3,
                "name": "Cache cargo target dir",
                "run": "actions/cache@v4"
            },
            {
                "id": 4,
                "name": "Install ripgrep",
                "run": "sudo apt update\nsudo apt install -y ripgrep\n"
            },
            {
                "id": 5,
                "name": "Prepare dependencies",
                "run": "./y.sh prepare"
            },
            {
                "id": 6,
                "name": "Test",
                "run": "./scripts/test_rustc_tests.sh"
            }
        ]
    },
    "scroll-tech": {
        "scroll-tech/zkevm-circuits": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "echo \"halo2 PR ${{ env.HALO2PR }} submitted by ${{ env.GH_USER }}\""
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "echo \"Running prover benchmarking due to ${{ github.event.inputs.event-type }}.\""
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": ".github/proverCiScripts/wakeUpProver.sh"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "ssh prover \"bash -s\" -- < .github/proverCiScripts/rsSysstat.sh\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "ssh prover \"bash -s\" -- < .github/proverCiScripts/prepareProver.sh \"${{ github.event.inputs.halo2pr }}[halo2]\" \"${{ github.workspace }}\"\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": ".github/proverCiScripts/deployToProver.sh \"${{ github.event.inputs.halo2pr }}[halo2]\" \"${{ github.workspace }}\""
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "ssh prover \"bash -s\" -- < .github/proverCiScripts/injectHalo2Revision.sh \"${{ github.event.inputs.halo2pr }}[halo2]\" \"${{ github.event.inputs.revision }}\"\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "ssh prover \"bash -s\" -- < .github/proverCiScripts/execBench.sh \"${{ github.event.inputs.halo2pr }}[halo2]\" 19\n"
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "ssh prover \"bash -s\" -- < .github/proverCiScripts/getSysstat.sh \"${{ github.event.inputs.halo2pr }}[halo2]\"\n"
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": ".github/proverCiScripts/shutdownProver.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "fkirc/skip-duplicate-actions@v5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set HOME env",
                "run": "echo \"HOME=/home/CI\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 4,
                "name": "Setup golang",
                "run": "actions/setup-go@v3"
            },
            {
                "id": 5,
                "name": "Go cache",
                "run": "actions/cache@v3"
            },
            {
                "id": 6,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 7,
                "name": "Run light tests",
                "run": "cargo test --verbose --release --all --exclude prover --exclude integration-tests --exclude circuit-benchmarks -- -Zunstable-options --report-time"
            },
            {
                "id": 8,
                "name": "Run heavy tests",
                "run": "cargo test --verbose --release --all --all-features --exclude integration-tests --exclude circuit-benchmarks serial_ -- --ignored --test-threads 1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "set HOME env",
                "run": "echo \"HOME=/home/CI\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 4,
                "name": "Setup golang",
                "run": "actions/setup-go@v3"
            },
            {
                "id": 5,
                "name": "Go cache",
                "run": "actions/cache@v3"
            },
            {
                "id": 6,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 7,
                "name": "Run light tests",
                "run": "cargo test --verbose --release --all --features scroll --exclude integration-tests --exclude circuit-benchmarks --exclude testool -- -Zunstable-options --report-time"
            },
            {
                "id": 8,
                "name": "Run heavy tests",
                "run": "cargo test --verbose --release --features scroll --all --exclude integration-tests --exclude circuit-benchmarks serial_  -- --ignored --skip max_tx -Zunstable-options --report-time"
            },
            {
                "id": 9,
                "name": "Run parallel assignment tests(bytecode)",
                "run": "cargo test --release --package zkevm-circuits --lib bytecode_circuit::test --features scroll,parallel_syn -- --nocapture"
            },
            {
                "id": 10,
                "name": "Run parallel assignment tests(state)",
                "run": "cargo test --release --package zkevm-circuits --lib state_circuit::test --features scroll,parallel_syn -- --nocapture"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Add target",
                "run": "rustup target add ${{ matrix.target }}"
            },
            {
                "id": 4,
                "name": "Go cache",
                "run": "actions/cache@v3"
            },
            {
                "id": 5,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 6,
                "name": "cargo build",
                "run": "cargo build --all-features"
            },
            {
                "id": 7,
                "name": "cargo build benchmarks no-run",
                "run": "cargo test --verbose --release --all-features -p circuit-benchmarks --no-run"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Go cache",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Build benchmarks",
                "run": "cargo build --benches --examples --all-features"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Go cache",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "cargo fetch",
                "run": "cargo fetch"
            },
            {
                "id": 6,
                "name": "Check intra-doc links",
                "run": "cargo doc --no-deps --all --document-private-items"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Go cache",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Cargo check",
                "run": "cargo check --all-features"
            },
            {
                "id": 6,
                "name": "Cargo fmt",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "crate-ci/typos@v1.22.7"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "release-drafter/release-drafter@v5"
            },
            {
                "id": 1,
                "name": "Check out repository code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": ".github/proverCiScripts/wakeUpProver.sh"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "ssh prover \"bash -s\" -- < .github/proverCiScripts/rsSysstat.sh \"${{ env.PR_NUMBER }}\"\n"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "ssh prover \"bash -s\" -- < .github/proverCiScripts/prepareProver.sh \"${{ env.PR_NUMBER }}\" \"${{ github.workspace }}\"\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": ".github/proverCiScripts/deployToProver.sh \"${{ env.PR_NUMBER }}\" \"${{ github.workspace }}\""
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "ssh prover \"bash -s\" -- < .github/proverCiScripts/execBench.sh \"${{ env.PR_NUMBER }}\" 19 '\"${{ github.event.label.name }}\"'\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "ssh prover \"bash -s\" -- < .github/proverCiScripts/getSysstat.sh \"${{ env.PR_NUMBER }}\"\n"
            },
            {
                "id": 8,
                "name": "Calculate Benchmark Result",
                "run": ".github/proverCiScripts/processResults.sh \"${{ env.PR_NUMBER }}\" '\"${{ github.event.label.name }}\"' \"19\""
            },
            {
                "id": 9,
                "name": "PowerOff prover",
                "run": ".github/proverCiScripts/shutdownProver.sh"
            },
            {
                "id": 1,
                "name": "Ping runner workflow",
                "run": "curl -H \"authorization: token $GH_OPS_PAT\" 'https://api.github.com/repos/privacy-scaling-explorations/github-ops/actions/workflows/zkevm-circuits.yml/dispatches' -d '{\"ref\": \"master\"}'\n"
            },
            {
                "id": 1,
                "name": "Select instance and prover type",
                "run": "if [ \"${{ github.event.inputs.provertype }}\" = \"real_prover\" ] || [ \"${{ github.event_name }}\" = \"schedule\" ]; then\n  echo \"instancetype=r6i.32xlarge\" >> \"$GITHUB_OUTPUT\"\n  echo \"provertype=real_prover\" >> \"$GITHUB_OUTPUT\"\nelif [ \"${{ github.event.inputs.provertype }}\" = \"mock_prover\" ] || [ -z ${{ github.event.inputs.provertype }} ]; then\n  echo \"instancetype=c5.9xlarge\" >> \"$GITHUB_OUTPUT\"\n  echo \"provertype=mock_prover\" >> \"$GITHUB_OUTPUT\"\nelse\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Setup golang",
                "run": "actions/setup-go@v3"
            },
            {
                "id": 4,
                "name": "Go cache",
                "run": "actions/cache@v3"
            },
            {
                "id": 5,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 6,
                "name": "Build bins",
                "run": "cargo build --bin gen_blockchain_data"
            },
            {
                "id": 7,
                "name": "Build tests",
                "run": "for testname in rpc circuit_input_builder circuits; do cargo test --profile release --test $testname --features $testname --no-run; done"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "./run.sh --steps \"setup\""
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "./run.sh --steps \"gendata\""
            },
            {
                "id": 10,
                "name": "Step 10",
                "run": "./run.sh --steps \"tests\" --tests \"rpc\""
            },
            {
                "id": 11,
                "name": "Step 11",
                "run": "./run.sh --steps \"tests\" --tests \"circuit_input_builder\""
            },
            {
                "id": 12,
                "name": "Step 12",
                "run": "RUST_TEST_THREADS=1 ./run.sh --steps \"tests\" --tests \"circuits::${{ needs.set-outputs.outputs.provertype }}\""
            },
            {
                "id": 13,
                "name": "Step 13",
                "run": "./run.sh --steps \"cleanup\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/labeler@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "fkirc/skip-duplicate-actions@v5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Go cache",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Run clippy",
                "run": "cargo clippy --all-features --all-targets -- -D warnings"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": true
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": ".github/ciChecksScripts/wakeUpRunner.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "semgrep ci"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "fkirc/skip-duplicate-actions@v5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Go cache",
                "run": "actions/cache@v3"
            },
            {
                "id": 4,
                "name": "Cargo cache",
                "run": "actions/cache@v3"
            },
            {
                "id": 5,
                "name": "${{ matrix.crate }}: ${{ matrix.feature }}",
                "run": "GIT_ROOT=$(pwd)\ncd /tmp\ncargo new foobar\ncd foobar\ncp \"${GIT_ROOT}/rust-toolchain\" . || true\ncargo add --path \"${GIT_ROOT}/${{ matrix.crate }}\" --features '${{ matrix.feature }}'\ncd ../\nrm -rf foobar\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "echo dummy"
            }
        ],
        "scroll-tech/zkevm-specs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\nmake install\n"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "make lint"
            },
            {
                "id": 5,
                "name": "Type check",
                "run": "make type"
            },
            {
                "id": 6,
                "name": "Test with pytest",
                "run": "make test"
            }
        ],
        "scroll-tech/halo2": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup component add rustfmt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Build benchmarks",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Install cargo-tarpaulin",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 4,
                "name": "Generate coverage report",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 5,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v3.1.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "cargo fetch",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 4,
                "name": "Check intra-doc links",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Add target",
                "run": "rustup target add ${{ matrix.target }}"
            },
            {
                "id": 4,
                "name": "cargo build",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Run Clippy (beta)",
                "run": "actions-rs/clippy-check@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Run clippy",
                "run": "actions-rs/clippy-check@v1"
            },
            {
                "id": 1,
                "name": "Install curl",
                "run": "sudo apt-get update\nsudo apt-get install curl\n"
            },
            {
                "id": 2,
                "name": "Send repo api call",
                "run": "curl \\\n -X POST \\\n -H \"Accept: application/vnd.github.v3+json\" \\\n -u ZKEVMBOT:${{ env._TOKEN }} \\\n https://api.github.com/repos/appliedzkp/zkevm-circuits/actions/workflows/ProverBenchFromHalo2.yml/dispatches \\\n -d \"{\\\"ref\\\":\\\"main\\\",\\\"inputs\\\":{\\\"halo2pr\\\":\\\"${{ env.PR_NUMBER }}\\\",\\\"revision\\\":\\\"${{ env.REVISION }}\\\",\\\"event-type\\\":\\\"halo2_wfdispatch\\\",\\\"ghuser\\\": \\\"${{ env.GH_USER }}\\\"}}\"\n"
            }
        ],
        "scroll-tech/go-ethereum": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "check diff",
                "run": "set -euo pipefail\n\n# fetch develop branch so that we can diff against later\ngit fetch origin develop\n\necho 'checking verion changes in diff...'\n\n# check if version changed in version.go\n# note: the grep will fail if use \\d instead of [0-9]\ngit diff HEAD..origin/develop --text --no-ext-diff --unified=0 --no-prefix params/version.go | grep -E '^\\+\\s*VersionPatch' && true\n\nexit_code=$?\n\n# auto bump if version is not bumped manually\necho '> require auto version bump?'\n\nif [ $exit_code -eq 0 ]; then\n  echo '> no, already bumped'\n  echo \"result=no-bump\" >> \"$GITHUB_OUTPUT\"\nelse\n  echo '> yes'\n  echo \"result=bump\" >> \"$GITHUB_OUTPUT\"\nfi\n"
            },
            {
                "id": 3,
                "name": "Install Node.js 16",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 4,
                "name": "bump version in params/version.go",
                "run": "node .github/scripts/bump_version_dot_go.mjs"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "stefanzweifel/git-auto-commit-action@3ea6ae190baf489ba007f7c92608f33ce20ef04a"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "make nccc_geth\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Install rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "make libzkp\nsudo cp ./rollup/circuitcapacitychecker/libzkp/libzkp.so /usr/local/lib/\nsudo cp ./rollup/circuitcapacitychecker/libzkp/libzktrie.so /usr/local/lib/\nmake geth\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Lint",
                "run": "rm -rf $HOME/.cache/golangci-lint\nmake lint\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Install goimports",
                "run": "go install golang.org/x/tools/cmd/goimports@latest"
            },
            {
                "id": 3,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "goimports -local github.com/scroll-tech/go-ethereum/ -w ."
            },
            {
                "id": 5,
                "name": "Verify no changes from goimports",
                "run": "if [ -n \"$(git status --porcelain)\" ]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "go mod tidy"
            },
            {
                "id": 4,
                "name": "Verify no changes from go mod tidy",
                "run": "if [ -n \"$(git status --porcelain)\" ]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "make test\n"
            },
            {
                "id": 4,
                "name": "Upload coverage report",
                "run": "bash <(curl -s https://codecov.io/bash)"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "semgrep ci"
            }
        ],
        "scroll-tech/go-merkletree": [
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v1"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Lint",
                "run": "curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.30.0\n$(go env GOPATH)/bin/golangci-lint run --timeout=5m -c .golangci.yml\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v1"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "go test ./..."
            }
        ],
        "scroll-tech/mpt-circuit": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "make fmt"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "make clippy"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "make test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "make test_par"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "make bench"
            }
        ],
        "scroll-tech/scroll-prover": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "fkirc/skip-duplicate-actions@v5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Cargo check",
                "run": "cargo check --all-features"
            },
            {
                "id": 5,
                "name": "Cargo fmt",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Run clippy",
                "run": "cargo clippy --all-features --all-targets -- -D warnings"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "fkirc/skip-duplicate-actions@v5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config --system --add safe.directory /__w/scroll-prover/scroll-prover"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 4,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Setup golang",
                "run": "actions/setup-go@v3"
            },
            {
                "id": 6,
                "name": "Go cache",
                "run": "actions/cache@v3"
            },
            {
                "id": 7,
                "name": "Run tests",
                "run": "make test"
            }
        ],
        "scroll-tech/rollup-explorer-backend": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo build --release\ncargo fmt --all -- --check\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "cargo clippy -- -D warnings"
            },
            {
                "id": 1,
                "name": "Check out repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Dockerhub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 6,
                "name": "Login to Amazon ECR",
                "run": "aws-actions/amazon-ecr-login@v2"
            },
            {
                "id": 7,
                "name": "Build image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "taiki-e/install-action@nextest"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "cargo nextest run --all"
            }
        ],
        "scroll-tech/halo2wrong": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Build",
                "run": "cargo build --verbose --release"
            },
            {
                "id": 3,
                "name": "Run tests",
                "run": "cargo test --verbose --release"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            }
        ],
        "scroll-tech/scroll": [
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Lint",
                "run": "rm -rf $HOME/.cache/golangci-lint\nmake lint\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "make test\n"
            },
            {
                "id": 4,
                "name": "Upload coverage reports to Codecov",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install goimports",
                "run": "go install golang.org/x/tools/cmd/goimports"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "goimports -local scroll-tech/bridge-history-api/ -w ."
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "go mod tidy"
            },
            {
                "id": 6,
                "name": "Verify no changes from goimports and go mod tidy",
                "run": "if [ -n \"$(git status --porcelain)\" ]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "check diff",
                "run": "set -euo pipefail\n\n# fetch develop branch so that we can diff against later\ngit fetch origin develop\n\necho 'checking verion changes in diff...'\n\n# check if version changed in version.go\n# note: the grep will fail if use \\d instead of [0-9]\ngit diff HEAD..origin/develop --text --no-ext-diff --unified=0 --no-prefix common/version/version.go | grep -E '^\\+var tag = \"v[0-9]+\\.[0-9]+\\.[0-9]+\"$' && true\n\nexit_code=$?\n\n# auto bump if version is not bumped manually\necho '> require auto version bump?'\n\nif [ $exit_code -eq 0 ]; then\n  echo '> no, already bumped'\n  echo \"result=no-bump\" >> \"$GITHUB_OUTPUT\"\nelse\n  echo '> yes'\n  echo \"result=bump\" >> \"$GITHUB_OUTPUT\"\nfi\n"
            },
            {
                "id": 3,
                "name": "Install Node.js 16",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 4,
                "name": "bump version in common/version/version.go",
                "run": "node .github/scripts/bump_version_dot_go.mjs"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "stefanzweifel/git-auto-commit-action@3ea6ae190baf489ba007f7c92608f33ce20ef04a"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 2,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 3,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Cache cargo",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "rm -rf $HOME/.cache/golangci-lint\nmake lint\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install goimports",
                "run": "go install golang.org/x/tools/cmd/goimports"
            },
            {
                "id": 4,
                "name": "Run goimports lint",
                "run": "goimports -local scroll-tech/common/ -w ."
            },
            {
                "id": 5,
                "name": "Run go mod tidy",
                "run": "go mod tidy"
            },
            {
                "id": 6,
                "name": "Verify no changes from goimports and go mod tidy",
                "run": "if [ -n \"$(git status --porcelain)\" ]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install Solc",
                "run": "supplypike/setup-bin@v3"
            },
            {
                "id": 4,
                "name": "Install Geth Tools",
                "run": "gacts/install-geth-tools@v1"
            },
            {
                "id": 5,
                "name": "Build prerequisites",
                "run": "make dev_docker\n"
            },
            {
                "id": 6,
                "name": "Test common packages",
                "run": "go test -v -race -gcflags=\"-l\" -ldflags=\"-s=false\" -coverprofile=coverage.txt -covermode=atomic ./...\n"
            },
            {
                "id": 7,
                "name": "Upload coverage reports to Codecov",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Foundry",
                "run": "foundry-rs/foundry-toolchain@v1"
            },
            {
                "id": 3,
                "name": "Setup LCOV",
                "run": "hrishikesh-kadam/setup-lcov@v1"
            },
            {
                "id": 4,
                "name": "Install Node.js 18",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 5,
                "name": "Get yarn cache directory path",
                "run": "echo \"::set-output name=dir::$(yarn cache dir)\""
            },
            {
                "id": 6,
                "name": "Cache yarn dependencies",
                "run": "actions/cache@v2"
            },
            {
                "id": 7,
                "name": "Cache node_modules",
                "run": "actions/cache@v2"
            },
            {
                "id": 8,
                "name": "yarn install",
                "run": "yarn install"
            },
            {
                "id": 9,
                "name": "Compile with foundry",
                "run": "forge build --evm-version cancun"
            },
            {
                "id": 10,
                "name": "Run foundry tests",
                "run": "forge test --evm-version cancun -vvv"
            },
            {
                "id": 11,
                "name": "Run foundry coverage",
                "run": "forge coverage --evm-version cancun --report lcov"
            },
            {
                "id": 12,
                "name": "Prune coverage",
                "run": "lcov --rc branch_coverage=1 --remove ./lcov.info -o ./lcov.info.pruned 'src/mocks/*' 'src/test/*' 'scripts/*' 'node_modules/*' 'lib/*'"
            },
            {
                "id": 13,
                "name": "Upload coverage reports to Codecov",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Node.js 18",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Get yarn cache directory path",
                "run": "echo \"::set-output name=dir::$(yarn cache dir)\""
            },
            {
                "id": 4,
                "name": "Cache yarn dependencies",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Cache node_modules",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "yarn install",
                "run": "yarn install"
            },
            {
                "id": 7,
                "name": "Compile with hardhat",
                "run": "npx hardhat compile"
            },
            {
                "id": 8,
                "name": "Run hardhat tests",
                "run": "npx hardhat test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 2,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 3,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "rm -rf $HOME/.cache/golangci-lint\nmake lint\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install goimports",
                "run": "go install golang.org/x/tools/cmd/goimports"
            },
            {
                "id": 4,
                "name": "Run goimports lint",
                "run": "goimports -local scroll-tech/coordinator/ -w ."
            },
            {
                "id": 5,
                "name": "Run go mod tidy",
                "run": "go mod tidy"
            },
            {
                "id": 6,
                "name": "Verify no changes from goimports and go mod tidy",
                "run": "if [ -n \"$(git status --porcelain)\" ]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install Solc",
                "run": "supplypike/setup-bin@v3"
            },
            {
                "id": 4,
                "name": "Install Geth Tools",
                "run": "gacts/install-geth-tools@v1"
            },
            {
                "id": 5,
                "name": "Build prerequisites",
                "run": "make dev_docker\n"
            },
            {
                "id": 6,
                "name": "Test coordinator packages",
                "run": "# go test -exec \"env LD_LIBRARY_PATH=${PWD}/verifier/lib\" -v -race -gcflags=\"-l\" -ldflags=\"-s=false\" -coverpkg=\"scroll-tech/coordinator\" -coverprofile=coverage.txt -covermode=atomic ./...\ngo test -v -race -gcflags=\"-l\" -ldflags=\"-s=false\" -coverprofile=coverage.txt -covermode=atomic -tags mock_verifier ./...\n"
            },
            {
                "id": 7,
                "name": "Upload coverage reports to Codecov",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Lint",
                "run": "rm -rf $HOME/.cache/golangci-lint\nmake lint\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install goimports",
                "run": "go install golang.org/x/tools/cmd/goimports"
            },
            {
                "id": 4,
                "name": "Run goimports lint",
                "run": "goimports -local scroll-tech/database/ -w ."
            },
            {
                "id": 5,
                "name": "Run go mod tidy",
                "run": "go mod tidy"
            },
            {
                "id": 6,
                "name": "Verify no changes from goimports and go mod tidy",
                "run": "if [ -n \"$(git status --porcelain)\" ]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install Solc",
                "run": "supplypike/setup-bin@v3"
            },
            {
                "id": 4,
                "name": "Install Geth Tools",
                "run": "gacts/install-geth-tools@v1"
            },
            {
                "id": 5,
                "name": "Build prerequisites",
                "run": "make dev_docker\n"
            },
            {
                "id": 6,
                "name": "Test database packages",
                "run": "go test -v -race -gcflags=\"-l\" -ldflags=\"-s=false\" -coverprofile=coverage.txt -covermode=atomic ./...\n"
            },
            {
                "id": 7,
                "name": "Upload coverage reports to Codecov",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 6,
                "name": "Login to Amazon ECR",
                "run": "aws-actions/amazon-ecr-login@v2"
            },
            {
                "id": 7,
                "name": "check repo and create it if not exist",
                "run": "aws --region ${{ env.AWS_REGION }} ecr describe-repositories --repository-names ${{ env.REPOSITORY }} && : || aws --region ${{ env.AWS_REGION }} ecr create-repository --repository-name ${{ env.REPOSITORY }}\n"
            },
            {
                "id": 8,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 6,
                "name": "Login to Amazon ECR",
                "run": "aws-actions/amazon-ecr-login@v2"
            },
            {
                "id": 7,
                "name": "check repo and create it if not exist",
                "run": "aws --region ${{ env.AWS_REGION }} ecr describe-repositories --repository-names ${{ env.REPOSITORY }} && : || aws --region ${{ env.AWS_REGION }} ecr create-repository --repository-name ${{ env.REPOSITORY }}\n"
            },
            {
                "id": 8,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 6,
                "name": "Login to Amazon ECR",
                "run": "aws-actions/amazon-ecr-login@v2"
            },
            {
                "id": 7,
                "name": "check repo and create it if not exist",
                "run": "aws --region ${{ env.AWS_REGION }} ecr describe-repositories --repository-names ${{ env.REPOSITORY }} && : || aws --region ${{ env.AWS_REGION }} ecr create-repository --repository-name ${{ env.REPOSITORY }}\n"
            },
            {
                "id": 8,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 6,
                "name": "Login to Amazon ECR",
                "run": "aws-actions/amazon-ecr-login@v2"
            },
            {
                "id": 7,
                "name": "check repo and create it if not exist",
                "run": "aws --region ${{ env.AWS_REGION }} ecr describe-repositories --repository-names ${{ env.REPOSITORY }} && : || aws --region ${{ env.AWS_REGION }} ecr create-repository --repository-name ${{ env.REPOSITORY }}\n"
            },
            {
                "id": 8,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 6,
                "name": "Login to Amazon ECR",
                "run": "aws-actions/amazon-ecr-login@v2"
            },
            {
                "id": 7,
                "name": "check repo and create it if not exist",
                "run": "aws --region ${{ env.AWS_REGION }} ecr describe-repositories --repository-names ${{ env.REPOSITORY }} && : || aws --region ${{ env.AWS_REGION }} ecr create-repository --repository-name ${{ env.REPOSITORY }}\n"
            },
            {
                "id": 8,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 6,
                "name": "Login to Amazon ECR",
                "run": "aws-actions/amazon-ecr-login@v2"
            },
            {
                "id": 7,
                "name": "check repo and create it if not exist",
                "run": "aws --region ${{ env.AWS_REGION }} ecr describe-repositories --repository-names ${{ env.REPOSITORY }} && : || aws --region ${{ env.AWS_REGION }} ecr create-repository --repository-name ${{ env.REPOSITORY }}\n"
            },
            {
                "id": 8,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 6,
                "name": "Login to Amazon ECR",
                "run": "aws-actions/amazon-ecr-login@v2"
            },
            {
                "id": 7,
                "name": "check repo and create it if not exist",
                "run": "aws --region ${{ env.AWS_REGION }} ecr describe-repositories --repository-names ${{ env.REPOSITORY }} && : || aws --region ${{ env.AWS_REGION }} ecr create-repository --repository-name ${{ env.REPOSITORY }}\n"
            },
            {
                "id": 8,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 6,
                "name": "Login to Amazon ECR",
                "run": "aws-actions/amazon-ecr-login@v2"
            },
            {
                "id": 7,
                "name": "check repo and create it if not exist",
                "run": "aws --region ${{ env.AWS_REGION }} ecr describe-repositories --repository-names ${{ env.REPOSITORY }} && : || aws --region ${{ env.AWS_REGION }} ecr create-repository --repository-name ${{ env.REPOSITORY }}\n"
            },
            {
                "id": 8,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 6,
                "name": "Login to Amazon ECR",
                "run": "aws-actions/amazon-ecr-login@v2"
            },
            {
                "id": 7,
                "name": "check repo and create it if not exist",
                "run": "aws --region ${{ env.AWS_REGION }} ecr describe-repositories --repository-names ${{ env.REPOSITORY }} && : || aws --region ${{ env.AWS_REGION }} ecr create-repository --repository-name ${{ env.REPOSITORY }}\n"
            },
            {
                "id": 8,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install Solc",
                "run": "supplypike/setup-bin@v3"
            },
            {
                "id": 4,
                "name": "Install Geth Tools",
                "run": "gacts/install-geth-tools@v1"
            },
            {
                "id": 5,
                "name": "Build prerequisites",
                "run": "make dev_docker\nmake -C rollup mock_abi\nmake -C common/bytecode all\n"
            },
            {
                "id": 6,
                "name": "Run integration tests",
                "run": "go test -v -tags=\"mock_prover mock_verifier\" -p 1 -coverprofile=coverage.txt scroll-tech/integration-test/...\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "set tag env",
                "run": "if [ ${{github.event.inputs.BASE_IMAGE}} == \"cuda-go-rust-builder\" ]; then\n  echo \"TAG=cuda-${{ github.event.inputs.CUDA_VERSION }}-go-${{ github.event.inputs.GO_VERSION }}-rust-${{ github.event.inputs.RUST_VERSION }}\" >> $GITHUB_ENV\nelif [ ${{github.event.inputs.BASE_IMAGE}} == \"go-rust-builder\" ]; then\n  echo \"TAG=go-${{ github.event.inputs.GO_VERSION }}-rust-${{ github.event.inputs.RUST_VERSION }}\" >> $GITHUB_ENV\nelif [ ${{github.event.inputs.BASE_IMAGE}} == \"go-alpine-builder\" ]; then\n  echo \"TAG=${{ github.event.inputs.GO_VERSION }}\" >> $GITHUB_ENV\nelif [ ${{github.event.inputs.BASE_IMAGE}} == \"rust-builder\" ]; then\n  echo \"TAG=${{ github.event.inputs.RUST_VERSION }}\" >> $GITHUB_ENV\nelif [ ${{github.event.inputs.BASE_IMAGE}} == \"rust-alpine-builder\" ]; then\n  echo \"TAG=${{ github.event.inputs.RUST_VERSION }}\" >> $GITHUB_ENV\nelif [ ${{github.event.inputs.BASE_IMAGE}} == \"go-rust-alpine-builder\" ]; then\n  echo \"TAG=go-${{ github.event.inputs.GO_VERSION }}-rust-${{ github.event.inputs.RUST_VERSION }}\" >> $GITHUB_ENV\nelif [ ${{github.event.inputs.BASE_IMAGE}} == \"py-runner\" ]; then\n  echo \"TAG=${{ github.event.inputs.PYTHON_VERSION }}\" >> $GITHUB_ENV\nelse\n  echo \"no BASE_IMAGE match\"\nfi\n"
            },
            {
                "id": 6,
                "name": "Build image",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "fkirc/skip-duplicate-actions@v5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Cargo check",
                "run": "cargo check --all-features"
            },
            {
                "id": 5,
                "name": "Cargo fmt",
                "run": "cargo fmt --all -- --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Cargo cache",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Run clippy",
                "run": "cargo clippy --all-features --all-targets -- -D warnings"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@master"
            },
            {
                "id": 3,
                "name": "Cache cargo",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Test",
                "run": "make prover"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install Solc",
                "run": "supplypike/setup-bin@v3"
            },
            {
                "id": 4,
                "name": "Install Geth Tools",
                "run": "gacts/install-geth-tools@v1"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "rm -rf $HOME/.cache/golangci-lint\nmake mock_abi\nmake lint\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install goimports",
                "run": "go install golang.org/x/tools/cmd/goimports"
            },
            {
                "id": 4,
                "name": "Run goimports lint",
                "run": "goimports -local scroll-tech/rollup/ -w ."
            },
            {
                "id": 5,
                "name": "Run go mod tidy",
                "run": "go mod tidy"
            },
            {
                "id": 6,
                "name": "Verify no changes from goimports and go mod tidy",
                "run": "if [ -n \"$(git status --porcelain)\" ]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install Solc",
                "run": "supplypike/setup-bin@v3"
            },
            {
                "id": 4,
                "name": "Install Geth Tools",
                "run": "gacts/install-geth-tools@v1"
            },
            {
                "id": 5,
                "name": "Build prerequisites",
                "run": "make dev_docker\nmake -C rollup mock_abi\n"
            },
            {
                "id": 6,
                "name": "Build rollup binaries",
                "run": "make rollup_bins\n"
            },
            {
                "id": 7,
                "name": "Test rollup packages",
                "run": "make test\n"
            },
            {
                "id": 8,
                "name": "Upload coverage reports to Codecov",
                "run": "codecov/codecov-action@v3"
            }
        ],
        "scroll-tech/frontends": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "hmarr/auto-approve-action@de8ae18c173c131e182d4adf2c874d8d2308a85b"
            },
            {
                "id": 1,
                "name": "automerge-merge",
                "run": "pascalgn/automerge-action@22948e0bc22f0aa673800da838595a3e7347e584"
            },
            {
                "id": 1,
                "name": "automerge-squash",
                "run": "pascalgn/automerge-action@22948e0bc22f0aa673800da838595a3e7347e584"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "cat package.json",
                "run": "cat ./package.json"
            },
            {
                "id": 3,
                "name": "Automated Version Bump",
                "run": "phips28/gh-action-bump-version@0a5ec790bacbcce44005b6a806310cfcca5f32a6"
            },
            {
                "id": 4,
                "name": "Get Version Bump Commit Message",
                "run": "echo \"::set-output name=title::$(git log --pretty=format:\"%s\" -1)\""
            },
            {
                "id": 5,
                "name": "Create Pull Request for production",
                "run": "peter-evans/create-pull-request@2b011faafdcbc9ceb11414d64d0573f37c774b04"
            },
            {
                "id": 1,
                "name": "Checkout source code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git config --local user.email \"actions@github.com\"\ngit config --local user.name \"github-actions\"\n"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "git fetch --unshallow\ngit checkout sepolia\ngit merge --no-ff origin/mainnet -m \"Auto-merge prod back to dev\u2009[bot]\"\n"
            },
            {
                "id": 4,
                "name": "Create Pull Request for dev",
                "run": "peter-evans/create-pull-request@2b011faafdcbc9ceb11414d64d0573f37c774b04"
            }
        ],
        "scroll-tech/halo2curves": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Test",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "rustup component add rustfmt"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Run clippy",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 3,
                "name": "Bench arithmetic",
                "run": "actions-rs/cargo@v1"
            },
            {
                "id": 4,
                "name": "Bench assembly arithmetic",
                "run": "actions-rs/cargo@v1"
            }
        ],
        "scroll-tech/web3go": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Go",
                "run": "actions/setup-go@v3"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "go build -v ./..."
            },
            {
                "id": 4,
                "name": "Test",
                "run": "go test -v ./..."
            }
        ],
        "scroll-tech/blockscout": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "ELIXIR_VERSION.lock",
                "run": "echo \"${ELIXIR_VERSION}\" > ELIXIR_VERSION.lock"
            },
            {
                "id": 4,
                "name": "OTP_VERSION.lock",
                "run": "echo \"${OTP_VERSION}\" > OTP_VERSION.lock"
            },
            {
                "id": 5,
                "name": "Restore Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "Conditionally build Mix deps cache",
                "run": "mix local.hex --force\nmix local.rebar --force\nmix deps.get\nmix deps.compile\ncd deps/libsecp256k1\nmake\n"
            },
            {
                "id": 7,
                "name": "Restore Explorer NPM Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 8,
                "name": "Conditionally build Explorer NPM Cache",
                "run": "npm install"
            },
            {
                "id": 9,
                "name": "Restore Blockscout Web NPM Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 10,
                "name": "Conditionally build Blockscout Web NPM Cache",
                "run": "npm install"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "Restore Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "mix credo"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "Restore Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "mix format --check-formatted"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "Restore Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Restore Dialyzer Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Conditionally build Dialyzer Cache",
                "run": "mkdir -p priv/plts\nmix dialyzer --plt\n"
            },
            {
                "id": 6,
                "name": "Run Dialyzer",
                "run": "mix dialyzer --halt-exit-status"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "Restore Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "mix gettext.extract --merge | tee stdout.txt\n! grep \"Wrote \" stdout.txt\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Scan explorer for vulnerabilities",
                "run": "mix sobelow --config"
            },
            {
                "id": 5,
                "name": "Scan block_scout_web for vulnerabilities",
                "run": "mix sobelow --config"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Restore Explorer NPM Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Restore Blockscout Web NPM Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "Run cspell",
                "run": "streetsidesoftware/cspell-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Restore Explorer NPM Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Restore Blockscout Web NPM Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "Build assets",
                "run": "node node_modules/webpack/bin/webpack.js --mode development"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "./node_modules/.bin/eslint --format=junit --output-file=\"test/eslint/junit.xml\" js/**"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Restore Blockscout Web NPM Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Build assets",
                "run": "node node_modules/webpack/bin/webpack.js --mode development"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "./node_modules/.bin/jest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./bin/install_chrome_headless.sh"
            },
            {
                "id": 5,
                "name": "mix test --exclude no_nethermind",
                "run": "cd apps/ethereum_jsonrpc\nmix compile\nmix test --no-start --exclude no_nethermind\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Restore Explorer NPM Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "./bin/install_chrome_headless.sh"
            },
            {
                "id": 6,
                "name": "mix test --exclude no_nethermind",
                "run": "mix ecto.create --quiet\nmix ecto.migrate\ncd apps/explorer\nmix compile\nmix test --no-start --exclude no_nethermind\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "./bin/install_chrome_headless.sh"
            },
            {
                "id": 5,
                "name": "mix test --exclude no_nethermind",
                "run": "mix ecto.create --quiet\nmix ecto.migrate\ncd apps/indexer\nmix compile\nmix test --no-start --exclude no_nethermind\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "erlef/setup-beam@v1"
            },
            {
                "id": 3,
                "name": "Mix Deps Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 4,
                "name": "Restore Explorer NPM Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 5,
                "name": "Restore Blockscout Web NPM Cache",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "Build assets",
                "run": "node node_modules/webpack/bin/webpack.js --mode development"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "./bin/install_chrome_headless.sh"
            },
            {
                "id": 8,
                "name": "mix test --exclude no_nethermind",
                "run": "mix ecto.create --quiet\nmix ecto.migrate\ncd apps/block_scout_web\nmix compile\nmix test --no-start --exclude no_nethermind\n"
            },
            {
                "id": 1,
                "name": "Check out the repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Log in to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 6,
                "name": "Add SHORT_SHA env property with commit short sha",
                "run": "echo \"SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`\" >> $GITHUB_ENV"
            },
            {
                "id": 7,
                "name": "Add outputs",
                "run": "echo \"::set-output name=release-version::${{ env.NEXT_RELEASE_VERSION }}\"\necho \"::set-output name=short-sha::${{ env.SHORT_SHA }}\"\n"
            },
            {
                "id": 8,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 9,
                "name": "Build and push Docker image for frontend",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Get Vault credentials",
                "run": "hashicorp/vault-action@v2.4.1"
            },
            {
                "id": 2,
                "name": "Trigger deploy",
                "run": "convictional/trigger-workflow-and-wait@v1.6.1"
            },
            {
                "id": 1,
                "name": "Check out the repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Log in to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 4,
                "name": "Add SHORT_SHA env property with commit short sha",
                "run": "echo \"SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Check out the repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Log in to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 4,
                "name": "Add SHORT_SHA env property with commit short sha",
                "run": "echo \"SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Check out the repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Log in to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 4,
                "name": "Add SHORT_SHA env property with commit short sha",
                "run": "echo \"SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Check out the repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Log in to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 4,
                "name": "Add SHORT_SHA env property with commit short sha",
                "run": "echo \"SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Check out the repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Log in to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 4,
                "name": "Add SHORT_SHA env property with commit short sha",
                "run": "echo \"SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Check out the repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Log in to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 4,
                "name": "Add SHORT_SHA env property with commit short sha",
                "run": "echo \"SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Check out the repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Log in to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 3,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 4,
                "name": "Add SHORT_SHA env property with commit short sha",
                "run": "echo \"SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`\" >> $GITHUB_ENV"
            },
            {
                "id": 5,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc"
            },
            {
                "id": 1,
                "name": "Check out the repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Log in to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 6,
                "name": "Add SHORT_SHA env property with commit short sha",
                "run": "echo \"SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`\" >> $GITHUB_ENV"
            },
            {
                "id": 7,
                "name": "Build and push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Check out the repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Log in to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Extract metadata (tags, labels) for Docker",
                "run": "docker/metadata-action@v4"
            },
            {
                "id": 6,
                "name": "Build & Push Docker image",
                "run": "docker/build-push-action@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set Git config",
                "run": "git config --local user.email \"actions@github.com\"\ngit config --local user.name \"Github Actions\"\n"
            },
            {
                "id": 3,
                "name": "Merge master back after release",
                "run": "git fetch --unshallow\ntouch errors.txt\nfor branch in $BRANCHES;\ndo\n  git reset --merge\n  git checkout master\n  git fetch origin\n  echo $branch\n  git ls-remote --exit-code --heads origin $branch || { echo $branch >> errors.txt; continue; }\n  echo \"Merge 'master' to $branch\"\n  git checkout $branch\n  git pull || { echo $branch >> errors.txt; continue; }\n  git merge --no-ff master -m \"Auto-merge master back to $branch\" || { echo $branch >> errors.txt; continue; }\n  git push || { echo $branch >> errors.txt; continue; }\n  git checkout master;\ndone\n[ -s errors.txt ] && echo \"There are problems with merging 'master' to branches:\" || echo \"Errors file is empty\"\ncat errors.txt\n[ ! -s errors.txt ]"
            }
        ],
        "scroll-tech/token-list": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn install --frozen-lockfile"
            },
            {
                "id": 4,
                "name": "Patch token list version",
                "run": "git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\ngit config --global user.name \"github-actions\"\nnpm version patch\ngit reset --soft HEAD~1\n"
            },
            {
                "id": 5,
                "name": "Generate token list",
                "run": "yarn generate\n"
            },
            {
                "id": 6,
                "name": "Commit token list",
                "run": "stefanzweifel/git-auto-commit-action@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Use Node.js",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Get changed files",
                "run": "tj-actions/changed-files@v39"
            },
            {
                "id": 4,
                "name": "List all changed tokens",
                "run": "tokens=\"\"\nfor file in ${{ steps.changed-files.outputs.all_changed_files }}; do\n  token=$(echo -e \"$file\" | sed -nr \"s|^data/([^/]*/?).*|\\1|p\")\n  tokens+=\"${token},\"\ndone\necho \"changed tokens: ${tokens%,*}\"\necho \"result=${tokens%,*}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "yarn install",
                "run": "yarn install --frozen-lockfile\n"
            },
            {
                "id": 6,
                "name": "Validate token list",
                "run": "yarn validate ${{ steps.changed_tokens.outputs.result }} 2> err.txt 1> std.txt\n"
            },
            {
                "id": 7,
                "name": "Print validation output",
                "run": "echo '=== std.txt ==='\ncat std.txt\necho '=== err.txt ==='\ncat err.txt\n"
            }
        ],
        "scroll-tech/uniswap-v3-interface": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn lint"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn yarn-deduplicate --strategy=highest --list --fail"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn prepare"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn prepare"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "yarn build"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/upload-artifact@v2"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/cache@v3"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "yarn cypress install"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "./.github/actions/setup"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@v2"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/cache@v3"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "yarn cypress install"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "cypress-io/github-action@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "echo 'Finished cypress tests https\\://dashboard.cypress.io/projects/yp82ef'"
            }
        ],
        "scroll-tech/scroll-documentation": [
            {
                "id": 1,
                "name": "Checkout Repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Dependencies",
                "run": "npm i"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "npm run build"
            },
            {
                "id": 4,
                "name": "Update index",
                "run": "npm run update-algolia-index"
            },
            {
                "id": 1,
                "name": "Checkout Repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Dependencies",
                "run": "npm i"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "npm run build"
            },
            {
                "id": 4,
                "name": "Update index",
                "run": "npm run update-algolia-index"
            }
        ],
        "scroll-tech/nft-token-list": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Use Node.js 16.x",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Parse Issue Body",
                "run": "stefanbuck/github-issue-praser@v3"
            },
            {
                "id": 5,
                "name": "Parse Token",
                "run": "node scripts/parseToken.mjs"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/checkout@v3"
            },
            {
                "id": 7,
                "name": "Use Node.js 16.x",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 8,
                "name": "Install dependencies",
                "run": "yarn"
            },
            {
                "id": 9,
                "name": "Add Token",
                "run": "node scripts/addToken.mjs"
            },
            {
                "id": 10,
                "name": "Create Pull Request",
                "run": "peter-evans/create-pull-request@v4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Use Node.js 16.x",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Run Duplicate Detection Script",
                "run": "node scripts/checkDuplication.mjs"
            },
            {
                "id": 5,
                "name": "Show Token Map Info",
                "run": "thollander/actions-comment-pull-request@v2"
            },
            {
                "id": 6,
                "name": "Show Error Message",
                "run": "thollander/actions-comment-pull-request@v2"
            },
            {
                "id": 7,
                "name": "Mark Pr Duplicate",
                "run": "andymckay/labeler@1.0.4"
            },
            {
                "id": 8,
                "name": "Mark Issue Need Update",
                "run": "andymckay/labeler@1.0.4"
            }
        ],
        "scroll-tech/contribute-to-scroll": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/github-script@v6"
            }
        ],
        "scroll-tech/ethers-rs": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install mdbook",
                "run": "mkdir mdbook\ncurl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.21/mdbook-v0.4.21-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook\ncurl -sSL https://github.com/tommilligan/mdbook-admonish/releases/download/v1.8.0/mdbook-admonish-v1.8.0-x86_64-unknown-linux-gnu.tar.gz| tar -xz --directory=./mdbook\ncurl -sSL https://github.com/badboy/mdbook-mermaid/releases/download/v0.12.6/mdbook-mermaid-v0.12.6-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook\necho `pwd`/mdbook >> $GITHUB_PATH\n"
            },
            {
                "id": 3,
                "name": "Install mdbook-template",
                "run": "mkdir mdbook-template\ncurl -sSL https://github.com/sgoudham/mdbook-template/releases/latest/download/mdbook-template-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook-template\necho `pwd`/mdbook-template >> $GITHUB_PATH\n"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "mdbook-admonish install \nmdbook-mermaid install\nmdbook build\n"
            },
            {
                "id": 5,
                "name": "Save pages artifact",
                "run": "actions/upload-pages-artifact@v1"
            },
            {
                "id": 1,
                "name": "Deploy to GitHub Pages",
                "run": "actions/deploy-pages@v1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Install Anvil",
                "run": "foundry-rs/foundry-toolchain@v1"
            },
            {
                "id": 4,
                "name": "Install test binaries",
                "run": "./.github/scripts/install_test_binaries.sh"
            },
            {
                "id": 5,
                "name": "Install nextest",
                "run": "taiki-e/install-action@nextest"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 7,
                "name": "test ${{ matrix.flags.flags }}",
                "run": "cargo nextest run \\\n${{ matrix.flags.flags }} \\\n-E \"!(deps(ethers-etherscan) & kind(test))\" \\\n--retries 2\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "live tests",
                "run": "cargo test -p ethers-etherscan --test it"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "taiki-e/install-action@cargo-hack"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "cargo hack",
                "run": "cargo hack check --feature-powerset --depth 1 --all-targets"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@clippy"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "clippy",
                "run": "cargo clippy --workspace --all-features --all-targets"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "doc",
                "run": "cargo doc --workspace --all-features --no-deps --document-private-items"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@nightly"
            },
            {
                "id": 3,
                "name": "fmt --check",
                "run": "cargo fmt --all --check"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Install Anvil",
                "run": "foundry-rs/foundry-toolchain@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Check",
                "run": "cargo check --workspace --target wasm32-unknown-unknown"
            },
            {
                "id": 6,
                "name": "Install wasm-pack",
                "run": "curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 8,
                "name": "Run wasm example",
                "run": "yarn\nyarn anvil &\nwasm-pack test --headless --firefox\nwasm-pack test --headless --chrome\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Install Anvil",
                "run": "foundry-rs/foundry-toolchain@v1"
            },
            {
                "id": 4,
                "name": "Install test binaries",
                "run": "./.github/scripts/install_test_binaries.sh"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 6,
                "name": "Build and run all examples",
                "run": "./bin/run_all_examples"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "EmbarkStudios/cargo-deny-action@v1"
            }
        ],
        "scroll-tech/chain-monitor": [
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Lint",
                "run": "rm -rf $HOME/.cache/golangci-lint\nmake lint\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install goimports",
                "run": "go install golang.org/x/tools/cmd/goimports@latest"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "goimports -local scroll-tech/chain-monitor -w ."
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "go mod tidy"
            },
            {
                "id": 6,
                "name": "Verify no changes from goimports and go mod tidy",
                "run": "if [ -n \"$(git status --porcelain)\" ]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Test chain-monitor packages",
                "run": "make test\n"
            },
            {
                "id": 4,
                "name": "Upload coverage reports to Codecov",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Configure AWS credentials",
                "run": "aws-actions/configure-aws-credentials@v4"
            },
            {
                "id": 6,
                "name": "Login to Amazon ECR",
                "run": "aws-actions/amazon-ecr-login@v2"
            },
            {
                "id": 7,
                "name": "check repo and create it if not exist",
                "run": "aws --region ${{ env.AWS_REGION }} ecr describe-repositories --repository-names ${{ env.REPOSITORY }} && : || aws --region ${{ env.AWS_REGION }} ecr create-repository --repository-name ${{ env.REPOSITORY }}\n"
            },
            {
                "id": 8,
                "name": "Build and push",
                "run": "docker/build-push-action@v3"
            }
        ],
        "scroll-tech/revm": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install mdbook",
                "run": "mkdir mdbook\ncurl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.14/mdbook-v0.4.14-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook\necho `pwd`/mdbook >> $GITHUB_PATH\n"
            },
            {
                "id": 3,
                "name": "Install mdbook-template",
                "run": "mkdir mdbook-template\ncurl -sSL https://github.com/sgoudham/mdbook-template/releases/latest/download/mdbook-template-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook-template\necho `pwd`/mdbook-template >> $GITHUB_PATH\n"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "mdbook test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install mdbook-linkcheck",
                "run": "mkdir mdbook-linkcheck\ncurl -sSL -o mdbook-linkcheck.zip https://github.com/Michael-F-Bryan/mdbook-linkcheck/releases/latest/download/mdbook-linkcheck.x86_64-unknown-linux-gnu.zip\nunzip mdbook-linkcheck.zip -d ./mdbook-linkcheck\nchmod +x `pwd`/mdbook-linkcheck/mdbook-linkcheck\necho `pwd`/mdbook-linkcheck >> $GITHUB_PATH\n"
            },
            {
                "id": 3,
                "name": "Run linkcheck",
                "run": "mdbook-linkcheck --standalone"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install toolchain",
                "run": "dtolnay/rust-toolchain@nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "Install mdbook",
                "run": "mkdir mdbook\ncurl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.14/mdbook-v0.4.14-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook\necho `pwd`/mdbook >> $GITHUB_PATH\n"
            },
            {
                "id": 5,
                "name": "Install mdbook-template",
                "run": "mkdir mdbook-template\ncurl -sSL https://github.com/sgoudham/mdbook-template/releases/latest/download/mdbook-template-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook-template\necho `pwd`/mdbook-template >> $GITHUB_PATH\n"
            },
            {
                "id": 6,
                "name": "Build book",
                "run": "mdbook build"
            },
            {
                "id": 7,
                "name": "Build docs",
                "run": "RUSTDOCFLAGS=\"--enable-index-page -Zunstable-options\" cargo +nightly doc --all --no-deps"
            },
            {
                "id": 8,
                "name": "Move docs to book folder",
                "run": "mkdir -p target/book/docs\nmv target/doc target/book/docs\n"
            },
            {
                "id": 9,
                "name": "Archive artifact",
                "run": "chmod -c -R +rX \"target/book\" |\nwhile read line; do\n   echo \"::warning title=Invalid file permissions automatically fixed::$line\"\ndone\ntar \\\n  --dereference --hard-dereference \\\n  --directory \"target/book\" \\\n  -cvf \"$RUNNER_TEMP/artifact.tar\" \\\n  --exclude=.git \\\n  --exclude=.github \\\n  .\n"
            },
            {
                "id": 10,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Deploy to GitHub Pages",
                "run": "actions/deploy-pages@v2"
            },
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install toolchain",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "cargo test",
                "run": "cargo test --workspace --all-features"
            },
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install toolchain",
                "run": "dtolnay/rust-toolchain@nightly"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 4,
                "name": "cargo fmt",
                "run": "cargo +nightly fmt --all -- --check"
            },
            {
                "id": 5,
                "name": "cargo clippy",
                "run": "cargo +nightly clippy --workspace --all-features -- -D warnings"
            },
            {
                "id": 6,
                "name": "cargo check no-default-features",
                "run": "cd crates/revm\ncargo check --no-default-features\n"
            },
            {
                "id": 7,
                "name": "cargo check serde",
                "run": "cd crates/revm\ncargo check --no-default-features --features serde\n"
            },
            {
                "id": 8,
                "name": "cargo check std",
                "run": "cd crates/revm\ncargo check --no-default-features --features std\n"
            },
            {
                "id": 1,
                "name": "Checkout sources",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Checkout ethereum/tests",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "Install toolchain",
                "run": "dtolnay/rust-toolchain@stable"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "Swatinem/rust-cache@v2"
            },
            {
                "id": 5,
                "name": "Run Ethereum tests",
                "run": "cargo run --profile ethtests -p revme -- \\\nstatetest \\\nethtests/GeneralStateTests/ \\\nethtests/LegacyTests/Constantinople/GeneralStateTests/ \\\ntests/EIPTests/StateTests/stEIP5656-MCOPY/ \\\ntests/EIPTests/StateTests/stEIP1153-transientStorage/\n"
            }
        ],
        "scroll-tech/Casper": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn"
            },
            {
                "id": 4,
                "name": "Build and Upload",
                "run": "yarn prod"
            }
        ],
        "scroll-tech/zstd": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "make all",
                "run": "make all"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "make test",
                "run": "make test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "OS-X test",
                "run": "make test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "make test",
                "run": "sudo apt-get -qqq update\nmake libc6install\nCFLAGS=\"-m32\" make test\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "no intrinsics fuzztest",
                "run": "MOREFLAGS=\"-DZSTD_NO_INTRINSICS\" make -C tests fuzztest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "thread sanitizer zstreamtest",
                "run": "CC=clang ZSTREAM_TESTTIME=-T3mn make tsan-test-zstream"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "undefined behavior sanitizer zstreamtest",
                "run": "CC=clang make uasan-test-zstream"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "thread sanitizer fuzztest",
                "run": "CC=clang make tsan-fuzztest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "zstream tests in 32bit mode, with big tests",
                "run": "sudo apt-get -qqq update\nmake libc6install\nCC=clang make -C tests test-zstream32 FUZZER_FLAGS=\"--big-tests\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "gcc-8 + ASan + UBSan + Test Zstd",
                "run": "echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal main universe\" | sudo tee -a /etc/apt/sources.list\nsudo apt-get -qqq update\nmake gcc8install\nCC=gcc-8 make -j uasan-test-zstd </dev/null V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "clang + ASan + UBSan + Test Zstd",
                "run": "CC=clang make -j uasan-test-zstd </dev/null V=1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "ASan + UBSan + Test Zstd, 32bit mode",
                "run": "sudo apt-get -qqq update\nmake libc6install\nmake -j uasan-test-zstd32 V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "gcc-8 + ASan + UBSan + Fuzz Test",
                "run": "echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal main universe\" | sudo tee -a /etc/apt/sources.list\nsudo apt-get -qqq update\nmake gcc8install\nCC=gcc-8 FUZZER_FLAGS=\"--long-tests\" make clean uasan-fuzztest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "clang + ASan + UBSan + Fuzz Test",
                "run": "CC=clang FUZZER_FLAGS=\"--long-tests\" make clean uasan-fuzztest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "ASan + UBSan + Fuzz Test 32bit",
                "run": "sudo apt-get -qqq update\nmake libc6install\nCFLAGS=\"-O3 -m32\" FUZZER_FLAGS=\"--long-tests\" make uasan-fuzztest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "clang + ASan + UBSan + Fuzz Test 32bit",
                "run": "sudo apt-get -qqq update\nmake libc6install\nCC=clang CFLAGS=\"-O3 -m32\" FUZZER_FLAGS=\"--long-tests\" make uasan-fuzztest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "ASan + UBSan + Regression Test",
                "run": "make -j uasanregressiontest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "clang + ASan + UBSan + Regression Test",
                "run": "CC=clang make -j uasanregressiontest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "MSan + Regression Test",
                "run": "make -j msanregressiontest"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "clang + MSan + Fuzz Test",
                "run": "sudo apt-get -qqq update\nsudo apt-get install clang\nCC=clang MOREFLAGS=\"-O0\" make clean msan-fuzztest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "clang + MSan + Fuzz Test",
                "run": "sudo apt-get -qqq update\nsudo apt-get install clang\nCC=clang FUZZER_FLAGS=\"--long-tests\" make clean msan-fuzztest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "clang + MSan + Test Zstd",
                "run": "sudo apt-get update\nsudo apt-get install clang\nCC=clang make msan-test-zstd HAVE_ZLIB=0 HAVE_LZ4=0 HAVE_LZMA=0 V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Qemu ARM emulation + Fuzz Test",
                "run": "sudo apt-get -qqq update\nmake arminstall\nmake armfuzz\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "valgrind + fuzz test stack mode",
                "run": "sudo apt-get -qqq update\nmake valgrindinstall\nmake -C tests test-valgrind\nmake clean\nmake -C tests test-fuzzer-stackmode\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "msys2/setup-msys2@5beef6d11f48bba68b9eb503e3adc60b23c0cc36"
            },
            {
                "id": 3,
                "name": "install mingw gcc",
                "run": "pacman --noconfirm -S gcc"
            },
            {
                "id": 4,
                "name": "MINGW64 gcc fuzztest",
                "run": "export CC=\"gcc\"\nexport CXX=\"g++\"\nexport FUZZERTEST=\"-T2mn\"\nexport ZSTREAM_TESTTIME=\"-T2mn\"\necho \"Testing $CC $CXX MINGW64\"\nmake -v\n$CC --version\n$CXX --version\nmake -C tests fuzztest\n"
            },
            {
                "id": 1,
                "name": "Build Fuzzers (${{ matrix.sanitizer }})",
                "run": "google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master"
            },
            {
                "id": 2,
                "name": "Run Fuzzers (${{ matrix.sanitizer }})",
                "run": "google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master"
            },
            {
                "id": 3,
                "name": "Upload Crash",
                "run": "actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "linux kernel, library + build + test",
                "run": "make -C contrib/linux-kernel test CFLAGS=\"-Werror -Wunused-const-variable -Wunused-but-set-variable\""
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "make benchmarking",
                "run": "make benchmarking"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "make check on 32-bit",
                "run": "sudo apt update\nAPT_PACKAGES=\"gcc-multilib\" make apt-install\nCFLAGS=\"-m32 -O1 -fstack-protector\" make check V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "make check on x32 ABI",
                "run": "sudo apt update\nAPT_PACKAGES=\"gcc-multilib\" make apt-install\nCFLAGS=\"-mx32 -O1 -fstack-protector\" make check V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "ensure zstd can be build with c89/c90 compilers (+ long long support + variadic macros)",
                "run": "make c89build V=1\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "build zstd bin against a dynamic lib (debuglevel for more dependencies)",
                "run": "make -C lib lib-mt-release \nDEBUGLEVEL=2 make -C programs zstd-dll\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "gcc-7 + libzstdmt compilation",
                "run": "echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal main universe\" | sudo tee -a /etc/apt/sources.list\nsudo apt-get -qqq update\nmake gcc7install\nCC=gcc-7 CFLAGS=-Werror make -j all\nmake clean\nLDFLAGS=-Wl,--no-undefined make -C lib libzstd-mt\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "cmake build and test check",
                "run": "FUZZERTEST=-T1mn ZSTREAM_TESTTIME=-T1mn make cmakebuild\ncp -r ./ \"../zstd source\"\ncd \"../zstd source\"\nFUZZERTEST=-T1mn ZSTREAM_TESTTIME=-T1mn make cmakebuild\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "C++, gnu90 and c99 compatibility",
                "run": "make cxxtest\nmake clean\nmake gnu90build\nmake clean\nmake c99build\nmake clean\nmake travis-install   # just ensures `make install` works\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "mingw cross-compilation",
                "run": "# sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix; (doesn't work)\nsudo apt-get -qqq update\nsudo apt-get install gcc-mingw-w64\nCC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ CFLAGS=\"-Werror -O1\" make zstd\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "ARM Build Test",
                "run": "sudo apt-get -qqq update\nmake arminstall\nmake armbuild\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Bourne shell compatibility (shellcheck)",
                "run": "wget https://github.com/koalaman/shellcheck/releases/download/v0.7.1/shellcheck-v0.7.1.linux.x86_64.tar.xz\ntar -xf shellcheck-v0.7.1.linux.x86_64.tar.xz\nshellcheck-v0.7.1/shellcheck --shell=sh --severity=warning --exclude=SC2010 tests/playTests.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "zlib wrapper test",
                "run": "sudo apt-get -qqq update\nmake valgrindinstall\nmake -C zlibWrapper test\nmake -C zlibWrapper test-valgrind\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "LZ4, thread pool, and libs build testslib wrapper test",
                "run": "make lz4install\nmake -C tests test-lz4\nmake check < /dev/null | tee   # mess with lz4 console detection\nmake clean\nmake -C tests test-pool\nmake clean\nbash tests/libzstd_builds.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Make all, 32bit mode",
                "run": "sudo apt-get -qqq update\nmake libc6install\nCFLAGS=\"-Werror -m32\" make -j all32\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "gcc-8 build",
                "run": "echo \"deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal main universe\" | sudo tee -a /etc/apt/sources.list\nsudo apt-get -qqq update\nmake gcc8install\nCC=gcc-8 CFLAGS=\"-Werror\" make -j all\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Build with ${{matrix.name}}",
                "run": "${{matrix.flags}} make zstd"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "-Wimplicit-fallthrough build",
                "run": "make clean\nCC=gcc MOREFLAGS=\"-Werror -Wimplicit-fallthrough=2 -O0\" make -C lib -j libzstd.a ZSTD_LEGACY_SUPPORT=0\nmake clean\nCC=clang MOREFLAGS=\"-Werror -Wimplicit-fallthrough -O0\" make -C lib -j libzstd.a ZSTD_LEGACY_SUPPORT=0\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Install packages",
                "run": "sudo apt-get update\nsudo apt-get -y install build-essential python3-pip ninja-build liblz4-dev\npip install --pre meson\n"
            },
            {
                "id": 3,
                "name": "Build with Meson",
                "run": "meson setup \\\n  --buildtype=debugoptimized \\\n  -Db_lundef=false \\\n  -Dauto_features=enabled \\\n  -Dbin_programs=true \\\n  -Dbin_tests=true \\\n  -Dbin_contrib=true \\\n  -Ddefault_library=both \\\n  build/meson builddir\nninja -C builddir/\nmeson test -C builddir/ --print-errorlogs\nmeson install -C builddir --destdir staging/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Install packages",
                "run": "pip install --pre meson"
            },
            {
                "id": 3,
                "name": "Initialize the MSVC dev command prompt",
                "run": "ilammy/msvc-dev-cmd@cec98b9d092141f74527d0afa6feb2af698cfe89"
            },
            {
                "id": 4,
                "name": "Configure with Meson",
                "run": "meson setup build/meson/ builddir -Dbin_tests=true -Dbin_programs=true -Dbin_contrib=true\n"
            },
            {
                "id": 5,
                "name": "Build with Meson",
                "run": "ninja -C builddir/\n"
            },
            {
                "id": 6,
                "name": "Test with Meson",
                "run": "meson test -C builddir/ --print-errorlogs\n"
            },
            {
                "id": 7,
                "name": "Install with Meson",
                "run": "meson install -C builddir --destdir staging/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Add MSBuild to PATH",
                "run": "microsoft/setup-msbuild@1ff57057b5cfdc39105cd07a01d78e9b0ea0c14c"
            },
            {
                "id": 3,
                "name": "Build",
                "run": "cd build\\cmake\nmkdir build\ncd build\ncmake.exe -G \"${{matrix.generator}}\" ${{matrix.flags}} ..\ncmake.exe --build .\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Add MSBuild to PATH",
                "run": "microsoft/setup-msbuild@1ff57057b5cfdc39105cd07a01d78e9b0ea0c14c"
            },
            {
                "id": 3,
                "name": "Build ${{matrix.name}}",
                "run": "msbuild \"build\\VS2010\\zstd.sln\" /m /verbosity:minimal /property:PlatformToolset=${{matrix.toolset}} /t:Clean,Build /p:Platform=${{matrix.platform}} /p:Configuration=${{matrix.configuration}} /warnaserror\n"
            },
            {
                "id": 4,
                "name": "Build ${{matrix.name}}",
                "run": "msbuild \"build\\VS2010\\zstd.sln\" /m /verbosity:minimal /property:PlatformToolset=${{matrix.toolset}} /t:Clean,Build /p:Platform=${{matrix.platform}} /p:Configuration=${{matrix.configuration}} /warnaserror /p:InstructionSet=${{matrix.arch}}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "libzstd size test",
                "run": "make clean && make -j -C lib libzstd && ./tests/check_size.py lib/libzstd.so 1100000\nmake clean && make -j -C lib libzstd ZSTD_LIB_COMPRESSION=0 ZSTD_LIB_DICTBUILDER=0 && ./tests/check_size.py lib/libzstd.so 400000\nmake clean && make -j -C lib libzstd ZSTD_LIB_MINIFY=1 && ./tests/check_size.py lib/libzstd.so 300000\nmake clean && make -j -C lib libzstd ZSTD_LIB_MINIFY=1 ZSTD_LIB_COMPRESSION=0 ZSTD_LIB_DICTBUILDER=0 && ./tests/check_size.py lib/libzstd.so 80000\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "minimal decompressor macros",
                "run": "make clean && make -j all ZSTD_LIB_MINIFY=1 MOREFLAGS=\"-Werror\"\nmake clean && make check ZSTD_LIB_MINIFY=1 MOREFLAGS=\"-Werror\"\nmake clean && make -j all MOREFLAGS=\"-Werror -DHUF_FORCE_DECOMPRESS_X1 -DZSTD_FORCE_DECOMPRESS_SEQUENCES_SHORT\"\nmake clean && make check MOREFLAGS=\"-Werror -DHUF_FORCE_DECOMPRESS_X1 -DZSTD_FORCE_DECOMPRESS_SEQUENCES_SHORT\"\nmake clean && make -j all MOREFLAGS=\"-Werror -DHUF_FORCE_DECOMPRESS_X2 -DZSTD_FORCE_DECOMPRESS_SEQUENCES_LONG\"\nmake clean && make check MOREFLAGS=\"-Werror -DHUF_FORCE_DECOMPRESS_X2 -DZSTD_FORCE_DECOMPRESS_SEQUENCES_LONG\"\nmake clean && make -j all MOREFLAGS=\"-Werror -DZSTD_NO_INLINE -DZSTD_STRIP_ERROR_STRINGS\"\nmake clean && make check MOREFLAGS=\"-Werror -DZSTD_NO_INLINE -DZSTD_STRIP_ERROR_STRINGS\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "dynamic bmi2 tests",
                "run": "make clean && make -j check MOREFLAGS=\"-O0 -Werror -mbmi2\"\nmake clean && make -j check MOREFLAGS=\"-O0 -Werror -DDYNAMIC_BMI2=1\"\nmake clean && make -j check MOREFLAGS=\"-O0 -Werror -DDYNAMIC_BMI2=1 -mbmi2\"\nmake clean && make -j check MOREFLAGS=\"-O0 -Werror -DDYNAMIC_BMI2=0\"\nmake clean && make -j check MOREFLAGS=\"-O0 -Werror -DDYNAMIC_BMI2=0 -mbmi2\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "make all variants & validate",
                "run": "make -j -C programs allVariants MOREFLAGS=-O0\n./tests/test-variants.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "apt update & install",
                "run": "sudo apt-get update\nsudo apt-get install gcc-multilib g++-multilib qemu-utils qemu-user-static\nsudo apt-get install ${{ matrix.xcc_pkg }} ${{ matrix.xemu_pkg }}\n"
            },
            {
                "id": 3,
                "name": "Environment info",
                "run": "echo && which $XCC\necho && $XCC --version\necho && $XCC -v  # Show built-in specs\necho && which $XEMU\necho && $XEMU --version\n"
            },
            {
                "id": 4,
                "name": "ARM",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 5,
                "name": "ARM64",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 6,
                "name": "PPC",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 7,
                "name": "PPC64LE",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 8,
                "name": "S390X",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 9,
                "name": "MIPS",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 10,
                "name": "M68K",
                "run": "LDFLAGS=\"-static\" CC=$XCC QEMU_SYS=$XEMU make clean check\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "msys2/setup-msys2@5beef6d11f48bba68b9eb503e3adc60b23c0cc36"
            },
            {
                "id": 3,
                "name": "install mingw gcc i686",
                "run": "pacman --noconfirm -S mingw-w64-i686-gcc"
            },
            {
                "id": 4,
                "name": "install mingw gcc x86_64",
                "run": "pacman --noconfirm -S mingw-w64-x86_64-gcc"
            },
            {
                "id": 5,
                "name": "install mingw clang i686",
                "run": "pacman --noconfirm -S mingw-w64-i686-clang"
            },
            {
                "id": 6,
                "name": "install mingw clang x86_64",
                "run": "pacman --noconfirm -S mingw-w64-x86_64-clang"
            },
            {
                "id": 7,
                "name": "run mingw tests",
                "run": "make -v\nexport CC=${{ matrix.compiler }}\n$CC --version\nCFLAGS=\"${{ matrix.cflags }}\" make -j allzstd\necho \"Testing $CC ${{ matrix.msystem }}\"\nmake clean\nMSYS=\"\" make check\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Add MSBuild to PATH",
                "run": "microsoft/setup-msbuild@1ff57057b5cfdc39105cd07a01d78e9b0ea0c14c"
            },
            {
                "id": 3,
                "name": "Build and run tests",
                "run": "msbuild \"build\\VS2010\\zstd.sln\" /m /verbosity:minimal /property:PlatformToolset=v142 /t:Clean,Build /p:Platform=${{matrix.platform}} /p:Configuration=${{matrix.configuration}}\nCOPY build\\VS2010\\bin\\${{matrix.platform}}_${{matrix.configuration}}\\*.exe tests\\\nCD tests\nsh -e playTests.sh\n.\\fuzzer.exe -T2m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "git config --global core.autocrlf input"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "cygwin/cygwin-install-action@f5e0f048310c425e84bc789f493a828c6dc80a25"
            },
            {
                "id": 4,
                "name": "cygwin tests",
                "run": "export PATH=/usr/bin:$(cygpath ${SYSTEMROOT})/system32 && export CFLAGS=\"-Werror -O1\" && ls && make -j allzstd && make -C tests fuzzer && ./tests/fuzzer.exe -v -T1m"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Build Zstd",
                "run": "make -j zstd V=1\nreadelf -n zstd\n"
            },
            {
                "id": 3,
                "name": "Get Intel SDE",
                "run": "curl -LO https://downloadmirror.intel.com/684899/sde-external-9.0.0-2021-11-07-lin.tar.xz\ntar xJvf sde-external-9.0.0-2021-11-07-lin.tar.xz\n"
            },
            {
                "id": 4,
                "name": "Configure Permissions",
                "run": "echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope\n"
            },
            {
                "id": 5,
                "name": "Run Under SDE",
                "run": "sde-external-9.0.0-2021-11-07-lin/sde -cet -cet-raise 0 -cet-endbr-exe -cet-stderr -cet-abort -- ./zstd -b3\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Install dependencies",
                "run": "apt -y update\napt -y install --no-install-recommends gcc libc6-dev make pkg-config\n"
            },
            {
                "id": 3,
                "name": "Build and install",
                "run": "make -C lib install"
            },
            {
                "id": 4,
                "name": "Test pkg-config",
                "run": "cc -Wall -Wextra -Wpedantic -Werror -o simple examples/simple_compression.c $(pkg-config --cflags --libs libzstd)\n./simple LICENSE\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Versions Compatibility Test",
                "run": "make -C tests versionsTest\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "make clangbuild",
                "run": "make clangbuild\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Build PGO Zstd with Clang",
                "run": "make -C programs zstd-pgo\n./programs/zstd -b\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Build PGO Zstd with GCC",
                "run": "make -C programs zstd-pgo\n./programs/zstd -b\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Archive",
                "run": "# compute file name\nexport TAG=\"$(echo \"$GITHUB_REF\" | sed -n 's_^refs/tags/__p')\"\nif [ -z \"$TAG\" ]; then\n  echo \"action must be run on a tag. GITHUB_REF is not a tag: $GITHUB_REF\"\n  exit 1\nfi\n# Attempt to extract \"1.2.3\" from \"v1.2.3\" to maintain artifact name backwards compat.\n# Otherwise, degrade to using full tag.\nexport VERSION=\"$(echo \"$TAG\" | sed 's_^v\\([0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\)$_\\1_')\"\nexport ZSTD_VERSION=\"zstd-$VERSION\"\n\n# archive\ngit archive $TAG \\\n    --prefix $ZSTD_VERSION/ \\\n    --format tar \\\n    -o $ZSTD_VERSION.tar\n\n# Do the rest of the work in a sub-dir so we can glob everything we want to publish.\nmkdir artifacts/\nmv $ZSTD_VERSION.tar artifacts/\ncd artifacts/\n\n# compress\nzstd -k -19 $ZSTD_VERSION.tar\ngzip -k  -9 $ZSTD_VERSION.tar\n\n# we only publish the compressed tarballs\nrm $ZSTD_VERSION.tar\n\n# hash\nsha256sum $ZSTD_VERSION.tar.zst > $ZSTD_VERSION.tar.zst.sha256\nsha256sum $ZSTD_VERSION.tar.gz  > $ZSTD_VERSION.tar.gz.sha256\n\n# sign\nif [ -n \"$RELEASE_SIGNING_KEY\" ]; then\n  export GPG_BATCH_OPTS=\"--batch --no-use-agent --pinentry-mode loopback --no-tty --yes\"\n  echo \"$RELEASE_SIGNING_KEY\" | gpg $GPG_BATCH_OPTS --import\n  gpg $GPG_BATCH_OPTS --armor --sign --sign-with signing@zstd.net --detach-sig --passphrase \"$RELEASE_SIGNING_KEY_PASSPHRASE\" --output $ZSTD_VERSION.tar.zst.sig $ZSTD_VERSION.tar.zst\n  gpg $GPG_BATCH_OPTS --armor --sign --sign-with signing@zstd.net --detach-sig --passphrase \"$RELEASE_SIGNING_KEY_PASSPHRASE\" --output $ZSTD_VERSION.tar.gz.sig  $ZSTD_VERSION.tar.gz\nfi\n"
            },
            {
                "id": 3,
                "name": "Publish",
                "run": "skx/github-action-publish-binaries@b9ca5643b2f1d7371a6cba7f35333f1461bbc703"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Run analysis",
                "run": "ossf/scorecard-action@e38b1902ae4f44df626f11ba0734b14fb91f8f86"
            },
            {
                "id": 3,
                "name": "Upload artifact",
                "run": "actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce"
            },
            {
                "id": 4,
                "name": "Upload to code-scanning",
                "run": "github/codeql-action/upload-sarif@67a35a08586135a9573f4327e904ecbf517a882d"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "msys2/setup-msys2@5beef6d11f48bba68b9eb503e3adc60b23c0cc36"
            },
            {
                "id": 3,
                "name": "display versions",
                "run": "make -v\ncc -v\n"
            },
            {
                "id": 4,
                "name": "Building zlib to static link",
                "run": "git clone --depth 1 --branch v1.2.11 https://github.com/madler/zlib\nmake -C zlib -f win32/Makefile.gcc libz.a\n"
            },
            {
                "id": 5,
                "name": "Building zstd programs in 64-bit mode",
                "run": "CPPFLAGS=-I../zlib LDFLAGS=../zlib/libz.a make -j allzstd MOREFLAGS=-static V=1\n"
            },
            {
                "id": 6,
                "name": "Create artifacts",
                "run": "./lib/dll/example/build_package.bat\nmv bin/ zstd-${{ github.ref_name }}-win64/\n7z a -tzip -mx9 zstd-${{ github.ref_name }}-win64.zip zstd-${{ github.ref_name }}-win64/\ncd ..\n"
            },
            {
                "id": 7,
                "name": "Publish zstd-$VERSION-win64.zip",
                "run": "actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce"
            }
        ],
        "scroll-tech/canvas-contracts": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Foundry",
                "run": "foundry-rs/foundry-toolchain@v1"
            },
            {
                "id": 3,
                "name": "Install Node.js 18",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 4,
                "name": "Get yarn cache directory path",
                "run": "echo \"::set-output name=dir::$(yarn cache dir)\""
            },
            {
                "id": 5,
                "name": "Cache yarn dependencies",
                "run": "actions/cache@v2"
            },
            {
                "id": 6,
                "name": "Cache node_modules",
                "run": "actions/cache@v2"
            },
            {
                "id": 7,
                "name": "yarn install",
                "run": "yarn install"
            },
            {
                "id": 8,
                "name": "Compile with foundry",
                "run": "forge build"
            },
            {
                "id": 9,
                "name": "Run foundry tests",
                "run": "forge test -vvv"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install Foundry",
                "run": "foundry-rs/foundry-toolchain@v1"
            },
            {
                "id": 3,
                "name": "Run Forge build",
                "run": "forge --version\nforge build --sizes\n"
            },
            {
                "id": 4,
                "name": "Run Forge tests",
                "run": "forge test -vvv\n"
            }
        ],
        "scroll-tech/da-codec": [
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Lint",
                "run": "rm -rf $HOME/.cache/golangci-lint\nmake lint\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install goimports",
                "run": "go install golang.org/x/tools/cmd/goimports@latest"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "goimports -local github.com/scroll-tech/da-codec/encoding/ -w ."
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "go mod tidy"
            },
            {
                "id": 6,
                "name": "Verify no changes from goimports and go mod tidy",
                "run": "if [ -n \"$(git status --porcelain)\" ]; then\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Test codec packages",
                "run": "make test\n"
            }
        ]
    },
    "flipperdevices": {
        "flipperdevices/flipperzero-firmware": [
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Get commit details",
                "run": "BUILD_TYPE='DEBUG=1 COMPACT=0'\nif [[ ${{ github.event_name }} == 'pull_request' ]]; then\n  TYPE=\"pull\"\nelif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  TYPE=\"tag\"\n  BUILD_TYPE='DEBUG=0 COMPACT=1'\nelse\n  TYPE=\"other\"\nfi\npython3 scripts/get_env.py \"--event_file=${{ github.event_path }}\" \"--type=$TYPE\" || cat \"${{ github.event_path }}\"\necho \"event_type=$TYPE\" >> $GITHUB_OUTPUT\necho \"FBT_BUILD_TYPE=$BUILD_TYPE\" >> $GITHUB_ENV\necho \"TARGET=${{ matrix.target }}\" >> $GITHUB_ENV\necho \"TARGET_HW=$(echo \"${{ matrix.target }}\" | sed 's/f//')\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Check API versions for consistency between targets",
                "run": "set -e\nN_API_HEADER_SIGNATURES=`ls -1 targets/f*/api_symbols.csv | xargs -I {} sh -c \"head -n2 {} | md5sum\" | sort -u | wc -l`\nif [ $N_API_HEADER_SIGNATURES != 1 ] ; then\n  echo API versions aren\\'t matching for available targets. Please update!\n  echo API versions are:\n  head -n2 targets/f*/api_symbols.csv\n  exit 1\nfi\n"
            },
            {
                "id": 5,
                "name": "Build the firmware and apps",
                "run": "./fbt TARGET_HW=$TARGET_HW $FBT_BUILD_TYPE copro_dist updater_package fap_dist\necho \"firmware_api=$(./fbt TARGET_HW=$TARGET_HW get_apiversion)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 6,
                "name": "Check for uncommitted changes",
                "run": "git diff --exit-code\n"
            },
            {
                "id": 7,
                "name": "Copy build output",
                "run": "set -e\nrm -rf artifacts map_analyser_files || true\nmkdir artifacts map_analyser_files\ncp dist/${TARGET}-*/* artifacts/ || true\ntar czpf \"artifacts/flipper-z-${TARGET}-resources-${SUFFIX}.tgz\" \\\n  -C build/latest resources\ntar czpf \"artifacts/flipper-z-${TARGET}-debugapps-${SUFFIX}.tgz\" \\\n  -C dist/${TARGET}-*/apps/Debug .\ntar czpf \"artifacts/flipper-z-${TARGET}-appsymbols-${SUFFIX}.tgz\" \\\n  -C dist/${TARGET}-*/debug_elf .\n"
            },
            {
                "id": 8,
                "name": "Copy universal artifacts",
                "run": "tar czpf \"artifacts/flipper-z-any-scripts-${SUFFIX}.tgz\" scripts\ncp build/core2_firmware.tgz \"artifacts/flipper-z-any-core2_firmware-${SUFFIX}.tgz\"\n"
            },
            {
                "id": 9,
                "name": "Upload artifacts to update server",
                "run": "FILES=$(for ARTIFACT in $(find artifacts -maxdepth 1 -not -type d); do echo \"-F files=@${ARTIFACT}\"; done)\ncurl --fail -L -H \"Token: ${{ secrets.INDEXER_TOKEN }}\" \\\n    -F \"branch=${BRANCH_NAME}\" \\\n    -F \"version_token=${COMMIT_SHA}\" \\\n    ${FILES[@]} \\\n    \"${{ secrets.INDEXER_URL }}\"/firmware/uploadfiles\n"
            },
            {
                "id": 10,
                "name": "Copy & analyse map analyser files",
                "run": "cp build/${DEFAULT_TARGET}-firmware-*/firmware.elf.map map_analyser_files/firmware.elf.map\ncp build/${DEFAULT_TARGET}-firmware-*/firmware.elf map_analyser_files/firmware.elf\nsource scripts/toolchain/fbtenv.sh\npython3 scripts/map_analyse_upload.py \\\n    \"--elf_file=map_analyser_files/firmware.elf\" \\\n    \"--map_file=map_analyser_files/firmware.elf.map\" \\\n    \"--analyser_url=${{ secrets.ANALYSER_URL }}\" \\\n    \"--analyser_token=${{ secrets.ANALYSER_TOKEN }}\";\n"
            },
            {
                "id": 11,
                "name": "Find previous comment",
                "run": "peter-evans/find-comment@v3"
            },
            {
                "id": 12,
                "name": "Create or update comment",
                "run": "peter-evans/create-or-update-comment@v4"
            },
            {
                "id": 13,
                "name": "SDK submission to staging catalog",
                "run": "./.github/actions/submit_sdk"
            },
            {
                "id": 14,
                "name": "SDK submission to prod catalog",
                "run": "./.github/actions/submit_sdk"
            },
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Get commit details",
                "run": "if [[ ${{ github.event_name }} == 'pull_request' ]]; then\n  TYPE=\"pull\"\nelif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  TYPE=\"tag\"\nelse\n  TYPE=\"other\"\nfi\npython3 scripts/get_env.py \"--event_file=${{ github.event_path }}\" \"--type=$TYPE\" || cat \"${{ github.event_path }}\"\n"
            },
            {
                "id": 4,
                "name": "Build the firmware",
                "run": "set -e\nTARGET=\"$(echo '${{ matrix.target }}' | sed 's/f//')\"; \\\n./fbt TARGET_HW=$TARGET DEBUG=0 COMPACT=1 fap_dist updater_package\necho \"sdk-file=$(ls dist/${{ matrix.target }}-*/flipper-z-${{ matrix.target }}-sdk-*.zip)\" >> $GITHUB_OUTPUT\necho \"hw-target-code=$TARGET\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "Deploy uFBT with SDK",
                "run": "flipperdevices/flipperzero-ufbt-action@v0.1"
            },
            {
                "id": 6,
                "name": "Build test app with SDK",
                "run": "mkdir testapp\ncd testapp\nufbt create APPID=testapp\nufbt\n"
            },
            {
                "id": 7,
                "name": "Build example & external apps with uFBT",
                "run": "for appdir in 'applications/examples'; do\n  for app in $(find \"$appdir\" -maxdepth 1 -mindepth 1 -type d); do\n    pushd $app\n    TARGETS_FAM=$(grep \"targets\" application.fam || echo \"${{ matrix.target }}\")\n    if ! grep -q \"${{ matrix.target }}\" <<< $TARGETS_FAM ; then\n        echo Skipping unsupported app: $app\n        popd\n        continue\n    fi\n    echo Building $app\n    ufbt\n    popd\n  done\ndone\n"
            },
            {
                "id": 1,
                "name": "Check if S3 key exists",
                "run": "if [[ -z \"${{ secrets.FW_DOCS_AWS_ACCESS_KEY }}\" || -z \"${{ secrets.FW_DOCS_AWS_SECRET_KEY }}\" || -z \"${{ secrets.FW_DOCS_AWS_BUCKET }}\" ]]; then\n  echo \"s3-valid-config=false\" >> $GITHUB_OUTPUT;\nelse\n  echo \"s3-valid-config=true\" >> $GITHUB_OUTPUT;\nfi\n"
            },
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Get commit details",
                "run": "if [[ ${{ github.event_name }} == 'pull_request' ]]; then\n  TYPE=\"pull\"\nelif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  TYPE=\"tag\"\nelse\n  TYPE=\"other\"\nfi\npython3 scripts/get_env.py \"--event_file=${{ github.event_path }}\" \"--type=$TYPE\"\n"
            },
            {
                "id": 4,
                "name": "Generate documentation",
                "run": "mattnotmitt/doxygen-action@edge"
            },
            {
                "id": 5,
                "name": "Upload documentation",
                "run": "jakejarvis/s3-sync-action@v0.5.1"
            },
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Check protobuf branch",
                "run": "git submodule update --init;\nSUB_PATH=\"assets/protobuf\";\nSUB_BRANCH=\"dev\";\nSUB_COMMITS_MIN=40;\ncd \"$SUB_PATH\";\nSUBMODULE_HASH=\"$(git rev-parse HEAD)\";\nBRANCHES=$(git branch -r --contains \"$SUBMODULE_HASH\");\nCOMMITS_IN_BRANCH=\"$(git rev-list --count dev)\";\nif [ $COMMITS_IN_BRANCH -lt $SUB_COMMITS_MIN ]; then\n  echo \"name=fails::error\" >> $GITHUB_OUTPUT;\n  echo \"::error::Error: Too few commits in $SUB_BRANCH of submodule $SUB_PATH: $COMMITS_IN_BRANCH(expected $SUB_COMMITS_MIN+)\";\n  exit 1;\nfi\nif ! grep -q \"/$SUB_BRANCH\" <<< \"$BRANCHES\"; then\n  echo \"name=fails::error\" >> $GITHUB_OUTPUT;\n  echo \"::error::Error: Submodule $SUB_PATH is not on branch $SUB_BRANCH\";\n  exit 1;\nfi\n"
            },
            {
                "id": 4,
                "name": "Check for new TODOs",
                "run": "set +e;\ngit diff --unified=0 --no-color ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '^\\+' | grep -i -E '(TODO|HACK|FIXME|XXX)[ :]' | grep -v -- '-nofl' > lines.log;\nMISSING_TICKETS=$( grep -v -E 'FL-[0-9]+' lines.log );\nif [ -n \"$MISSING_TICKETS\" ]; then\n  echo \"Error: Missing ticket number in \\`TODO\\` comment(s)\" >> $GITHUB_STEP_SUMMARY;\n  echo \"\\`\\`\\`\" >> $GITHUB_STEP_SUMMARY;\n  echo \"$MISSING_TICKETS\" >> $GITHUB_STEP_SUMMARY;\n  echo \"\\`\\`\\`\" >> $GITHUB_STEP_SUMMARY;\n  echo \"Error: Missing issue number in comment(s):\";\n  echo \"$MISSING_TICKETS\";\n  exit 1;\nelse\n  echo \"No new TODOs without tickets found\" >> $GITHUB_STEP_SUMMARY;\nfi\n"
            },
            {
                "id": 5,
                "name": "Check Python code formatting",
                "run": "set +e;\n./fbt -s lint_py 2>&1 | tee lint-py.log;\nif [ \"${PIPESTATUS[0]}\" -ne 0 ]; then\n  # Save multiline output\n  echo \"errors=1\" >> $GITHUB_OUTPUT;\n  printf \"Python Lint errors:\\n\\`\\`\\`\\n\" >> $GITHUB_STEP_SUMMARY;\n  echo \"$(cat lint-py.log)\" >> $GITHUB_STEP_SUMMARY;\n  printf \"\\n\\`\\`\\`\\n\" >> $GITHUB_STEP_SUMMARY;\n  exit 1;\nelse\n  echo \"Python Lint: all good \u2728\" >> $GITHUB_STEP_SUMMARY;\nfi\n"
            },
            {
                "id": 6,
                "name": "Check C++ code formatting",
                "run": "set +e;\n./fbt -s lint 2>&1 | tee lint-cpp.log;\nif [ \"${PIPESTATUS[0]}\" -ne 0 ]; then\n  # Save multiline output\n  echo \"errors=1\" >> $GITHUB_OUTPUT;\n  printf \"C Lint errors:\\n\\`\\`\\`\\n\" >> $GITHUB_STEP_SUMMARY;\n  echo \"$(cat lint-cpp.log)\" >> $GITHUB_STEP_SUMMARY;\n  printf \"\\n\\`\\`\\`\\n\" >> $GITHUB_STEP_SUMMARY;\n  exit 1;\nelse\n  echo \"C Lint: all good \u2728\" >> $GITHUB_STEP_SUMMARY;\nfi\n"
            },
            {
                "id": 7,
                "name": "Report code formatting errors",
                "run": "echo \"Code formatting errors found\";\necho \"Please run './fbt format' or './fbt format_py' to fix them\";\nexit 1;\n"
            },
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Get commit details",
                "run": "if [[ ${{ github.event_name }} == 'pull_request' ]]; then\n  TYPE=\"pull\"\nelif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  TYPE=\"tag\"\nelse\n  TYPE=\"other\"\nfi\npython3 scripts/get_env.py \"--event_file=${{ github.event_path }}\" \"--type=$TYPE\" || cat \"${{ github.event_path }}\"\n"
            },
            {
                "id": 4,
                "name": "Check ticket and report",
                "run": "source scripts/toolchain/fbtenv.sh\npython3 -m pip install slack_sdk\npython3 scripts/merge_report_qa.py \\\n    ${{ secrets.QA_REPORT_SLACK_TOKEN }} \\\n    ${{ secrets.QA_REPORT_SLACK_CHANNEL }}\n"
            },
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Get commit details",
                "run": "if [[ ${{ github.event_name }} == 'pull_request' ]]; then\n  TYPE=\"pull\"\nelif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  TYPE=\"tag\"\nelse\n  TYPE=\"other\"\nfi\npython3 scripts/get_env.py \"--event_file=${{ github.event_path }}\" \"--type=$TYPE\" || cat \"${{ github.event_path }}\"\n"
            },
            {
                "id": 4,
                "name": "Supply PVS credentials",
                "run": "pvs-studio-analyzer credentials ${{ secrets.PVS_STUDIO_CREDENTIALS }}\n"
            },
            {
                "id": 5,
                "name": "Convert PVS-Studio output to html and detect warnings",
                "run": "WARNINGS=0\n./fbt COMPACT=1 PVSNOBROWSER=1 firmware_pvs || WARNINGS=1\necho \"warnings=${WARNINGS}\" >> $GITHUB_OUTPUT\nif [[ $WARNINGS -ne 0 ]]; then\n  echo \"report-url=https://pvs.flipp.dev/${{steps.names.outputs.branch_name}}/${{steps.names.outputs.default_target}}-${{steps.names.outputs.suffix}}/index.html\" >> $GITHUB_OUTPUT\nfi\n"
            },
            {
                "id": 6,
                "name": "Upload report",
                "run": "prewk/s3-cp-action@v2"
            },
            {
                "id": 7,
                "name": "Find Previous Comment",
                "run": "peter-evans/find-comment@v3"
            },
            {
                "id": 8,
                "name": "Create or update comment",
                "run": "peter-evans/create-or-update-comment@v4"
            },
            {
                "id": 9,
                "name": "Raise exception",
                "run": "echo \"Please fix all PVS warnings before merge\"\necho \"Report: ${{ steps.pvs-warn.outputs.report-url }}\"\necho \"[PVS report](${{ steps.pvs-warn.outputs.report-url }})\" >> $GITHUB_STEP_SUMMARY\nexit 1\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Trigger reindex",
                "run": "curl --fail -L -H \"Token: ${{ secrets.INDEXER_TOKEN }}\" \\\n    \"${{ secrets.INDEXER_URL }}\"/firmware/reindex;\n"
            },
            {
                "id": 3,
                "name": "Send release notification",
                "run": "echo '${{ secrets.FIREBASE_TOKEN }}' > firebase-token.json;\npython3 -m pip install firebase-admin==6.4.0;\npython3 scripts/send_firebase_notification.py \\\n    \"--version=${{ github.event.release.name }}\" \\\n    \"--token=firebase-token.json\";\n"
            },
            {
                "id": 4,
                "name": "Remove firebase token",
                "run": "rm -rf firebase-token.json;\n"
            },
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Get flipper from device manager (mock)",
                "run": "echo \"flipper=/dev/ttyACM0\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Flash unit tests firmware",
                "run": "./fbt resources firmware_latest flash SWD_TRANSPORT_SERIAL=2A0906016415303030303032 LIB_DEBUG=1 FIRMWARE_APP_SET=unit_tests FORCE=1\n"
            },
            {
                "id": 5,
                "name": "Wait for flipper and format ext",
                "run": "source scripts/toolchain/fbtenv.sh\npython3 scripts/testing/await_flipper.py ${{steps.device.outputs.flipper}}\npython3 scripts/storage.py -p ${{steps.device.outputs.flipper}} format_ext\n"
            },
            {
                "id": 6,
                "name": "Copy assets and unit data, reboot and wait for flipper",
                "run": "source scripts/toolchain/fbtenv.sh\npython3 scripts/testing/await_flipper.py ${{steps.device.outputs.flipper}}\nrm -rf build/latest/resources/dolphin\npython3 scripts/storage.py -p ${{steps.device.outputs.flipper}} -f send build/latest/resources /ext\npython3 scripts/power.py -p ${{steps.device.outputs.flipper}} reboot\npython3 scripts/testing/await_flipper.py ${{steps.device.outputs.flipper}}\n"
            },
            {
                "id": 7,
                "name": "Run units and validate results",
                "run": "source scripts/toolchain/fbtenv.sh\npython3 scripts/testing/units.py ${{steps.device.outputs.flipper}}\n"
            },
            {
                "id": 8,
                "name": "Check GDB output",
                "run": "./fbt gdb_trace_all SWD_TRANSPORT_SERIAL=2A0906016415303030303032 LIB_DEBUG=1 FIRMWARE_APP_SET=unit_tests FORCE=1\n"
            },
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Get flipper from device manager (mock)",
                "run": "echo \"flipper=Rekigyn\" >> $GITHUB_OUTPUT\necho \"stlink=0F020D026415303030303032\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Flashing target firmware",
                "run": "source scripts/toolchain/fbtenv.sh\n./fbt flash_usb_full PORT=${{steps.device.outputs.flipper}} FORCE=1\npython3 scripts/testing/await_flipper.py ${{steps.device.outputs.flipper}}\n"
            },
            {
                "id": 5,
                "name": "Validating updater",
                "run": "source scripts/toolchain/fbtenv.sh\n./fbt flash_usb PORT=${{steps.device.outputs.flipper}} FORCE=1\npython3 scripts/testing/await_flipper.py ${{steps.device.outputs.flipper}}\n"
            },
            {
                "id": 6,
                "name": "Get last release tag",
                "run": "echo \"tag=$(git tag -l --sort=-version:refname | grep -v \"rc\\|RC\" | head -1)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 7,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 8,
                "name": "Checkout latest release",
                "run": "actions/checkout@v4"
            },
            {
                "id": 9,
                "name": "Flash last release",
                "run": "./fbt flash SWD_TRANSPORT_SERIAL=${{steps.device.outputs.stlink}} FORCE=1\n"
            },
            {
                "id": 10,
                "name": "Wait for flipper and format ext",
                "run": "source scripts/toolchain/fbtenv.sh\npython3 scripts/testing/await_flipper.py ${{steps.device.outputs.flipper}}\npython3 scripts/storage.py -p ${{steps.device.outputs.flipper}} format_ext\n"
            }
        ],
        "flipperdevices/Flipper-Android-App": [
            {
                "id": 1,
                "name": "Checkout Git repo",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Set up JDK 17",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Setup Android SDK",
                "run": "android-actions/setup-android@00854ea68c109d98c75d956347303bf7c45b0277"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "sdkmanager --list"
            },
            {
                "id": 5,
                "name": "Enable KVM group perms",
                "run": "echo 'KERNEL==\"kvm\", GROUP=\"kvm\", MODE=\"0666\", OPTIONS+=\"static_node=kvm\"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules\nsudo udevadm control --reload-rules\nsudo udevadm trigger --name-match=kvm\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "build_variant=\"${{ inputs.BUILD_VARIANT_NAME }}\"\necho \"BUILD_VARIANT_NAME=${build_variant}\" >> $GITHUB_OUTPUT        \necho \"BUILD_VARIANT_NAME_UPPERCASE=${build_variant^}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "build_variant=${{ steps.create_uppercase_variant.outputs.BUILD_VARIANT_NAME }}\nbaseline_file_id=\"baseline_profile_file_${build_variant}\"\necho \"BASELINE_FILE_ID=${baseline_file_id}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 8,
                "name": "Step 8",
                "run": "build_variant=${{ steps.create_uppercase_variant.outputs.BUILD_VARIANT_NAME }}\nbaseline_file_path=\"./instances/android/app/src/${build_variant}/generated/baselineProfiles/baseline-prof.txt\"\necho \"BASELINE_FILE_PATH=${baseline_file_path}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 9,
                "name": "Step 9",
                "run": "build_variant_uppercase=${{ steps.create_uppercase_variant.outputs.BUILD_VARIANT_NAME_UPPERCASE }}\nno_test_param=\"-P android.testInstrumentationRunnerArguments.androidx.benchmark.enabledRules=BaselineProfile\"\ntask_name=\"generate${{ steps.create_uppercase_variant.outputs.BUILD_VARIANT_NAME_UPPERCASE }}BaselineProfile\"\npath=\":instances:android:app\"          \ngradlew_full_task=\"$path:$task_name $no_test_param  --stacktrace\"\necho \"BASELINE_TASK=$gradlew_full_task\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 10,
                "name": "Print outputs of current baseline task",
                "run": "echo \"BUILD_VARIANT_NAME ${{ steps.create_uppercase_variant.outputs.BUILD_VARIANT_NAME }}\"\necho \"BUILD_VARIANT_NAME_UPPERCASE ${{ steps.create_uppercase_variant.outputs.BUILD_VARIANT_NAME_UPPERCASE }}\"  \necho \"BASELINE_FILE_ID ${{ steps.create_baseline_file_id.outputs.BASELINE_FILE_ID }}\"           \necho \"BASELINE_FILE_PATH ${{ steps.create_baseline_file_path.outputs.BASELINE_FILE_PATH }}\"\necho \"BASELINE_TASK ${{ steps.create_baseline_task.outputs.BASELINE_TASK }}\"\n"
            },
            {
                "id": 11,
                "name": "Run baseline profiles",
                "run": "./gradlew ${{ steps.create_baseline_task.outputs.BASELINE_TASK }}\n"
            },
            {
                "id": 12,
                "name": "Upload baseline file",
                "run": "actions/upload-artifact@master"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "gradle/wrapper-validation-action@216d1ad2b3710bf005dc39237337b9673fd8fcd5"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.17",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Build internal",
                "run": "gradle/gradle-build-action@4c39dd82cd5e1ec7c6fa0173bb41b4b6bb3b86ff"
            },
            {
                "id": 1,
                "name": "Generate build number",
                "run": "onyxmueller/build-tag-number@4a0c81c9af350d967032d49204c83c38e6b0c8e4"
            },
            {
                "id": 2,
                "name": "Generate build number for WearOS",
                "run": "onyxmueller/build-tag-number@4a0c81c9af350d967032d49204c83c38e6b0c8e4"
            },
            {
                "id": 3,
                "name": "Set output for simple build",
                "run": "echo \"number=${{ steps.buildnumber.outputs.build_number }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Set output for WearOS",
                "run": "echo \"number_wearos=${{ steps.buildnumber_wearos.outputs.build_number }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Download ${{ needs.create_internal_baseline.outputs.BUILD_VARIANT_NAME }} baseline file",
                "run": "actions/download-artifact@master"
            },
            {
                "id": 3,
                "name": "Set up JDK 1.17",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 4,
                "name": "Set variables",
                "run": "export $(cat .github/workflows/version.env | xargs)\necho \"major_version=${MAJOR_VERSION}\" >> $GITHUB_OUTPUT\necho \"minor_version=${{ needs.build_number.outputs.number }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "Build internal release",
                "run": "export $(cat .github/workflows/targets/${{ matrix.target }}.env | xargs)\n./gradlew :instances:android:app:assembleInternal :instances:android:app:bundleInternal\n"
            },
            {
                "id": 6,
                "name": "Sign AAB",
                "run": "r0adkll/sign-android-release@349ebdef58775b1e0d8099458af0816dc79b6407"
            },
            {
                "id": 7,
                "name": "Sign APK",
                "run": "r0adkll/sign-android-release@349ebdef58775b1e0d8099458af0816dc79b6407"
            },
            {
                "id": 8,
                "name": "Copy artifacts",
                "run": "mkdir artifacts\ncp ${{ steps.sign_aab.outputs.signedReleaseFile }} artifacts/flipper-zero-${{ matrix.target }}.aab\ncp ${{ steps.sign_apk.outputs.signedReleaseFile }} artifacts/flipper-zero-${{ matrix.target }}.apk\ncp instances/android/app/build/outputs/mapping/internal/mapping.txt artifacts/mapping-${{ matrix.target }}.txt\necho \"path=artifacts/\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 9,
                "name": "Upload Artifacts",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.17",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Set variables",
                "run": "export $(cat .github/workflows/version.env | xargs)\necho \"major_version=${MAJOR_VERSION}\" >> $GITHUB_OUTPUT\necho \"minor_version=${{ needs.build_number.outputs.number_wearos }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Build internal release",
                "run": "export $(cat .github/workflows/targets/wearos.env | xargs)\n./gradlew :instances:wearable:assembleInternal :instances:wearable:bundleInternal\n"
            },
            {
                "id": 5,
                "name": "Sign Wear AAB",
                "run": "r0adkll/sign-android-release@349ebdef58775b1e0d8099458af0816dc79b6407"
            },
            {
                "id": 6,
                "name": "Sign Wear APK",
                "run": "r0adkll/sign-android-release@349ebdef58775b1e0d8099458af0816dc79b6407"
            },
            {
                "id": 7,
                "name": "Copy artifacts",
                "run": "mkdir artifacts\ncp ${{ steps.sign_wear_aab.outputs.signedReleaseFile }} artifacts/flipper-zero-wearos.aab\ncp ${{ steps.sign_wear_apk.outputs.signedReleaseFile }} artifacts/flipper-zero-wearos.apk\ncp instances/wearable/build/outputs/mapping/internal/mapping.txt artifacts/mapping-wearos.txt\necho \"path=artifacts/\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 8,
                "name": "Upload Artifacts",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 6,
                "name": "Set variables",
                "run": "export $(cat .github/workflows/version.env | xargs)\necho \"major_version=${MAJOR_VERSION}\" >> $GITHUB_OUTPUT\necho \"minor_version=${{ needs.build_number.outputs.number }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 7,
                "name": "Copy artifacts",
                "run": "mkdir artifacts\ncp ${{steps.download-gh_gms.outputs.download-path}}/* artifacts/\ncp ${{steps.download-gh_nogms.outputs.download-path}}/* artifacts/\ncp ${{steps.download-googleplay.outputs.download-path}}/* artifacts/\ncp ${{steps.download-wearos.outputs.download-path}}/* artifacts/\necho \"path=artifacts/\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 8,
                "name": "Install zip",
                "run": "montudor/action-zip@a8e75c9faefcd80fac3baf53ef40b9b119d5b702"
            },
            {
                "id": 9,
                "name": "Prepare mapping",
                "run": "mkdir mappings\nfor target in \"gh_gms\" \"gh_nogms\" \"googleplay\" \"wearos\"; do \\\nmv \"${{ steps.artifacts_copy.outputs.path }}/mapping-${target}.txt\" mappings/ ; done\nzip -qq -r mappings.zip mappings\necho \"archive=mappings.zip\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 10,
                "name": "Prepare other builds",
                "run": "mkdir other\nmv \"${{ steps.artifacts_copy.outputs.path }}/flipper-zero-googleplay.apk\" other/\nmv \"${{ steps.artifacts_copy.outputs.path }}/flipper-zero-wearos.apk\" other/\nmv ${{ steps.artifacts_copy.outputs.path }}/*.aab other/\nzip -qq -r other.zip other\necho \"archive=other.zip\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 11,
                "name": "Artefact build beautifier",
                "run": "mv ${{ steps.artifacts_copy.outputs.path }}/flipper-zero-gh_gms.apk ${{ steps.artifacts_copy.outputs.path }}/flipper-zero-gms-${{ steps.vars.outputs.major_version }}.${{ steps.vars.outputs.minor_version }}.apk  \nmv ${{ steps.artifacts_copy.outputs.path }}/flipper-zero-gh_nogms.apk ${{ steps.artifacts_copy.outputs.path }}/flipper-zero-nogms-${{ steps.vars.outputs.major_version }}.${{ steps.vars.outputs.minor_version }}.apk\n"
            },
            {
                "id": 12,
                "name": "Create internal Release",
                "run": "softprops/action-gh-release@69320dbe05506a9a39fc8ae11030b214ec2d1f87"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 2,
                "name": "Upload to Play Store",
                "run": "r0adkll/upload-google-play@935ef9c68bb393a8e6116b1575626a7f5be3a7fb"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 2,
                "name": "Upload to Play Store Wear OS",
                "run": "r0adkll/upload-google-play@935ef9c68bb393a8e6116b1575626a7f5be3a7fb"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "echo \"github.workflow=${{ github.workflow }}\"\necho \"github.event_name=${{ github.event_name }}\"\necho \"github.ref_name=${{ github.ref_name }}\"\necho \"github.repository=${{ github.repository }}\"\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.17",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Unit test",
                "run": "gradle/gradle-build-action@4c39dd82cd5e1ec7c6fa0173bb41b4b6bb3b86ff"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.17",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "detekt",
                "run": "gradle/gradle-build-action@4c39dd82cd5e1ec7c6fa0173bb41b4b6bb3b86ff"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.17",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Android lint",
                "run": "gradle/gradle-build-action@4c39dd82cd5e1ec7c6fa0173bb41b4b6bb3b86ff"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Get change status for CHANGELOG.md",
                "run": "tj-actions/changed-files@58ae566dc69a926834e4798bcfe0436ff97c0599"
            },
            {
                "id": 3,
                "name": "Failed if changelog not changed",
                "run": "actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.17",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Build release",
                "run": "gradle/gradle-build-action@4c39dd82cd5e1ec7c6fa0173bb41b4b6bb3b86ff"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.17",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Build debug",
                "run": "gradle/gradle-build-action@4c39dd82cd5e1ec7c6fa0173bb41b4b6bb3b86ff"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.17",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Build internal",
                "run": "gradle/gradle-build-action@4c39dd82cd5e1ec7c6fa0173bb41b4b6bb3b86ff"
            },
            {
                "id": 1,
                "name": "Generate build number",
                "run": "onyxmueller/build-tag-number@4a0c81c9af350d967032d49204c83c38e6b0c8e4"
            },
            {
                "id": 2,
                "name": "Generate build number for WearOS",
                "run": "onyxmueller/build-tag-number@4a0c81c9af350d967032d49204c83c38e6b0c8e4"
            },
            {
                "id": 3,
                "name": "Set output for simple build",
                "run": "echo \"number=${{ steps.buildnumber.outputs.build_number }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Set output for WearOS",
                "run": "echo \"number_wearos=${{ steps.buildnumber_wearos.outputs.build_number }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.17",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Download ${{ needs.create_release_baseline.outputs.BUILD_VARIANT_NAME }} baseline file",
                "run": "actions/download-artifact@master"
            },
            {
                "id": 4,
                "name": "Set variables",
                "run": "export $(cat .github/workflows/version.env | xargs)\necho \"major_version=${MAJOR_VERSION}\" >> $GITHUB_OUTPUT\necho \"minor_version=${{ needs.build_number.outputs.number }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 5,
                "name": "Build release",
                "run": "export $(cat .github/workflows/targets/${{ matrix.target }}.env | xargs)\n./gradlew :instances:android:app:assembleRelease :instances:android:app:bundleRelease\n"
            },
            {
                "id": 6,
                "name": "Sign AAB",
                "run": "r0adkll/sign-android-release@349ebdef58775b1e0d8099458af0816dc79b6407"
            },
            {
                "id": 7,
                "name": "Sign APK",
                "run": "r0adkll/sign-android-release@349ebdef58775b1e0d8099458af0816dc79b6407"
            },
            {
                "id": 8,
                "name": "Copy artifacts",
                "run": "mkdir artifacts\ncp ${{ steps.sign_aab.outputs.signedReleaseFile }} artifacts/flipper-zero-${{ matrix.target }}.aab\ncp ${{ steps.sign_apk.outputs.signedReleaseFile }} artifacts/flipper-zero-${{ matrix.target }}.apk\ncp instances/android/app/build/outputs/mapping/release/mapping.txt artifacts/mapping-${{ matrix.target }}.txt\necho \"path=artifacts/\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 9,
                "name": "Upload Artifacts",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Set up JDK 1.17",
                "run": "actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9"
            },
            {
                "id": 3,
                "name": "Set variables",
                "run": "export $(cat .github/workflows/version.env | xargs)\necho \"major_version=${MAJOR_VERSION}\" >> $GITHUB_OUTPUT\necho \"minor_version=${{ needs.build_number.outputs.number_wearos }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Build release",
                "run": "export $(cat .github/workflows/targets/wearos.env | xargs)\n./gradlew :instances:wearable:assembleRelease :instances:wearable:bundleRelease\n"
            },
            {
                "id": 5,
                "name": "Sign Wear AAB",
                "run": "r0adkll/sign-android-release@349ebdef58775b1e0d8099458af0816dc79b6407"
            },
            {
                "id": 6,
                "name": "Sign Wear APK",
                "run": "r0adkll/sign-android-release@349ebdef58775b1e0d8099458af0816dc79b6407"
            },
            {
                "id": 7,
                "name": "Copy artifacts",
                "run": "mkdir artifacts\ncp ${{ steps.sign_wear_aab.outputs.signedReleaseFile }} artifacts/flipper-zero-wearos.aab\ncp ${{ steps.sign_wear_apk.outputs.signedReleaseFile }} artifacts/flipper-zero-wearos.apk\ncp instances/wearable/build/outputs/mapping/release/mapping.txt artifacts/mapping-wearos.txt\necho \"path=artifacts/\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 8,
                "name": "Upload Artifacts",
                "run": "actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 6,
                "name": "Set variables",
                "run": "export $(cat .github/workflows/version.env | xargs)\necho \"major_version=${MAJOR_VERSION}\" >> $GITHUB_OUTPUT\necho \"minor_version=${{ needs.build_number.outputs.number }}\" >> $GITHUB_OUTPUT\necho \"minor_version_wearos=${{ needs.build_number.outputs.number_wearos }}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 7,
                "name": "Copy artifacts",
                "run": "mkdir artifacts\ncp ${{steps.download-gh_gms.outputs.download-path}}/* artifacts/\ncp ${{steps.download-gh_nogms.outputs.download-path}}/* artifacts/\ncp ${{steps.download-googleplay.outputs.download-path}}/* artifacts/\ncp ${{steps.download-wearos.outputs.download-path}}/* artifacts/\necho \"path=artifacts/\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 8,
                "name": "Install zip",
                "run": "montudor/action-zip@a8e75c9faefcd80fac3baf53ef40b9b119d5b702"
            },
            {
                "id": 9,
                "name": "Prepare mapping",
                "run": "mkdir mappings\nfor target in \"gh_gms\" \"gh_nogms\" \"googleplay\" \"wearos\"; do \\\nmv \"${{ steps.artifacts_copy.outputs.path }}/mapping-${target}.txt\" mappings/ ; done\nzip -qq -r mappings.zip mappings\necho \"archive=mappings.zip\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 10,
                "name": "Prepare other builds",
                "run": "mkdir other\nmv \"${{ steps.artifacts_copy.outputs.path }}/flipper-zero-googleplay.apk\" other/\nmv \"${{ steps.artifacts_copy.outputs.path }}/flipper-zero-wearos.apk\" other/\nmv ${{ steps.artifacts_copy.outputs.path }}/*.aab other/\nzip -qq -r other.zip other\necho \"archive=other.zip\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 11,
                "name": "Artefact build beautifier",
                "run": "mv ${{ steps.artifacts_copy.outputs.path }}/flipper-zero-gh_gms.apk ${{ steps.artifacts_copy.outputs.path }}/flipper-zero-gms-${{ steps.vars.outputs.major_version }}.${{ steps.vars.outputs.minor_version }}.apk  \nmv ${{ steps.artifacts_copy.outputs.path }}/flipper-zero-gh_nogms.apk ${{ steps.artifacts_copy.outputs.path }}/flipper-zero-nogms-${{ steps.vars.outputs.major_version }}.${{ steps.vars.outputs.minor_version }}.apk\n"
            },
            {
                "id": 12,
                "name": "Create Release",
                "run": "softprops/action-gh-release@69320dbe05506a9a39fc8ae11030b214ec2d1f87"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Upload to Play Store",
                "run": "r0adkll/upload-google-play@935ef9c68bb393a8e6116b1575626a7f5be3a7fb"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e"
            },
            {
                "id": 3,
                "name": "Upload to Play Store",
                "run": "r0adkll/upload-google-play@935ef9c68bb393a8e6116b1575626a7f5be3a7fb"
            }
        ],
        "flipperdevices/Casper-flipper-blog-theme": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "TryGhost/action-deploy-theme@v1.4.1"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "yarn"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "yarn test:ci"
            }
        ],
        "flipperdevices/docker-rsync-server": [
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 2,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v1"
            },
            {
                "id": 3,
                "name": "Build and push",
                "run": "docker/build-push-action@v2"
            }
        ],
        "flipperdevices/docs": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v1"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 4,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v1"
            },
            {
                "id": 5,
                "name": "Build",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v1"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 4,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v1"
            },
            {
                "id": 5,
                "name": "Build and push",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 6,
                "name": "Image digest",
                "run": "echo ${{ steps.docker_build.outputs.digest }}"
            }
        ],
        "flipperdevices/qFlipper": [
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v3"
            },
            {
                "id": 4,
                "name": "Build and push",
                "run": "docker/build-push-action@v5"
            },
            {
                "id": 5,
                "name": "Build application in docker",
                "run": "docker run --rm --privileged -v $(pwd):/project qflipper-build:latest /project/build_linux.sh"
            },
            {
                "id": 6,
                "name": "Publish application",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build application",
                "run": "./build_mac.sh"
            },
            {
                "id": 3,
                "name": "Publish application",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Build application",
                "run": ".\\build_windows.bat"
            },
            {
                "id": 3,
                "name": "Publish application",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Make artifacts directory",
                "run": "test -d artifacts && rm -rf artifacts || true\nmkdir artifacts\n"
            },
            {
                "id": 3,
                "name": "Generate tag suffix",
                "run": "echo \"REF=$(git describe --tags --abbrev=0)\" >> $GITHUB_ENV\necho \"SUFFIX=$(git describe --tags --abbrev=0)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Generate branch suffix",
                "run": "echo \"REF=$(git rev-parse --abbrev-ref HEAD)\" >> $GITHUB_ENV\necho \"SUFFIX=$(git rev-parse --abbrev-ref HEAD | sed 's/\\//_/g')-$(date +'%d%m%Y')-$(git rev-parse --short HEAD)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 7,
                "name": "Step 7",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 8,
                "name": "Rename app",
                "run": "mv qFlipper-x86_64.AppImage ./artifacts/qFlipper-x86_64-${SUFFIX}.AppImage\nmv qFlipperSetup-64bit.exe ./artifacts/qFlipperSetup-64bit-${SUFFIX}.exe\nmv qFlipper-64bit.zip ./artifacts/qFlipper-64bit-${SUFFIX}.zip\nmv qflipper.dmg ./artifacts/qFlipper-${SUFFIX}.dmg\n"
            },
            {
                "id": 9,
                "name": "Upload artifacts to update server",
                "run": "FILES=$(for CUR in $(ls artifacts/); do echo \"-F files=@artifacts/$CUR\"; done)\ncurl --fail -L -H \"Token: ${{ secrets.INDEXER_TOKEN }}\" \\\n    -F \"branch=${REF}\" \\\n    ${FILES[@]} \\\n    \"${{ secrets.INDEXER_URL }}\"/qFlipper/uploadfiles\n"
            }
        ],
        "flipperdevices/webdfu": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "bahmutov/npm-install@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "bahmutov/npm-install@v1"
            },
            {
                "id": 5,
                "name": "Step 5",
                "run": "npm run test"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "bahmutov/npm-install@v1"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "npm run build"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Prepare changelog",
                "run": "echo \"RELEASE_VERSION=${GITHUB_REF#refs/*/}\" >> $GITHUB_ENV\nsed \"1,/## ${{ env.RELEASE_VERSION }}/d;/##/Q;/^[[:space:]]*$/d\" CHANGELOG.md > ${{ github.workflow }}-release-CHANGELOG.txt\n"
            },
            {
                "id": 3,
                "name": "Github Release",
                "run": "softprops/action-gh-release@v1"
            }
        ],
        "flipperdevices/update.flipperzero.one": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Docker meta",
                "run": "docker/metadata-action@v3"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 4,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v1"
            },
            {
                "id": 5,
                "name": "Build and push",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 6,
                "name": "Image digest",
                "run": "echo ${{ steps.docker_build.outputs.digest }}"
            }
        ],
        "flipperdevices/flipper-update-server": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v1"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 4,
                "name": "Login to GitHub Container Registry",
                "run": "docker/login-action@v1"
            },
            {
                "id": 5,
                "name": "Build and push",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 6,
                "name": "Image digest",
                "run": "echo ${{ steps.docker_build.outputs.digest }}"
            }
        ],
        "flipperdevices/flipperzero-protobuf": [
            {
                "id": 1,
                "name": "Checkout flipperzero-protobuf",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Checkout nanopb",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Setup python",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 4,
                "name": "Setup protobuf",
                "run": "sudo apt -y install protobuf-compiler\npython3 -m pip install --upgrade python3-protobuf==2.5.0 protobuf==3.20.1 grpcio-tools==1.47.0 grpcio==1.47.0\n"
            },
            {
                "id": 5,
                "name": "Generate sources",
                "run": "python3 nanopb/generator/nanopb_generator.py -q -I . -D /tmp *.proto"
            }
        ],
        "flipperdevices/thumbnail-autogen": [
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 2,
                "name": "Login to DockerHub",
                "run": "docker/login-action@v1"
            },
            {
                "id": 3,
                "name": "Build and push",
                "run": "docker/build-push-action@v2"
            }
        ],
        "flipperdevices/libusb_stm32": [
            {
                "id": 1,
                "name": "ARM GCC setup",
                "run": "fiam/arm-none-eabi-gcc@v1"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Resolve prerequisites",
                "run": "make cmsis"
            },
            {
                "id": 4,
                "name": "testbuild F103",
                "run": "make stm32f103x6"
            },
            {
                "id": 5,
                "name": "testbuild F303",
                "run": "make stm32f303xe"
            },
            {
                "id": 6,
                "name": "testbuild F105",
                "run": "make stm32f105xb"
            },
            {
                "id": 7,
                "name": "testbuild L052",
                "run": "make stm32l052x8"
            },
            {
                "id": 8,
                "name": "testbuild L100",
                "run": "make stm32l100xc"
            },
            {
                "id": 9,
                "name": "testbuild L476",
                "run": "make stm32l476xg"
            },
            {
                "id": 10,
                "name": "testbuild F429",
                "run": "make stm32f429xi"
            },
            {
                "id": 11,
                "name": "testbuild L433",
                "run": "make stm32l433cc"
            },
            {
                "id": 12,
                "name": "testbuild F070",
                "run": "make stm32f070xb"
            },
            {
                "id": 13,
                "name": "testbuild G431",
                "run": "make stm32g431xb"
            },
            {
                "id": 14,
                "name": "testbuild F446",
                "run": "make stm32f446xc"
            },
            {
                "id": 15,
                "name": "testbuild F373",
                "run": "make stm32f373xc"
            },
            {
                "id": 16,
                "name": "testbuild F745",
                "run": "make stm32f745xe"
            },
            {
                "id": 1,
                "name": "ARM GCC setup",
                "run": "fiam/arm-none-eabi-gcc@v1"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Update make",
                "run": "brew install make"
            },
            {
                "id": 4,
                "name": "Resolve prerequisites",
                "run": "gmake cmsis"
            },
            {
                "id": 5,
                "name": "testbuild F103",
                "run": "gmake stm32f103x6"
            },
            {
                "id": 6,
                "name": "testbuild F303",
                "run": "gmake stm32f303xe"
            },
            {
                "id": 7,
                "name": "testbuild F105",
                "run": "gmake stm32f105xb"
            },
            {
                "id": 8,
                "name": "testbuild L052",
                "run": "gmake stm32l052x8"
            },
            {
                "id": 9,
                "name": "testbuild L100",
                "run": "gmake stm32l100xc"
            },
            {
                "id": 10,
                "name": "testbuild L476",
                "run": "gmake stm32l476xg"
            },
            {
                "id": 11,
                "name": "testbuild F429",
                "run": "gmake stm32f429xi"
            },
            {
                "id": 12,
                "name": "testbuild L433",
                "run": "gmake stm32l433cc"
            },
            {
                "id": 13,
                "name": "testbuild F070",
                "run": "gmake stm32f070xb"
            },
            {
                "id": 14,
                "name": "testbuild G431",
                "run": "gmake stm32g431xb"
            },
            {
                "id": 15,
                "name": "testbuild F446",
                "run": "gmake stm32f446xc"
            },
            {
                "id": 16,
                "name": "testbuild F373",
                "run": "gmake stm32f373xc"
            },
            {
                "id": 17,
                "name": "testbuild F745",
                "run": "gmake stm32f745xe"
            },
            {
                "id": 1,
                "name": "ARM GCC setup",
                "run": "fiam/arm-none-eabi-gcc@v1"
            },
            {
                "id": 2,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Resolve prerequisites",
                "run": "make cmsis SHELL=cmd"
            },
            {
                "id": 4,
                "name": "testbuild F103",
                "run": "make stm32f103x6 SHELL=cmd"
            },
            {
                "id": 5,
                "name": "testbuild F303",
                "run": "make stm32f303xe SHELL=cmd"
            },
            {
                "id": 6,
                "name": "testbuild F105",
                "run": "make stm32f105xb SHELL=cmd"
            },
            {
                "id": 7,
                "name": "testbuild L052",
                "run": "make stm32l052x8 SHELL=cmd"
            },
            {
                "id": 8,
                "name": "testbuild L100",
                "run": "make stm32l100xc SHELL=cmd"
            },
            {
                "id": 9,
                "name": "testbuild L476",
                "run": "make stm32l476xg SHELL=cmd"
            },
            {
                "id": 10,
                "name": "testbuild F429",
                "run": "make stm32f429xi SHELL=cmd"
            },
            {
                "id": 11,
                "name": "testbuild L433",
                "run": "make stm32l433cc SHELL=cmd"
            },
            {
                "id": 12,
                "name": "testbuild F070",
                "run": "make stm32f070xb SHELL=cmd"
            },
            {
                "id": 13,
                "name": "testbuild G431",
                "run": "make stm32g431xb SHELL=cmd"
            },
            {
                "id": 14,
                "name": "testbuild F446",
                "run": "make stm32f446xc SHELL=cmd"
            },
            {
                "id": 15,
                "name": "testbuild F373",
                "run": "make stm32f373xc SHELL=cmd"
            },
            {
                "id": 16,
                "name": "testbuild F745",
                "run": "make stm32f745xe SHELL=cmd"
            }
        ],
        "flipperdevices/blackmagic-esp32-s2": [
            {
                "id": 1,
                "name": "Store UID",
                "run": "echo id=\"$(id -u $USER)\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 2,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 3,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 4,
                "name": "Checkout submodules",
                "run": "git submodule update --init --recursive --depth 1 --jobs \"$(getconf _NPROCESSORS_ONLN)\";"
            },
            {
                "id": 5,
                "name": "Setup python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 6,
                "name": "Get commit details",
                "run": "if [[ ${{ github.event_name }} == 'pull_request' ]]; then\n  TYPE=\"pull\"\nelif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  TYPE=\"tag\"\nelse\n  TYPE=\"other\"\nfi\npython3 scripts/get_env.py \"--event_file=${{ github.event_path }}\" \"--type=$TYPE\"\necho \"event_type=$TYPE\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 7,
                "name": "Setup node",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 8,
                "name": "Install node dependencies",
                "run": "npm install"
            },
            {
                "id": 9,
                "name": "Build captive portal",
                "run": "npm run build"
            },
            {
                "id": 10,
                "name": "Build firmware",
                "run": "Intake-Health/esp-idf-ci-action@release-v4.4"
            },
            {
                "id": 11,
                "name": "Fix ownership",
                "run": "peter-murray/reset-workspace-ownership-action@v1"
            },
            {
                "id": 12,
                "name": "Make artifacts directory",
                "run": "rm -rf artifacts\nmkdir artifacts\n"
            },
            {
                "id": 13,
                "name": "Move upload files",
                "run": "mv build/bootloader/bootloader.bin artifacts/\nmv build/partition_table/partition-table.bin artifacts/\nmv build/blackmagic.bin artifacts/\ncp scripts/flash_nix.sh artifacts/\n"
            },
            {
                "id": 14,
                "name": "Generate flash.command file",
                "run": "echo \"esptool.py -p (PORT) -b 460800 --before default_reset --after hard_reset --chip esp32s2 write_flash $(tr '\\n' ' ' < build/flash_args)\" > artifacts/flash.command\nsed -i 's/partition_table\\///g' artifacts/flash.command\nsed -i 's/bootloader\\///g' artifacts/flash.command\n"
            },
            {
                "id": 15,
                "name": "Generate archive",
                "run": "mkdir -p \"artifacts-archive\"\ntar -czvf artifacts-archive/blackmagic-firmware-s2-full-${SUFFIX}.tgz -C artifacts/ .\n"
            },
            {
                "id": 16,
                "name": "Upload artifacts to update server",
                "run": "FILES=$(for CUR in $(ls artifacts-archive/); do echo \"-F files=@artifacts-archive/$CUR\"; done)\ncurl --fail -L -H \"Token: ${{ secrets.INDEXER_TOKEN }}\" \\\n    -F \"branch=${BRANCH_NAME}\" \\\n    ${FILES[@]} \\\n    \"${{ secrets.INDEXER_URL }}\"/blackmagic-firmware/uploadfiles\n"
            },
            {
                "id": 1,
                "name": "Trigger reindex",
                "run": "curl --fail -L -H \"Token: ${{ secrets.INDEXER_TOKEN }}\" \\\n    \"${{ secrets.INDEXER_URL }}\"/blackmagic-firmware/reindex\n"
            }
        ],
        "flipperdevices/blackmagic": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "numworks/setup-arm-toolchain@2020-q4"
            },
            {
                "id": 3,
                "name": "Install BMDA dependencies",
                "run": "sudo apt-get -y install libusb-dev libftdi1-dev libhidapi-dev"
            },
            {
                "id": 4,
                "name": "Build all platform firmwares and Linux BMDA",
                "run": "make all_platforms"
            },
            {
                "id": 5,
                "name": "Archive firmware build artifacts as a zip",
                "run": "actions/upload-artifact@v2.2.4"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "numworks/setup-arm-toolchain@2020-q4"
            },
            {
                "id": 3,
                "name": "Build all platform firmwares and BMP only BMPA",
                "run": "make all_platforms HOSTED_BMP_ONLY=1"
            },
            {
                "id": 4,
                "name": "Clean",
                "run": "make clean"
            },
            {
                "id": 5,
                "name": "Build all platform firmwares with RTT",
                "run": "make all_platforms HOSTED_BMP_ONLY=1 ENABLE_RTT=1"
            },
            {
                "id": 6,
                "name": "Clean",
                "run": "make clean"
            },
            {
                "id": 7,
                "name": "Install BMDA dependencies",
                "run": "sudo apt-get -y install libusb-dev libftdi1-dev libhidapi-dev"
            },
            {
                "id": 8,
                "name": "Build full BMDA binary",
                "run": "make PROBE_HOST=hosted"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "numworks/setup-arm-toolchain@2020-q4"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "actions/checkout@v2"
            },
            {
                "id": 4,
                "name": "Build base",
                "run": "make -C base > base/build.log"
            },
            {
                "id": 5,
                "name": "Build head",
                "run": "make -C head > head/build.log"
            },
            {
                "id": 6,
                "name": "Diff",
                "run": "head/scripts/diff_size.py base/build.log head/build.log"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3.0.2"
            },
            {
                "id": 2,
                "name": "Run pre-commit",
                "run": "before-commit/run-action@v2.0.3"
            }
        ],
        "flipperdevices/flpr.app": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set image tag",
                "run": "IMAGE_TAG=\"0.0.0\"\nif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  REF=${{ github.ref }};\n  TAG_FULL=${REF#refs/*/};\n  IMAGE_TAG=${TAG_FULL//\\//_};\nfi\necho \"IMAGE_TAG=${IMAGE_TAG}\" >> $GITHUB_ENV\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Set up QEMU",
                "run": "docker/setup-qemu-action@v2"
            },
            {
                "id": 4,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 5,
                "name": "Login to GHCR",
                "run": "docker/login-action@v2"
            },
            {
                "id": 6,
                "name": "Build and push",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 7,
                "name": "Image digest",
                "run": "echo ${{ steps.docker_build.outputs.digest }}\n"
            },
            {
                "id": 8,
                "name": "Trigger k8s to use new image",
                "run": "peter-evans/repository-dispatch@v2"
            }
        ],
        "flipperdevices/lab.flipper.net": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set image tag and name",
                "run": "IMAGE_TAG=\"0.0.0\"\nif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  REF=${{ github.ref }};\n  TAG_FULL=${REF#refs/*/};\n  IMAGE_TAG=${TAG_FULL//\\//_};\nfi\necho \"IMAGE_TAG=${IMAGE_TAG}\" >> $GITHUB_ENV\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\necho \"image_name=${IMAGE_NAME}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 5,
                "name": "Build and push dev",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 6,
                "name": "Build and push prod",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 7,
                "name": "Show dev image digest",
                "run": "echo ${{ steps.docker_build_dev.outputs.digest }}\n"
            },
            {
                "id": 8,
                "name": "Show prod image digest",
                "run": "echo ${{ steps.docker_build_prod.outputs.digest }}\n"
            },
            {
                "id": 9,
                "name": "Trigger k8s to use new image",
                "run": "peter-evans/repository-dispatch@v2"
            }
        ],
        "flipperdevices/flipperzero-toolchain": [
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set image tag and name",
                "run": "IMAGE_TAG=\"0\"\nif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  REF=${{ github.ref }};\n  TAG_FULL=${REF#refs/*/};\n  IMAGE_TAG=${TAG_FULL//\\//_};\nfi\necho \"IMAGE_TAG=${IMAGE_TAG}\" >> $GITHUB_ENV\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Build linux toolchain x86_64",
                "run": "docker build -t flipperzero-toolchain-linux:${IMAGE_TAG} -f linux/Dockerfile-x86_64 linux\n"
            },
            {
                "id": 5,
                "name": "Bundle and upload linux toolchain x86_64",
                "run": "docker run --rm \\\n    -e \"TOOLCHAIN_VERSION=$IMAGE_TAG\" \\\n    -e \"INDEXER_URL=${{ secrets.INDEXER_URL }}\" \\\n    -e \"INDEXER_TOKEN=${{ secrets.INDEXER_TOKEN }}\" \\\n    flipperzero-toolchain-linux:${IMAGE_TAG} \\\n    /usr/bin/bundle_upload.sh\n"
            },
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set image tag and name",
                "run": "IMAGE_TAG=\"0\"\nif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  REF=${{ github.ref }};\n  TAG_FULL=${REF#refs/*/};\n  IMAGE_TAG=${TAG_FULL//\\//_};\nfi\necho \"IMAGE_TAG=${IMAGE_TAG}\" >> $GITHUB_ENV\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Build linux toolchain aarch64",
                "run": "docker build --platform linux/arm64 \\\n    -t flipperzero-toolchain-linux:${IMAGE_TAG} \\\n    -f linux/Dockerfile-aarch64 linux\n"
            },
            {
                "id": 5,
                "name": "Bundle and upload linux toolchain aarch64",
                "run": "docker run --rm \\\n    -e \"TOOLCHAIN_VERSION=$IMAGE_TAG\" \\\n    -e \"INDEXER_URL=${{ secrets.INDEXER_URL }}\" \\\n    -e \"INDEXER_TOKEN=${{ secrets.INDEXER_TOKEN }}\" \\\n    flipperzero-toolchain-linux:${IMAGE_TAG} \\\n    /usr/bin/bundle_upload.sh\n"
            },
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set image tag and name",
                "run": "IMAGE_TAG=\"0\"\nif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  REF=${{ github.ref }};\n  TAG_FULL=${REF#refs/*/};\n  IMAGE_TAG=${TAG_FULL//\\//_};\nfi\necho \"IMAGE_TAG=${IMAGE_TAG}\" >> $GITHUB_ENV\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Build windows toolchain",
                "run": "docker build -t flipperzero-toolchain-windows:${IMAGE_TAG} windows\n"
            },
            {
                "id": 5,
                "name": "Bundle and upload windows toolchain",
                "run": "docker run --rm \\\n    -e \"TOOLCHAIN_VERSION=$IMAGE_TAG\" \\\n    -e \"INDEXER_URL=${{ secrets.INDEXER_URL }}\" \\\n    -e \"INDEXER_TOKEN=${{ secrets.INDEXER_TOKEN }}\" \\\n    flipperzero-toolchain-windows:${IMAGE_TAG} \\\n    /usr/bin/bundle_upload.sh\n"
            },
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set image tag and name",
                "run": "IMAGE_TAG=\"0\"\nif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  REF=${{ github.ref }};\n  TAG_FULL=${REF#refs/*/};\n  IMAGE_TAG=${TAG_FULL//\\//_};\nfi\necho \"IMAGE_TAG=${IMAGE_TAG}\" >> $GITHUB_ENV\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 4,
                "name": "Bundle and upload mac toolchain",
                "run": "sudo chmocker run --rm \\\n    -e \"TOOLCHAIN_VERSION=$IMAGE_TAG\" \\\n    -e \"INDEXER_URL=${{ secrets.INDEXER_URL }}\" \\\n    -e \"INDEXER_TOKEN=${{ secrets.INDEXER_TOKEN }}\" \\\n    flipperzero-toolchain-mac:${IMAGE_TAG} \\\n    /usr/bin/bundle_upload.sh\n"
            }
        ],
        "flipperdevices/go-metric": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set image tag",
                "run": "IMAGE_TAG=\"0.0.0\"\nif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  REF=${{ github.ref }};\n  TAG_FULL=${REF#refs/*/};\n  IMAGE_TAG=${TAG_FULL//\\//_};\nfi\necho \"IMAGE_TAG=${IMAGE_TAG}\" >> $GITHUB_ENV\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 4,
                "name": "Login to GHCR",
                "run": "docker/login-action@v1"
            },
            {
                "id": 5,
                "name": "Build and push go-metric",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 6,
                "name": "Build and push Clickhouse",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 7,
                "name": "Print image digest",
                "run": "echo ${{ steps.docker_build.outputs.digest }}"
            },
            {
                "id": 8,
                "name": "Trigger k8s to use new image",
                "run": "peter-evans/repository-dispatch@v2"
            }
        ],
        "flipperdevices/welcomer-bot": [
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 2,
                "name": "Login to GHCR",
                "run": "docker/login-action@v1"
            },
            {
                "id": 3,
                "name": "Build and push",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 4,
                "name": "Image digest",
                "run": "echo ${{ steps.docker_build.outputs.digest }}"
            }
        ],
        "flipperdevices/json_exporter": [
            {
                "id": 1,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v1"
            },
            {
                "id": 2,
                "name": "Login to GHCR",
                "run": "docker/login-action@v1"
            },
            {
                "id": 3,
                "name": "Build and push",
                "run": "docker/build-push-action@v2"
            },
            {
                "id": 4,
                "name": "Image digest",
                "run": "echo ${{ steps.docker_build.outputs.digest }}"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "install Go",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 3,
                "name": "Install snmp_exporter/generator dependencies",
                "run": "sudo apt-get update && sudo apt-get -y install libsnmp-dev"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "golangci/golangci-lint-action@v3.2.0"
            }
        ],
        "flipperdevices/firmware-report-client": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set image tag",
                "run": "IMAGE_TAG=0.0.0\nif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  REF=${{ github.ref }};\n  TAG_FULL=${REF#refs/*/};\n  IMAGE_TAG=${TAG_FULL//\\//_};\nfi\necho \"IMAGE_TAG=${IMAGE_TAG}\" >> $GITHUB_ENV\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\necho \"image_name=${IMAGE_NAME}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 5,
                "name": "Build and push",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 6,
                "name": "Trigger k8s to use new image",
                "run": "peter-evans/repository-dispatch@v2"
            }
        ],
        "flipperdevices/flipper-application-catalog": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup environment",
                "run": "ARCHIVARIUS_URL=$( < .github/.ARCHIVARIUS_URL ) ;\necho \"ARCHIVARIUS_URL=${ARCHIVARIUS_URL}\" >> $GITHUB_ENV ;\necho \"::add-matcher::${{ github.workspace }}/.github/problem-matcher.json\" ;\necho \"bundle-url=${ARCHIVARIUS_URL}${{ inputs.bundle_url }}\" >> $GITHUB_OUTPUT ;\necho \"upload-url=${ARCHIVARIUS_URL}${{ inputs.upload_url }}\" >> $GITHUB_OUTPUT ; \necho \"local-bundle-zip=${{ runner.temp }}/bundle.zip\" >> $GITHUB_OUTPUT ;\necho \"local-bundle-path=${{ runner.temp }}/app\" >> $GITHUB_OUTPUT ;\necho \"code-path=${{ runner.temp }}/app/code\" >> $GITHUB_OUTPUT ;\n"
            },
            {
                "id": 3,
                "name": "Download bundle file",
                "run": "curl --fail-with-body -L \\\n  -H \"Authorization: Bearer ${{ secrets.FAST_AUTH_TOKEN }}\" \\\n  -o ${{ steps.env-setup.outputs.local-bundle-zip }} \\\n  ${{ steps.env-setup.outputs.bundle-url }}\n"
            },
            {
                "id": 4,
                "name": "Unzip src bundle",
                "run": "unzip -qq ${{ steps.env-setup.outputs.local-bundle-zip }} -d ${{ steps.env-setup.outputs.local-bundle-path }} ;\nAPPID=$( grep -e \"^id: \" \"${{ steps.env-setup.outputs.local-bundle-path }}/manifest.yml\" | cut -d\" \" -f2 ) ;\necho \"appid=${APPID}\" >> $GITHUB_OUTPUT ;\n"
            },
            {
                "id": 5,
                "name": "Run ufbt",
                "run": "flipperdevices/flipperzero-ufbt-action@v0.1"
            },
            {
                "id": 6,
                "name": "Report build failures",
                "run": "cat << \"UFBT-ERROR-EOF\" > ${{ runner.temp }}/build-errors\n${{ steps.ufbt.outputs.build-errors }}\nUFBT-ERROR-EOF\ncurl --fail-with-body \\\n  -H \"Authorization: Bearer ${{ secrets.FAST_AUTH_TOKEN }}\" \\\n  -F \"logs=@${{ runner.temp }}/build-errors\" \\\n  -F \"github_run_id=${{ github.run_id }}\" \\\n  ${{ steps.env-setup.outputs.upload-url }}/status/fail ;\nexit 1 ;\n"
            },
            {
                "id": 7,
                "name": "Zip artifacts",
                "run": "FAP_PATH=$(echo \"${{ steps.ufbt.outputs.fap-artifacts }}\" | sed 's/ /\\n/g' | grep ${{ steps.unzip-bundle.outputs.appid }} | grep -E \".fap$\"); FAP_SHA=$( sha256sum $FAP_PATH | cut -d' ' -f1 ) ; FAP_NAME=$( basename $FAP_PATH ) ; echo \"build-checksum=$FAP_SHA\" >> $GITHUB_OUTPUT ; echo \"SHA256 for $FAP_NAME = \\`\\`\\`$FAP_SHA\\`\\`\\`\" >> $GITHUB_STEP_SUMMARY ; zip -qq -r -j ${{ runner.temp }}/build-artifacts.zip $FAP_PATH ; echo \"artifact-path=${{ runner.temp }}/build-artifacts.zip\" >> $GITHUB_OUTPUT ;\n"
            },
            {
                "id": 8,
                "name": "Upload built files",
                "run": "curl --fail-with-body \\\n  -H \"Authorization: Bearer ${{ secrets.FAST_AUTH_TOKEN }}\" \\\n  -F \"build_checksum=${{ steps.zip-artifacts.outputs.build-checksum }}\" \\\n  -F \"github_run_id=${{ github.run_id }}\" \\\n  -F \"build=@${{ steps.zip-artifacts.outputs.artifact-path }}\" \\\n  ${{ steps.env-setup.outputs.upload-url }}\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Get updated manifests",
                "run": "tj-actions/changed-files@v41"
            },
            {
                "id": 3,
                "name": "JSONify changes",
                "run": "if [ \"${{ github.event_name }}\" != \"push\" ] ; then\n  echo checks-only=true >> $GITHUB_OUTPUT ;\nfi ;\necho all-changed-files=$(echo \"${{ steps.changed-files.outputs.all_changed_files }}\" | jq -R -c 'split(\" \")' ) >> $GITHUB_OUTPUT ;\necho deleted-files=$(echo \"${{ steps.changed-files.outputs.deleted_files }}\" | jq -R -c 'split(\" \")' ) >> $GITHUB_OUTPUT ;\n"
            },
            {
                "id": 4,
                "name": "Generate diff comment data",
                "run": "echo \"### Application updates\" >> diff.md ;\nfor manifest in ${{ steps.changed-files.outputs.all_changed_files }} ; do\n  SHA_DIFF=$( git diff --unified=0 ${{ github.event.pull_request.base.sha }} ${{ github.sha }} -- $manifest | grep \"commit_sha: \" ) ;\n  OLD_SHA_VALUE=$( echo \"$SHA_DIFF\" | grep -E '^\\-' | sed \"s/.*: //\" | xargs ) ;\n  NEW_SHA_VALUE=$( echo \"$SHA_DIFF\" | grep -E '^\\+' | sed \"s/.*: //\" | xargs ) ;\n  REPO_URL=$( grep \" origin: \" $manifest | sed \"s/.*origin: \\(.*\\)/\\1/\" | sed \"s/\\(.*\\).git$/\\1/\" ) ;\n  APP_ID=$(basename $( dirname $manifest ) ) ;\n  if [ \"z$OLD_SHA_VALUE\" == \"z\" ] ; then\n    echo \"New app \\`$APP_ID\\`: [repo]($REPO_URL/tree/$NEW_SHA_VALUE)\" >> diff.md ;\n  else\n    echo \"Updated app \\`$APP_ID\\`: [changes]($REPO_URL/compare/$OLD_SHA_VALUE...$NEW_SHA_VALUE)\" >> diff.md ;\n  fi ;\ndone ;\necho 'repo-diff-md-file=diff.md' >> $GITHUB_OUTPUT ;\necho 'repo-diff<<REPO-DIFF-DATA-EOF' >> $GITHUB_OUTPUT ;\ncat diff.md >> $GITHUB_OUTPUT ;\necho 'REPO-DIFF-DATA-EOF' >> $GITHUB_OUTPUT ;\n"
            },
            {
                "id": 5,
                "name": "Output diff to job status",
                "run": "cat \"${{ steps.diff-comment.outputs.repo-diff-md-file }}\" >> $GITHUB_STEP_SUMMARY ;\n"
            },
            {
                "id": 6,
                "name": "Find diff comment",
                "run": "peter-evans/find-comment@v2.4.0"
            },
            {
                "id": 7,
                "name": "Create or update diff comment",
                "run": "peter-evans/create-or-update-comment@v3"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up source code flag",
                "run": "ARCHIVARIUS_URL=$( < .github/.ARCHIVARIUS_URL ) ;\necho \"ARCHIVARIUS_URL=${ARCHIVARIUS_URL}\" >> $GITHUB_ENV ;\nif [ \"z{{ vars.CATALOG_STAGING }}\" != \"z\" ] ; then\n  echo \"BUNDLE_ALLOW_VERSION_MISMATCH=1\" >> $GITHUB_ENV ;\nfi ;\n"
            },
            {
                "id": 3,
                "name": "Bundle application",
                "run": "./.github/actions/bundle"
            },
            {
                "id": 4,
                "name": "Retry build with RC SDK",
                "run": "./.github/actions/bundle"
            },
            {
                "id": 5,
                "name": "Get succesful build output",
                "run": "if [ -f \"${{ steps.app-bundle.outputs.bundle-path }}\" ] ; then\n  echo \"path=${{ steps.app-bundle.outputs.bundle-path }}\" >> $GITHUB_OUTPUT ;\n  echo \"artifacts-path=${{ steps.app-bundle.outputs.artifacts-path }}\" >> $GITHUB_OUTPUT ;\nelif [ -f $GITHUB_OUTPUT ] ; then\n  echo \"path=${{ steps.app-bundle-rc.outputs.bundle-path }}\" >> $GITHUB_OUTPUT ;\n  echo \"artifacts-path=${{ steps.app-bundle-rc.outputs.artifacts-path }}\" >> $GITHUB_OUTPUT ;\nelse\n  echo Failed to build application bundle! ;\n  exit 1 ;\nfi\nAPPID=$( jq -r '.id' bundle.json ) ;\nAPPVERSION=$( jq -r '.version' bundle.json ) ;\necho \"app-id=$APPID\" >> $GITHUB_OUTPUT ;\necho \"app-version=$APPVERSION\" >> $GITHUB_OUTPUT ;\n"
            },
            {
                "id": 6,
                "name": "Submit application bundle",
                "run": "curl --fail-with-body \\\n  -H \"Authorization: Bearer ${{ secrets.FAST_AUTH_TOKEN }}\" \\\n  -F \"bundle=@${{ steps.get-bundle-path.outputs.path }}\" \\\n  ${{ env.ARCHIVARIUS_URL }}/api/v0/application/version/bundle\n"
            },
            {
                "id": 7,
                "name": "Check if version exists",
                "run": "VER_HTTP_CODE=$( curl -sw '%{http_code}' -o /dev/null \\\n\"${{ env.ARCHIVARIUS_URL }}/api/v0/application/${{ steps.get-bundle-path.outputs.app-id }}/versions?version=${{ steps.get-bundle-path.outputs.app-version }}\" ) ;\nif [ \"$VER_HTTP_CODE\" != \"404\" ] ; then\n  echo \"Version ${{ steps.get-bundle-path.outputs.app-version }} for ${{ steps.get-bundle-path.outputs.app-id }} already exists (or server failed, code ${VER_HTTP_CODE})!\" ;\n  exit 1 ;\nfi\n"
            },
            {
                "id": 8,
                "name": "Create bundle artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 9,
                "name": "Create build artifacts artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up source code flag",
                "run": "ARCHIVARIUS_URL=$( < .github/.ARCHIVARIUS_URL ) ;\necho \"ARCHIVARIUS_URL=${ARCHIVARIUS_URL}\" >> $GITHUB_ENV ;\nif [ \"z{{ vars.CATALOG_STAGING }}\" != \"z\" ] ; then\n  echo \"BUNDLE_ALLOW_VERSION_MISMATCH=1\" >> $GITHUB_ENV ;\nfi\n"
            },
            {
                "id": 3,
                "name": "Extract app id from path",
                "run": "echo \"app-id=$( basename $( dirname ${{ matrix.manifest }} ) )\" >> $GITHUB_OUTPUT ;\n"
            },
            {
                "id": 4,
                "name": "Check if app exists on backend",
                "run": "curl --fail-with-body \\\n  ${{ env.ARCHIVARIUS_URL }}/api/v0/application/${{ steps.get-app-id.outputs.app-id }}\n"
            },
            {
                "id": 5,
                "name": "Delete app from backend",
                "run": "curl --fail-with-body -X DELETE \\\n  -H \"Authorization: Bearer ${{ secrets.FAST_AUTH_TOKEN }}\" \\\n  ${{ env.ARCHIVARIUS_URL }}/api/v0/application/${{ steps.get-app-id.outputs.app-id }}\n"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Run self-test",
                "run": "./.github/actions/bundle"
            },
            {
                "id": 3,
                "name": "Create bundle artifact",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "echo \"All good \u2728\" ;"
            },
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setting envs",
                "run": "ARCHIVARIUS_URL=$(< .github/.ARCHIVARIUS_URL) ;\necho \"ARCHIVARIUS_URL=${ARCHIVARIUS_URL}\" >> $GITHUB_ENV ;\n"
            },
            {
                "id": 3,
                "name": "Check README existence",
                "run": "andstor/file-existence-action@v2"
            },
            {
                "id": 4,
                "name": "Generate README widget file",
                "run": "python3 ./tools/widget.py \\\n  \"${{ inputs.application-id }}\" \"${{ inputs.application-category }}\" ;\n"
            },
            {
                "id": 5,
                "name": "Commit README widget file",
                "run": "EndBug/add-and-commit@v9"
            }
        ],
        "flipperdevices/firmware-report-server": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set image tag",
                "run": "IMAGE_TAG=0.0.0\nif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  REF=${{ github.ref }};\n  TAG_FULL=${REF#refs/*/};\n  IMAGE_TAG=${TAG_FULL//\\//_};\nfi\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\necho \"image_name=${IMAGE_NAME}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v3"
            },
            {
                "id": 4,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 5,
                "name": "Build and push",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 6,
                "name": "Trigger k8s to use new image",
                "run": "peter-evans/repository-dispatch@v2"
            }
        ],
        "flipperdevices/flipperzero-ufbt": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install build\n"
            },
            {
                "id": 4,
                "name": "Build package",
                "run": "python -m build"
            },
            {
                "id": 5,
                "name": "Publish package",
                "run": "pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip .\n"
            },
            {
                "id": 4,
                "name": "Run tests",
                "run": "python -m unittest\n"
            }
        ],
        "flipperdevices/flipper-update-indexer": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set image tag",
                "run": "REF=${{ github.ref }};\nTAG_FULL=${REF#refs/*/};\nIMAGE_TAG=${TAG_FULL//\\//_};\necho \"IMAGE_TAG=${IMAGE_TAG}\" >> $GITHUB_ENV\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build docker image",
                "run": "docker build -t \"${IMAGE_NAME}:${IMAGE_TAG}\" .\n"
            },
            {
                "id": 5,
                "name": "Upload docker image",
                "run": "docker push \"$IMAGE_NAME:$IMAGE_TAG\"\n"
            },
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Lint Python code",
                "run": "make lint\n"
            }
        ],
        "flipperdevices/flipper-documentation-indexer": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set image tag",
                "run": "REF=${{ github.ref }};\nTAG_FULL=${REF#refs/*/};\nIMAGE_TAG=${TAG_FULL//\\//_};\necho \"IMAGE_TAG=${IMAGE_TAG}\" >> $GITHUB_ENV\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 4,
                "name": "Build docker image",
                "run": "docker build -t \"${IMAGE_NAME}:${IMAGE_TAG}\" .\n"
            },
            {
                "id": 5,
                "name": "Upload docker image",
                "run": "docker push \"$IMAGE_NAME:$IMAGE_TAG\"\n"
            },
            {
                "id": 6,
                "name": "Trigger k8s to use new image",
                "run": "peter-evans/repository-dispatch@v2"
            }
        ],
        "flipperdevices/flipper-tilda-webserver": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set image tag",
                "run": "REF=${{ github.ref }};\nTAG_FULL=${REF#refs/*/};\nIMAGE_TAG=${TAG_FULL//\\//_};\necho \"IMAGE_TAG=${IMAGE_TAG}\" >> $GITHUB_ENV\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to Docker Hub",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Build and push",
                "run": "docker/build-push-action@v4"
            }
        ],
        "flipperdevices/flipperzero-ufbt-action": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Setup ufbt",
                "run": "./"
            },
            {
                "id": 3,
                "name": "Create app",
                "run": "mkdir test\ncd test\nufbt create APPID=test\n"
            },
            {
                "id": 4,
                "name": "Build test app",
                "run": "./"
            },
            {
                "id": 5,
                "name": "Upload app artifacts",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 6,
                "name": "Break app",
                "run": "echo \"static int testmain(int unused_i) { return 1; }\" >> test/test.c\n"
            },
            {
                "id": 7,
                "name": "Lint broken app",
                "run": "./"
            },
            {
                "id": 8,
                "name": "Build broken app",
                "run": "./"
            },
            {
                "id": 9,
                "name": "Fail if lint or build of broken app succeeded",
                "run": "exit 1"
            },
            {
                "id": 10,
                "name": "Fail if lint or build of broken app did not produce error output",
                "run": "exit 1"
            }
        ],
        "flipperdevices/nginx-headers-more": [
            {
                "id": 1,
                "name": "Checkout code",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set image tag",
                "run": "IMAGE_TAG=\"0.0.0\"\nif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  REF=${{ github.ref }};\n  TAG_FULL=${REF#refs/*/};\n  IMAGE_TAG=${TAG_FULL//\\//_};\nfi\necho \"IMAGE_TAG=${IMAGE_TAG}\" >> $GITHUB_ENV\necho \"image_tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 3,
                "name": "Set up Docker Buildx",
                "run": "docker/setup-buildx-action@v2"
            },
            {
                "id": 4,
                "name": "Login to registry",
                "run": "docker/login-action@v2"
            },
            {
                "id": 5,
                "name": "Build and push alpine version",
                "run": "docker/build-push-action@v4"
            },
            {
                "id": 6,
                "name": "Build and push debian version",
                "run": "docker/build-push-action@v4"
            }
        ],
        "flipperdevices/flipperzero-good-faps": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Set up ufbt",
                "run": "flipperdevices/flipperzero-ufbt-action@v0.1"
            },
            {
                "id": 3,
                "name": "Get changed files",
                "run": "tj-actions/changed-files@v39"
            },
            {
                "id": 4,
                "name": "Build & lint updated apps",
                "run": "BUILD_FAILED=0\nfor appdir in ${{ steps.changed-files.outputs.all_changed_and_modified_files }} ; do\n  if [ ! -f \"$appdir/application.fam\" ] ; then\n    echo \"Skipping $appdir, no application.fam. File may have been deleted.\"\n    continue\n  fi\n  echo \"Building in $appdir\"\n  pushd \"$appdir\"\n  if ! ufbt build faps ; then\n    echo \"::error::Failed to build $appdir\"\n    BUILD_FAILED=1\n  fi\n  popd\ndone\nif [ $BUILD_FAILED -ne 0 ] ; then\n  echo One or more apps failed to build\n  exit 1\nfi\n"
            },
            {
                "id": 5,
                "name": "Build & lint all apps",
                "run": "BUILD_FAILED=0\nfor appdir in $( dirname $( find . -name application.fam ) ) ; do\n  if [ ! -f \"$appdir/application.fam\" ] ; then\n    echo \"Skipping $appdir, no application.fam. File may have been deleted.\"\n    continue\n  fi\n  echo \"Building in $appdir\"\n  pushd \"$appdir\"\n  if ! ufbt build faps ; then\n    BUILD_FAILED=1\n    echo \"::error::Failed to build $appdir\"\n  fi\n  popd\ndone\nif [ $BUILD_FAILED -ne 0 ] ; then\n  echo One or more apps failed to build\n  exit 1\nfi\n"
            },
            {
                "id": 6,
                "name": "Gather build artifacts",
                "run": "mkdir -p dist\ncp -v $( find . -name '*.fap' ) dist/\n"
            },
            {
                "id": 7,
                "name": "Upload all .fap files",
                "run": "actions/upload-artifact@v4"
            }
        ],
        "flipperdevices/video-game-module": [
            {
                "id": 1,
                "name": "Wipe workspace",
                "run": "find ./ -mount -maxdepth 1 -exec rm -rf {} \\;"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Set toolchain envs",
                "run": "echo \"FBT_TOOLCHAIN_PATH=$(pwd)\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Download toolchain",
                "run": "source scripts/toolchain/fbtenv.sh\n"
            },
            {
                "id": 5,
                "name": "Setup cmake",
                "run": "jwlawson/actions-setup-cmake@v2"
            },
            {
                "id": 6,
                "name": "Checkout submodules",
                "run": "git submodule update --init --recursive --depth 1 --jobs \"$(getconf _NPROCESSORS_ONLN)\";"
            },
            {
                "id": 7,
                "name": "Get commit details",
                "run": "if [[ ${{ github.event_name }} == 'pull_request' ]]; then\n  TYPE=\"pull\"\nelif [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n  TYPE=\"tag\"\nelse\n  TYPE=\"other\"\nfi\nsource scripts/toolchain/fbtenv.sh;\npython3 scripts/get_env.py \\\n    \"--event_file=${{ github.event_path }}\" \\\n    \"--type=$TYPE\" \\\n    \"--github_auth_token=${{ secrets.GITHUB_TOKEN }}\";\necho \"event_type=$TYPE\" >> $GITHUB_OUTPUT\n"
            },
            {
                "id": 8,
                "name": "Build firmware",
                "run": "source scripts/toolchain/fbtenv.sh;\npushd build;\ncmake -DCMAKE_BUILD_TYPE=Release ../;\nmake -j\"$(getconf _NPROCESSORS_ONLN)\";\npopd;\n"
            },
            {
                "id": 9,
                "name": "Make artifacts directory",
                "run": "rm -rf artifacts;\nmkdir artifacts;\n"
            },
            {
                "id": 10,
                "name": "Move upload files",
                "run": "mv build/app/firmware.elf artifacts/vgm-rp2040-firmware-${SUFFIX}.elf;\nmv build/app/firmware.bin artifacts/vgm-rp2040-firmware-${SUFFIX}.bin;\nmv build/app/firmware.uf2 artifacts/vgm-rp2040-firmware-${SUFFIX}.uf2;\nmv build/app/firmware.elf.map artifacts/vgm-rp2040-firmware-${SUFFIX}.map;\n"
            },
            {
                "id": 11,
                "name": "Upload artifacts to update server",
                "run": "FILES=$(for CUR in $(ls artifacts/); do echo \"-F files=@artifacts/$CUR\"; done)\ncurl --fail -L -H \"Token: ${{ secrets.INDEXER_TOKEN }}\" \\\n    -F \"branch=${BRANCH_NAME}\" \\\n    ${FILES[@]} \\\n    \"${{ secrets.INDEXER_URL }}\"/vgm-firmware/uploadfiles;\n"
            }
        ]
    },
    "Azure": {
        "Azure/azure-sdk-for-net": [
            {
                "id": 1,
                "name": "Az CLI login",
                "run": "azure/login@v2"
            },
            {
                "id": 2,
                "name": "Run Azure CLI commands",
                "run": "LABEL_SERVICE_API_KEY=$(az keyvault secret show \\\n  --vault-name issue-labeler \\\n  -n issue-labeler-func-key \\\n  -o tsv \\\n  --query value)\n\necho \"::add-mask::$LABEL_SERVICE_API_KEY\"\necho \"LABEL_SERVICE_API_KEY=$LABEL_SERVICE_API_KEY\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Install GitHub Event Processor",
                "run": "dotnet tool install Azure.Sdk.Tools.GitHubEventProcessor --version 1.0.0-dev.20240610.2 --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json --global\n"
            },
            {
                "id": 4,
                "name": "Process Action Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json\n"
            },
            {
                "id": 1,
                "name": "Install GitHub Event Processor",
                "run": "dotnet tool install Azure.Sdk.Tools.GitHubEventProcessor --version 1.0.0-dev.20240610.2 --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json --global\n"
            },
            {
                "id": 2,
                "name": "Process Action Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "azure/azure-sdk-actions@main"
            },
            {
                "id": 1,
                "name": "Install GitHub Event Processor",
                "run": "dotnet tool install Azure.Sdk.Tools.GitHubEventProcessor --version 1.0.0-dev.20240610.2 --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json --global\n"
            },
            {
                "id": 2,
                "name": "Close Stale Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json CloseStaleIssues\n"
            },
            {
                "id": 3,
                "name": "Identify Stale PullRequests Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json IdentifyStalePullRequests\n"
            },
            {
                "id": 4,
                "name": "Close Stale PullRequests Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json CloseStalePullRequests\n"
            },
            {
                "id": 5,
                "name": "Identify Stale Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json IdentifyStaleIssues\n"
            },
            {
                "id": 6,
                "name": "Close Addressed Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json CloseAddressedIssues\n"
            },
            {
                "id": 7,
                "name": "Lock Closed Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json LockClosedIssues\n"
            },
            {
                "id": 8,
                "name": "Enforce Max Life of Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json EnforceMaxLifeOfIssues\n"
            }
        ],
        "Azure/azure-sdk-for-java": [
            {
                "id": 1,
                "name": "Az CLI login",
                "run": "azure/login@v2"
            },
            {
                "id": 2,
                "name": "Run Azure CLI commands",
                "run": "LABEL_SERVICE_API_KEY=$(az keyvault secret show \\\n  --vault-name issue-labeler \\\n  -n issue-labeler-func-key \\\n  -o tsv \\\n  --query value)\n\necho \"::add-mask::$LABEL_SERVICE_API_KEY\"\necho \"LABEL_SERVICE_API_KEY=$LABEL_SERVICE_API_KEY\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Install GitHub Event Processor",
                "run": "dotnet tool install Azure.Sdk.Tools.GitHubEventProcessor --version 1.0.0-dev.20240610.2 --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json --global\n"
            },
            {
                "id": 4,
                "name": "Process Action Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json\n"
            },
            {
                "id": 1,
                "name": "Install GitHub Event Processor",
                "run": "dotnet tool install Azure.Sdk.Tools.GitHubEventProcessor --version 1.0.0-dev.20240610.2 --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json --global\n"
            },
            {
                "id": 2,
                "name": "Process Action Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "azure/azure-sdk-actions@main"
            },
            {
                "id": 1,
                "name": "Install GitHub Event Processor",
                "run": "dotnet tool install Azure.Sdk.Tools.GitHubEventProcessor --version 1.0.0-dev.20240610.2 --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json --global\n"
            },
            {
                "id": 2,
                "name": "Close Stale Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json CloseStaleIssues\n"
            },
            {
                "id": 3,
                "name": "Identify Stale PullRequests Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json IdentifyStalePullRequests\n"
            },
            {
                "id": 4,
                "name": "Close Stale PullRequests Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json CloseStalePullRequests\n"
            },
            {
                "id": 5,
                "name": "Identify Stale Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json IdentifyStaleIssues\n"
            },
            {
                "id": 6,
                "name": "Close Addressed Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json CloseAddressedIssues\n"
            },
            {
                "id": 7,
                "name": "Lock Closed Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json LockClosedIssues\n"
            },
            {
                "id": 8,
                "name": "Enforce Max Life of Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json EnforceMaxLifeOfIssues\n"
            }
        ],
        "Azure/azure-sdk-for-node": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "git checkout HEAD^2"
            },
            {
                "id": 3,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v1"
            },
            {
                "id": 4,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v1"
            },
            {
                "id": 5,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v1"
            }
        ],
        "Azure/azure-sdk-for-python": [
            {
                "id": 1,
                "name": "Az CLI login",
                "run": "azure/login@v2"
            },
            {
                "id": 2,
                "name": "Run Azure CLI commands",
                "run": "LABEL_SERVICE_API_KEY=$(az keyvault secret show \\\n  --vault-name issue-labeler \\\n  -n issue-labeler-func-key \\\n  -o tsv \\\n  --query value)\n\necho \"::add-mask::$LABEL_SERVICE_API_KEY\"\necho \"LABEL_SERVICE_API_KEY=$LABEL_SERVICE_API_KEY\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Install GitHub Event Processor",
                "run": "dotnet tool install Azure.Sdk.Tools.GitHubEventProcessor --version 1.0.0-dev.20240610.2 --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json --global\n"
            },
            {
                "id": 4,
                "name": "Process Action Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json\n"
            },
            {
                "id": 1,
                "name": "Install GitHub Event Processor",
                "run": "dotnet tool install Azure.Sdk.Tools.GitHubEventProcessor --version 1.0.0-dev.20240610.2 --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json --global\n"
            },
            {
                "id": 2,
                "name": "Process Action Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "azure/azure-sdk-actions@main"
            },
            {
                "id": 1,
                "name": "Install GitHub Event Processor",
                "run": "dotnet tool install Azure.Sdk.Tools.GitHubEventProcessor --version 1.0.0-dev.20240610.2 --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json --global\n"
            },
            {
                "id": 2,
                "name": "Close Stale Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json CloseStaleIssues\n"
            },
            {
                "id": 3,
                "name": "Identify Stale PullRequests Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json IdentifyStalePullRequests\n"
            },
            {
                "id": 4,
                "name": "Close Stale PullRequests Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json CloseStalePullRequests\n"
            },
            {
                "id": 5,
                "name": "Identify Stale Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json IdentifyStaleIssues\n"
            },
            {
                "id": 6,
                "name": "Close Addressed Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json CloseAddressedIssues\n"
            },
            {
                "id": 7,
                "name": "Lock Closed Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json LockClosedIssues\n"
            },
            {
                "id": 8,
                "name": "Enforce Max Life of Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json EnforceMaxLifeOfIssues\n"
            }
        ],
        "Azure/WALinuxAgent": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Python ${{ matrix.python-version }}",
                "run": "apt-get update\napt-get install -y curl bzip2 sudo python3\ncurl https://dcrdata.blob.core.windows.net/python/python-${{ matrix.python-version }}.tar.bz2 -o python-${{ matrix.python-version }}.tar.bz2\nsudo tar xjvf python-${{ matrix.python-version }}.tar.bz2 --directory /\n"
            },
            {
                "id": 3,
                "name": "Test with nosetests",
                "run": "if [[ ${{ matrix.python-version }} == 2.6 ]]; then\n  source /home/waagent/virtualenv/python2.6.9/bin/activate\nelse\n  source /home/waagent/virtualenv/python3.4.8/bin/activate\nfi\n./ci/nosetests.sh\nexit $?\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install Python 2.7",
                "run": "apt-get update\napt-get install -y curl bzip2 sudo\ncurl https://dcrdata.blob.core.windows.net/python/python-2.7.tar.bz2 -o python-2.7.tar.bz2\nsudo tar xjvf python-2.7.tar.bz2 --directory /\n"
            },
            {
                "id": 3,
                "name": "Test with nosetests",
                "run": "source /home/waagent/virtualenv/python2.7.16/bin/activate\n./ci/nosetests.sh\nexit $?\n"
            },
            {
                "id": 1,
                "name": "Checkout WALinuxAgent repo",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Setup Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "sudo env \"PATH=$PATH\" python -m pip install --upgrade pip\nsudo env \"PATH=$PATH\" pip install -r requirements.txt\nsudo env \"PATH=$PATH\" pip install -r test-requirements.txt\n"
            },
            {
                "id": 4,
                "name": "Run pylint",
                "run": "pylint $PYLINTOPTS --jobs=0 $PYLINTFILES\n"
            },
            {
                "id": 5,
                "name": "Test with nosetests",
                "run": "./ci/nosetests.sh\nexit $?\n"
            },
            {
                "id": 6,
                "name": "Compile Coverage",
                "run": "echo looking for coverage files :\nls -alh | grep -i coverage\nsudo env \"PATH=$PATH\" coverage combine coverage.*.data\nsudo env \"PATH=$PATH\" coverage xml\nsudo env \"PATH=$PATH\" coverage report\n"
            },
            {
                "id": 7,
                "name": "Upload Coverage",
                "run": "codecov/codecov-action@v3"
            }
        ],
        "Azure/azure-sdk-for-go": [
            {
                "id": 1,
                "name": "Az CLI login",
                "run": "azure/login@v2"
            },
            {
                "id": 2,
                "name": "Run Azure CLI commands",
                "run": "LABEL_SERVICE_API_KEY=$(az keyvault secret show \\\n  --vault-name issue-labeler \\\n  -n issue-labeler-func-key \\\n  -o tsv \\\n  --query value)\n\necho \"::add-mask::$LABEL_SERVICE_API_KEY\"\necho \"LABEL_SERVICE_API_KEY=$LABEL_SERVICE_API_KEY\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Install GitHub Event Processor",
                "run": "dotnet tool install Azure.Sdk.Tools.GitHubEventProcessor --version 1.0.0-dev.20240610.2 --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json --global\n"
            },
            {
                "id": 4,
                "name": "Process Action Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json\n"
            },
            {
                "id": 1,
                "name": "Install GitHub Event Processor",
                "run": "dotnet tool install Azure.Sdk.Tools.GitHubEventProcessor --version 1.0.0-dev.20240610.2 --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json --global\n"
            },
            {
                "id": 2,
                "name": "Process Action Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "azure/azure-sdk-actions@main"
            },
            {
                "id": 1,
                "name": "Install GitHub Event Processor",
                "run": "dotnet tool install Azure.Sdk.Tools.GitHubEventProcessor --version 1.0.0-dev.20240610.2 --add-source https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json --global\n"
            },
            {
                "id": 2,
                "name": "Close Stale Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json CloseStaleIssues\n"
            },
            {
                "id": 3,
                "name": "Identify Stale PullRequests Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json IdentifyStalePullRequests\n"
            },
            {
                "id": 4,
                "name": "Close Stale PullRequests Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json CloseStalePullRequests\n"
            },
            {
                "id": 5,
                "name": "Identify Stale Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json IdentifyStaleIssues\n"
            },
            {
                "id": 6,
                "name": "Close Addressed Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json CloseAddressedIssues\n"
            },
            {
                "id": 7,
                "name": "Lock Closed Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json LockClosedIssues\n"
            },
            {
                "id": 8,
                "name": "Enforce Max Life of Issues Scheduled Event",
                "run": "cat > payload.json << 'EOF'\n${{ toJson(github.event) }}\nEOF\ngithub-event-processor ${{ github.event_name }} payload.json EnforceMaxLifeOfIssues\n"
            }
        ],
        "Azure/azure-powershell": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "process label",
                "run": ".github/workflows/script/PrLabeled.ps1 -LabelName \"${{ github.event.label.name }}\" -PrUrl $env:PR"
            }
        ],
        "Azure/Azure-DataFactory": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Validate template",
                "run": "./.github/actions/validate-template"
            },
            {
                "id": 3,
                "name": "Create comment",
                "run": "peter-evans/create-or-update-comment@v1"
            }
        ],
        "Azure/autorest": [
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v2"
            },
            {
                "id": 3,
                "name": "Autobuild",
                "run": "github/codeql-action/autobuild@v2"
            },
            {
                "id": 4,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Use Node.js 16.x",
                "run": "actions/setup-node@v3"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "LABEL_NAME=Publish\nLABEL_URL=https://api.github.com/repos/Azure/autorest/issues/$PR_NUMBER/labels\n\necho \"Getting labels using $LABEL_URL\"\nif curl -s \"$LABEL_URL\" | grep \"\\\"name\\\": \\\"$LABEL_NAME\\\"\"\nthen\n  echo \"Publish label was included in the PR, won't be checking for changelog.\"\nelse\n  npx @microsoft/rush change --verify || { echo 'If you run the rush publish command locally and meant to publish the changes, add the publish label to the pr.' ; exit 1; }\nfi\n"
            },
            {
                "id": 1,
                "name": "Checkout Repo",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Setup Node.js 18.x",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "node common/scripts/install-run-rush.js install"
            },
            {
                "id": 4,
                "name": "Create release branch",
                "run": "node ./eng/scripts/publish.mjs"
            },
            {
                "id": 5,
                "name": "Regen lock file",
                "run": "node common/scripts/install-run-rush.js update"
            }
        ],
        "Azure/azure-quickstart-templates": [
            {
                "id": 1,
                "name": "Setup .NET Core",
                "run": "actions/setup-dotnet@v1.8.0"
            },
            {
                "id": 2,
                "name": "Install TTK",
                "run": "TTK_FOLDER=\"$RUNNER_TEMP/arm-ttk\"\nTTK_URI=\"https://aka.ms/arm-ttk-latest\"\n\ncurl -sLo arm-ttk.zip $TTK_URI\nunzip -q arm-ttk.zip -d $TTK_FOLDER\nrm arm-ttk.zip\nls -al $TTK_FOLDER\n\necho \"TTK_FOLDER=$TTK_FOLDER\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Install Bicep",
                "run": "# See https://github.com/Azure/bicep/blob/main/docs/installing.md#windows-installer\n\n# Create the install folder\nINSTALL_PATH=\"$RUNNER_TEMP/bicep\"\nBICEP_PATH=\"$RUNNER_TEMP/bicep/bicep\"\nmkdir -p $INSTALL_PATH\n\n# Fetch the latest Bicep CLI binary\ncurl -sLo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64\nchmod +x ./bicep\nsudo mv ./bicep $INSTALL_PATH\necho Using bicep at $BICEP_PATH:\n$BICEP_PATH --version\n\necho \"BICEP_PATH=$BICEP_PATH\" >> $GITHUB_ENV\n"
            },
            {
                "id": 4,
                "name": "Install PowerShell",
                "run": "# Update the list of packages\nsudo apt-get update\n# Install pre-requisite packages.\nsudo apt-get install -y wget apt-transport-https software-properties-common\n# Download the Microsoft repository GPG keys\nwget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb\n# Register the Microsoft repository GPG keys\nsudo dpkg -i packages-microsoft-prod.deb\n# Update the list of packages after we added packages.microsoft.com\nsudo apt-get update\n# Install PowerShell\nsudo apt-get install -y powershell\n"
            },
            {
                "id": 5,
                "name": "Sync master",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/checkout@v2.3.4"
            },
            {
                "id": 7,
                "name": "Find sample folder",
                "run": "git status\n# Get path of last file checked in\npwd\ncd $GITHUB_WORKSPACE\npwd\nLAST_PATH=$( git log --pretty=\"\" --name-only -n 100 origin/master... -- | fgrep -v \".github\" | head -1 )\necho Last file modified: $LAST_PATH\n\n# Look for the main template file in this file's path or parents\nSAMPLEFOLDER_PATH=$( dirname \"$LAST_PATH\" )\necho Last folder modified: $SAMPLEFOLDER_PATH\n\nTESTFOLDER_PATH=$SAMPLEFOLDER_PATH\nFOUNDFOLDER_PATH=\nwhile [ \"$TESTFOLDER_PATH\" != \".\" ]\ndo\n  echo \"Looking for main template in $TESTFOLDER_PATH\"\n  MAINBICEP_PATH=$TESTFOLDER_PATH/main.bicep\n  AZDEPLOYJSON_PATH=$TESTFOLDER_PATH/azuredeploy.json\n  if [ -f \"$MAINBICEP_PATH\" ] || [ -f \"$AZDEPLOYJSON_PATH\" ]; then\n    FOUNDFOLDER_PATH=$TESTFOLDER_PATH\n    echo Found main template in $FOUNDFOLDER_PATH\n    break\n  fi\n\n  TESTFOLDER_PATH=$( dirname \"$TESTFOLDER_PATH\" )\ndone\n\nif [ ! $FOUNDFOLDER_PATH ]; then\n    echo \"Could not find main.bicep or azdeploy.json in folder or parents of $SAMPLEFOLDER_PATH\" 1>&2\n    exit 1\nfi\n\necho \"SAMPLEFOLDER_PATH=$FOUNDFOLDER_PATH\" >> $GITHUB_ENV\necho \"MAINBICEP_PATH=$MAINBICEP_PATH\" >> $GITHUB_ENV\necho \"AZDEPLOYJSON_PATH=$AZDEPLOYJSON_PATH\" >> $GITHUB_ENV\n"
            },
            {
                "id": 8,
                "name": "Build main.bicep -> azuredeploy.json",
                "run": "if [ -f $MAINBICEP_PATH ]; then          \n  echo Running: bicep build $MAINBICEP_PATH --outfile $AZDEPLOYJSON_PATH\n  $BICEP_PATH build $MAINBICEP_PATH --outfile $AZDEPLOYJSON_PATH\nfi\n"
            },
            {
                "id": 9,
                "name": "Attempt Metadata Fixes",
                "run": "echo Running Test-LocalSample -fix\necho $TTK_FOLDER\npwsh -noprofile -nologo -command \"$GITHUB_WORKSPACE/test/ci-scripts/Test-LocalSample.ps1 $SAMPLEFOLDER_PATH -TtkFolder $TTK_FOLDER -fix; if (\\$error.Count) { exit 1 }\"\n"
            },
            {
                "id": 10,
                "name": "Commit changes",
                "run": "git config --global user.email \"azure-quickstart-templates@noreply.github.com\"\ngit config --global user.name \"azure-quickstart-templates Automation\"\n\ngit add $SAMPLEFOLDER_PATH\n\nif ! git diff-index --quiet HEAD --; then\n  git commit -m \"Automatic fixes\"\n  git push\nfi\n"
            }
        ],
        "Azure/azure-resource-manager-schemas": [
            {
                "id": 1,
                "name": "Checkout repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Clone azure-rest-api-specs",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Install generator npm packages",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Build bicep-types",
                "run": "npm ci\nnpm run build\n"
            },
            {
                "id": 6,
                "name": "Build autorest.bicep",
                "run": "npm ci\nnpm run build\n"
            },
            {
                "id": 7,
                "name": "Run generator",
                "run": "rm -Rf \"$GITHUB_WORKSPACE/schemas\"\nrm -Rf \"$GITHUB_WORKSPACE/summary.log\"\nmkdir -p \"$GITHUB_WORKSPACE/schemas\"\n\nnpm run generate-all -- \\\n  --specs-dir \"$GITHUB_WORKSPACE/workflow-temp/azure-rest-api-specs\" \\\n  --batch-count ${{ env.BATCH_COUNT }} \\\n  --batch-index ${{ matrix.batch }} \\\n  --summary-log-path \"$GITHUB_WORKSPACE/summary.log\" \\\n  --combine-batch-mode true\n"
            },
            {
                "id": 8,
                "name": "Upload Schemas",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 9,
                "name": "Upload summary log",
                "run": "actions/upload-artifact@v4"
            },
            {
                "id": 1,
                "name": "Checkout repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Download batch results",
                "run": "actions/download-artifact@v4"
            },
            {
                "id": 3,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Install generator npm packages",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Combine batches",
                "run": "npm run combine-batches -- \\\n  --input-path \"$GITHUB_WORKSPACE/workflow-temp\" \\\n  --batch-count ${{ env.BATCH_COUNT }}\n"
            },
            {
                "id": 6,
                "name": "Update resources.json",
                "run": "npm run list-resources\n"
            },
            {
                "id": 7,
                "name": "Push to autogenerate-batch branch",
                "run": "stefanzweifel/git-auto-commit-action@v5"
            },
            {
                "id": 1,
                "name": "Checkout repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Clone azure-rest-api-specs",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Install generator npm packages",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Build bicep-types",
                "run": "npm ci\nnpm run build\n"
            },
            {
                "id": 6,
                "name": "Build autorest.bicep",
                "run": "npm ci\nnpm run build\n"
            },
            {
                "id": 7,
                "name": "Run generator",
                "run": "npm run generate-single -- \\\n  --specs-dir \"$GITHUB_WORKSPACE/workflow-temp/azure-rest-api-specs\" \\\n  --base-path '${{ github.event.inputs.single_path }}'\n"
            },
            {
                "id": 8,
                "name": "Update resources.json",
                "run": "npm run list-resources\n"
            },
            {
                "id": 9,
                "name": "Push to git branch",
                "run": "stefanzweifel/git-auto-commit-action@v5"
            },
            {
                "id": 1,
                "name": "Checkout repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Setup .NET Core",
                "run": "actions/setup-dotnet@v4"
            },
            {
                "id": 5,
                "name": "Install NPM modules",
                "run": "npm ci"
            },
            {
                "id": 6,
                "name": "Lint",
                "run": "npm run lint"
            },
            {
                "id": 7,
                "name": "Run CI tests",
                "run": "npm test"
            },
            {
                "id": 8,
                "name": "Deployments Schema tests",
                "run": "dotnet test DeploymentsSchemaTests/DeploymentsSchemaTests.csproj"
            },
            {
                "id": 9,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            },
            {
                "id": 1,
                "name": "Checkout repo",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Initialize CodeQL",
                "run": "github/codeql-action/init@v3"
            },
            {
                "id": 3,
                "name": "Setup Node.js",
                "run": "actions/setup-node@v4"
            },
            {
                "id": 4,
                "name": "Install",
                "run": "npm ci"
            },
            {
                "id": 5,
                "name": "Lint",
                "run": "npm run lint"
            },
            {
                "id": 6,
                "name": "Build",
                "run": "npm run build"
            },
            {
                "id": 7,
                "name": "Perform CodeQL Analysis",
                "run": "github/codeql-action/analyze@v3"
            }
        ],
        "Azure/go-ansiterm": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "go build ./..."
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "actions/setup-go@v2"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "go test ./..."
            }
        ]
    },
    "GoogleCloudPlatform": {
        "GoogleCloudPlatform/php-docs-samples": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install PHP",
                "run": "shivammathur/setup-php@v2"
            },
            {
                "id": 3,
                "name": "Run Script",
                "run": "testing/run_cs_check.sh"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v4"
            },
            {
                "id": 2,
                "name": "Install PHP",
                "run": "shivammathur/setup-php@v2"
            },
            {
                "id": 3,
                "name": "Get changed files",
                "run": "tj-actions/changed-files@v44"
            },
            {
                "id": 4,
                "name": "Step 4",
                "run": "jwalton/gh-find-current-pr@v1"
            },
            {
                "id": 5,
                "name": "Run Script",
                "run": "composer install -d testing/\ngit fetch --no-tags --prune --depth=5 origin main\nbash testing/run_staticanalysis_check.sh\n"
            }
        ],
        "GoogleCloudPlatform/gsutil": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "set -x\ngit submodule update --init --recursive\n"
            },
            {
                "id": 4,
                "name": "Lint",
                "run": "set -x\npip install pylint\npip install yapf\ntest/run_pylint.sh\nyapf -dr .\n"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "set -x\npython gsutil version -l\npython gsutil test -u\n"
            }
        ],
        "GoogleCloudPlatform/fluent-plugin-google-cloud": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "hmarr/auto-approve-action@v2.0.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "bundle exec rake\n"
            }
        ],
        "GoogleCloudPlatform/ruby-docker": [
            {
                "id": 1,
                "name": "Install Ruby 2.7",
                "run": "ruby/setup-ruby@v1"
            },
            {
                "id": 2,
                "name": "Checkout repo",
                "run": "actions/checkout@v2"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "bundle install && gem install --no-document toys"
            },
            {
                "id": 4,
                "name": "Build",
                "run": "toys build"
            },
            {
                "id": 5,
                "name": "Test",
                "run": "toys test --faster"
            }
        ],
        "GoogleCloudPlatform/protoc-gen-bq-schema": [
            {
                "id": 1,
                "name": "Setup Go",
                "run": "actions/setup-go@v5"
            },
            {
                "id": 2,
                "name": "Checkout code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Install protoc",
                "run": "arduino/setup-protoc@v1"
            },
            {
                "id": 4,
                "name": "Run go fmt on all modules",
                "run": "go fmt ./..."
            },
            {
                "id": 5,
                "name": "Run go mod tidy on all modules",
                "run": "go mod tidy"
            },
            {
                "id": 6,
                "name": "Verify no changes from go fmt and go mod tidy. If you're reading this please re-run locally before PR.",
                "run": "if [ -n \"$(git status --porcelain)\" ]; then\n  git status # Show the files that failed to pass the check.\n  exit 1\nfi\n"
            },
            {
                "id": 7,
                "name": "go vet",
                "run": "go vet ./..."
            },
            {
                "id": 8,
                "name": "Build code",
                "run": "go build"
            },
            {
                "id": 9,
                "name": "Run examples",
                "run": "protoc -I. -Iexamples --plugin=./protoc-gen-bq-schema --bq-schema_out=examples examples/foo.proto\nprotoc -I. -Iexamples --plugin=./protoc-gen-bq-schema --bq-schema_out=examples examples/foo-proto3.proto\nprotoc -I. -Iexamples --plugin=./protoc-gen-bq-schema --bq-schema_out=examples --bq-schema_opt=single-message examples/single_message.proto\n"
            },
            {
                "id": 10,
                "name": "Verify examples are working",
                "run": "if [ -n \"$(git status --porcelain)\" ]; then\n  git status # Show the files that failed to pass the check.\n  exit 1\nfi\n"
            },
            {
                "id": 1,
                "name": "Setup Go",
                "run": "actions/setup-go@v5"
            },
            {
                "id": 2,
                "name": "Check code",
                "run": "actions/checkout@v4"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "go test -v"
            }
        ]
    },
    "open-mmlab": {
        "open-mmlab/mmcv": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install psutil",
                "run": "pip install psutil"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} --no-cache-dir"
            },
            {
                "id": 5,
                "name": "Build and install",
                "run": "pip install wheel\npython setup.py bdist_wheel\n"
            },
            {
                "id": 6,
                "name": "Step 6",
                "run": "actions/upload-artifact@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Format c/cuda codes with clang-format",
                "run": "DoozyX/clang-format-lint-action@v0.11"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Upgrade Setuptools",
                "run": "pip install setuptools --upgrade"
            },
            {
                "id": 4,
                "name": "Build MMCV",
                "run": "python setup.py sdist"
            },
            {
                "id": 5,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Upgrade Setuptools",
                "run": "pip install setuptools --upgrade"
            },
            {
                "id": 4,
                "name": "Build MMCV with ops",
                "run": "sed -i \"s/os.getenv('MMCV_WITH_OPS', '0')/os.getenv('MMCV_WITH_OPS', '1')/g\" setup.py\npython setup.py sdist\n"
            },
            {
                "id": 5,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            }
        ],
        "open-mmlab/mmdetection": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install torch",
                "run": "pip install torch"
            },
            {
                "id": 4,
                "name": "Install wheel",
                "run": "pip install wheel"
            },
            {
                "id": 5,
                "name": "Build MMDetection",
                "run": "python setup.py sdist bdist_wheel"
            },
            {
                "id": 6,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            }
        ],
        "open-mmlab/mmagic": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --exclude mmedit/ops --ignore-regex \"__repr__\" --fail-under 50 mmedit\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Get MMCV_TORCH as the environment variable",
                "run": ". .github/workflows/scripts/get_mmcv_var.sh ${{matrix.torch}}"
            },
            {
                "id": 4,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 6,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${MMCV_TORCH}/index.html"
            },
            {
                "id": 7,
                "name": "Install other dependencies",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 8,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 9,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmedit -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 10,
                "name": "Setup tmate session",
                "run": "mxschmitt/action-tmate@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${MMCV_TORCH}/index.html"
            },
            {
                "id": 6,
                "name": "Install other dependencies",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 7,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmedit -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 9,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1.0.14"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 5,
                "name": "Install Python-dev",
                "run": "apt-get update && apt-get install -y python${{matrix.python-version}}-dev"
            },
            {
                "id": 6,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6\n"
            },
            {
                "id": 7,
                "name": "Install mmediting dependencies",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${MMCV_TORCH}/index.html\npip install -r requirements.txt\n"
            },
            {
                "id": 8,
                "name": "Build and install",
                "run": "python setup.py check -m -s\nTORCH_CUDA_ARCH_LIST=7.0 pip install -e .\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install lmdb",
                "run": "python -m pip install lmdb"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==1.8.1+${{matrix.platform}} torchvision==0.9.1+${{matrix.platform}} -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html"
            },
            {
                "id": 6,
                "name": "Install mmediting dependencies",
                "run": "python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8/index.html --only-binary mmcv-full\npython -m pip install -r requirements.txt\n"
            },
            {
                "id": 7,
                "name": "Build and install",
                "run": "python -m pip install -e .\n"
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "pytest tests/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Get MMCV_TORCH as the environment variable",
                "run": ". .github/workflows/scripts/get_mmcv_var.sh ${{matrix.torch}}"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 6,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${MMCV_TORCH}/index.html"
            },
            {
                "id": 7,
                "name": "Install other dependencies",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 8,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 9,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmedit -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 10,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1.0.14"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 5,
                "name": "Get MMCV_TORCH and MMCV_CUDA as environment variables",
                "run": ". .github/workflows/scripts/get_mmcv_var.sh ${{matrix.torch}} ${{matrix.cuda}}"
            },
            {
                "id": 6,
                "name": "Install Python-dev",
                "run": "apt-get update && apt-get install -y python${{matrix.python-version}}-dev"
            },
            {
                "id": 7,
                "name": "Install system dependencies",
                "run": "apt-get update\napt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev\n"
            },
            {
                "id": 8,
                "name": "Install mmedit dependencies",
                "run": "python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/${MMCV_CUDA}/torch${MMCV_TORCH}/index.html\npython -m pip install -r requirements.txt\n"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "python setup.py check -m -s\nTORCH_CUDA_ARCH_LIST=7.0 pip install -e .\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install lmdb",
                "run": "python -m pip install lmdb"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==1.8.1+${{matrix.platform}} torchvision==0.9.1+${{matrix.platform}} -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html"
            },
            {
                "id": 6,
                "name": "Install mmedit dependencies",
                "run": "python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8/index.html --only-binary mmcv-full\npython -m pip install -r requirements.txt\n"
            },
            {
                "id": 7,
                "name": "Build and install",
                "run": "python -m pip install -e .\n"
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "pytest tests/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Build MMEditing",
                "run": "pip install wheel\npython setup.py sdist bdist_wheel\n"
            },
            {
                "id": 4,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install openmim",
                "run": "pip install openmim"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "rm -rf .eggs && mim install -e ."
            },
            {
                "id": 7,
                "name": "test commands of mim",
                "run": "mim search mmedit"
            }
        ],
        "open-mmlab/OpenPCDet": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v4.1.0"
            }
        ],
        "open-mmlab/mmselfsup": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Build MMSelfSup",
                "run": "pip install wheel\npython setup.py sdist bdist_wheel\n"
            },
            {
                "id": 4,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install openmim",
                "run": "pip install openmim"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "rm -rf .eggs && mim install -e ."
            },
            {
                "id": 7,
                "name": "test commands of mim",
                "run": "mim search mmselfsup"
            }
        ],
        "open-mmlab/mmsegmentation": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Build MMSegmentation",
                "run": "pip install wheel\npython setup.py sdist bdist_wheel\n"
            },
            {
                "id": 4,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            }
        ],
        "open-mmlab/mmdetection3d": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install torch",
                "run": "pip install torch"
            },
            {
                "id": 4,
                "name": "Build MMDet3D",
                "run": "python setup.py sdist"
            },
            {
                "id": 5,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install linting dependencies",
                "run": "python -m pip install --upgrade pip\npip install flake8==5.0.4 isort==5.10.1 yapf==v0.32.0 interrogate\n"
            },
            {
                "id": 4,
                "name": "Lint with flake8",
                "run": "flake8 ."
            },
            {
                "id": 5,
                "name": "Lint with isort",
                "run": "isort --recursive --check-only --diff mmdet3d/ tests/ examples/"
            },
            {
                "id": 6,
                "name": "Format python codes with yapf",
                "run": "yapf -r -d mmdet3d/ tests/ examples/"
            },
            {
                "id": 7,
                "name": "Check docstring",
                "run": "interrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --exclude mmdet3d/ops --ignore-regex \"__repr__\" --fail-under 95 mmdet3d"
            },
            {
                "id": 8,
                "name": "Check doc link",
                "run": "python3 .github/scripts/doc_link_checker.py --target docs/zh_cn\npython3 .github/scripts/doc_link_checker.py --target README_zh-CN.md\npython3 .github/scripts/doc_link_checker.py --target docs/en\npython3 .github/scripts/doc_link_checker.py --target README.md\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install Pillow",
                "run": "pip install Pillow==6.2.2"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 6,
                "name": "Install openmim",
                "run": "pip install openmim"
            },
            {
                "id": 7,
                "name": "Build and install",
                "run": "rm -rf .eggs && mim install -e ."
            },
            {
                "id": 8,
                "name": "test commands of mim",
                "run": "mim search mmdet3d"
            }
        ],
        "open-mmlab/mmpose": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Build MMPose",
                "run": "pip install wheel\npython setup.py sdist bdist_wheel\n"
            },
            {
                "id": 4,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex \"__repr__\" --fail-under 80 mmpose\n"
            }
        ],
        "open-mmlab/mmpretrain": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            }
        ],
        "open-mmlab/mmaction2": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex \"__repr__\" --fail-under 80 mmaction\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install Libraries",
                "run": "sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev libturbojpeg pkg-config\nsudo apt-get install -y libavdevice-dev libavfilter-dev libopus-dev libvpx-dev\n"
            },
            {
                "id": 5,
                "name": "Install wheel",
                "run": "pip install wheel"
            },
            {
                "id": 6,
                "name": "Install librosa and soundfile",
                "run": "pip install librosa soundfile"
            },
            {
                "id": 7,
                "name": "Install lmdb",
                "run": "pip install lmdb"
            },
            {
                "id": 8,
                "name": "Install unittest dependencies",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 9,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html"
            },
            {
                "id": 10,
                "name": "Install MMEngine",
                "run": "pip install git+https://github.com/open-mmlab/mmengine.git@main"
            },
            {
                "id": 11,
                "name": "Install MMCV",
                "run": "pip install -U openmim\nmim install 'mmcv >= 2.0.0'\n"
            },
            {
                "id": 12,
                "name": "Install MMDet",
                "run": "pip install git+https://github.com/open-mmlab/mmdetection.git@dev-3.x"
            },
            {
                "id": 13,
                "name": "Install MMCls",
                "run": "pip install git+https://github.com/open-mmlab/mmclassification.git@dev-1.x"
            },
            {
                "id": 14,
                "name": "Install MMPretrain",
                "run": "pip install git+https://github.com/open-mmlab/mmpretrain.git@dev"
            },
            {
                "id": 15,
                "name": "Install MMPose",
                "run": "pip install git+https://github.com/open-mmlab/mmpose.git@dev-1.x"
            },
            {
                "id": 16,
                "name": "Install PytorchVideo",
                "run": "pip install pytorchvideo"
            },
            {
                "id": 17,
                "name": "Install timm",
                "run": "pip install timm"
            },
            {
                "id": 18,
                "name": "Install transformers",
                "run": "pip install transformers"
            },
            {
                "id": 19,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 20,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmaction -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install soundfile lib",
                "run": "sudo apt-get install -y libsndfile1"
            },
            {
                "id": 5,
                "name": "Install librosa and soundfile",
                "run": "pip install librosa soundfile"
            },
            {
                "id": 6,
                "name": "Install lmdb",
                "run": "pip install lmdb"
            },
            {
                "id": 7,
                "name": "Install timm",
                "run": "pip install timm"
            },
            {
                "id": 8,
                "name": "Install transformers",
                "run": "pip install transformers"
            },
            {
                "id": 9,
                "name": "Install TurboJpeg lib",
                "run": "sudo apt-get install -y libturbojpeg"
            },
            {
                "id": 10,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html"
            },
            {
                "id": 11,
                "name": "Install MMEngine",
                "run": "pip install git+https://github.com/open-mmlab/mmengine.git@main"
            },
            {
                "id": 12,
                "name": "Install MMCV",
                "run": "pip install -U openmim\nmim install 'mmcv >= 2.0.0'\n"
            },
            {
                "id": 13,
                "name": "Install MMDet",
                "run": "pip install git+https://github.com/open-mmlab/mmdetection.git@dev-3.x"
            },
            {
                "id": 14,
                "name": "Install MMCls",
                "run": "pip install git+https://github.com/open-mmlab/mmclassification.git@dev-1.x"
            },
            {
                "id": 15,
                "name": "Install MMPretrain",
                "run": "pip install git+https://github.com/open-mmlab/mmpretrain.git@dev"
            },
            {
                "id": 16,
                "name": "Install MMPose",
                "run": "pip install git+https://github.com/open-mmlab/mmpose.git@dev-1.x"
            },
            {
                "id": 17,
                "name": "Install unittest dependencies",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 18,
                "name": "Install PytorchVideo",
                "run": "pip install pytorchvideo"
            },
            {
                "id": 19,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 20,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmaction -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 21,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1.0.14"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 5,
                "name": "Install Python-dev",
                "run": "apt-get update && apt-get install -y python${{matrix.python-version}}-dev"
            },
            {
                "id": 6,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libturbojpeg libsndfile1 libsm6 libxrender-dev libxext6\n"
            },
            {
                "id": 7,
                "name": "Install librosa and soundfile",
                "run": "pip install librosa soundfile"
            },
            {
                "id": 8,
                "name": "Install lmdb",
                "run": "pip install lmdb"
            },
            {
                "id": 9,
                "name": "Install transformers",
                "run": "pip install transformers"
            },
            {
                "id": 10,
                "name": "Install mmaction dependencies",
                "run": "pip install git+https://github.com/open-mmlab/mmengine.git@main\npip install -U openmim\nmim install 'mmcv >= 2.0.0'\npip install git+https://github.com/open-mmlab/mmdetection.git@dev-3.x\npip install git+https://github.com/open-mmlab/mmclassification.git@dev-1.x\npip install git+https://github.com/open-mmlab/mmpretrain.git@dev\npip install git+https://github.com/open-mmlab/mmpose.git@dev-1.x\npip install -r requirements.txt\n"
            },
            {
                "id": 11,
                "name": "Install PytorchVideo",
                "run": "pip install pytorchvideo"
            },
            {
                "id": 12,
                "name": "Build and install",
                "run": "pip install -e .\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -V\npython -m pip install pip --upgrade\npython -m pip install wheel\n"
            },
            {
                "id": 4,
                "name": "Install librosa and soundfile",
                "run": "python -m pip install librosa soundfile"
            },
            {
                "id": 5,
                "name": "Install lmdb",
                "run": "pip install lmdb"
            },
            {
                "id": 6,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+${{matrix.platform}} torchvision==${{matrix.torchvision}}+${{matrix.platform}} -f https://download.pytorch.org/whl/${{matrix.platform}}/torch_stable.html"
            },
            {
                "id": 7,
                "name": "Install mmaction dependencies",
                "run": "pip install git+https://github.com/open-mmlab/mmengine.git@main\npip install -U openmim\nmim install 'mmcv >= 2.0.0'\npip install git+https://github.com/open-mmlab/mmdetection.git@dev-3.x\npip install git+https://github.com/open-mmlab/mmclassification.git@dev-1.x\npip install git+https://github.com/open-mmlab/mmpretrain.git@dev\npip install git+https://github.com/open-mmlab/mmpose.git@dev-1.x\npip install -r requirements.txt\n"
            },
            {
                "id": 8,
                "name": "Install PytorchVideo",
                "run": "python -m pip install pytorchvideo"
            },
            {
                "id": 9,
                "name": "Install timm",
                "run": "python -m pip install timm"
            },
            {
                "id": 10,
                "name": "Install transformers",
                "run": "python -m pip install transformers"
            },
            {
                "id": 11,
                "name": "Build and install",
                "run": "pip install -e . -v\n"
            },
            {
                "id": 12,
                "name": "Run unittests and generate coverage report",
                "run": "pytest tests/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade && pip install wheel"
            },
            {
                "id": 4,
                "name": "Install soundfile lib",
                "run": "sudo apt-get install -y libsndfile1"
            },
            {
                "id": 5,
                "name": "Install librosa and soundfile",
                "run": "pip install librosa soundfile"
            },
            {
                "id": 6,
                "name": "Install lmdb",
                "run": "pip install lmdb"
            },
            {
                "id": 7,
                "name": "Install TurboJpeg lib",
                "run": "sudo apt-get install -y libturbojpeg"
            },
            {
                "id": 8,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html"
            },
            {
                "id": 9,
                "name": "Install MMEngine",
                "run": "pip install git+https://github.com/open-mmlab/mmengine.git@main"
            },
            {
                "id": 10,
                "name": "Install MMCV",
                "run": "pip install -U openmim\nmim install 'mmcv >= 2.0.0'\n"
            },
            {
                "id": 11,
                "name": "Install MMDet",
                "run": "pip install git+https://github.com/open-mmlab/mmdetection.git@dev-3.x"
            },
            {
                "id": 12,
                "name": "Install MMCls",
                "run": "pip install git+https://github.com/open-mmlab/mmclassification.git@dev-1.x"
            },
            {
                "id": 13,
                "name": "Install MMPretrain",
                "run": "pip install git+https://github.com/open-mmlab/mmpretrain.git@dev"
            },
            {
                "id": 14,
                "name": "Install MMPose",
                "run": "pip install git+https://github.com/open-mmlab/mmpose.git@dev-1.x"
            },
            {
                "id": 15,
                "name": "Install unittest dependencies",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 16,
                "name": "Install PytorchVideo",
                "run": "pip install pytorchvideo"
            },
            {
                "id": 17,
                "name": "Install timm",
                "run": "python -m pip install timm"
            },
            {
                "id": 18,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 19,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmaction -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 20,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1.0.14"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade && pip install wheel"
            },
            {
                "id": 4,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 5,
                "name": "Install Python-dev",
                "run": "apt-get update && apt-get install -y python${{matrix.python-version}}-dev"
            },
            {
                "id": 6,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libturbojpeg libsndfile1 libsm6 libxrender-dev libxext6\n"
            },
            {
                "id": 7,
                "name": "Install librosa and soundfile",
                "run": "pip install librosa soundfile"
            },
            {
                "id": 8,
                "name": "Install lmdb",
                "run": "pip install lmdb"
            },
            {
                "id": 9,
                "name": "Install mmaction dependencies",
                "run": "pip install git+https://github.com/open-mmlab/mmengine.git@main\npip install -U openmim\nmim install 'mmcv >= 2.0.0'\npip install git+https://github.com/open-mmlab/mmdetection.git@dev-3.x\npip install git+https://github.com/open-mmlab/mmclassification.git@dev-1.x\npip install git+https://github.com/open-mmlab/mmpretrain.git@dev\npip install git+https://github.com/open-mmlab/mmpose.git@dev-1.x\npip install -r requirements.txt\n"
            },
            {
                "id": 10,
                "name": "Install PytorchVideo",
                "run": "pip install pytorchvideo"
            },
            {
                "id": 11,
                "name": "Build and install",
                "run": "pip install -e . -v\n"
            },
            {
                "id": 12,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmaction -m pytest tests/ -k 'not timm'\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -V\npython -m pip install pip --upgrade\npython -m pip install wheel\n"
            },
            {
                "id": 4,
                "name": "Install librosa and soundfile",
                "run": "python -m pip install librosa soundfile"
            },
            {
                "id": 5,
                "name": "Install lmdb",
                "run": "pip install lmdb"
            },
            {
                "id": 6,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+${{matrix.platform}} torchvision==${{matrix.torchvision}}+${{matrix.platform}} -f https://download.pytorch.org/whl/${{matrix.platform}}/torch_stable.html"
            },
            {
                "id": 7,
                "name": "Install timm",
                "run": "python -m pip install timm"
            },
            {
                "id": 8,
                "name": "Install mmaction dependencies",
                "run": "pip install git+https://github.com/open-mmlab/mmengine.git@main\npip install -U openmim\nmim install 'mmcv >= 2.0.0'\npip install git+https://github.com/open-mmlab/mmdetection.git@dev-3.x\npip install git+https://github.com/open-mmlab/mmclassification.git@dev-1.x\npip install git+https://github.com/open-mmlab/mmpretrain.git@dev\npip install git+https://github.com/open-mmlab/mmpose.git@dev-1.x\npip install -r requirements.txt\n"
            },
            {
                "id": 9,
                "name": "Install PytorchVideo",
                "run": "python -m pip install pytorchvideo"
            },
            {
                "id": 10,
                "name": "Build and install",
                "run": "pip install -e . -v\n"
            },
            {
                "id": 11,
                "name": "Run unittests and generate coverage report",
                "run": "pytest tests/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Build MMAction2",
                "run": "pip install wheel\npython setup.py sdist bdist_wheel\n"
            },
            {
                "id": 4,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            }
        ],
        "open-mmlab/mmtracking": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 4,
                "name": "Install mmtrack dependencies",
                "run": "# Some dependencies may be required for the build of pycocotools\nexport CFLAGS=`python -c 'import sysconfig;print(\"-I\"+sysconfig.get_paths()[\"include\"])'`\npip install git+https://github.com/votchallenge/toolkit.git\npip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/${{matrix.torch_version}}/index.html\npip install mmdet\npip install -r requirements.txt\npip install git+https://github.com/JonathonLuiten/TrackEval.git\npip install git+https://github.com/lvis-dataset/lvis-api.git\npip install git+https://github.com/TAO-Dataset/tao.git\n"
            },
            {
                "id": 5,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 6,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmtrack -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 4,
                "name": "Add python3.9 source",
                "run": "apt-get update && apt-get install -y software-properties-common\nadd-apt-repository -y ppa:deadsnakes/ppa\n"
            },
            {
                "id": 5,
                "name": "Install python-dev",
                "run": "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends python${{matrix.python-version}}-dev"
            },
            {
                "id": 6,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6\napt-get clean\nrm -rf /var/lib/apt/lists/*\n"
            },
            {
                "id": 7,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 8,
                "name": "Install mmtrack dependencies",
                "run": "# Some dependencies may be required for the build of pycocotools\nexport CFLAGS=`python -c 'import sysconfig;print(\"-I\"+sysconfig.get_paths()[\"include\"])'`\npython -m pip install git+https://github.com/votchallenge/toolkit.git\npython -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu101/${{matrix.torch_version}}/index.html\npython -m pip install mmdet\npython -m pip install -r requirements.txt\npython -m pip install git+https://github.com/JonathonLuiten/TrackEval.git\npython -m pip install git+https://github.com/lvis-dataset/lvis-api.git\npython -m pip install git+https://github.com/TAO-Dataset/tao.git\n"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "rm -rf .eggs\npython setup.py check -m -s\nTORCH_CUDA_ARCH_LIST=7.0 pip install .\n"
            },
            {
                "id": 10,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmtrack -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 11,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1.0.10"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 4,
                "name": "Add python3.9 source",
                "run": "apt-get update && apt-get install -y software-properties-common\nadd-apt-repository -y ppa:deadsnakes/ppa\n"
            },
            {
                "id": 5,
                "name": "Install python-dev",
                "run": "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends python${{matrix.python-version}}-dev"
            },
            {
                "id": 6,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6\napt-get clean\nrm -rf /var/lib/apt/lists/*\n"
            },
            {
                "id": 7,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 8,
                "name": "Install mmtrack dependencies",
                "run": "# Some dependencies may be required for the build of pycocotools\nexport CFLAGS=`python -c 'import sysconfig;print(\"-I\"+sysconfig.get_paths()[\"include\"])'`\npython -m pip install git+https://github.com/votchallenge/toolkit.git\npython -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu102/${{matrix.torch_version}}/index.html\npython -m pip install mmdet\npython -m pip install -r requirements.txt\npython -m pip install git+https://github.com/JonathonLuiten/TrackEval.git\npython -m pip install git+https://github.com/lvis-dataset/lvis-api.git\npython -m pip install git+https://github.com/TAO-Dataset/tao.git\n"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "rm -rf .eggs\npython setup.py check -m -s\nTORCH_CUDA_ARCH_LIST=7.0 pip install .\n"
            },
            {
                "id": 10,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmtrack -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 11,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install pip --upgrade --user"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==1.8.2+${{ matrix.platform }} torchvision==0.9.2+${{ matrix.platform }} -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html"
            },
            {
                "id": 5,
                "name": "Install votchallenge toolkit",
                "run": "python -m pip install git+https://github.com/votchallenge/toolkit.git"
            },
            {
                "id": 6,
                "name": "Install MMCV",
                "run": "python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8/index.html --only-binary mmcv-full\n"
            },
            {
                "id": 7,
                "name": "Install mmdet",
                "run": "python -m pip install mmdet\n"
            },
            {
                "id": 8,
                "name": "Install unittest dependencies",
                "run": "python -m pip install -r requirements/tests.txt -r requirements/runtime.txt\npython -m pip install git+https://github.com/JonathonLuiten/TrackEval.git\npython -m pip install git+https://github.com/lvis-dataset/lvis-api.git\npython -m pip install git+https://github.com/TAO-Dataset/tao.git\n"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "python -m pip install -e ."
            },
            {
                "id": 10,
                "name": "Run unittests",
                "run": "coverage run --branch --source mmtrack -m pytest tests/\n"
            },
            {
                "id": 11,
                "name": "Generate coverage report",
                "run": "coverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install torch",
                "run": "pip install torch"
            },
            {
                "id": 4,
                "name": "Install wheel",
                "run": "pip install wheel"
            },
            {
                "id": 5,
                "name": "Build MMTracking",
                "run": "python setup.py sdist bdist_wheel"
            },
            {
                "id": 6,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex \"__repr__\" --fail-under 80 mmtrack\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install openmim",
                "run": "pip install openmim"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "rm -rf .eggs && mim install -e ."
            },
            {
                "id": 7,
                "name": "test commands of mim",
                "run": "mim search mmtrack"
            }
        ],
        "open-mmlab/mmocr": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex \"__repr__\" --fail-under 90 mmocr\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install MMEngine",
                "run": "pip install git+https://github.com/open-mmlab/mmengine.git@main"
            },
            {
                "id": 6,
                "name": "Install MMCV",
                "run": "pip install -U openmim\nmim install 'mmcv >= 2.0.0rc1'\n"
            },
            {
                "id": 7,
                "name": "Install MMDet",
                "run": "pip install git+https://github.com/open-mmlab/mmdetection.git@dev-3.x"
            },
            {
                "id": 8,
                "name": "Install other dependencies",
                "run": "pip install -r requirements/tests.txt"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 10,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmocr -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install MMEngine",
                "run": "pip install git+https://github.com/open-mmlab/mmengine.git@main"
            },
            {
                "id": 6,
                "name": "Install MMCV",
                "run": "pip install -U openmim\nmim install 'mmcv >= 2.0.0rc1'\n"
            },
            {
                "id": 7,
                "name": "Install MMDet",
                "run": "pip install git+https://github.com/open-mmlab/mmdetection.git@dev-3.x"
            },
            {
                "id": 8,
                "name": "Install other dependencies",
                "run": "pip install -r requirements/tests.txt"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 10,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmocr -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 11,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1.0.14"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install --upgrade pip"
            },
            {
                "id": 4,
                "name": "Install lmdb",
                "run": "pip install lmdb"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+${{matrix.platform}} torchvision==${{matrix.torchvision}}+${{matrix.platform}} -f https://download.pytorch.org/whl/${{matrix.platform}}/torch_stable.html"
            },
            {
                "id": 6,
                "name": "Install mmocr dependencies",
                "run": "pip install git+https://github.com/open-mmlab/mmengine.git@main\npip install -U openmim\nmim install 'mmcv >= 2.0.0rc1'\npip install git+https://github.com/open-mmlab/mmdetection.git@dev-3.x\npip install -r requirements/tests.txt\n"
            },
            {
                "id": 7,
                "name": "Build and install",
                "run": "pip install -e .\n"
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "pytest tests/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install MMEngine",
                "run": "pip install git+https://github.com/open-mmlab/mmengine.git@main"
            },
            {
                "id": 6,
                "name": "Install MMCV",
                "run": "pip install -U openmim\nmim install 'mmcv >= 2.0.0rc1'\n"
            },
            {
                "id": 7,
                "name": "Install MMDet",
                "run": "pip install git+https://github.com/open-mmlab/mmdetection.git@dev-3.x"
            },
            {
                "id": 8,
                "name": "Install other dependencies",
                "run": "pip install -r requirements/tests.txt"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 10,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmocr -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 11,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1.0.14"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install --upgrade pip"
            },
            {
                "id": 4,
                "name": "Install lmdb",
                "run": "pip install lmdb"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+${{matrix.platform}} torchvision==${{matrix.torchvision}}+${{matrix.platform}} -f https://download.pytorch.org/whl/${{matrix.platform}}/torch_stable.html"
            },
            {
                "id": 6,
                "name": "Install mmocr dependencies",
                "run": "pip install git+https://github.com/open-mmlab/mmengine.git@main\npip install -U openmim\nmim install 'mmcv >= 2.0.0rc1'\npip install git+https://github.com/open-mmlab/mmdetection.git@dev-3.x\npip install -r requirements/tests.txt\n"
            },
            {
                "id": 7,
                "name": "Build and install",
                "run": "pip install -e .\n"
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "pytest tests/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Build MMOCR",
                "run": "pip install wheel\npython setup.py sdist bdist_wheel\n"
            },
            {
                "id": 4,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install openmim",
                "run": "pip install openmim"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "rm -rf .eggs && mim install -e ."
            },
            {
                "id": 7,
                "name": "test commands of mim",
                "run": "mim search mmocr"
            }
        ],
        "open-mmlab/mmgeneration": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --exclude mmgen/ops --ignore-regex \"__repr__\" --fail-under 50 mmgen\n"
            },
            {
                "id": 6,
                "name": "Setup tmate session",
                "run": "mxschmitt/action-tmate@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Get MMCV_TORCH as the environment variable",
                "run": ". .github/workflows/scripts/get_mmcv_var.sh ${{matrix.torch}}"
            },
            {
                "id": 4,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 6,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${MMCV_TORCH}/index.html"
            },
            {
                "id": 7,
                "name": "Install other dependencies",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 8,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 9,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmgen -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${MMCV_TORCH}/index.html"
            },
            {
                "id": 6,
                "name": "Install other dependencies",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 7,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmgen -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 9,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1.0.14"
            },
            {
                "id": 10,
                "name": "Setup tmate session",
                "run": "mxschmitt/action-tmate@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==1.8.1+cpu torchvision==0.9.1+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 6,
                "name": "Install Python-dev",
                "run": "apt-get update && apt-get install -y python${{matrix.python-version}}-dev"
            },
            {
                "id": 7,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6\n"
            },
            {
                "id": 8,
                "name": "Install mmgeneration dependencies",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${MMCV_TORCH}/index.html\npip install -r requirements.txt\n"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "pip install -e .\n"
            },
            {
                "id": 10,
                "name": "Setup tmate session",
                "run": "mxschmitt/action-tmate@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==1.8.1+${{matrix.platform}} torchvision==0.9.1+${{matrix.platform}} -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html"
            },
            {
                "id": 5,
                "name": "Install mmgeneration dependencies",
                "run": "python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8/index.html --only-binary mmcv-full\npython -m pip install -r requirements.txt\npython -m pip install opencv-python>=3\n"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "python -m pip install -e .\n"
            },
            {
                "id": 7,
                "name": "Run unittests and generate coverage report",
                "run": "pytest tests/\n"
            },
            {
                "id": 8,
                "name": "Setup tmate session",
                "run": "mxschmitt/action-tmate@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Get MMCV_TORCH as the environment variable",
                "run": ". .github/workflows/scripts/get_mmcv_var.sh ${{matrix.torch}}"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 6,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${MMCV_TORCH}/index.html"
            },
            {
                "id": 7,
                "name": "Install other dependencies",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 8,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 9,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmgen -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 10,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1.0.14"
            },
            {
                "id": 11,
                "name": "Setup tmate session",
                "run": "mxschmitt/action-tmate@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==1.8.1+cpu torchvision==0.9.1+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 6,
                "name": "Get MMCV_TORCH and MMCV_CUDA as environment variables",
                "run": ". .github/workflows/scripts/get_mmcv_var.sh ${{matrix.torch}} ${{matrix.cuda}}"
            },
            {
                "id": 7,
                "name": "Install Python-dev",
                "run": "apt-get update && apt-get install -y python${{matrix.python-version}}-dev"
            },
            {
                "id": 8,
                "name": "Install system dependencies",
                "run": "apt-get update\napt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev\n"
            },
            {
                "id": 9,
                "name": "Install mmgen dependencies",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/${MMCV_CUDA}/torch${MMCV_TORCH}/index.html\npip install -r requirements.txt\n"
            },
            {
                "id": 10,
                "name": "Build and install",
                "run": "pip install -e .\n"
            },
            {
                "id": 11,
                "name": "Setup tmate session",
                "run": "mxschmitt/action-tmate@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==1.8.1+${{matrix.platform}} torchvision==0.9.1+${{matrix.platform}} -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html"
            },
            {
                "id": 5,
                "name": "Install mmgen dependencies",
                "run": "python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8/index.html --only-binary mmcv-full\npython -m pip install -r requirements.txt\npython -m pip install opencv-python>=3\n"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "python -m pip install -e .\n"
            },
            {
                "id": 7,
                "name": "Run unittests and generate coverage report",
                "run": "pytest tests/\n"
            },
            {
                "id": 8,
                "name": "Setup tmate session",
                "run": "mxschmitt/action-tmate@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Build MMGeneration",
                "run": "pip install torch==1.8.1+cpu torchvision==0.9.1+cpu -f https://download.pytorch.org/whl/torch_stable.html\npip install wheel\npython setup.py sdist\n"
            },
            {
                "id": 4,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install openmim",
                "run": "pip install openmim"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "rm -rf .eggs && mim install -e ."
            },
            {
                "id": 7,
                "name": "test commands of mim",
                "run": "mim search mmgen"
            }
        ],
        "open-mmlab/mim": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 4,
                "name": "Install python-dev",
                "run": "apt-get update && apt-get install -y python${{matrix.python-version}}-dev"
            },
            {
                "id": 5,
                "name": "Install system dependencies",
                "run": "apt-get install -y git libgl1 libglib2.0-0"
            },
            {
                "id": 6,
                "name": "Upgrade setuptools and pip",
                "run": "python -m pip install --upgrade setuptools pip"
            },
            {
                "id": 7,
                "name": "Install wheel",
                "run": "python -m pip install wheel"
            },
            {
                "id": 8,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "rm -rf .eggs && python -m pip install -e ."
            },
            {
                "id": 10,
                "name": "Validate the installation",
                "run": "python -c \"import mim\"\nmim --help\npython -m mim --help\n"
            },
            {
                "id": 11,
                "name": "Install unittest dependencies",
                "run": "python -m pip install -r requirements/tests.txt"
            },
            {
                "id": 12,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source=mim -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 13,
                "name": "Run unittests with click < 8.0.0",
                "run": "python -m pip install click==7.1.2\npytest tests/\n"
            },
            {
                "id": 14,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1.0.10"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade setuptools",
                "run": "pip install --upgrade setuptools"
            },
            {
                "id": 4,
                "name": "Install wheel",
                "run": "pip install wheel"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "pip install -e ."
            },
            {
                "id": 7,
                "name": "Validate the installation",
                "run": "python -c \"import mim\""
            },
            {
                "id": 8,
                "name": "Install unittest dependencies",
                "run": "pip install -r requirements/tests.txt"
            },
            {
                "id": 9,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source=mim -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 10,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1.0.10"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} --no-cache-dir"
            },
            {
                "id": 4,
                "name": "Build and install",
                "run": "pip install -e ."
            },
            {
                "id": 5,
                "name": "Validate the installation",
                "run": "python -c \"import mim\""
            },
            {
                "id": 6,
                "name": "Install unittest dependencies",
                "run": "pip install -r requirements/tests.txt"
            },
            {
                "id": 7,
                "name": "Run unittests",
                "run": "pytest tests/"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex \"__repr__\" --fail-under 60 mim\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Install wheel",
                "run": "pip install wheel"
            },
            {
                "id": 4,
                "name": "Build MIM",
                "run": "python setup.py sdist bdist_wheel"
            },
            {
                "id": 5,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            }
        ],
        "open-mmlab/mmflow": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 4,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/${{matrix.torch_version}}/index.html\npython -c 'import mmcv; print(mmcv.__version__)'\n"
            },
            {
                "id": 5,
                "name": "Install unittest dependencies",
                "run": "pip install -r requirements/tests.txt -r requirements/optional.txt"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 7,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmflow -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 4,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxrender-dev libxext6"
            },
            {
                "id": 5,
                "name": "Install python-dev",
                "run": "apt-get update && apt-get install -y python${{matrix.python-version}}-dev"
            },
            {
                "id": 6,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 7,
                "name": "Install MMCV",
                "run": "python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu101/${{matrix.torch_version}}/index.html\npython -c 'import mmcv; print(mmcv.__version__)'\n"
            },
            {
                "id": 8,
                "name": "Install unittest dependencies",
                "run": "python -m pip install -r requirements/tests.txt -r requirements/optional.txt"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "rm -rf .eggs\npython setup.py check -m -s\nTORCH_CUDA_ARCH_LIST=7.0 python -m pip install -e .\n"
            },
            {
                "id": 10,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmflow -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 4,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxrender-dev libxext6 git"
            },
            {
                "id": 5,
                "name": "Install python-dev",
                "run": "apt-get update && apt-get install -y python${{matrix.python-version}}-dev"
            },
            {
                "id": 6,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 7,
                "name": "Install MMCV",
                "run": "python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu102/${{matrix.torch_version}}/index.html\npython -c 'import mmcv; print(mmcv.__version__)'\n"
            },
            {
                "id": 8,
                "name": "Install unittest dependencies",
                "run": "python -m pip install -r requirements/tests.txt -r requirements/optional.txt"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "rm -rf .eggs\npython setup.py check -m -s\nTORCH_CUDA_ARCH_LIST=7.0 python -m pip install -e .\n"
            },
            {
                "id": 10,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmflow -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 11,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install OpenCV",
                "run": "pip install opencv-python>=3"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==1.8.2+${{ matrix.platform }} torchvision==0.9.2+${{ matrix.platform }} -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html"
            },
            {
                "id": 5,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8/index.html --only-binary mmcv-full\n"
            },
            {
                "id": 6,
                "name": "Install unittest dependencies",
                "run": "pip install -r requirements/tests.txt -r requirements/optional.txt"
            },
            {
                "id": 7,
                "name": "Build and install",
                "run": "pip install -e ."
            },
            {
                "id": 8,
                "name": "Run unittests",
                "run": "coverage run --branch --source mmflow -m pytest tests/\n"
            },
            {
                "id": 9,
                "name": "Generate coverage report",
                "run": "coverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex \"__repr__\" --fail-under 90 mmflow\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Build MMFlow",
                "run": "pip install wheel\npython setup.py sdist bdist_wheel\n"
            },
            {
                "id": 4,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install openmim",
                "run": "pip install openmim"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "rm -rf .eggs && mim install -e ."
            },
            {
                "id": 7,
                "name": "test commands of mim",
                "run": "mim search mmflow"
            }
        ],
        "open-mmlab/mmfewshot": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 4,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${{matrix.mmcv}}/index.html\npython -c 'import mmcv; print(mmcv.__version__)'\n"
            },
            {
                "id": 5,
                "name": "Install MMCLS and MMDET",
                "run": "pip install mmcls mmdet"
            },
            {
                "id": 6,
                "name": "Install unittest dependencies",
                "run": "pip install -r requirements/tests.txt -r requirements/optional.txt"
            },
            {
                "id": 7,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmfewshot -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 4,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxrender-dev libxext6"
            },
            {
                "id": 5,
                "name": "Install python-dev",
                "run": "apt-get update && apt-get install -y python${{matrix.python-version}}-dev"
            },
            {
                "id": 6,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 7,
                "name": "Install mmfewshot dependencies",
                "run": "python -V\npython -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu101/torch${{matrix.mmcv}}/index.html\npython -m pip install -r requirements.txt\npython -c 'import mmcv; print(mmcv.__version__)'\npython -m pip install mmcls mmdet\n"
            },
            {
                "id": 8,
                "name": "Build and install",
                "run": "rm -rf .eggs\npython setup.py check -m -s\nTORCH_CUDA_ARCH_LIST=7.0 pip install .\n"
            },
            {
                "id": 9,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmfewshot -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 10,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v1.0.10"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 4,
                "name": "Add python3.9 source",
                "run": "apt-get update && apt-get install -y software-properties-common\nadd-apt-repository -y ppa:deadsnakes/ppa\n"
            },
            {
                "id": 5,
                "name": "Install python-dev",
                "run": "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends python${{matrix.python-version}}-dev"
            },
            {
                "id": 6,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6\napt-get clean\nrm -rf /var/lib/apt/lists/*\n"
            },
            {
                "id": 7,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 8,
                "name": "Install dependencies for compiling onnx when python=3.9",
                "run": "python -m pip install protobuf && apt-get update && apt-get -y install libprotobuf-dev protobuf-compiler cmake"
            },
            {
                "id": 9,
                "name": "Install mmfewshot dependencies",
                "run": "python -V\npython -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu102/torch${{matrix.mmcv}}/index.html\npython -m pip install -r requirements.txt\npython -c 'import mmcv; print(mmcv.__version__)'\npython -m pip install mmcls mmdet\n"
            },
            {
                "id": 10,
                "name": "Build and install",
                "run": "rm -rf .eggs\npython setup.py check -m -s\nTORCH_CUDA_ARCH_LIST=7.0 pip install .\n"
            },
            {
                "id": 11,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmdet -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 12,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade --user"
            },
            {
                "id": 4,
                "name": "Install OpenCV",
                "run": "pip install opencv-python>=3"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==1.8.2+${{ matrix.platform }} torchvision==0.9.2+${{ matrix.platform }} -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html"
            },
            {
                "id": 6,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8/index.html --only-binary mmcv-full\n"
            },
            {
                "id": 7,
                "name": "Install MMCLS and MMDET",
                "run": "pip install mmcls mmdet"
            },
            {
                "id": 8,
                "name": "Install unittest dependencies",
                "run": "pip install -r requirements/tests.txt -r requirements/optional.txt"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "pip install -e ."
            },
            {
                "id": 10,
                "name": "Run unittests",
                "run": "python -m pip install timm\ncoverage run --branch --source mmfewshot -m pytest tests/\n"
            },
            {
                "id": 11,
                "name": "Generate coverage report",
                "run": "coverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "# markdownlint requires ruby >= 2.7\nsudo apt-add-repository ppa:brightbox/ruby-ng -y\nsudo apt-get update\nsudo apt-get install -y ruby2.7\npip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex \"__repr__\" --fail-under 80 mmfewshot\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Build MMFewShot",
                "run": "pip install wheel\npython setup.py sdist bdist_wheel\n"
            },
            {
                "id": 4,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install openmim",
                "run": "pip install openmim"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "rm -rf .eggs && mim install -e ."
            },
            {
                "id": 7,
                "name": "test commands of mim",
                "run": "mim search mmfewshot"
            }
        ],
        "open-mmlab/mmhuman3d": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "conda-incubator/setup-miniconda@v2"
            },
            {
                "id": 3,
                "name": "Prepare test data",
                "run": "mkdir mmhuman3d_download\ncd mmhuman3d_download\nwget -O mmhuman3d.7z -q https://openmmlab-share.oss-cn-hangzhou.aliyuncs.com/mmhuman3d/mmhuman3d.7z\n7za x mmhuman3d.7z\nls -l\ncd ..\ncp -r mmhuman3d_download/mmhuman3d/* ./\nrm -rf mmhuman3d_download\n"
            },
            {
                "id": 4,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 5,
                "name": "Install ffmpeg",
                "run": "conda install ffmpeg\nffmpeg -version\n"
            },
            {
                "id": 6,
                "name": "Install PyTorch",
                "run": "conda install pytorch==${{matrix.torch}} torchvision==${{matrix.torchvision}} torchaudio==${{matrix.torchaudio}} cudatoolkit=10.2 -c pytorch\n"
            },
            {
                "id": 7,
                "name": "Install pytorch3d",
                "run": "conda install -c fvcore -c iopath -c conda-forge fvcore iopath -y\npip install \"git+https://github.com/facebookresearch/pytorch3d.git\"\n"
            },
            {
                "id": 8,
                "name": "Install MMCV",
                "run": "pip install \"mmcv-full>=1.3.17,<=1.5.3\" -f https://download.openmmlab.com/mmcv/dist/cpu/torch${{matrix.torch}}/index.html\npython -c 'import mmcv; print(mmcv.__version__)'\n"
            },
            {
                "id": 9,
                "name": "Install openpifpaf",
                "run": "pip install openpifpaf==${{matrix.openpifpaf}}"
            },
            {
                "id": 10,
                "name": "Install other dependencies",
                "run": "pip install -r requirements.txt"
            },
            {
                "id": 11,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 12,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --source mmhuman3d -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 13,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.8",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "sudo apt-add-repository ppa:brightbox/ruby-ng -y\nsudo apt-get update\nsudo apt-get install -y ruby2.7\npip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -vinmMI --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex \"__repr__\" -f 80 mmhuman3d/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Build MMHUMAN3D",
                "run": "pip install wheel\npython setup.py sdist bdist_wheel\n"
            },
            {
                "id": 4,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            }
        ],
        "open-mmlab/labelbee": [
            {
                "id": 1,
                "name": "Checkout",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "install node js",
                "run": "actions/setup-node@v2"
            },
            {
                "id": 3,
                "name": "npm install",
                "run": "npm install"
            },
            {
                "id": 4,
                "name": "lerna bootstrap",
                "run": "npm run bootstrap"
            },
            {
                "id": 5,
                "name": "lerna build",
                "run": "npm run build"
            },
            {
                "id": 6,
                "name": "semantic publish",
                "run": "npm run semantic"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Install modules",
                "run": "npm install"
            },
            {
                "id": 3,
                "name": "Run Bootstrap",
                "run": "npm run bootstrap"
            },
            {
                "id": 4,
                "name": "Build Type",
                "run": "npm run build:type"
            },
            {
                "id": 5,
                "name": "Run ESLint",
                "run": "npm run lint"
            }
        ],
        "open-mmlab/pre-commit-hooks": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "unit-test",
                "run": "pip install cerberus pytest PyYAML\npytest tests/\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            }
        ],
        "open-mmlab/mmrazor": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/${{matrix.mmcv_link}}/index.html\npython -c 'import mmcv; print(mmcv.__version__)'\n"
            },
            {
                "id": 6,
                "name": "Install unittest dependencies",
                "run": "pip install -r requirements.txt\n"
            },
            {
                "id": 7,
                "name": "Build and install",
                "run": "rm -rf .eggs\npip install -e . -U\n"
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmrazor -m pytest tests/\ncoverage xml\ncoverage report -m --omit=\"mmrazor/apis/*\"\n"
            },
            {
                "id": 9,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install pip --upgrade --user"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html"
            },
            {
                "id": 5,
                "name": "Install OpenCV",
                "run": "pip install opencv-python>=3\n"
            },
            {
                "id": 6,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8/index.html --only-binary mmcv-full\n"
            },
            {
                "id": 7,
                "name": "Install unittest dependencies",
                "run": "pip install -r requirements.txt\n"
            },
            {
                "id": 8,
                "name": "Build and install",
                "run": "pip install -e . -U\n"
            },
            {
                "id": 9,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmrazor -m pytest tests/\ncoverage xml\ncoverage report -m --omit=\"mmrazor/apis/*\"\n"
            },
            {
                "id": 10,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Build MMRAZOR",
                "run": "pip install wheel\npython setup.py sdist bdist_wheel\n"
            },
            {
                "id": 4,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex \"__repr__\" --fail-under 80 mmrazor\n"
            }
        ],
        "open-mmlab/mmdeploy": [
            {
                "id": 1,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 2,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 3,
                "name": "update",
                "run": "sudo apt update"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "sudo apt update\nsudo apt install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev libc++1-9 libc++abi1-9\nsudo apt install libopencv-dev\n"
            },
            {
                "id": 5,
                "name": "Install Ascend Toolkit",
                "run": "mkdir -p $GITHUB_WORKSPACE/Ascend\nwget https://ascend-repo.obs.cn-east-2.myhuaweicloud.com/CANN/CANN%205.1.RC2/Ascend-cann-toolkit_5.1.RC2_linux-x86_64.run\nsh Ascend-cann-toolkit_5.1.RC2_linux-x86_64.run --install --install-path=$GITHUB_WORKSPACE/Ascend --quiet --chip=Ascend310 --blacklist=devtools\n"
            },
            {
                "id": 6,
                "name": "Build SDK Demo with Ascend backend",
                "run": "mkdir -p build && pushd build\nsource $GITHUB_WORKSPACE/Ascend/ascend-toolkit/set_env.sh\nexport LD_LIBRARY_PATH=$GITHUB_WORKSPACE/Ascend/ascend-toolkit/latest/runtime/lib64/stub:$LD_LIBRARY_PATH\ncmake .. -DMMDEPLOY_BUILD_SDK=ON -DMMDEPLOY_BUILD_EXAMPLES=ON -DMMDEPLOY_TARGET_BACKENDS=acl\nmake install -j4\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "install opencv",
                "run": "wget https://github.com/irexyc/mmdeploy-ci-resource/releases/download/opencv/opencv-osx-arm64-4.6.0.tar.gz\nmkdir $GITHUB_WORKSPACE/opencv-install\ntar xf opencv-osx-arm64-4.6.0.tar.gz -C $GITHUB_WORKSPACE/opencv-install\n"
            },
            {
                "id": 3,
                "name": "install libtorch",
                "run": "wget https://github.com/irexyc/mmdeploy-ci-resource/releases/download/libtorch/libtorch-osx-arm64-1.8.0.tar.gz\nmkdir $GITHUB_WORKSPACE/libtorch-install\ntar xf libtorch-osx-arm64-1.8.0.tar.gz -C $GITHUB_WORKSPACE/libtorch-install\n"
            },
            {
                "id": 4,
                "name": "build-static-lib",
                "run": "mkdir build && cd build\ncmake .. -DCMAKE_OSX_ARCHITECTURES=\"arm64\" \\\n  -DCMAKE_SYSTEM_PROCESSOR=\"arm64\" \\\n  -DMMDEPLOY_BUILD_SDK=ON \\\n  -DOpenCV_DIR=$GITHUB_WORKSPACE/opencv-install/lib/cmake/opencv4 \\\n  -DTorch_DIR=$GITHUB_WORKSPACE/libtorch-install/share/cmake/Torch \\\n  -DMMDEPLOY_TARGET_BACKENDS=\"coreml\" \\\n  -DMMDEPLOY_BUILD_EXAMPLES=ON \\\n  -DMMDEPLOY_BUILD_SDK_MONOLITHIC=OFF \\\n  -DMMDEPLOY_SHARED_LIBS=OFF\ncmake --build . -j 3\ncmake --build . --target install\n"
            },
            {
                "id": 5,
                "name": "build-monolithic-lib",
                "run": "mkdir build-shared && cd build-shared\ncmake .. -DCMAKE_OSX_ARCHITECTURES=\"arm64\" \\\n  -DCMAKE_SYSTEM_PROCESSOR=\"arm64\" \\\n  -DMMDEPLOY_BUILD_SDK=ON \\\n  -DMMDEPLOY_TARGET_DEVICES=\"cpu\" \\\n  -DMMDEPLOY_CODEBASES=all \\\n  -DOpenCV_DIR=$GITHUB_WORKSPACE/opencv-install/lib/cmake/opencv4 \\\n  -DTorch_DIR=$GITHUB_WORKSPACE/libtorch-install/share/cmake/Torch \\\n  -DMMDEPLOY_TARGET_BACKENDS=\"coreml\" \\\n  -DMMDEPLOY_BUILD_SDK_MONOLITHIC=ON \\\n  -DMMDEPLOY_SHARED_LIBS=OFF \\\n  -DMMDEPLOY_BUILD_EXAMPLES=ON\ncmake --build . -j 3\ncmake --build . --target install\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install unittest dependencies",
                "run": "pip install cmake onnx\n"
            },
            {
                "id": 4,
                "name": "update",
                "run": "sudo apt update"
            },
            {
                "id": 5,
                "name": "gcc-multilib",
                "run": "sudo apt install gcc-multilib g++-multilib wget libprotobuf-dev protobuf-compiler"
            },
            {
                "id": 6,
                "name": "Install ncnn",
                "run": "wget https://github.com/Tencent/ncnn/archive/refs/tags/20220420.tar.gz\ntar xf 20220420.tar.gz\npushd ncnn-20220420\nmkdir build && pushd build\ncmake -DCMAKE_INSTALL_PREFIX=$(pwd)/../install -DNCNN_BUILD_TESTS=OFF -DNCNN_BUILD_TOOLS=OFF -DNCNN_BUILD_EXAMPLES=OFF ..\ncmake --build . -j2\nmake install\npopd && popd\n"
            },
            {
                "id": 7,
                "name": "Install mmdeploy with ncnn backend",
                "run": "mkdir -p build && pushd build\nexport LD_LIBRARY_PATH=/home/runner/work/mmdeploy/mmdeploy/ncnn-20220420/install/lib/:$LD_LIBRARY_PATH\ncmake -DMMDEPLOY_TARGET_BACKENDS=ncnn -Dncnn_DIR=/home/runner/work/mmdeploy/mmdeploy/ncnn-20220420/install/lib/cmake/ncnn/ ..\nmake mmdeploy_onnx2ncnn -j2\npopd\n"
            },
            {
                "id": 8,
                "name": "Test onnx2ncnn",
                "run": "echo $(pwd)\nln -s build/bin/mmdeploy_onnx2ncnn ./\npython3 .github/scripts/test_onnx2ncnn.py --run 1\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install mmdeploy",
                "run": "python3 -m pip install torch==1.8.2 torchvision==0.9.2 --extra-index-url https://download.pytorch.org/whl/lts/1.8/cpu\npython3 -m pip install mmcv-full==1.5.1  -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8.0/index.html\npython3 tools/scripts/build_ubuntu_x64_ncnn.py 8\npython3 -c 'import mmdeploy.apis.ncnn as ncnn_api; assert ncnn_api.is_available(with_custom_ops=True)'\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install mmdeploy",
                "run": "python3 -m pip install torch==1.8.2 torchvision==0.9.2 --extra-index-url https://download.pytorch.org/whl/lts/1.8/cpu\npython3 -m pip install mmcv-full==1.5.1  -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8.0/index.html\npython3 tools/scripts/build_ubuntu_x64_ort.py 8\npython3 -c 'import mmdeploy.apis.onnxruntime as ort_api; assert ort_api.is_available(with_custom_ops=True)'\n"
            },
            {
                "id": 4,
                "name": "test mmcls full pipeline",
                "run": "pip install openmim\nmim install mmcls\ngit clone  --depth 1 --single-branch --branch master https://github.com/open-mmlab/mmclassification.git ../mmclassification\nexport MMDEPLOY_DIR=$(pwd)\nexport ONNXRUNTIME_DIR=$MMDEPLOY_DIR/../mmdeploy-dep/onnxruntime-linux-x64-1.8.1\nexport LD_LIBRARY_PATH=$ONNXRUNTIME_DIR/lib:$MMDEPLOY_DIR/build/install/lib:$LD_LIBRARY_PATH\nbash .github/scripts/test_mmcls_full_pipeline.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install mmdeploy",
                "run": "python3 -m pip install torch==1.8.2 torchvision==0.9.2 --extra-index-url https://download.pytorch.org/whl/lts/1.8/cpu\npython3 -m pip install mmcv-full==1.5.1  -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8.0/index.html\npython3 tools/scripts/build_ubuntu_x64_pplnn.py 8\npython3 -c 'import mmdeploy.apis.pplnn as pplnn_api; assert pplnn_api.is_available()'\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "update",
                "run": "sudo apt update"
            },
            {
                "id": 3,
                "name": "cross compile",
                "run": "sh -x tools/scripts/ubuntu_cross_build_rknn.sh rk3588\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "update",
                "run": "sudo apt update"
            },
            {
                "id": 3,
                "name": "cross compile",
                "run": "sh -x tools/scripts/ubuntu_cross_build_rknn.sh rv1126\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "update",
                "run": "sudo apt update"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "sudo apt install wget libprotobuf-dev protobuf-compiler\nsudo apt update\nsudo apt install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev libc++1-9 libc++abi1-9\nsudo apt install libopencv-dev\n"
            },
            {
                "id": 4,
                "name": "Install snpe",
                "run": "wget https://media.githubusercontent.com/media/tpoisonooo/mmdeploy_snpe_testdata/main/snpe-1.59.tar.gz\ntar xf snpe-1.59.tar.gz\npushd snpe-1.59.0.3230\npwd\npopd\n"
            },
            {
                "id": 5,
                "name": "Build SDK Demo with SNPE backend",
                "run": "mkdir -p build && pushd build\nexport SNPE_ROOT=/home/runner/work/mmdeploy/mmdeploy/snpe-1.59.0.3230\nexport LD_LIBRARY_PATH=${SNPE_ROOT}/lib/x86_64-linux-clang:${LD_LIBRARY_PATH}\nexport MMDEPLOY_SNPE_X86_CI=1\ncmake .. -DMMDEPLOY_BUILD_SDK=ON -DMMDEPLOY_TARGET_BACKENDS=snpe\nmake -j2\nmake install\npushd install/example\nmkdir build && pushd build\ncmake ../cpp -DMMDeploy_DIR=${PWD}/../../lib/cmake/MMDeploy\nmake -j2\nls ./*\npopd\npopd\npopd\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install mmdeploy",
                "run": "python3 tools/scripts/build_ubuntu_x64_torchscript.py 8\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install PyTorch",
                "run": "python -m pip install --upgrade pip\npython -V\npython -m pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html\n"
            },
            {
                "id": 3,
                "name": "Install MMCV",
                "run": "python -m pip install mmcv-full==${{matrix.mmcv}} -f https://download.openmmlab.com/mmcv/dist/cpu/${{matrix.torch_version}}/index.html\npython -c 'import mmcv; print(mmcv.__version__)'\n"
            },
            {
                "id": 4,
                "name": "Install unittest dependencies",
                "run": "python -m pip install -U numpy\npython -m pip install rapidfuzz==2.15.1\npython -m pip install -r requirements.txt\n"
            },
            {
                "id": 5,
                "name": "Build and install",
                "run": "rm -rf .eggs && python -m pip install -e ."
            },
            {
                "id": 6,
                "name": "Run python unittests and generate coverage report",
                "run": "coverage run --branch --source mmdeploy -m pytest -rsE tests\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "update",
                "run": "sudo apt update"
            },
            {
                "id": 3,
                "name": "gcc-multilib",
                "run": "sudo apt update\nsudo apt install libopencv-dev lcov wget -y\n"
            },
            {
                "id": 4,
                "name": "Build and run SDK unit test without backend",
                "run": "mkdir -p build && pushd build\ncmake .. \\\n  -DMMDEPLOY_CODEBASES=all \\\n  -DMMDEPLOY_BUILD_SDK=ON \\\n  -DMMDEPLOY_BUILD_SDK_PYTHON_API=OFF \\\n  -DMMDEPLOY_TARGET_DEVICES=cpu \\\n  -DMMDEPLOY_COVERAGE=ON \\\n  -DMMDEPLOY_BUILD_TEST=ON\nmake -j2\nmkdir -p mmdeploy_test_resources/transform\ncp ../tests/data/tiger.jpeg mmdeploy_test_resources/transform/\n./bin/mmdeploy_tests\nlcov --capture --directory . --output-file coverage.info\nls -lah coverage.info\ncp coverage.info ../\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "update",
                "run": "sudo apt update"
            },
            {
                "id": 3,
                "name": "Set up Python",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 4,
                "name": "gcc-multilib",
                "run": "sh -x tools/scripts/ubuntu_cross_build_aarch64.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install system dependencies",
                "run": "apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC\napt-get update && apt-get install -y git\n"
            },
            {
                "id": 3,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 4,
                "name": "Install dependencies",
                "run": "python -V\npython -m pip install -U pip\npython -m pip install mmcv-full==${{matrix.mmcv}} -f https://download.openmmlab.com/mmcv/dist/cu102/${{matrix.torch_version}}/index.html\npython -m pip install -r requirements.txt\npython -m pip install rapidfuzz==2.15.1\n"
            },
            {
                "id": 5,
                "name": "Build and install",
                "run": "rm -rf .eggs && python -m pip install -e .\npython tools/check_env.py\n"
            },
            {
                "id": 6,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmdeploy -m pytest -rsE tests\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Install system dependencies",
                "run": "apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC\napt-get update && apt-get install -y git\n"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -V\npython -m pip install -U pip\npython -m pip install mmcv-full==${{matrix.mmcv}} -f https://download.openmmlab.com/mmcv/dist/cu111/${{matrix.torch_version}}/index.html\npython -m pip install -r requirements.txt\npython -m pip install rapidfuzz==2.15.1\n"
            },
            {
                "id": 4,
                "name": "Build and install",
                "run": "rm -rf .eggs && python -m pip install -e .\npython tools/check_env.py\n"
            },
            {
                "id": 5,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmdeploy -m pytest -rsE tests\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 6,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v2"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install unittest dependencies",
                "run": "pip install cmake onnx\n"
            },
            {
                "id": 4,
                "name": "update",
                "run": "sudo apt update"
            },
            {
                "id": 5,
                "name": "Install OpenJDK",
                "run": "wget https://download.java.net/java/GA/jdk18/43f95e8614114aeaa8e8a5fcf20a682d/36/GPL/openjdk-18_linux-x64_bin.tar.gz\ntar xvf openjdk-18_linux-x64_bin.tar.gz\n"
            },
            {
                "id": 6,
                "name": "gcc-multilib",
                "run": "sudo apt install gcc-multilib g++-multilib wget libprotobuf-dev protobuf-compiler"
            },
            {
                "id": 7,
                "name": "Install onnxruntime",
                "run": "wget https://github.com/microsoft/onnxruntime/releases/download/v1.8.1/onnxruntime-linux-x64-1.8.1.tgz\ntar -zxvf onnxruntime-linux-x64-1.8.1.tgz\npushd onnxruntime-linux-x64-1.8.1\nexport ONNXRUNTIME_DIR=${PWD}\nexport LD_LIBRARY_PATH=$ONNXRUNTIME_DIR/lib:$LD_LIBRARY_PATH\npopd\n"
            },
            {
                "id": 8,
                "name": "Install opencv",
                "run": "sudo apt-get install libopencv-dev\n"
            },
            {
                "id": 9,
                "name": "Build java class",
                "run": "pushd csrc/mmdeploy/apis/java\njavac mmdeploy/*.java\npopd\npushd demo/java\njavac -classpath ../../csrc/mmdeploy/apis/java/ Utils.java\npopd\n"
            },
            {
                "id": 10,
                "name": "Install mmdeploy with onnxruntime backend and java api",
                "run": "mkdir -p build && pushd build\nexport LD_LIBRARY_PATH=/home/runner/work/mmdeploy/mmdeploy/ncnn/install/lib/:$LD_LIBRARY_PATH\ncmake -DMMDEPLOY_BUILD_SDK=ON -DMMDEPLOY_BUILD_SDK_JAVA_API=ON -DMMDEPLOY_TARGET_BACKENDS=ort -DMMDEPLOY_CODEBASES=all -DONNXRUNTIME_DIR=~/work/mmdeploy/mmdeploy/onnxruntime-linux-x64-1.8.1  ..\nmake install\npopd\n"
            },
            {
                "id": 11,
                "name": "Test javademo",
                "run": "export JAVA_HOME=${PWD}/jdk-18\nexport PATH=${JAVA_HOME}/bin:${PATH}\nexport LD_LIBRARY_PATH=/build/lib:${LD_LIBRARY_PATH}\njava --version\npython3 .github/scripts/test_java_demo.py\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Format c/cuda codes with clang-format",
                "run": "DoozyX/clang-format-lint-action@v0.11"
            },
            {
                "id": 6,
                "name": "Check index.rst",
                "run": "python3 .github/scripts/check_index_rst.py docs/en/index.rst\npython3 .github/scripts/check_index_rst.py docs/zh_cn/index.rst\n"
            },
            {
                "id": 7,
                "name": "Check doc link",
                "run": "python3 .github/scripts/doc_link_checker.py --target docs/zh_cn\npython3 .github/scripts/doc_link_checker.py --target README_zh-CN.md\npython3 .github/scripts/doc_link_checker.py --target docs/en\npython3 .github/scripts/doc_link_checker.py --target README.md\n"
            },
            {
                "id": 8,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-module --ignore-private --ignore-nested-functions --ignore-nested-classes --fail-under 80 mmdeploy\n"
            },
            {
                "id": 9,
                "name": "Check pylint score",
                "run": "pip install pylint\npylint mmdeploy\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "riscv64-gnu-toolchain",
                "run": "sudo apt-get update\nsudo apt-get install g++-riscv64-linux-gnu\n"
            },
            {
                "id": 3,
                "name": "install opencv",
                "run": "mkdir $GITHUB_WORKSPACE/opencv-install\nwget https://github.com/irexyc/mmdeploy-ci-resource/raw/opencv/opencv_4.6.0_linux_riscv64.tar.gz\ntar xf opencv_4.6.0_linux_riscv64.tar.gz -C $GITHUB_WORKSPACE/opencv-install\n"
            },
            {
                "id": 4,
                "name": "install ncnn",
                "run": "mkdir $GITHUB_WORKSPACE/ncnn-install\nwget https://github.com/irexyc/mmdeploy-ci-resource/raw/ncnn/ncnn_20220729_linux_riscv64.tar.gz\ntar xf ncnn_20220729_linux_riscv64.tar.gz -C $GITHUB_WORKSPACE/ncnn-install\n"
            },
            {
                "id": 5,
                "name": "build",
                "run": "mkdir build && cd build\ncmake .. \\\n  -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/riscv64-linux-gnu.cmake \\\n  -DMMDEPLOY_BUILD_SDK=ON \\\n  -DMMDEPLOY_BUILD_EXAMPLES=ON \\\n  -DMMDEPLOY_TARGET_BACKENDS=\"ncnn\" \\\n  -Dncnn_DIR=$GITHUB_WORKSPACE/ncnn-install/lib/cmake/ncnn/ \\\n  -DOpenCV_DIR=$GITHUB_WORKSPACE/opencv-install/lib/cmake/opencv4\nmake -j$(nproc)\nmake install\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Get mmdeploy version",
                "run": "export MMDEPLOY_VERSION=$(python3 -c \"import sys; sys.path.append('mmdeploy');from version import __version__;print(__version__)\")\necho $MMDEPLOY_VERSION\necho \"MMDEPLOY_VERSION=$MMDEPLOY_VERSION\"  >> $GITHUB_ENV\necho \"OUTPUT_DIR=$MMDEPLOY_VERSION-$GITHUB_RUN_ID\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Build MMDeploy",
                "run": "source activate mmdeploy-3.6\npip install pyyaml packaging setuptools wheel\nmkdir pack; cd pack\npython ../tools/package_tools/generate_build_config.py --backend 'trt;ort' \\\n  --system linux --output config.yml --build-mmdeploy\npython ../tools/package_tools/mmdeploy_builder.py --config config.yml\n"
            },
            {
                "id": 4,
                "name": "Build sdk cpu backend",
                "run": "source activate mmdeploy-3.6\ncd pack\npython ../tools/package_tools/generate_build_config.py --backend 'ort' \\\n  --system linux --output config.yml --device cpu --build-sdk --build-sdk-monolithic \\\n  --build-sdk-python --sdk-dynamic-net\npython ../tools/package_tools/mmdeploy_builder.py --config config.yml\n"
            },
            {
                "id": 5,
                "name": "Build sdk cuda backend",
                "run": "source activate mmdeploy-3.6\ncd pack\npython ../tools/package_tools/generate_build_config.py --backend 'ort;trt' \\\n  --system linux --output config.yml --device cuda --build-sdk --build-sdk-monolithic \\\n  --build-sdk-python --sdk-dynamic-net --onnxruntime-dir=$ONNXRUNTIME_GPU_DIR\npython ../tools/package_tools/mmdeploy_builder.py --config config.yml\n"
            },
            {
                "id": 6,
                "name": "Move artifact",
                "run": "mkdir -p /__w/mmdeploy/prebuild/$OUTPUT_DIR\ncp -r pack/* /__w/mmdeploy/prebuild/$OUTPUT_DIR\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Get mmdeploy version",
                "run": "export MMDEPLOY_VERSION=$(python3 -c \"import sys; sys.path.append('mmdeploy');from version import __version__;print(__version__)\")\necho $MMDEPLOY_VERSION\necho \"MMDEPLOY_VERSION=$MMDEPLOY_VERSION\"  >> $GITHUB_ENV\necho \"OUTPUT_DIR=$MMDEPLOY_VERSION-$GITHUB_RUN_ID\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Build sdk cpu backend",
                "run": "mkdir pack; cd pack\npython ../tools/package_tools/generate_build_config.py --backend 'ort' \\\n  --system linux --output config.yml --device cpu --build-sdk --build-sdk-monolithic \\\n  --sdk-dynamic-net --cxx11abi\npython ../tools/package_tools/mmdeploy_builder.py --config config.yml\n"
            },
            {
                "id": 4,
                "name": "Build sdk cuda backend",
                "run": "cd pack\npython ../tools/package_tools/generate_build_config.py --backend 'ort;trt' \\\n  --system linux --output config.yml --device cuda --build-sdk --build-sdk-monolithic \\\n  --sdk-dynamic-net --cxx11abi --onnxruntime-dir=$ONNXRUNTIME_GPU_DIR --cudnn-dir /usr\npython ../tools/package_tools/mmdeploy_builder.py --config config.yml\n"
            },
            {
                "id": 5,
                "name": "Move artifact",
                "run": "mkdir -p /__w/mmdeploy/prebuild/$OUTPUT_DIR\ncp -r pack/* /__w/mmdeploy/prebuild/$OUTPUT_DIR\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Get mmdeploy version",
                "run": "export MMDEPLOY_VERSION=$(python3 -c \"import sys; sys.path.append('mmdeploy');from version import __version__;print(__version__)\")\necho $MMDEPLOY_VERSION\necho \"MMDEPLOY_VERSION=$MMDEPLOY_VERSION\"  >> $GITHUB_ENV\necho \"OUTPUT_DIR=$MMDEPLOY_VERSION-$GITHUB_RUN_ID\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Test python",
                "run": "cd /__w/mmdeploy/prebuild/$OUTPUT_DIR\nbash $GITHUB_WORKSPACE/tools/package_tools/test/test_sdk_python.sh\n"
            },
            {
                "id": 4,
                "name": "Test c/cpp",
                "run": "cd /__w/mmdeploy/prebuild/$OUTPUT_DIR\nbash $GITHUB_WORKSPACE/tools/package_tools/test/test_sdk.sh\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Get mmdeploy version",
                "run": "export MMDEPLOY_VERSION=$(python3 -c \"import sys; sys.path.append('mmdeploy');from version import __version__;print(__version__)\")\necho $MMDEPLOY_VERSION\necho \"MMDEPLOY_VERSION=$MMDEPLOY_VERSION\"  >> $GITHUB_ENV\necho \"OUTPUT_DIR=$MMDEPLOY_VERSION-$GITHUB_RUN_ID\" >> $GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Upload mmdeploy",
                "run": "cd $PREBUILD_DIR/$OUTPUT_DIR/mmdeploy\npip install twine\n# twine upload * --repository testpypi -u __token__ -p ${{ secrets.test_pypi_password }}\ntwine upload * -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 4,
                "name": "Upload mmdeploy_runtime",
                "run": "cd $PREBUILD_DIR/$OUTPUT_DIR/mmdeploy_runtime\n# twine upload * --repository testpypi -u __token__ -p ${{ secrets.test_pypi_password }}\ntwine upload * -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 5,
                "name": "Zip mmdeploy sdk",
                "run": "cd $PREBUILD_DIR/$OUTPUT_DIR/sdk\nfor folder in *\ndo\n  tar czf $folder.tar.gz $folder\ndone\n"
            },
            {
                "id": 6,
                "name": "Upload mmdeploy sdk",
                "run": "softprops/action-gh-release@v1"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Get mmdeploy version",
                "run": "conda activate mmdeploy-3.8\n$env:MMDEPLOY_VERSION=(python -c \"import sys; sys.path.append('mmdeploy');from version import __version__;print(__version__)\")\necho $env:MMDEPLOY_VERSION\necho \"MMDEPLOY_VERSION=$env:MMDEPLOY_VERSION\"  >> $env:GITHUB_ENV\necho \"OUTPUT_DIR=$env:MMDEPLOY_VERSION-$env:GITHUB_RUN_ID\" >> $env:GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Build MMDeploy",
                "run": ". D:\\DEPS\\cienv\\prebuild_gpu_env.ps1\nconda activate mmdeploy-3.6\nmkdir pack; cd pack\npython ../tools/package_tools/generate_build_config.py --backend 'trt;ort' `\n  --system windows --output config.yml --build-mmdeploy\npython ../tools/package_tools/mmdeploy_builder.py --config config.yml\n"
            },
            {
                "id": 4,
                "name": "Build sdk cpu backend",
                "run": ". D:\\DEPS\\cienv\\prebuild_cpu_env.ps1\nconda activate mmdeploy-3.6\ncd pack\npython ../tools/package_tools/generate_build_config.py --backend 'ort' `\n  --system windows --output config.yml --device cpu --build-sdk --build-sdk-monolithic `\n  --build-sdk-python --sdk-dynamic-net\npython ../tools/package_tools/mmdeploy_builder.py --config config.yml\n"
            },
            {
                "id": 5,
                "name": "Build sdk cuda backend",
                "run": ". D:\\DEPS\\cienv\\prebuild_gpu_env.ps1\nconda activate mmdeploy-3.6\ncd pack\npython ../tools/package_tools/generate_build_config.py --backend 'ort;trt' `\n  --system windows --output config.yml --device cuda --build-sdk --build-sdk-monolithic `\n  --build-sdk-python --sdk-dynamic-net\npython ../tools/package_tools/mmdeploy_builder.py --config config.yml\n"
            },
            {
                "id": 6,
                "name": "Move artifact",
                "run": "New-Item \"D:/DEPS/ciartifact/$env:OUTPUT_DIR\" -ItemType Directory -Force\nMove-Item pack/* \"D:/DEPS/ciartifact/$env:OUTPUT_DIR\"\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Get mmdeploy version",
                "run": "conda activate mmdeploy-3.8\n$env:MMDEPLOY_VERSION=(python -c \"import sys; sys.path.append('mmdeploy');from version import __version__;print(__version__)\")\necho $env:MMDEPLOY_VERSION\necho \"MMDEPLOY_VERSION=$env:MMDEPLOY_VERSION\"  >> $env:GITHUB_ENV\necho \"OUTPUT_DIR=$env:MMDEPLOY_VERSION-$env:GITHUB_RUN_ID\" >> $env:GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Test python",
                "run": "cd \"D:/DEPS/ciartifact/$env:OUTPUT_DIR\"\n. D:\\DEPS\\cienv\\prebuild_cpu_env.ps1\nconda activate ci-test\n& \"$env:GITHUB_WORKSPACE/tools/package_tools/test/test_sdk_python.ps1\"\n"
            },
            {
                "id": 4,
                "name": "Test c/cpp",
                "run": "cd \"D:/DEPS/ciartifact/$env:OUTPUT_DIR\"\n. D:\\DEPS\\cienv\\prebuild_cpu_env.ps1\n& \"$env:GITHUB_WORKSPACE/tools/package_tools/test/test_sdk.ps1\"\n"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Get mmdeploy version",
                "run": "conda activate mmdeploy-3.8\n$env:MMDEPLOY_VERSION=(python -c \"import sys; sys.path.append('mmdeploy');from version import __version__;print(__version__)\")\necho $env:MMDEPLOY_VERSION\necho \"MMDEPLOY_VERSION=$env:MMDEPLOY_VERSION\"  >> $env:GITHUB_ENV\necho \"OUTPUT_DIR=$env:MMDEPLOY_VERSION-$env:GITHUB_RUN_ID\" >> $env:GITHUB_ENV\n"
            },
            {
                "id": 3,
                "name": "Upload mmdeploy",
                "run": "cd \"D:/DEPS/ciartifact/$env:OUTPUT_DIR/mmdeploy\"\nconda activate mmdeploy-3.8\n# twine upload * --repository testpypi -u __token__ -p ${{ secrets.test_pypi_password }}\ntwine upload * -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 4,
                "name": "Upload mmdeploy_runtime",
                "run": "cd \"D:/DEPS/ciartifact/$env:OUTPUT_DIR/mmdeploy_runtime\"\nconda activate mmdeploy-3.8\n# twine upload * --repository testpypi -u __token__ -p ${{ secrets.test_pypi_password }}\ntwine upload * -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 5,
                "name": "Zip mmdeploy sdk",
                "run": "cd \"D:/DEPS/ciartifact/$env:OUTPUT_DIR/sdk\"\n$folders = $(ls).Name\nforeach ($folder in $folders) {\n  Compress-Archive -Path $folder -DestinationPath \"$folder.zip\"\n}\n"
            },
            {
                "id": 6,
                "name": "Upload mmdeploy sdk",
                "run": "softprops/action-gh-release@v1"
            },
            {
                "id": 1,
                "name": "Checkout repository",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Install latest nightly Rust",
                "run": "actions-rs/toolchain@v1"
            },
            {
                "id": 4,
                "name": "update",
                "run": "sudo apt update"
            },
            {
                "id": 5,
                "name": "Install dependencies",
                "run": "sudo apt install llvm-dev libclang-dev clang git-lfs"
            },
            {
                "id": 6,
                "name": "Install onnxruntime",
                "run": "wget https://github.com/microsoft/onnxruntime/releases/download/v1.8.1/onnxruntime-linux-x64-1.8.1.tgz\ntar -zxvf onnxruntime-linux-x64-1.8.1.tgz\npushd onnxruntime-linux-x64-1.8.1\npopd\n"
            },
            {
                "id": 7,
                "name": "Install opencv",
                "run": "sudo apt-get install libopencv-dev"
            },
            {
                "id": 8,
                "name": "Install mmdeploy with onnxruntime backend",
                "run": "wget https://github.com/open-mmlab/mmdeploy/releases/download/v0.9.0/mmdeploy-0.9.0-linux-x86_64-onnxruntime1.8.1.tar.gz\ntar -zxvf mmdeploy-0.9.0-linux-x86_64-onnxruntime1.8.1.tar.gz\n"
            },
            {
                "id": 9,
                "name": "Download rust-mmdeploy",
                "run": "git clone https://github.com/liu-mengyang/rust-mmdeploy"
            },
            {
                "id": 10,
                "name": "Download converted models",
                "run": "git clone https://github.com/liu-mengyang/mmdeploy-converted-models --depth=1"
            },
            {
                "id": 11,
                "name": "Test rustdemo",
                "run": "pushd rust-mmdeploy\nexport MMDEPLOY_DIR=/home/runner/work/mmdeploy/mmdeploy/mmdeploy-0.9.0-linux-x86_64-onnxruntime1.8.1/sdk\nexport LD_LIBRARY_PATH=$MMDEPLOY_DIR/lib:$LD_LIBRARY_PATH\nexport ONNXRUNTIME_DIR=/home/runner/work/mmdeploy/mmdeploy/onnxruntime-linux-x64-1.8.1\nexport LD_LIBRARY_PATH=$ONNXRUNTIME_DIR/lib:$LD_LIBRARY_PATH\ncargo build\nsh ci_test.sh\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/stale@v7"
            }
        ],
        "open-mmlab/mmengine": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install wheel",
                "run": "pip install wheel"
            },
            {
                "id": 4,
                "name": "Build MMEngine",
                "run": "python setup.py sdist bdist_wheel"
            },
            {
                "id": 5,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install wheel",
                "run": "pip install wheel"
            },
            {
                "id": 4,
                "name": "Build MMEngine-lite",
                "run": "sed -i \"s/os.getenv('MMENGINE_LITE', '0')/os.getenv('MMENGINE_LITE', '1')/g\" setup.py\npython setup.py sdist bdist_wheel\n"
            },
            {
                "id": 5,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-magic --ignore-module --ignore-nested-functions --ignore-regex \"__repr__\" --fail-under 80 mmengine\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Build MMEngine from source",
                "run": "pip install -e . -v"
            },
            {
                "id": 6,
                "name": "Install unit tests dependencies",
                "run": "pip install -r requirements/tests.txt\npip install openmim\nmim install mmcv\n"
            },
            {
                "id": 7,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Upgrade wheel",
                "run": "python -m pip install wheel --upgrade"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html"
            },
            {
                "id": 6,
                "name": "Build MMEngine from source",
                "run": "pip install -e . -v"
            },
            {
                "id": 7,
                "name": "Install unit tests dependencies",
                "run": "pip install -r requirements/tests.txt\n"
            },
            {
                "id": 8,
                "name": "Install mmcv",
                "run": "pip install openmim\nmim install mmcv\n"
            },
            {
                "id": 9,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist\n"
            },
            {
                "id": 10,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 5,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6"
            },
            {
                "id": 6,
                "name": "Build MMEngine from source",
                "run": "pip install -e . -v"
            },
            {
                "id": 7,
                "name": "Install unit tests dependencies",
                "run": "pip install -r requirements/tests.txt\npip install openmim\nmim install mmcv\n"
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmengine -m pytest tests/ --ignore tests/test_dist\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 5,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y git ffmpeg libturbojpeg"
            },
            {
                "id": 6,
                "name": "Build MMEngine from source",
                "run": "pip install -e . -v"
            },
            {
                "id": 7,
                "name": "Install unit tests dependencies",
                "run": "pip install -r requirements/tests.txt\npip install openmim\nmim install mmcv\n"
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 5,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y git ffmpeg libturbojpeg"
            },
            {
                "id": 6,
                "name": "Build MMEngine from source",
                "run": "pip install -e . -v"
            },
            {
                "id": 7,
                "name": "Install unit tests dependencies",
                "run": "pip install -r requirements/tests.txt\npip install openmim\nmim install mmcv\n"
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+${{matrix.platform}} torchvision==${{matrix.torchvision}}+${{matrix.platform}} -f https://download.pytorch.org/whl/${{matrix.platform}}/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Build MMEngine from source",
                "run": "pip install -e . -v"
            },
            {
                "id": 6,
                "name": "Install unit tests dependencies",
                "run": "pip install -r requirements/tests.txt\npip install openmim\nmim install mmcv\n"
            },
            {
                "id": 7,
                "name": "Run CPU unittests",
                "run": "pytest tests/  --ignore tests/test_dist"
            },
            {
                "id": 8,
                "name": "Run GPU unittests",
                "run": "pytest tests/ --ignore tests/test_dist --ignore tests/test_optim/test_optimizer/test_optimizer_wrapper.py --ignore tests/test_model/test_wrappers/test_model_wrapper.py"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Upgrade wheel",
                "run": "python -m pip install wheel --upgrade"
            },
            {
                "id": 5,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html"
            },
            {
                "id": 6,
                "name": "Build MMEngine from source",
                "run": "pip install -e . -v"
            },
            {
                "id": 7,
                "name": "Install unit tests dependencies",
                "run": "pip install -r requirements/tests.txt\npip install openmim\nmim install mmcv\n"
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 9,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v3"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 5,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6"
            },
            {
                "id": 6,
                "name": "Build MMEngine from source",
                "run": "pip install -e . -v"
            },
            {
                "id": 7,
                "name": "Install unit tests dependencies",
                "run": "pip install -r requirements/tests.txt\npip install openmim\nmim install mmcv\n"
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 5,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y git ffmpeg libturbojpeg"
            },
            {
                "id": 6,
                "name": "Build MMEngine from source",
                "run": "pip install -e . -v"
            },
            {
                "id": 7,
                "name": "Install unit tests dependencies",
                "run": "pip install -r requirements/tests.txt\npip install openmim\nmim install mmcv\n"
            },
            {
                "id": 8,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v4"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+${{matrix.platform}} torchvision==${{matrix.torchvision}}+${{matrix.platform}} -f https://download.pytorch.org/whl/${{matrix.platform}}/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Build MMEngine from source",
                "run": "pip install -e . -v"
            },
            {
                "id": 6,
                "name": "Install unit tests dependencies",
                "run": "pip install -r requirements/tests.txt\npip install openmim\nmim install mmcv\n"
            },
            {
                "id": 7,
                "name": "Run CPU unittests",
                "run": "pytest tests/  --ignore tests/test_dist"
            },
            {
                "id": 8,
                "name": "Run GPU unittests",
                "run": "pytest tests/ --ignore tests/test_dist --ignore tests/test_optim/test_optimizer/test_optimizer_wrapper.py --ignore tests/test_model/test_wrappers/test_model_wrapper.py --ignore tests/test_hooks/test_sync_buffers_hook.py"
            }
        ],
        "open-mmlab/mmrotate": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 4,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch${{matrix.torch}}/index.html\npython -c 'import mmcv; print(mmcv.__version__)'\n"
            },
            {
                "id": 5,
                "name": "Install unittest dependencies",
                "run": "pip install -r requirements/tests.txt -r requirements/optional.txt"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "rm -rf .eggs && pip install -e ."
            },
            {
                "id": 7,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmrotate -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 4,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxrender-dev libxext6 git"
            },
            {
                "id": 5,
                "name": "Install python-dev",
                "run": "apt-get update && apt-get install -y python${{matrix.python-version}}-dev"
            },
            {
                "id": 6,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 7,
                "name": "Install MMCV",
                "run": "python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu101/torch${{matrix.torch_version}}/index.html\npython -c 'import mmcv; print(mmcv.__version__)'\n"
            },
            {
                "id": 8,
                "name": "Install unittest dependencies",
                "run": "python -m pip install -r requirements/tests.txt -r requirements/optional.txt"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "# Some dependencies may be required for the build of pycocotools\nexport CFLAGS=`python -c 'import sysconfig;print(\"-I\"+sysconfig.get_paths()[\"include\"])'`\nrm -rf .eggs\npython setup.py check -m -s\nTORCH_CUDA_ARCH_LIST=7.0 python -m pip install -e .\n"
            },
            {
                "id": 10,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmrotate -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Fetch GPG keys",
                "run": "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub\napt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub\n"
            },
            {
                "id": 4,
                "name": "Install system dependencies",
                "run": "apt-get update && apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxrender-dev libxext6 git"
            },
            {
                "id": 5,
                "name": "Install python-dev",
                "run": "apt-get update && apt-get install -y python${{matrix.python-version}}-dev"
            },
            {
                "id": 6,
                "name": "Install PyTorch",
                "run": "python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 7,
                "name": "Install MMCV",
                "run": "python -m pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu102/torch${{matrix.torch_version}}/index.html\npython -c 'import mmcv; print(mmcv.__version__)'\n"
            },
            {
                "id": 8,
                "name": "Install unittest dependencies",
                "run": "python -m pip install -r requirements/tests.txt -r requirements/optional.txt"
            },
            {
                "id": 9,
                "name": "Build and install",
                "run": "# Some dependencies may be required for the build of pycocotools\nexport CFLAGS=`python -c 'import sysconfig;print(\"-I\"+sysconfig.get_paths()[\"include\"])'`\nrm -rf .eggs\npython setup.py check -m -s\nTORCH_CUDA_ARCH_LIST=7.0 python -m pip install -e .\n"
            },
            {
                "id": 10,
                "name": "Run unittests and generate coverage report",
                "run": "coverage run --branch --source mmrotate -m pytest tests/\ncoverage xml\ncoverage report -m\n"
            },
            {
                "id": 11,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "python -m pip install pip --upgrade --user"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==1.8.2+${{ matrix.platform }} torchvision==0.9.2+${{ matrix.platform }} -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html"
            },
            {
                "id": 5,
                "name": "Install MMCV",
                "run": "pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.8/index.html --only-binary mmcv-full"
            },
            {
                "id": 6,
                "name": "Install unittest dependencies",
                "run": "python -m pip install -r requirements/tests.txt -r requirements/optional.txt"
            },
            {
                "id": 7,
                "name": "Build and install",
                "run": "pip install -e ."
            },
            {
                "id": 8,
                "name": "Run unittests",
                "run": "coverage run --branch --source mmrotate -m pytest tests"
            },
            {
                "id": 9,
                "name": "Generate coverage report",
                "run": "coverage xml\ncoverage report -m\n"
            },
            {
                "id": 10,
                "name": "Upload coverage to Codecov",
                "run": "codecov/codecov-action@v2"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "pip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            },
            {
                "id": 5,
                "name": "Check docstring coverage",
                "run": "pip install interrogate\ninterrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex \"__repr__\" --fail-under 95 mmrotate\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install torch",
                "run": "pip install torch"
            },
            {
                "id": 4,
                "name": "Install wheel",
                "run": "pip install wheel"
            },
            {
                "id": 5,
                "name": "Build MMRotate",
                "run": "python setup.py sdist bdist_wheel"
            },
            {
                "id": 6,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Upgrade pip",
                "run": "pip install pip --upgrade"
            },
            {
                "id": 4,
                "name": "Install PyTorch",
                "run": "pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html"
            },
            {
                "id": 5,
                "name": "Install openmim",
                "run": "pip install openmim"
            },
            {
                "id": 6,
                "name": "Build and install",
                "run": "rm -rf .eggs && mim install -e ."
            },
            {
                "id": 7,
                "name": "test commands of mim",
                "run": "mim search mmrotate"
            }
        ],
        "open-mmlab/mdformat-openmmlab": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v3"
            },
            {
                "id": 3,
                "name": "Install dependencies",
                "run": "python -m pip install --upgrade pip\npip install build\n"
            },
            {
                "id": 4,
                "name": "Build package",
                "run": "python -m build"
            },
            {
                "id": 5,
                "name": "Publish package",
                "run": "pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "Step 3",
                "run": "pre-commit/action@v2.0.0"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python ${{ matrix.python-version }}",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Installation (deps and package)",
                "run": "pip install flit\nflit install --deps=production --extras=test --pth-file\n"
            },
            {
                "id": 4,
                "name": "Run pytest",
                "run": "pytest --cov=mdformat_openmmlab --cov-report=xml --cov-report=term-missing\n"
            },
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Installation (deps and package)",
                "run": "pip install pre-commit\npip install .\n"
            },
            {
                "id": 4,
                "name": "run pre-commit with plugin",
                "run": "pre-commit run --config .pre-commit-test.yaml --all-files --verbose --show-diff-on-failure\n"
            },
            {
                "id": 1,
                "name": "Checkout source",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v1"
            },
            {
                "id": 3,
                "name": "install flit",
                "run": "pip install flit~=3.0\n"
            },
            {
                "id": 4,
                "name": "Build and publish",
                "run": "flit publish\n"
            }
        ],
        "open-mmlab/ecosystem": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install pre-commit hook",
                "run": "# markdownlint requires ruby >= 2.7\npip install pre-commit\npre-commit install\n"
            },
            {
                "id": 4,
                "name": "Linting",
                "run": "pre-commit run --all-files"
            }
        ],
        "open-mmlab/mmeval": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install wheel",
                "run": "pip install wheel"
            },
            {
                "id": 4,
                "name": "Build MMEval",
                "run": "python setup.py sdist bdist_wheel"
            },
            {
                "id": 5,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            }
        ],
        "open-mmlab/mmyolo": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v2"
            },
            {
                "id": 2,
                "name": "Set up Python 3.7",
                "run": "actions/setup-python@v2"
            },
            {
                "id": 3,
                "name": "Install torch",
                "run": "pip install torch"
            },
            {
                "id": 4,
                "name": "Install wheel",
                "run": "pip install wheel"
            },
            {
                "id": 5,
                "name": "Build MMYOLO",
                "run": "python setup.py sdist bdist_wheel"
            },
            {
                "id": 6,
                "name": "Publish distribution to PyPI",
                "run": "pip install twine\ntwine upload dist/* -u __token__ -p ${{ secrets.pypi_password }}\n"
            }
        ],
        "open-mmlab/Amphion": [
            {
                "id": 1,
                "name": "Step 1",
                "run": "actions/checkout@v3"
            },
            {
                "id": 2,
                "name": "Step 2",
                "run": "psf/black@stable"
            }
        ]
    }
}